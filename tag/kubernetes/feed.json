{
    "version": "https://jsonfeed.org/version/1",
    "title": "4n6 & k8s • All posts by \"kubernetes\" tag",
    "description": "We are a Forensics Duo at SOter14 CTF Team & Network Engineering Students at INSAT. Enjoy our Kubernetes Articles and Write-ups!",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/09/08/Kubernetes/private-docker-k8s/",
            "url": "http://example.com/2022/09/08/Kubernetes/private-docker-k8s/",
            "title": "Dockerize a website & Pull it privately in k8s",
            "date_published": "2022-09-08T00:47:58.000Z",
            "content_html": "<p>In this article you will learn how to containerize a static website using nginx. Then we will push a private docker image in dockerhub. Finally we will use this private image to be pulled in our Kubernetes cluster ! I will split this article to 2 small and easy steps, you can skip any one you want !</p>\n<h1 id=\"containerize-a-static-website-and-push-it-on-dockerhub\"><a class=\"markdownIt-Anchor\" href=\"#containerize-a-static-website-and-push-it-on-dockerhub\">#</a> Containerize a static website and push it on dockerhub</h1>\n<p>In this Section we will choose a template from random websites that provides free css templates, then we will dockerize it !</p>\n<h2 id=\"dockerize-the-website\"><a class=\"markdownIt-Anchor\" href=\"#dockerize-the-website\">#</a> Dockerize the website</h2>\n<p>I’ll choose this template from this <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZS1jc3MuY29tL2ZyZWUtY3NzLXRlbXBsYXRlcy9wYWdlMjgyL3JveWFsLWNhcnM=\">link</span><br>\n<img data-src=\"https://imgur.com/ngHGyw0.png\" alt=\"\"></p>\n<p>Download it and let’s create our Dockerfile !<br>\nWe will use the  <code>nginx:alpine</code>  image and copy all the assets of the website to the  <code>/usr/share/nginx/html</code>  to be hosted by the nginx webserver.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx:alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">rm</span> -rf ./*</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./ ./</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">chmod</span> +r -R . </span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;nginx&quot;</span>,<span class=\"string\">&quot;-g&quot;</span>,<span class=\"string\">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>Now it’s time to build the container image</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker build . -t &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Sending build context to Docker daemon  2.454MB</span><br><span class=\"line\">Step 1/5 : FROM nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">213ec9aee27d: Downloading [===================================&gt;               ]  2.018MB/2.806MB</span><br><span class=\"line\">2546ae67167b: Downloading [=========&gt;                                         ]  1.461MB/7.403MB</span><br><span class=\"line\">23b845224e13: Download complete</span><br><span class=\"line\">9bd5732789a3: Download complete</span><br><span class=\"line\">328309e59ded: Waiting</span><br><span class=\"line\">b231d02e5150: Waiting</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a container to test it before make push it!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker run --name car-demo -p 8686:80 &lt;user_name&gt;/cars-app</span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: using the &quot;epoll&quot; event method</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: nginx/1.23.1</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: OS: Linux 5.15.0-41-generic</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker processes</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 7</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 8</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 9</span></span><br><span class=\"line\">2022/09/08 22:53:47 [notice] 1<span class=\"comment\">#1: start worker process 10</span></span><br></pre></td></tr></table></figure>\n<p>Sanity Check please ! Oh everything is OK !</p>\n<p><img data-src=\"https://imgur.com/nQ6NcxG.png\" alt=\"\"></p>\n<h2 id=\"push-the-container-image-to-private-repo\"><a class=\"markdownIt-Anchor\" href=\"#push-the-container-image-to-private-repo\">#</a> Push the container image to private repo</h2>\n<p>Now go and create a private repository in your dockerhub to push it !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ sudo docker image push &lt;user_name&gt;/cars-app</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">The push refers to repository [docker.io/&lt;user_name&gt;/cars-app]</span><br><span class=\"line\">41c30355eff8: Pushed</span><br><span class=\"line\">f2ba5e032e84: Pushed</span><br><span class=\"line\">43e1f37b87cb: Pushed</span><br><span class=\"line\">bf4e176a4d9b: Mounted from library/nginx</span><br><span class=\"line\">a1d571e4e83d: Mounted from library/nginx</span><br><span class=\"line\">6d97b4d00719: Mounted from library/nginx</span><br><span class=\"line\">2a7647ca3937: Mounted from library/nginx</span><br><span class=\"line\">549c42eea4a6: Mounted from library/nginx</span><br><span class=\"line\">994393dc58e7: Mounted from library/nginx</span><br></pre></td></tr></table></figure>\n<p>Now it’s time to deal with our kubernetes cluster !</p>\n<h1 id=\"use-the-private-docker-image-in-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#use-the-private-docker-image-in-kubernetes\">#</a> Use the private docker image in Kubernetes</h1>\n<p>In this demo I will use a production kubernetes cluster with 1 master node and 1 worker node</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get nodes</span><br><span class=\"line\">NAME      STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">master    Ready    control-plane,master   77d   v1.23.1</span><br><span class=\"line\">worker1   Ready    &lt;none&gt;                 77d   v1.23.1</span><br></pre></td></tr></table></figure>\n<p>Let’s create a namespace for this demo !</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create ns private-docker</span><br><span class=\"line\">namespace/private-docker created</span><br></pre></td></tr></table></figure>\n<p>To make our cluster pull private images we need to create a special secret object with specific type called  <code>docker-registry</code>  secret. To make this secret work correctly you must specify the docker registry, username , password and docker email!</p>\n<p>I prefer to put this params in variable environment to work with it easly</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> EMAIL=&lt;email&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> USERNAME=&lt;user_name&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> PASSWORD=&lt;password&gt;</span><br><span class=\"line\"><span class=\"built_in\">export</span> SERVER=&lt;docker_registry&gt;</span><br></pre></td></tr></table></figure>\n<p>In case you will use dockerhub as your registry you don’t have to specify the server !</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl create -n private-docker secret docker-registry docker-secret --docker-username=$USERNAME --docker-password=$PASSWORD --docker-email=$EMAIL</span><br><span class=\"line\">secret/docker-secret created</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a pod with the image that we made it !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>If you try create this pod with this YAML definition you’ll get a  <code>ErrImagePull</code>  because we don’t specify the docker secret that we created</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS         RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   0/1     ErrImagePull   0          5s</span><br></pre></td></tr></table></figure>\n<p>Let’s figure out the problem with  <code>kubectl describe</code>  command. Take a look at the events that occur when the pod try to pull the container image!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Events:</span><br><span class=\"line\"> Type     Reason          Age                From               Message</span><br><span class=\"line\"> ----     ------          ----               ----               -------</span><br><span class=\"line\"> Normal   Scheduled       44s                default-scheduler  Successfully assigned private-docker/cars-app-pod to worker1</span><br><span class=\"line\"> Normal   SandboxChanged  40s                kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class=\"line\"> Normal   Pulling         26s (x2 over 43s)  kubelet            Pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Failed to pull image &quot;&lt;user_name&gt;/cars-app&quot;: rpc error: code = Unknown desc = Error response from daemon: pull access denied for &lt;user_name&gt;/cars-app, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br><span class=\"line\"> Warning  Failed          23s (x2 over 40s)  kubelet            Error: ErrImagePull</span><br><span class=\"line\"> Normal   BackOff         12s (x4 over 39s)  kubelet            Back-off pulling image &quot;&lt;user_name&gt;/cars-app&quot;</span><br><span class=\"line\"> Warning  Failed          12s (x4 over 39s)  kubelet            Error: ImagePullBackOff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Specifying the docker secret in the pod YAML definition will solve this problem. The pod will pull the container image without any problem<br>\nAdding  <code>imagePullSecrets</code>  attributes in the  <code>spec</code>  of the pod allow the pod to pull this image. The Final YAML definition will be similar to the following one !</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">&lt;user_name&gt;/cars-app</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">docker-secret</span></span><br><span class=\"line\">  <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"><span class=\"attr\">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>Create the pod again and check it with  <code>kubectl get pods</code>  and don’t forget to specify the namespace!</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get pods -n private-docker</span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">cars-app-pod   1/1     Running   0          4s</span><br></pre></td></tr></table></figure>\n<p>I want to make sure that everything is ok, so i will expose this pod using the NodePort service. The following service YAML Definition will expose the pod correctly :</p>\n<figure class=\"highlight yaml\"><figcaption><span>yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">private-docker</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">cars-app-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<p>Let’s now check the service and get the node port that we will use it to test the pod</p>\n<figure class=\"highlight bash\"><figcaption><span>command line prompt</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raf@4n6nk8s:~$ kubectl get svc -n private-docker</span><br><span class=\"line\">NAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">cars-app-pod   NodePort   10.111.98.22   &lt;none&gt;        80:31651/TCP   6s</span><br></pre></td></tr></table></figure>\n<p>Now you can visit either <span class=\"exturl\" data-url=\"aHR0cDovL21hc3RlcjozMTY1MQ==\">http://master:31651</span> or <span class=\"exturl\" data-url=\"aHR0cDovL3dvcmtlcjE6MzE2NTE=\">http://worker1:31651</span> and you will find the static website work without any problem!</p>\n<p><img data-src=\"https://imgur.com/3TVOl36.png\" alt=\"\"></p>\n",
            "tags": [
                "kubernetes"
            ]
        }
    ]
}